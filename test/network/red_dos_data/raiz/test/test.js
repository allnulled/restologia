

//Included:lib/000.inicializacion.part.js
// CASTELOG@0.0.1

/***************************************************************************************
 ***[ Manifiesto de Castelog v.0.0.1 ]**********************************[ 2022/08 ]*****
 ***************************************************************************************
 ***                                                                                 ***
 *** Castelog es un software construido por «allnulled» o «Carlos Jimeno Hernández». ***
 *** En el momento que imprimes este software en otro software estarás infringiendo  ***
 *** la ley.                                                                         ***
 ***                                                                                 ***
 *** Igual que los políticos. Los banqueros. Sí. Pero también tus vecinos, tus       ***
 *** familiares, tus amistades. Es más. Incluso igual el mejor consejo es que te     ***
 *** fumes un porrillo. Y eso... pues... ya tontea con la ley.                       ***
 ***                                                                                 ***
 *** Por eso. Que este software lo hice yo. Y a mí igual seguís sin darme ni puto    ***
 *** trabajo siquiera, guarros. Da un poco de rabia.                                 ***
 ***                                                                                 ***
 *** Pues bueno. Y también uso de otros.                                             ***
 ***                                                                                 ***
 *************************************************[ Carlos J. / +34 619 98 26 22 ]******/

////////////////////////////////////////////////////////////////////////////////
// Aquí empieza el script de Castelog //////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

//Included:lib/001.axios-v0.26.1.part.js
/*lib:axios@0.26.1*/
(function (root, factory) {
  const scope = (typeof window === 'object') ? window : global;
  if("axios" in scope) return scope["axios"];
  const output = factory();
	if(typeof module === 'object' && typeof module.exports === 'object')
		module.exports = output;
	if(typeof define === 'function' && define.amd)
		define([], factory);
	if(typeof exports === 'object')
		exports["axios"] = output;
  scope["axios"] = output;
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./lib/axios */ "./lib/axios.js");

/***/ }),

/***/ "./lib/adapters/xhr.js":
/*!*****************************!*\
  !*** ./lib/adapters/xhr.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./lib/utils.js");
var settle = __webpack_require__(/*! ./../core/settle */ "./lib/core/settle.js");
var cookies = __webpack_require__(/*! ./../helpers/cookies */ "./lib/helpers/cookies.js");
var buildURL = __webpack_require__(/*! ./../helpers/buildURL */ "./lib/helpers/buildURL.js");
var buildFullPath = __webpack_require__(/*! ../core/buildFullPath */ "./lib/core/buildFullPath.js");
var parseHeaders = __webpack_require__(/*! ./../helpers/parseHeaders */ "./lib/helpers/parseHeaders.js");
var isURLSameOrigin = __webpack_require__(/*! ./../helpers/isURLSameOrigin */ "./lib/helpers/isURLSameOrigin.js");
var createError = __webpack_require__(/*! ../core/createError */ "./lib/core/createError.js");
var transitionalDefaults = __webpack_require__(/*! ../defaults/transitional */ "./lib/defaults/transitional.js");
var Cancel = __webpack_require__(/*! ../cancel/Cancel */ "./lib/cancel/Cancel.js");

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;
    var responseType = config.responseType;
    var onCanceled;
    function done() {
      if (config.cancelToken) {
        config.cancelToken.unsubscribe(onCanceled);
      }

      if (config.signal) {
        config.signal.removeEventListener('abort', onCanceled);
      }
    }

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    var fullPath = buildFullPath(config.baseURL, config.url);
    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    function onloadend() {
      if (!request) {
        return;
      }
      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?
        request.responseText : request.response;
      var response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);

      // Clean up request
      request = null;
    }

    if ('onloadend' in request) {
      // Use onloadend if available
      request.onloadend = onloadend;
    } else {
      // Listen for ready state to emulate onloadend
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }

        // The request errored out and we didn't get a response, this will be
        // handled by onerror instead
        // With one exception: request that using file: protocol, most browsers
        // will return status as 0 even though it's a successful request
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
          return;
        }
        // readystate handler is calling before onerror or ontimeout handlers,
        // so we should call onloadend on the next 'tick'
        setTimeout(onloadend);
      };
    }

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(createError('Request aborted', config, 'ECONNABORTED', request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
      var transitional = config.transitional || transitionalDefaults;
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(createError(
        timeoutErrorMessage,
        config,
        transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
        cookies.read(config.xsrfCookieName) :
        undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (!utils.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }

    // Add responseType to request if needed
    if (responseType && responseType !== 'json') {
      request.responseType = config.responseType;
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken || config.signal) {
      // Handle cancellation
      // eslint-disable-next-line func-names
      onCanceled = function(cancel) {
        if (!request) {
          return;
        }
        reject(!cancel || (cancel && cancel.type) ? new Cancel('canceled') : cancel);
        request.abort();
        request = null;
      };

      config.cancelToken && config.cancelToken.subscribe(onCanceled);
      if (config.signal) {
        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
      }
    }

    if (!requestData) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};


/***/ }),

/***/ "./lib/axios.js":
/*!**********************!*\
  !*** ./lib/axios.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./utils */ "./lib/utils.js");
var bind = __webpack_require__(/*! ./helpers/bind */ "./lib/helpers/bind.js");
var Axios = __webpack_require__(/*! ./core/Axios */ "./lib/core/Axios.js");
var mergeConfig = __webpack_require__(/*! ./core/mergeConfig */ "./lib/core/mergeConfig.js");
var defaults = __webpack_require__(/*! ./defaults */ "./lib/defaults/index.js");

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  // Factory for creating new instances
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Expose Cancel & CancelToken
axios.Cancel = __webpack_require__(/*! ./cancel/Cancel */ "./lib/cancel/Cancel.js");
axios.CancelToken = __webpack_require__(/*! ./cancel/CancelToken */ "./lib/cancel/CancelToken.js");
axios.isCancel = __webpack_require__(/*! ./cancel/isCancel */ "./lib/cancel/isCancel.js");
axios.VERSION = __webpack_require__(/*! ./env/data */ "./lib/env/data.js").version;

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = __webpack_require__(/*! ./helpers/spread */ "./lib/helpers/spread.js");

// Expose isAxiosError
axios.isAxiosError = __webpack_require__(/*! ./helpers/isAxiosError */ "./lib/helpers/isAxiosError.js");

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports.default = axios;


/***/ }),

/***/ "./lib/cancel/Cancel.js":
/*!******************************!*\
  !*** ./lib/cancel/Cancel.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

module.exports = Cancel;


/***/ }),

/***/ "./lib/cancel/CancelToken.js":
/*!***********************************!*\
  !*** ./lib/cancel/CancelToken.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Cancel = __webpack_require__(/*! ./Cancel */ "./lib/cancel/Cancel.js");

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;

  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;

  // eslint-disable-next-line func-names
  this.promise.then(function(cancel) {
    if (!token._listeners) return;

    var i;
    var l = token._listeners.length;

    for (i = 0; i < l; i++) {
      token._listeners[i](cancel);
    }
    token._listeners = null;
  });

  // eslint-disable-next-line func-names
  this.promise.then = function(onfulfilled) {
    var _resolve;
    // eslint-disable-next-line func-names
    var promise = new Promise(function(resolve) {
      token.subscribe(resolve);
      _resolve = resolve;
    }).then(onfulfilled);

    promise.cancel = function reject() {
      token.unsubscribe(_resolve);
    };

    return promise;
  };

  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Subscribe to the cancel signal
 */

CancelToken.prototype.subscribe = function subscribe(listener) {
  if (this.reason) {
    listener(this.reason);
    return;
  }

  if (this._listeners) {
    this._listeners.push(listener);
  } else {
    this._listeners = [listener];
  }
};

/**
 * Unsubscribe from the cancel signal
 */

CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
  if (!this._listeners) {
    return;
  }
  var index = this._listeners.indexOf(listener);
  if (index !== -1) {
    this._listeners.splice(index, 1);
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;


/***/ }),

/***/ "./lib/cancel/isCancel.js":
/*!********************************!*\
  !*** ./lib/cancel/isCancel.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};


/***/ }),

/***/ "./lib/core/Axios.js":
/*!***************************!*\
  !*** ./lib/core/Axios.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./lib/utils.js");
var buildURL = __webpack_require__(/*! ../helpers/buildURL */ "./lib/helpers/buildURL.js");
var InterceptorManager = __webpack_require__(/*! ./InterceptorManager */ "./lib/core/InterceptorManager.js");
var dispatchRequest = __webpack_require__(/*! ./dispatchRequest */ "./lib/core/dispatchRequest.js");
var mergeConfig = __webpack_require__(/*! ./mergeConfig */ "./lib/core/mergeConfig.js");
var validator = __webpack_require__(/*! ../helpers/validator */ "./lib/helpers/validator.js");

var validators = validator.validators;
/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(configOrUrl, config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof configOrUrl === 'string') {
    config = config || {};
    config.url = configOrUrl;
  } else {
    config = configOrUrl || {};
  }

  config = mergeConfig(this.defaults, config);

  // Set config.method
  if (config.method) {
    config.method = config.method.toLowerCase();
  } else if (this.defaults.method) {
    config.method = this.defaults.method.toLowerCase();
  } else {
    config.method = 'get';
  }

  var transitional = config.transitional;

  if (transitional !== undefined) {
    validator.assertOptions(transitional, {
      silentJSONParsing: validators.transitional(validators.boolean),
      forcedJSONParsing: validators.transitional(validators.boolean),
      clarifyTimeoutError: validators.transitional(validators.boolean)
    }, false);
  }

  // filter out skipped interceptors
  var requestInterceptorChain = [];
  var synchronousRequestInterceptors = true;
  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
      return;
    }

    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  var responseInterceptorChain = [];
  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
  });

  var promise;

  if (!synchronousRequestInterceptors) {
    var chain = [dispatchRequest, undefined];

    Array.prototype.unshift.apply(chain, requestInterceptorChain);
    chain = chain.concat(responseInterceptorChain);

    promise = Promise.resolve(config);
    while (chain.length) {
      promise = promise.then(chain.shift(), chain.shift());
    }

    return promise;
  }


  var newConfig = config;
  while (requestInterceptorChain.length) {
    var onFulfilled = requestInterceptorChain.shift();
    var onRejected = requestInterceptorChain.shift();
    try {
      newConfig = onFulfilled(newConfig);
    } catch (error) {
      onRejected(error);
      break;
    }
  }

  try {
    promise = dispatchRequest(newConfig);
  } catch (error) {
    return Promise.reject(error);
  }

  while (responseInterceptorChain.length) {
    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
  }

  return promise;
};

Axios.prototype.getUri = function getUri(config) {
  config = mergeConfig(this.defaults, config);
  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: (config || {}).data
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;


/***/ }),

/***/ "./lib/core/InterceptorManager.js":
/*!****************************************!*\
  !*** ./lib/core/InterceptorManager.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./lib/utils.js");

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected,
    synchronous: options ? options.synchronous : false,
    runWhen: options ? options.runWhen : null
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;


/***/ }),

/***/ "./lib/core/buildFullPath.js":
/*!***********************************!*\
  !*** ./lib/core/buildFullPath.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isAbsoluteURL = __webpack_require__(/*! ../helpers/isAbsoluteURL */ "./lib/helpers/isAbsoluteURL.js");
var combineURLs = __webpack_require__(/*! ../helpers/combineURLs */ "./lib/helpers/combineURLs.js");

/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */
module.exports = function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
};


/***/ }),

/***/ "./lib/core/createError.js":
/*!*********************************!*\
  !*** ./lib/core/createError.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var enhanceError = __webpack_require__(/*! ./enhanceError */ "./lib/core/enhanceError.js");

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};


/***/ }),

/***/ "./lib/core/dispatchRequest.js":
/*!*************************************!*\
  !*** ./lib/core/dispatchRequest.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./lib/utils.js");
var transformData = __webpack_require__(/*! ./transformData */ "./lib/core/transformData.js");
var isCancel = __webpack_require__(/*! ../cancel/isCancel */ "./lib/cancel/isCancel.js");
var defaults = __webpack_require__(/*! ../defaults */ "./lib/defaults/index.js");
var Cancel = __webpack_require__(/*! ../cancel/Cancel */ "./lib/cancel/Cancel.js");

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }

  if (config.signal && config.signal.aborted) {
    throw new Cancel('canceled');
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData.call(
    config,
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers
  );

  utils.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData.call(
      config,
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};


/***/ }),

/***/ "./lib/core/enhanceError.js":
/*!**********************************!*\
  !*** ./lib/core/enhanceError.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */
module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }

  error.request = request;
  error.response = response;
  error.isAxiosError = true;

  error.toJSON = function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  };
  return error;
};


/***/ }),

/***/ "./lib/core/mergeConfig.js":
/*!*********************************!*\
  !*** ./lib/core/mergeConfig.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./lib/utils.js");

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */
module.exports = function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  var config = {};

  function getMergedValue(target, source) {
    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
      return utils.merge(target, source);
    } else if (utils.isPlainObject(source)) {
      return utils.merge({}, source);
    } else if (utils.isArray(source)) {
      return source.slice();
    }
    return source;
  }

  // eslint-disable-next-line consistent-return
  function mergeDeepProperties(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  // eslint-disable-next-line consistent-return
  function valueFromConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(undefined, config2[prop]);
    }
  }

  // eslint-disable-next-line consistent-return
  function defaultToConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(undefined, config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  // eslint-disable-next-line consistent-return
  function mergeDirectKeys(prop) {
    if (prop in config2) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (prop in config1) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  var mergeMap = {
    'url': valueFromConfig2,
    'method': valueFromConfig2,
    'data': valueFromConfig2,
    'baseURL': defaultToConfig2,
    'transformRequest': defaultToConfig2,
    'transformResponse': defaultToConfig2,
    'paramsSerializer': defaultToConfig2,
    'timeout': defaultToConfig2,
    'timeoutMessage': defaultToConfig2,
    'withCredentials': defaultToConfig2,
    'adapter': defaultToConfig2,
    'responseType': defaultToConfig2,
    'xsrfCookieName': defaultToConfig2,
    'xsrfHeaderName': defaultToConfig2,
    'onUploadProgress': defaultToConfig2,
    'onDownloadProgress': defaultToConfig2,
    'decompress': defaultToConfig2,
    'maxContentLength': defaultToConfig2,
    'maxBodyLength': defaultToConfig2,
    'transport': defaultToConfig2,
    'httpAgent': defaultToConfig2,
    'httpsAgent': defaultToConfig2,
    'cancelToken': defaultToConfig2,
    'socketPath': defaultToConfig2,
    'responseEncoding': defaultToConfig2,
    'validateStatus': mergeDirectKeys
  };

  utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
    var merge = mergeMap[prop] || mergeDeepProperties;
    var configValue = merge(prop);
    (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
  });

  return config;
};


/***/ }),

/***/ "./lib/core/settle.js":
/*!****************************!*\
  !*** ./lib/core/settle.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var createError = __webpack_require__(/*! ./createError */ "./lib/core/createError.js");

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError(
      'Request failed with status code ' + response.status,
      response.config,
      null,
      response.request,
      response
    ));
  }
};


/***/ }),

/***/ "./lib/core/transformData.js":
/*!***********************************!*\
  !*** ./lib/core/transformData.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./lib/utils.js");
var defaults = __webpack_require__(/*! ../defaults */ "./lib/defaults/index.js");

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  var context = this || defaults;
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn.call(context, data, headers);
  });

  return data;
};


/***/ }),

/***/ "./lib/defaults/index.js":
/*!*******************************!*\
  !*** ./lib/defaults/index.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./lib/utils.js");
var normalizeHeaderName = __webpack_require__(/*! ../helpers/normalizeHeaderName */ "./lib/helpers/normalizeHeaderName.js");
var enhanceError = __webpack_require__(/*! ../core/enhanceError */ "./lib/core/enhanceError.js");
var transitionalDefaults = __webpack_require__(/*! ./transitional */ "./lib/defaults/transitional.js");

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = __webpack_require__(/*! ../adapters/xhr */ "./lib/adapters/xhr.js");
  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
    // For node use HTTP adapter
    adapter = __webpack_require__(/*! ../adapters/http */ "./lib/adapters/xhr.js");
  }
  return adapter;
}

function stringifySafely(rawValue, parser, encoder) {
  if (utils.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils.trim(rawValue);
    } catch (e) {
      if (e.name !== 'SyntaxError') {
        throw e;
      }
    }
  }

  return (encoder || JSON.stringify)(rawValue);
}

var defaults = {

  transitional: transitionalDefaults,

  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Accept');
    normalizeHeaderName(headers, 'Content-Type');

    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data) || (headers && headers['Content-Type'] === 'application/json')) {
      setContentTypeIfUnset(headers, 'application/json');
      return stringifySafely(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    var transitional = this.transitional || defaults.transitional;
    var silentJSONParsing = transitional && transitional.silentJSONParsing;
    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

    if (strictJSONParsing || (forcedJSONParsing && utils.isString(data) && data.length)) {
      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === 'SyntaxError') {
            throw enhanceError(e, this, 'E_JSON_PARSE');
          }
          throw e;
        }
      }
    }

    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,
  maxBodyLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },

  headers: {
    common: {
      'Accept': 'application/json, text/plain, */*'
    }
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;


/***/ }),

/***/ "./lib/defaults/transitional.js":
/*!**************************************!*\
  !*** ./lib/defaults/transitional.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
};


/***/ }),

/***/ "./lib/env/data.js":
/*!*************************!*\
  !*** ./lib/env/data.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = {
  "version": "0.26.1"
};

/***/ }),

/***/ "./lib/helpers/bind.js":
/*!*****************************!*\
  !*** ./lib/helpers/bind.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};


/***/ }),

/***/ "./lib/helpers/buildURL.js":
/*!*********************************!*\
  !*** ./lib/helpers/buildURL.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./lib/utils.js");

function encode(val) {
  return encodeURIComponent(val).
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    var hashmarkIndex = url.indexOf('#');
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }

    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};


/***/ }),

/***/ "./lib/helpers/combineURLs.js":
/*!************************************!*\
  !*** ./lib/helpers/combineURLs.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};


/***/ }),

/***/ "./lib/helpers/cookies.js":
/*!********************************!*\
  !*** ./lib/helpers/cookies.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./lib/utils.js");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
    (function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name + '=' + encodeURIComponent(value));

          if (utils.isNumber(expires)) {
            cookie.push('expires=' + new Date(expires).toGMTString());
          }

          if (utils.isString(path)) {
            cookie.push('path=' + path);
          }

          if (utils.isString(domain)) {
            cookie.push('domain=' + domain);
          }

          if (secure === true) {
            cookie.push('secure');
          }

          document.cookie = cookie.join('; ');
        },

        read: function read(name) {
          var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
          return (match ? decodeURIComponent(match[3]) : null);
        },

        remove: function remove(name) {
          this.write(name, '', Date.now() - 86400000);
        }
      };
    })() :

  // Non standard browser env (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return {
        write: function write() {},
        read: function read() { return null; },
        remove: function remove() {}
      };
    })()
);


/***/ }),

/***/ "./lib/helpers/isAbsoluteURL.js":
/*!**************************************!*\
  !*** ./lib/helpers/isAbsoluteURL.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
};


/***/ }),

/***/ "./lib/helpers/isAxiosError.js":
/*!*************************************!*\
  !*** ./lib/helpers/isAxiosError.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./lib/utils.js");

/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */
module.exports = function isAxiosError(payload) {
  return utils.isObject(payload) && (payload.isAxiosError === true);
};


/***/ }),

/***/ "./lib/helpers/isURLSameOrigin.js":
/*!****************************************!*\
  !*** ./lib/helpers/isURLSameOrigin.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./lib/utils.js");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
    (function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement('a');
      var originURL;

      /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
      function resolveURL(url) {
        var href = url;

        if (msie) {
        // IE needs attribute set twice to normalize properties
          urlParsingNode.setAttribute('href', href);
          href = urlParsingNode.href;
        }

        urlParsingNode.setAttribute('href', href);

        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
            urlParsingNode.pathname :
            '/' + urlParsingNode.pathname
        };
      }

      originURL = resolveURL(window.location.href);

      /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
      return function isURLSameOrigin(requestURL) {
        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
        return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
      };
    })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    })()
);


/***/ }),

/***/ "./lib/helpers/normalizeHeaderName.js":
/*!********************************************!*\
  !*** ./lib/helpers/normalizeHeaderName.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./lib/utils.js");

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};


/***/ }),

/***/ "./lib/helpers/parseHeaders.js":
/*!*************************************!*\
  !*** ./lib/helpers/parseHeaders.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./lib/utils.js");

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};


/***/ }),

/***/ "./lib/helpers/spread.js":
/*!*******************************!*\
  !*** ./lib/helpers/spread.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};


/***/ }),

/***/ "./lib/helpers/validator.js":
/*!**********************************!*\
  !*** ./lib/helpers/validator.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var VERSION = __webpack_require__(/*! ../env/data */ "./lib/env/data.js").version;

var validators = {};

// eslint-disable-next-line func-names
['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {
  validators[type] = function validator(thing) {
    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
  };
});

var deprecatedWarnings = {};

/**
 * Transitional option validator
 * @param {function|boolean?} validator - set to false if the transitional option has been removed
 * @param {string?} version - deprecated version / removed since version
 * @param {string?} message - some message with additional info
 * @returns {function}
 */
validators.transitional = function transitional(validator, version, message) {
  function formatMessage(opt, desc) {
    return '[Axios v' + VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
  }

  // eslint-disable-next-line func-names
  return function(value, opt, opts) {
    if (validator === false) {
      throw new Error(formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')));
    }

    if (version && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      // eslint-disable-next-line no-console
      console.warn(
        formatMessage(
          opt,
          ' has been deprecated since v' + version + ' and will be removed in the near future'
        )
      );
    }

    return validator ? validator(value, opt, opts) : true;
  };
};

/**
 * Assert object's properties type
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 */

function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== 'object') {
    throw new TypeError('options must be an object');
  }
  var keys = Object.keys(options);
  var i = keys.length;
  while (i-- > 0) {
    var opt = keys[i];
    var validator = schema[opt];
    if (validator) {
      var value = options[opt];
      var result = value === undefined || validator(value, opt, options);
      if (result !== true) {
        throw new TypeError('option ' + opt + ' must be ' + result);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw Error('Unknown option ' + opt);
    }
  }
}

module.exports = {
  assertOptions: assertOptions,
  validators: validators
};


/***/ }),

/***/ "./lib/utils.js":
/*!**********************!*\
  !*** ./lib/utils.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var bind = __webpack_require__(/*! ./helpers/bind */ "./lib/helpers/bind.js");

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return Array.isArray(val);
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return toString.call(val) === '[object FormData]';
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a plain Object
 *
 * @param {Object} val The value to test
 * @return {boolean} True if value is a plain Object, otherwise false
 */
function isPlainObject(val) {
  if (toString.call(val) !== '[object Object]') {
    return false;
  }

  var prototype = Object.getPrototypeOf(val);
  return prototype === null || prototype === Object.prototype;
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return toString.call(val) === '[object URLSearchParams]';
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                           navigator.product === 'NativeScript' ||
                                           navigator.product === 'NS')) {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (isPlainObject(result[key]) && isPlainObject(val)) {
      result[key] = merge(result[key], val);
    } else if (isPlainObject(val)) {
      result[key] = merge({}, val);
    } else if (isArray(val)) {
      result[key] = val.slice();
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 * @return {string} content value without BOM
 */
function stripBOM(content) {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }
  return content;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isPlainObject: isPlainObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim,
  stripBOM: stripBOM
};


/***/ })

/******/ });
});
//# sourceMappingURL=axios.map

//Included:lib/002.vue-v2.6.14.part.js
/*!
 * Vue.js v2.6.14
 * (c) 2014-2021 Evan You
 * Released under the MIT License.
 */
(function (root, factory) {
  const scope = (typeof window === 'object') ? window : undefined;
  if(typeof scope === "undefined") return;
  if("vue" in scope) return scope.vue;
  const output = factory();
	if(typeof module === 'object' && typeof module.exports === 'object')
		module.exports = output;
	if(typeof define === 'function' && define.amd)
		define([], factory);
	if(typeof exports === 'object')
		exports["vue"] = output;
  scope["vue"] = output;
  scope["Vue"] = output;
})(this, function() {
  
    var emptyObject = Object.freeze({});
  
    // These helpers produce better VM code in JS engines due to their
    // explicitness and function inlining.
    function isUndef (v) {
      return v === undefined || v === null
    }
  
    function isDef (v) {
      return v !== undefined && v !== null
    }
  
    function isTrue (v) {
      return v === true
    }
  
    function isFalse (v) {
      return v === false
    }
  
    /**
     * Check if value is primitive.
     */
    function isPrimitive (value) {
      return (
        typeof value === 'string' ||
        typeof value === 'number' ||
        // $flow-disable-line
        typeof value === 'symbol' ||
        typeof value === 'boolean'
      )
    }
  
    /**
     * Quick object check - this is primarily used to tell
     * Objects from primitive values when we know the value
     * is a JSON-compliant type.
     */
    function isObject (obj) {
      return obj !== null && typeof obj === 'object'
    }
  
    /**
     * Get the raw type string of a value, e.g., [object Object].
     */
    var _toString = Object.prototype.toString;
  
    function toRawType (value) {
      return _toString.call(value).slice(8, -1)
    }
  
    /**
     * Strict object type check. Only returns true
     * for plain JavaScript objects.
     */
    function isPlainObject (obj) {
      return _toString.call(obj) === '[object Object]'
    }
  
    function isRegExp (v) {
      return _toString.call(v) === '[object RegExp]'
    }
  
    /**
     * Check if val is a valid array index.
     */
    function isValidArrayIndex (val) {
      var n = parseFloat(String(val));
      return n >= 0 && Math.floor(n) === n && isFinite(val)
    }
  
    function isPromise (val) {
      return (
        isDef(val) &&
        typeof val.then === 'function' &&
        typeof val.catch === 'function'
      )
    }
  
    /**
     * Convert a value to a string that is actually rendered.
     */
    function toString (val) {
      return val == null
        ? ''
        : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)
          ? JSON.stringify(val, null, 2)
          : String(val)
    }
  
    /**
     * Convert an input value to a number for persistence.
     * If the conversion fails, return original string.
     */
    function toNumber (val) {
      var n = parseFloat(val);
      return isNaN(n) ? val : n
    }
  
    /**
     * Make a map and return a function for checking if a key
     * is in that map.
     */
    function makeMap (
      str,
      expectsLowerCase
    ) {
      var map = Object.create(null);
      var list = str.split(',');
      for (var i = 0; i < list.length; i++) {
        map[list[i]] = true;
      }
      return expectsLowerCase
        ? function (val) { return map[val.toLowerCase()]; }
        : function (val) { return map[val]; }
    }
  
    /**
     * Check if a tag is a built-in tag.
     */
    var isBuiltInTag = makeMap('slot,component', true);
  
    /**
     * Check if an attribute is a reserved attribute.
     */
    var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');
  
    /**
     * Remove an item from an array.
     */
    function remove (arr, item) {
      if (arr.length) {
        var index = arr.indexOf(item);
        if (index > -1) {
          return arr.splice(index, 1)
        }
      }
    }
  
    /**
     * Check whether an object has the property.
     */
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    function hasOwn (obj, key) {
      return hasOwnProperty.call(obj, key)
    }
  
    /**
     * Create a cached version of a pure function.
     */
    function cached (fn) {
      var cache = Object.create(null);
      return (function cachedFn (str) {
        var hit = cache[str];
        return hit || (cache[str] = fn(str))
      })
    }
  
    /**
     * Camelize a hyphen-delimited string.
     */
    var camelizeRE = /-(\w)/g;
    var camelize = cached(function (str) {
      return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })
    });
  
    /**
     * Capitalize a string.
     */
    var capitalize = cached(function (str) {
      return str.charAt(0).toUpperCase() + str.slice(1)
    });
  
    /**
     * Hyphenate a camelCase string.
     */
    var hyphenateRE = /\B([A-Z])/g;
    var hyphenate = cached(function (str) {
      return str.replace(hyphenateRE, '-$1').toLowerCase()
    });
  
    /**
     * Simple bind polyfill for environments that do not support it,
     * e.g., PhantomJS 1.x. Technically, we don't need this anymore
     * since native bind is now performant enough in most browsers.
     * But removing it would mean breaking code that was able to run in
     * PhantomJS 1.x, so this must be kept for backward compatibility.
     */
  
    /* istanbul ignore next */
    function polyfillBind (fn, ctx) {
      function boundFn (a) {
        var l = arguments.length;
        return l
          ? l > 1
            ? fn.apply(ctx, arguments)
            : fn.call(ctx, a)
          : fn.call(ctx)
      }
  
      boundFn._length = fn.length;
      return boundFn
    }
  
    function nativeBind (fn, ctx) {
      return fn.bind(ctx)
    }
  
    var bind = Function.prototype.bind
      ? nativeBind
      : polyfillBind;
  
    /**
     * Convert an Array-like object to a real Array.
     */
    function toArray (list, start) {
      start = start || 0;
      var i = list.length - start;
      var ret = new Array(i);
      while (i--) {
        ret[i] = list[i + start];
      }
      return ret
    }
  
    /**
     * Mix properties into target object.
     */
    function extend (to, _from) {
      for (var key in _from) {
        to[key] = _from[key];
      }
      return to
    }
  
    /**
     * Merge an Array of Objects into a single Object.
     */
    function toObject (arr) {
      var res = {};
      for (var i = 0; i < arr.length; i++) {
        if (arr[i]) {
          extend(res, arr[i]);
        }
      }
      return res
    }
  
    /* eslint-disable no-unused-vars */
  
    /**
     * Perform no operation.
     * Stubbing args to make Flow happy without leaving useless transpiled code
     * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).
     */
    function noop (a, b, c) {}
  
    /**
     * Always return false.
     */
    var no = function (a, b, c) { return false; };
  
    /* eslint-enable no-unused-vars */
  
    /**
     * Return the same value.
     */
    var identity = function (_) { return _; };
  
    /**
     * Generate a string containing static keys from compiler modules.
     */
    function genStaticKeys (modules) {
      return modules.reduce(function (keys, m) {
        return keys.concat(m.staticKeys || [])
      }, []).join(',')
    }
  
    /**
     * Check if two values are loosely equal - that is,
     * if they are plain objects, do they have the same shape?
     */
    function looseEqual (a, b) {
      if (a === b) { return true }
      var isObjectA = isObject(a);
      var isObjectB = isObject(b);
      if (isObjectA && isObjectB) {
        try {
          var isArrayA = Array.isArray(a);
          var isArrayB = Array.isArray(b);
          if (isArrayA && isArrayB) {
            return a.length === b.length && a.every(function (e, i) {
              return looseEqual(e, b[i])
            })
          } else if (a instanceof Date && b instanceof Date) {
            return a.getTime() === b.getTime()
          } else if (!isArrayA && !isArrayB) {
            var keysA = Object.keys(a);
            var keysB = Object.keys(b);
            return keysA.length === keysB.length && keysA.every(function (key) {
              return looseEqual(a[key], b[key])
            })
          } else {
            /* istanbul ignore next */
            return false
          }
        } catch (e) {
          /* istanbul ignore next */
          return false
        }
      } else if (!isObjectA && !isObjectB) {
        return String(a) === String(b)
      } else {
        return false
      }
    }
  
    /**
     * Return the first index at which a loosely equal value can be
     * found in the array (if value is a plain object, the array must
     * contain an object of the same shape), or -1 if it is not present.
     */
    function looseIndexOf (arr, val) {
      for (var i = 0; i < arr.length; i++) {
        if (looseEqual(arr[i], val)) { return i }
      }
      return -1
    }
  
    /**
     * Ensure a function is called only once.
     */
    function once (fn) {
      var called = false;
      return function () {
        if (!called) {
          called = true;
          fn.apply(this, arguments);
        }
      }
    }
  
    var SSR_ATTR = 'data-server-rendered';
  
    var ASSET_TYPES = [
      'component',
      'directive',
      'filter'
    ];
  
    var LIFECYCLE_HOOKS = [
      'beforeCreate',
      'created',
      'beforeMount',
      'mounted',
      'beforeUpdate',
      'updated',
      'beforeDestroy',
      'destroyed',
      'activated',
      'deactivated',
      'errorCaptured',
      'serverPrefetch'
    ];
  
    /*  */
  
  
  
    var config = ({
      /**
       * Option merge strategies (used in core/util/options)
       */
      // $flow-disable-line
      optionMergeStrategies: Object.create(null),
  
      /**
       * Whether to suppress warnings.
       */
      silent: false,
  
      /**
       * Show production mode tip message on boot?
       */
      productionTip: "development" !== 'production',
  
      /**
       * Whether to enable devtools
       */
      devtools: "development" !== 'production',
  
      /**
       * Whether to record perf
       */
      performance: false,
  
      /**
       * Error handler for watcher errors
       */
      errorHandler: null,
  
      /**
       * Warn handler for watcher warns
       */
      warnHandler: null,
  
      /**
       * Ignore certain custom elements
       */
      ignoredElements: [],
  
      /**
       * Custom user key aliases for v-on
       */
      // $flow-disable-line
      keyCodes: Object.create(null),
  
      /**
       * Check if a tag is reserved so that it cannot be registered as a
       * component. This is platform-dependent and may be overwritten.
       */
      isReservedTag: no,
  
      /**
       * Check if an attribute is reserved so that it cannot be used as a component
       * prop. This is platform-dependent and may be overwritten.
       */
      isReservedAttr: no,
  
      /**
       * Check if a tag is an unknown element.
       * Platform-dependent.
       */
      isUnknownElement: no,
  
      /**
       * Get the namespace of an element
       */
      getTagNamespace: noop,
  
      /**
       * Parse the real tag name for the specific platform.
       */
      parsePlatformTagName: identity,
  
      /**
       * Check if an attribute must be bound using property, e.g. value
       * Platform-dependent.
       */
      mustUseProp: no,
  
      /**
       * Perform updates asynchronously. Intended to be used by Vue Test Utils
       * This will significantly reduce performance if set to false.
       */
      async: true,
  
      /**
       * Exposed for legacy reasons
       */
      _lifecycleHooks: LIFECYCLE_HOOKS
    });
  
    /*  */
  
    /**
     * unicode letters used for parsing html tags, component names and property paths.
     * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname
     * skipping \u10000-\uEFFFF due to it freezing up PhantomJS
     */
    var unicodeRegExp = /a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;
  
    /**
     * Check if a string starts with $ or _
     */
    function isReserved (str) {
      var c = (str + '').charCodeAt(0);
      return c === 0x24 || c === 0x5F
    }
  
    /**
     * Define a property.
     */
    function def (obj, key, val, enumerable) {
      Object.defineProperty(obj, key, {
        value: val,
        enumerable: !!enumerable,
        writable: true,
        configurable: true
      });
    }
  
    /**
     * Parse simple path.
     */
    var bailRE = new RegExp(("[^" + (unicodeRegExp.source) + ".$_\\d]"));
    function parsePath (path) {
      if (bailRE.test(path)) {
        return
      }
      var segments = path.split('.');
      return function (obj) {
        for (var i = 0; i < segments.length; i++) {
          if (!obj) { return }
          obj = obj[segments[i]];
        }
        return obj
      }
    }
  
    /*  */
  
    // can we use __proto__?
    var hasProto = '__proto__' in {};
  
    // Browser environment sniffing
    var inBrowser = typeof window !== 'undefined';
    var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;
    var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
    var UA = inBrowser && window.navigator.userAgent.toLowerCase();
    var isIE = UA && /msie|trident/.test(UA);
    var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
    var isEdge = UA && UA.indexOf('edge/') > 0;
    var isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');
    var isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');
    var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;
    var isPhantomJS = UA && /phantomjs/.test(UA);
    var isFF = UA && UA.match(/firefox\/(\d+)/);
  
    // Firefox has a "watch" function on Object.prototype...
    var nativeWatch = ({}).watch;
  
    var supportsPassive = false;
    if (inBrowser) {
      try {
        var opts = {};
        Object.defineProperty(opts, 'passive', ({
          get: function get () {
            /* istanbul ignore next */
            supportsPassive = true;
          }
        })); // https://github.com/facebook/flow/issues/285
        window.addEventListener('test-passive', null, opts);
      } catch (e) {}
    }
  
    // this needs to be lazy-evaled because vue may be required before
    // vue-server-renderer can set VUE_ENV
    var _isServer;
    var isServerRendering = function () {
      if (_isServer === undefined) {
        /* istanbul ignore if */
        if (!inBrowser && !inWeex && typeof global !== 'undefined') {
          // detect presence of vue-server-renderer and avoid
          // Webpack shimming the process
          _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';
        } else {
          _isServer = false;
        }
      }
      return _isServer
    };
  
    // detect devtools
    var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;
  
    /* istanbul ignore next */
    function isNative (Ctor) {
      return typeof Ctor === 'function' && /native code/.test(Ctor.toString())
    }
  
    var hasSymbol =
      typeof Symbol !== 'undefined' && isNative(Symbol) &&
      typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);
  
    var _Set;
    /* istanbul ignore if */ // $flow-disable-line
    if (typeof Set !== 'undefined' && isNative(Set)) {
      // use native Set when available.
      _Set = Set;
    } else {
      // a non-standard Set polyfill that only works with primitive keys.
      _Set = /*@__PURE__*/(function () {
        function Set () {
          this.set = Object.create(null);
        }
        Set.prototype.has = function has (key) {
          return this.set[key] === true
        };
        Set.prototype.add = function add (key) {
          this.set[key] = true;
        };
        Set.prototype.clear = function clear () {
          this.set = Object.create(null);
        };
  
        return Set;
      }());
    }
  
    /*  */
  
    var warn = noop;
    var tip = noop;
    var generateComponentTrace = (noop); // work around flow check
    var formatComponentName = (noop);
  
    {
      var hasConsole = typeof console !== 'undefined';
      var classifyRE = /(?:^|[-_])(\w)/g;
      var classify = function (str) { return str
        .replace(classifyRE, function (c) { return c.toUpperCase(); })
        .replace(/[-_]/g, ''); };
  
      warn = function (msg, vm) {
        var trace = vm ? generateComponentTrace(vm) : '';
  
        if (config.warnHandler) {
          config.warnHandler.call(null, msg, vm, trace);
        } else if (hasConsole && (!config.silent)) {
          console.error(("[Vue warn]: " + msg + trace));
        }
      };
  
      tip = function (msg, vm) {
        if (hasConsole && (!config.silent)) {
          console.warn("[Vue tip]: " + msg + (
            vm ? generateComponentTrace(vm) : ''
          ));
        }
      };
  
      formatComponentName = function (vm, includeFile) {
        if (vm.$root === vm) {
          return '<Root>'
        }
        var options = typeof vm === 'function' && vm.cid != null
          ? vm.options
          : vm._isVue
            ? vm.$options || vm.constructor.options
            : vm;
        var name = options.name || options._componentTag;
        var file = options.__file;
        if (!name && file) {
          var match = file.match(/([^/\\]+)\.vue$/);
          name = match && match[1];
        }
  
        return (
          (name ? ("<" + (classify(name)) + ">") : "<Anonymous>") +
          (file && includeFile !== false ? (" at " + file) : '')
        )
      };
  
      var repeat = function (str, n) {
        var res = '';
        while (n) {
          if (n % 2 === 1) { res += str; }
          if (n > 1) { str += str; }
          n >>= 1;
        }
        return res
      };
  
      generateComponentTrace = function (vm) {
        if (vm._isVue && vm.$parent) {
          var tree = [];
          var currentRecursiveSequence = 0;
          while (vm) {
            if (tree.length > 0) {
              var last = tree[tree.length - 1];
              if (last.constructor === vm.constructor) {
                currentRecursiveSequence++;
                vm = vm.$parent;
                continue
              } else if (currentRecursiveSequence > 0) {
                tree[tree.length - 1] = [last, currentRecursiveSequence];
                currentRecursiveSequence = 0;
              }
            }
            tree.push(vm);
            vm = vm.$parent;
          }
          return '\n\nfound in\n\n' + tree
            .map(function (vm, i) { return ("" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)
                ? ((formatComponentName(vm[0])) + "... (" + (vm[1]) + " recursive calls)")
                : formatComponentName(vm))); })
            .join('\n')
        } else {
          return ("\n\n(found in " + (formatComponentName(vm)) + ")")
        }
      };
    }
  
    /*  */
  
    var uid = 0;
  
    /**
     * A dep is an observable that can have multiple
     * directives subscribing to it.
     */
    var Dep = function Dep () {
      this.id = uid++;
      this.subs = [];
    };
  
    Dep.prototype.addSub = function addSub (sub) {
      this.subs.push(sub);
    };
  
    Dep.prototype.removeSub = function removeSub (sub) {
      remove(this.subs, sub);
    };
  
    Dep.prototype.depend = function depend () {
      if (Dep.target) {
        Dep.target.addDep(this);
      }
    };
  
    Dep.prototype.notify = function notify () {
      // stabilize the subscriber list first
      var subs = this.subs.slice();
      if (!config.async) {
        // subs aren't sorted in scheduler if not running async
        // we need to sort them now to make sure they fire in correct
        // order
        subs.sort(function (a, b) { return a.id - b.id; });
      }
      for (var i = 0, l = subs.length; i < l; i++) {
        subs[i].update();
      }
    };
  
    // The current target watcher being evaluated.
    // This is globally unique because only one watcher
    // can be evaluated at a time.
    Dep.target = null;
    var targetStack = [];
  
    function pushTarget (target) {
      targetStack.push(target);
      Dep.target = target;
    }
  
    function popTarget () {
      targetStack.pop();
      Dep.target = targetStack[targetStack.length - 1];
    }
  
    /*  */
  
    var VNode = function VNode (
      tag,
      data,
      children,
      text,
      elm,
      context,
      componentOptions,
      asyncFactory
    ) {
      this.tag = tag;
      this.data = data;
      this.children = children;
      this.text = text;
      this.elm = elm;
      this.ns = undefined;
      this.context = context;
      this.fnContext = undefined;
      this.fnOptions = undefined;
      this.fnScopeId = undefined;
      this.key = data && data.key;
      this.componentOptions = componentOptions;
      this.componentInstance = undefined;
      this.parent = undefined;
      this.raw = false;
      this.isStatic = false;
      this.isRootInsert = true;
      this.isComment = false;
      this.isCloned = false;
      this.isOnce = false;
      this.asyncFactory = asyncFactory;
      this.asyncMeta = undefined;
      this.isAsyncPlaceholder = false;
    };
  
    var prototypeAccessors = { child: { configurable: true } };
  
    // DEPRECATED: alias for componentInstance for backwards compat.
    /* istanbul ignore next */
    prototypeAccessors.child.get = function () {
      return this.componentInstance
    };
  
    Object.defineProperties( VNode.prototype, prototypeAccessors );
  
    var createEmptyVNode = function (text) {
      if ( text === void 0 ) text = '';
  
      var node = new VNode();
      node.text = text;
      node.isComment = true;
      return node
    };
  
    function createTextVNode (val) {
      return new VNode(undefined, undefined, undefined, String(val))
    }
  
    // optimized shallow clone
    // used for static nodes and slot nodes because they may be reused across
    // multiple renders, cloning them avoids errors when DOM manipulations rely
    // on their elm reference.
    function cloneVNode (vnode) {
      var cloned = new VNode(
        vnode.tag,
        vnode.data,
        // #7975
        // clone children array to avoid mutating original in case of cloning
        // a child.
        vnode.children && vnode.children.slice(),
        vnode.text,
        vnode.elm,
        vnode.context,
        vnode.componentOptions,
        vnode.asyncFactory
      );
      cloned.ns = vnode.ns;
      cloned.isStatic = vnode.isStatic;
      cloned.key = vnode.key;
      cloned.isComment = vnode.isComment;
      cloned.fnContext = vnode.fnContext;
      cloned.fnOptions = vnode.fnOptions;
      cloned.fnScopeId = vnode.fnScopeId;
      cloned.asyncMeta = vnode.asyncMeta;
      cloned.isCloned = true;
      return cloned
    }
  
    /*
     * not type checking this file because flow doesn't play well with
     * dynamically accessing methods on Array prototype
     */
  
    var arrayProto = Array.prototype;
    var arrayMethods = Object.create(arrayProto);
  
    var methodsToPatch = [
      'push',
      'pop',
      'shift',
      'unshift',
      'splice',
      'sort',
      'reverse'
    ];
  
    /**
     * Intercept mutating methods and emit events
     */
    methodsToPatch.forEach(function (method) {
      // cache original method
      var original = arrayProto[method];
      def(arrayMethods, method, function mutator () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];
  
        var result = original.apply(this, args);
        var ob = this.__ob__;
        var inserted;
        switch (method) {
          case 'push':
          case 'unshift':
            inserted = args;
            break
          case 'splice':
            inserted = args.slice(2);
            break
        }
        if (inserted) { ob.observeArray(inserted); }
        // notify change
        ob.dep.notify();
        return result
      });
    });
  
    /*  */
  
    var arrayKeys = Object.getOwnPropertyNames(arrayMethods);
  
    /**
     * In some cases we may want to disable observation inside a component's
     * update computation.
     */
    var shouldObserve = true;
  
    function toggleObserving (value) {
      shouldObserve = value;
    }
  
    /**
     * Observer class that is attached to each observed
     * object. Once attached, the observer converts the target
     * object's property keys into getter/setters that
     * collect dependencies and dispatch updates.
     */
    var Observer = function Observer (value) {
      this.value = value;
      this.dep = new Dep();
      this.vmCount = 0;
      def(value, '__ob__', this);
      if (Array.isArray(value)) {
        if (hasProto) {
          protoAugment(value, arrayMethods);
        } else {
          copyAugment(value, arrayMethods, arrayKeys);
        }
        this.observeArray(value);
      } else {
        this.walk(value);
      }
    };
  
    /**
     * Walk through all properties and convert them into
     * getter/setters. This method should only be called when
     * value type is Object.
     */
    Observer.prototype.walk = function walk (obj) {
      var keys = Object.keys(obj);
      for (var i = 0; i < keys.length; i++) {
        defineReactive$$1(obj, keys[i]);
      }
    };
  
    /**
     * Observe a list of Array items.
     */
    Observer.prototype.observeArray = function observeArray (items) {
      for (var i = 0, l = items.length; i < l; i++) {
        observe(items[i]);
      }
    };
  
    // helpers
  
    /**
     * Augment a target Object or Array by intercepting
     * the prototype chain using __proto__
     */
    function protoAugment (target, src) {
      /* eslint-disable no-proto */
      target.__proto__ = src;
      /* eslint-enable no-proto */
    }
  
    /**
     * Augment a target Object or Array by defining
     * hidden properties.
     */
    /* istanbul ignore next */
    function copyAugment (target, src, keys) {
      for (var i = 0, l = keys.length; i < l; i++) {
        var key = keys[i];
        def(target, key, src[key]);
      }
    }
  
    /**
     * Attempt to create an observer instance for a value,
     * returns the new observer if successfully observed,
     * or the existing observer if the value already has one.
     */
    function observe (value, asRootData) {
      if (!isObject(value) || value instanceof VNode) {
        return
      }
      var ob;
      if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
        ob = value.__ob__;
      } else if (
        shouldObserve &&
        !isServerRendering() &&
        (Array.isArray(value) || isPlainObject(value)) &&
        Object.isExtensible(value) &&
        !value._isVue
      ) {
        ob = new Observer(value);
      }
      if (asRootData && ob) {
        ob.vmCount++;
      }
      return ob
    }
  
    /**
     * Define a reactive property on an Object.
     */
    function defineReactive$$1 (
      obj,
      key,
      val,
      customSetter,
      shallow
    ) {
      var dep = new Dep();
  
      var property = Object.getOwnPropertyDescriptor(obj, key);
      if (property && property.configurable === false) {
        return
      }
  
      // cater for pre-defined getter/setters
      var getter = property && property.get;
      var setter = property && property.set;
      if ((!getter || setter) && arguments.length === 2) {
        val = obj[key];
      }
  
      var childOb = !shallow && observe(val);
      Object.defineProperty(obj, key, {
        enumerable: true,
        configurable: true,
        get: function reactiveGetter () {
          var value = getter ? getter.call(obj) : val;
          if (Dep.target) {
            dep.depend();
            if (childOb) {
              childOb.dep.depend();
              if (Array.isArray(value)) {
                dependArray(value);
              }
            }
          }
          return value
        },
        set: function reactiveSetter (newVal) {
          var value = getter ? getter.call(obj) : val;
          /* eslint-disable no-self-compare */
          if (newVal === value || (newVal !== newVal && value !== value)) {
            return
          }
          /* eslint-enable no-self-compare */
          if (customSetter) {
            customSetter();
          }
          // #7981: for accessor properties without setter
          if (getter && !setter) { return }
          if (setter) {
            setter.call(obj, newVal);
          } else {
            val = newVal;
          }
          childOb = !shallow && observe(newVal);
          dep.notify();
        }
      });
    }
  
    /**
     * Set a property on an object. Adds the new property and
     * triggers change notification if the property doesn't
     * already exist.
     */
    function set (target, key, val) {
      if (isUndef(target) || isPrimitive(target)
      ) {
        warn(("Cannot set reactive property on undefined, null, or primitive value: " + ((target))));
      }
      if (Array.isArray(target) && isValidArrayIndex(key)) {
        target.length = Math.max(target.length, key);
        target.splice(key, 1, val);
        return val
      }
      if (key in target && !(key in Object.prototype)) {
        target[key] = val;
        return val
      }
      var ob = (target).__ob__;
      if (target._isVue || (ob && ob.vmCount)) {
        warn(
          'Avoid adding reactive properties to a Vue instance or its root $data ' +
          'at runtime - declare it upfront in the data option.'
        );
        return val
      }
      if (!ob) {
        target[key] = val;
        return val
      }
      defineReactive$$1(ob.value, key, val);
      ob.dep.notify();
      return val
    }
  
    /**
     * Delete a property and trigger change if necessary.
     */
    function del (target, key) {
      if (isUndef(target) || isPrimitive(target)
      ) {
        warn(("Cannot delete reactive property on undefined, null, or primitive value: " + ((target))));
      }
      if (Array.isArray(target) && isValidArrayIndex(key)) {
        target.splice(key, 1);
        return
      }
      var ob = (target).__ob__;
      if (target._isVue || (ob && ob.vmCount)) {
        warn(
          'Avoid deleting properties on a Vue instance or its root $data ' +
          '- just set it to null.'
        );
        return
      }
      if (!hasOwn(target, key)) {
        return
      }
      delete target[key];
      if (!ob) {
        return
      }
      ob.dep.notify();
    }
  
    /**
     * Collect dependencies on array elements when the array is touched, since
     * we cannot intercept array element access like property getters.
     */
    function dependArray (value) {
      for (var e = (void 0), i = 0, l = value.length; i < l; i++) {
        e = value[i];
        e && e.__ob__ && e.__ob__.dep.depend();
        if (Array.isArray(e)) {
          dependArray(e);
        }
      }
    }
  
    /*  */
  
    /**
     * Option overwriting strategies are functions that handle
     * how to merge a parent option value and a child option
     * value into the final value.
     */
    var strats = config.optionMergeStrategies;
  
    /**
     * Options with restrictions
     */
    {
      strats.el = strats.propsData = function (parent, child, vm, key) {
        if (!vm) {
          warn(
            "option \"" + key + "\" can only be used during instance " +
            'creation with the `new` keyword.'
          );
        }
        return defaultStrat(parent, child)
      };
    }
  
    /**
     * Helper that recursively merges two data objects together.
     */
    function mergeData (to, from) {
      if (!from) { return to }
      var key, toVal, fromVal;
  
      var keys = hasSymbol
        ? Reflect.ownKeys(from)
        : Object.keys(from);
  
      for (var i = 0; i < keys.length; i++) {
        key = keys[i];
        // in case the object is already observed...
        if (key === '__ob__') { continue }
        toVal = to[key];
        fromVal = from[key];
        if (!hasOwn(to, key)) {
          set(to, key, fromVal);
        } else if (
          toVal !== fromVal &&
          isPlainObject(toVal) &&
          isPlainObject(fromVal)
        ) {
          mergeData(toVal, fromVal);
        }
      }
      return to
    }
  
    /**
     * Data
     */
    function mergeDataOrFn (
      parentVal,
      childVal,
      vm
    ) {
      if (!vm) {
        // in a Vue.extend merge, both should be functions
        if (!childVal) {
          return parentVal
        }
        if (!parentVal) {
          return childVal
        }
        // when parentVal & childVal are both present,
        // we need to return a function that returns the
        // merged result of both functions... no need to
        // check if parentVal is a function here because
        // it has to be a function to pass previous merges.
        return function mergedDataFn () {
          return mergeData(
            typeof childVal === 'function' ? childVal.call(this, this) : childVal,
            typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal
          )
        }
      } else {
        return function mergedInstanceDataFn () {
          // instance merge
          var instanceData = typeof childVal === 'function'
            ? childVal.call(vm, vm)
            : childVal;
          var defaultData = typeof parentVal === 'function'
            ? parentVal.call(vm, vm)
            : parentVal;
          if (instanceData) {
            return mergeData(instanceData, defaultData)
          } else {
            return defaultData
          }
        }
      }
    }
  
    strats.data = function (
      parentVal,
      childVal,
      vm
    ) {
      if (!vm) {
        if (childVal && typeof childVal !== 'function') {
          warn(
            'The "data" option should be a function ' +
            'that returns a per-instance value in component ' +
            'definitions.',
            vm
          );
  
          return parentVal
        }
        return mergeDataOrFn(parentVal, childVal)
      }
  
      return mergeDataOrFn(parentVal, childVal, vm)
    };
  
    /**
     * Hooks and props are merged as arrays.
     */
    function mergeHook (
      parentVal,
      childVal
    ) {
      var res = childVal
        ? parentVal
          ? parentVal.concat(childVal)
          : Array.isArray(childVal)
            ? childVal
            : [childVal]
        : parentVal;
      return res
        ? dedupeHooks(res)
        : res
    }
  
    function dedupeHooks (hooks) {
      var res = [];
      for (var i = 0; i < hooks.length; i++) {
        if (res.indexOf(hooks[i]) === -1) {
          res.push(hooks[i]);
        }
      }
      return res
    }
  
    LIFECYCLE_HOOKS.forEach(function (hook) {
      strats[hook] = mergeHook;
    });
  
    /**
     * Assets
     *
     * When a vm is present (instance creation), we need to do
     * a three-way merge between constructor options, instance
     * options and parent options.
     */
    function mergeAssets (
      parentVal,
      childVal,
      vm,
      key
    ) {
      var res = Object.create(parentVal || null);
      if (childVal) {
        assertObjectType(key, childVal, vm);
        return extend(res, childVal)
      } else {
        return res
      }
    }
  
    ASSET_TYPES.forEach(function (type) {
      strats[type + 's'] = mergeAssets;
    });
  
    /**
     * Watchers.
     *
     * Watchers hashes should not overwrite one
     * another, so we merge them as arrays.
     */
    strats.watch = function (
      parentVal,
      childVal,
      vm,
      key
    ) {
      // work around Firefox's Object.prototype.watch...
      if (parentVal === nativeWatch) { parentVal = undefined; }
      if (childVal === nativeWatch) { childVal = undefined; }
      /* istanbul ignore if */
      if (!childVal) { return Object.create(parentVal || null) }
      {
        assertObjectType(key, childVal, vm);
      }
      if (!parentVal) { return childVal }
      var ret = {};
      extend(ret, parentVal);
      for (var key$1 in childVal) {
        var parent = ret[key$1];
        var child = childVal[key$1];
        if (parent && !Array.isArray(parent)) {
          parent = [parent];
        }
        ret[key$1] = parent
          ? parent.concat(child)
          : Array.isArray(child) ? child : [child];
      }
      return ret
    };
  
    /**
     * Other object hashes.
     */
    strats.props =
    strats.methods =
    strats.inject =
    strats.computed = function (
      parentVal,
      childVal,
      vm,
      key
    ) {
      if (childVal && "development" !== 'production') {
        assertObjectType(key, childVal, vm);
      }
      if (!parentVal) { return childVal }
      var ret = Object.create(null);
      extend(ret, parentVal);
      if (childVal) { extend(ret, childVal); }
      return ret
    };
    strats.provide = mergeDataOrFn;
  
    /**
     * Default strategy.
     */
    var defaultStrat = function (parentVal, childVal) {
      return childVal === undefined
        ? parentVal
        : childVal
    };
  
    /**
     * Validate component names
     */
    function checkComponents (options) {
      for (var key in options.components) {
        validateComponentName(key);
      }
    }
  
    function validateComponentName (name) {
      if (!new RegExp(("^[a-zA-Z][\\-\\.0-9_" + (unicodeRegExp.source) + "]*$")).test(name)) {
        warn(
          'Invalid component name: "' + name + '". Component names ' +
          'should conform to valid custom element name in html5 specification.'
        );
      }
      if (isBuiltInTag(name) || config.isReservedTag(name)) {
        warn(
          'Do not use built-in or reserved HTML elements as component ' +
          'id: ' + name
        );
      }
    }
  
    /**
     * Ensure all props option syntax are normalized into the
     * Object-based format.
     */
    function normalizeProps (options, vm) {
      var props = options.props;
      if (!props) { return }
      var res = {};
      var i, val, name;
      if (Array.isArray(props)) {
        i = props.length;
        while (i--) {
          val = props[i];
          if (typeof val === 'string') {
            name = camelize(val);
            res[name] = { type: null };
          } else {
            warn('props must be strings when using array syntax.');
          }
        }
      } else if (isPlainObject(props)) {
        for (var key in props) {
          val = props[key];
          name = camelize(key);
          res[name] = isPlainObject(val)
            ? val
            : { type: val };
        }
      } else {
        warn(
          "Invalid value for option \"props\": expected an Array or an Object, " +
          "but got " + (toRawType(props)) + ".",
          vm
        );
      }
      options.props = res;
    }
  
    /**
     * Normalize all injections into Object-based format
     */
    function normalizeInject (options, vm) {
      var inject = options.inject;
      if (!inject) { return }
      var normalized = options.inject = {};
      if (Array.isArray(inject)) {
        for (var i = 0; i < inject.length; i++) {
          normalized[inject[i]] = { from: inject[i] };
        }
      } else if (isPlainObject(inject)) {
        for (var key in inject) {
          var val = inject[key];
          normalized[key] = isPlainObject(val)
            ? extend({ from: key }, val)
            : { from: val };
        }
      } else {
        warn(
          "Invalid value for option \"inject\": expected an Array or an Object, " +
          "but got " + (toRawType(inject)) + ".",
          vm
        );
      }
    }
  
    /**
     * Normalize raw function directives into object format.
     */
    function normalizeDirectives (options) {
      var dirs = options.directives;
      if (dirs) {
        for (var key in dirs) {
          var def$$1 = dirs[key];
          if (typeof def$$1 === 'function') {
            dirs[key] = { bind: def$$1, update: def$$1 };
          }
        }
      }
    }
  
    function assertObjectType (name, value, vm) {
      if (!isPlainObject(value)) {
        warn(
          "Invalid value for option \"" + name + "\": expected an Object, " +
          "but got " + (toRawType(value)) + ".",
          vm
        );
      }
    }
  
    /**
     * Merge two option objects into a new one.
     * Core utility used in both instantiation and inheritance.
     */
    function mergeOptions (
      parent,
      child,
      vm
    ) {
      {
        checkComponents(child);
      }
  
      if (typeof child === 'function') {
        child = child.options;
      }
  
      normalizeProps(child, vm);
      normalizeInject(child, vm);
      normalizeDirectives(child);
  
      // Apply extends and mixins on the child options,
      // but only if it is a raw options object that isn't
      // the result of another mergeOptions call.
      // Only merged options has the _base property.
      if (!child._base) {
        if (child.extends) {
          parent = mergeOptions(parent, child.extends, vm);
        }
        if (child.mixins) {
          for (var i = 0, l = child.mixins.length; i < l; i++) {
            parent = mergeOptions(parent, child.mixins[i], vm);
          }
        }
      }
  
      var options = {};
      var key;
      for (key in parent) {
        mergeField(key);
      }
      for (key in child) {
        if (!hasOwn(parent, key)) {
          mergeField(key);
        }
      }
      function mergeField (key) {
        var strat = strats[key] || defaultStrat;
        options[key] = strat(parent[key], child[key], vm, key);
      }
      return options
    }
  
    /**
     * Resolve an asset.
     * This function is used because child instances need access
     * to assets defined in its ancestor chain.
     */
    function resolveAsset (
      options,
      type,
      id,
      warnMissing
    ) {
      /* istanbul ignore if */
      if (typeof id !== 'string') {
        return
      }
      var assets = options[type];
      // check local registration variations first
      if (hasOwn(assets, id)) { return assets[id] }
      var camelizedId = camelize(id);
      if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }
      var PascalCaseId = capitalize(camelizedId);
      if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }
      // fallback to prototype chain
      var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
      if (warnMissing && !res) {
        warn(
          'Failed to resolve ' + type.slice(0, -1) + ': ' + id,
          options
        );
      }
      return res
    }
  
    /*  */
  
  
  
    function validateProp (
      key,
      propOptions,
      propsData,
      vm
    ) {
      var prop = propOptions[key];
      var absent = !hasOwn(propsData, key);
      var value = propsData[key];
      // boolean casting
      var booleanIndex = getTypeIndex(Boolean, prop.type);
      if (booleanIndex > -1) {
        if (absent && !hasOwn(prop, 'default')) {
          value = false;
        } else if (value === '' || value === hyphenate(key)) {
          // only cast empty string / same name to boolean if
          // boolean has higher priority
          var stringIndex = getTypeIndex(String, prop.type);
          if (stringIndex < 0 || booleanIndex < stringIndex) {
            value = true;
          }
        }
      }
      // check default value
      if (value === undefined) {
        value = getPropDefaultValue(vm, prop, key);
        // since the default value is a fresh copy,
        // make sure to observe it.
        var prevShouldObserve = shouldObserve;
        toggleObserving(true);
        observe(value);
        toggleObserving(prevShouldObserve);
      }
      {
        assertProp(prop, key, value, vm, absent);
      }
      return value
    }
  
    /**
     * Get the default value of a prop.
     */
    function getPropDefaultValue (vm, prop, key) {
      // no default, return undefined
      if (!hasOwn(prop, 'default')) {
        return undefined
      }
      var def = prop.default;
      // warn against non-factory defaults for Object & Array
      if (isObject(def)) {
        warn(
          'Invalid default value for prop "' + key + '": ' +
          'Props with type Object/Array must use a factory function ' +
          'to return the default value.',
          vm
        );
      }
      // the raw prop value was also undefined from previous render,
      // return previous default value to avoid unnecessary watcher trigger
      if (vm && vm.$options.propsData &&
        vm.$options.propsData[key] === undefined &&
        vm._props[key] !== undefined
      ) {
        return vm._props[key]
      }
      // call factory function for non-Function types
      // a value is Function if its prototype is function even across different execution context
      return typeof def === 'function' && getType(prop.type) !== 'Function'
        ? def.call(vm)
        : def
    }
  
    /**
     * Assert whether a prop is valid.
     */
    function assertProp (
      prop,
      name,
      value,
      vm,
      absent
    ) {
      if (prop.required && absent) {
        warn(
          'Missing required prop: "' + name + '"',
          vm
        );
        return
      }
      if (value == null && !prop.required) {
        return
      }
      var type = prop.type;
      var valid = !type || type === true;
      var expectedTypes = [];
      if (type) {
        if (!Array.isArray(type)) {
          type = [type];
        }
        for (var i = 0; i < type.length && !valid; i++) {
          var assertedType = assertType(value, type[i], vm);
          expectedTypes.push(assertedType.expectedType || '');
          valid = assertedType.valid;
        }
      }
  
      var haveExpectedTypes = expectedTypes.some(function (t) { return t; });
      if (!valid && haveExpectedTypes) {
        warn(
          getInvalidTypeMessage(name, value, expectedTypes),
          vm
        );
        return
      }
      var validator = prop.validator;
      if (validator) {
        if (!validator(value)) {
          warn(
            'Invalid prop: custom validator check failed for prop "' + name + '".',
            vm
          );
        }
      }
    }
  
    var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol|BigInt)$/;
  
    function assertType (value, type, vm) {
      var valid;
      var expectedType = getType(type);
      if (simpleCheckRE.test(expectedType)) {
        var t = typeof value;
        valid = t === expectedType.toLowerCase();
        // for primitive wrapper objects
        if (!valid && t === 'object') {
          valid = value instanceof type;
        }
      } else if (expectedType === 'Object') {
        valid = isPlainObject(value);
      } else if (expectedType === 'Array') {
        valid = Array.isArray(value);
      } else {
        try {
          valid = value instanceof type;
        } catch (e) {
          warn('Invalid prop type: "' + String(type) + '" is not a constructor', vm);
          valid = false;
        }
      }
      return {
        valid: valid,
        expectedType: expectedType
      }
    }
  
    var functionTypeCheckRE = /^\s*function (\w+)/;
  
    /**
     * Use function string name to check built-in types,
     * because a simple equality check will fail when running
     * across different vms / iframes.
     */
    function getType (fn) {
      var match = fn && fn.toString().match(functionTypeCheckRE);
      return match ? match[1] : ''
    }
  
    function isSameType (a, b) {
      return getType(a) === getType(b)
    }
  
    function getTypeIndex (type, expectedTypes) {
      if (!Array.isArray(expectedTypes)) {
        return isSameType(expectedTypes, type) ? 0 : -1
      }
      for (var i = 0, len = expectedTypes.length; i < len; i++) {
        if (isSameType(expectedTypes[i], type)) {
          return i
        }
      }
      return -1
    }
  
    function getInvalidTypeMessage (name, value, expectedTypes) {
      var message = "Invalid prop: type check failed for prop \"" + name + "\"." +
        " Expected " + (expectedTypes.map(capitalize).join(', '));
      var expectedType = expectedTypes[0];
      var receivedType = toRawType(value);
      // check if we need to specify expected value
      if (
        expectedTypes.length === 1 &&
        isExplicable(expectedType) &&
        isExplicable(typeof value) &&
        !isBoolean(expectedType, receivedType)
      ) {
        message += " with value " + (styleValue(value, expectedType));
      }
      message += ", got " + receivedType + " ";
      // check if we need to specify received value
      if (isExplicable(receivedType)) {
        message += "with value " + (styleValue(value, receivedType)) + ".";
      }
      return message
    }
  
    function styleValue (value, type) {
      if (type === 'String') {
        return ("\"" + value + "\"")
      } else if (type === 'Number') {
        return ("" + (Number(value)))
      } else {
        return ("" + value)
      }
    }
  
    var EXPLICABLE_TYPES = ['string', 'number', 'boolean'];
    function isExplicable (value) {
      return EXPLICABLE_TYPES.some(function (elem) { return value.toLowerCase() === elem; })
    }
  
    function isBoolean () {
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];
  
      return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })
    }
  
    /*  */
  
    function handleError (err, vm, info) {
      // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.
      // See: https://github.com/vuejs/vuex/issues/1505
      pushTarget();
      try {
        if (vm) {
          var cur = vm;
          while ((cur = cur.$parent)) {
            var hooks = cur.$options.errorCaptured;
            if (hooks) {
              for (var i = 0; i < hooks.length; i++) {
                try {
                  var capture = hooks[i].call(cur, err, vm, info) === false;
                  if (capture) { return }
                } catch (e) {
                  globalHandleError(e, cur, 'errorCaptured hook');
                }
              }
            }
          }
        }
        globalHandleError(err, vm, info);
      } finally {
        popTarget();
      }
    }
  
    function invokeWithErrorHandling (
      handler,
      context,
      args,
      vm,
      info
    ) {
      var res;
      try {
        res = args ? handler.apply(context, args) : handler.call(context);
        if (res && !res._isVue && isPromise(res) && !res._handled) {
          res.catch(function (e) { return handleError(e, vm, info + " (Promise/async)"); });
          // issue #9511
          // avoid catch triggering multiple times when nested calls
          res._handled = true;
        }
      } catch (e) {
        handleError(e, vm, info);
      }
      return res
    }
  
    function globalHandleError (err, vm, info) {
      if (config.errorHandler) {
        try {
          return config.errorHandler.call(null, err, vm, info)
        } catch (e) {
          // if the user intentionally throws the original error in the handler,
          // do not log it twice
          if (e !== err) {
            logError(e, null, 'config.errorHandler');
          }
        }
      }
      logError(err, vm, info);
    }
  
    function logError (err, vm, info) {
      {
        warn(("Error in " + info + ": \"" + (err.toString()) + "\""), vm);
      }
      /* istanbul ignore else */
      if ((inBrowser || inWeex) && typeof console !== 'undefined') {
        console.error(err);
      } else {
        throw err
      }
    }
  
    /*  */
  
    var isUsingMicroTask = false;
  
    var callbacks = [];
    var pending = false;
  
    function flushCallbacks () {
      pending = false;
      var copies = callbacks.slice(0);
      callbacks.length = 0;
      for (var i = 0; i < copies.length; i++) {
        copies[i]();
      }
    }
  
    // Here we have async deferring wrappers using microtasks.
    // In 2.5 we used (macro) tasks (in combination with microtasks).
    // However, it has subtle problems when state is changed right before repaint
    // (e.g. #6813, out-in transitions).
    // Also, using (macro) tasks in event handler would cause some weird behaviors
    // that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).
    // So we now use microtasks everywhere, again.
    // A major drawback of this tradeoff is that there are some scenarios
    // where microtasks have too high a priority and fire in between supposedly
    // sequential events (e.g. #4521, #6690, which have workarounds)
    // or even between bubbling of the same event (#6566).
    var timerFunc;
  
    // The nextTick behavior leverages the microtask queue, which can be accessed
    // via either native Promise.then or MutationObserver.
    // MutationObserver has wider support, however it is seriously bugged in
    // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
    // completely stops working after triggering a few times... so, if native
    // Promise is available, we will use it:
    /* istanbul ignore next, $flow-disable-line */
    if (typeof Promise !== 'undefined' && isNative(Promise)) {
      var p = Promise.resolve();
      timerFunc = function () {
        p.then(flushCallbacks);
        // In problematic UIWebViews, Promise.then doesn't completely break, but
        // it can get stuck in a weird state where callbacks are pushed into the
        // microtask queue but the queue isn't being flushed, until the browser
        // needs to do some other work, e.g. handle a timer. Therefore we can
        // "force" the microtask queue to be flushed by adding an empty timer.
        if (isIOS) { setTimeout(noop); }
      };
      isUsingMicroTask = true;
    } else if (!isIE && typeof MutationObserver !== 'undefined' && (
      isNative(MutationObserver) ||
      // PhantomJS and iOS 7.x
      MutationObserver.toString() === '[object MutationObserverConstructor]'
    )) {
      // Use MutationObserver where native Promise is not available,
      // e.g. PhantomJS, iOS7, Android 4.4
      // (#6466 MutationObserver is unreliable in IE11)
      var counter = 1;
      var observer = new MutationObserver(flushCallbacks);
      var textNode = document.createTextNode(String(counter));
      observer.observe(textNode, {
        characterData: true
      });
      timerFunc = function () {
        counter = (counter + 1) % 2;
        textNode.data = String(counter);
      };
      isUsingMicroTask = true;
    } else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
      // Fallback to setImmediate.
      // Technically it leverages the (macro) task queue,
      // but it is still a better choice than setTimeout.
      timerFunc = function () {
        setImmediate(flushCallbacks);
      };
    } else {
      // Fallback to setTimeout.
      timerFunc = function () {
        setTimeout(flushCallbacks, 0);
      };
    }
  
    function nextTick (cb, ctx) {
      var _resolve;
      callbacks.push(function () {
        if (cb) {
          try {
            cb.call(ctx);
          } catch (e) {
            handleError(e, ctx, 'nextTick');
          }
        } else if (_resolve) {
          _resolve(ctx);
        }
      });
      if (!pending) {
        pending = true;
        timerFunc();
      }
      // $flow-disable-line
      if (!cb && typeof Promise !== 'undefined') {
        return new Promise(function (resolve) {
          _resolve = resolve;
        })
      }
    }
  
    /*  */
  
    var mark;
    var measure;
  
    {
      var perf = inBrowser && window.performance;
      /* istanbul ignore if */
      if (
        perf &&
        perf.mark &&
        perf.measure &&
        perf.clearMarks &&
        perf.clearMeasures
      ) {
        mark = function (tag) { return perf.mark(tag); };
        measure = function (name, startTag, endTag) {
          perf.measure(name, startTag, endTag);
          perf.clearMarks(startTag);
          perf.clearMarks(endTag);
          // perf.clearMeasures(name)
        };
      }
    }
  
    /* not type checking this file because flow doesn't play well with Proxy */
  
    var initProxy;
  
    {
      var allowedGlobals = makeMap(
        'Infinity,undefined,NaN,isFinite,isNaN,' +
        'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +
        'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,' +
        'require' // for Webpack/Browserify
      );
  
      var warnNonPresent = function (target, key) {
        warn(
          "Property or method \"" + key + "\" is not defined on the instance but " +
          'referenced during render. Make sure that this property is reactive, ' +
          'either in the data option, or for class-based components, by ' +
          'initializing the property. ' +
          'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',
          target
        );
      };
  
      var warnReservedPrefix = function (target, key) {
        warn(
          "Property \"" + key + "\" must be accessed with \"$data." + key + "\" because " +
          'properties starting with "$" or "_" are not proxied in the Vue instance to ' +
          'prevent conflicts with Vue internals. ' +
          'See: https://vuejs.org/v2/api/#data',
          target
        );
      };
  
      var hasProxy =
        typeof Proxy !== 'undefined' && isNative(Proxy);
  
      if (hasProxy) {
        var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');
        config.keyCodes = new Proxy(config.keyCodes, {
          set: function set (target, key, value) {
            if (isBuiltInModifier(key)) {
              warn(("Avoid overwriting built-in modifier in config.keyCodes: ." + key));
              return false
            } else {
              target[key] = value;
              return true
            }
          }
        });
      }
  
      var hasHandler = {
        has: function has (target, key) {
          var has = key in target;
          var isAllowed = allowedGlobals(key) ||
            (typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data));
          if (!has && !isAllowed) {
            if (key in target.$data) { warnReservedPrefix(target, key); }
            else { warnNonPresent(target, key); }
          }
          return has || !isAllowed
        }
      };
  
      var getHandler = {
        get: function get (target, key) {
          if (typeof key === 'string' && !(key in target)) {
            if (key in target.$data) { warnReservedPrefix(target, key); }
            else { warnNonPresent(target, key); }
          }
          return target[key]
        }
      };
  
      initProxy = function initProxy (vm) {
        if (hasProxy) {
          // determine which proxy handler to use
          var options = vm.$options;
          var handlers = options.render && options.render._withStripped
            ? getHandler
            : hasHandler;
          vm._renderProxy = new Proxy(vm, handlers);
        } else {
          vm._renderProxy = vm;
        }
      };
    }
  
    /*  */
  
    var seenObjects = new _Set();
  
    /**
     * Recursively traverse an object to evoke all converted
     * getters, so that every nested property inside the object
     * is collected as a "deep" dependency.
     */
    function traverse (val) {
      _traverse(val, seenObjects);
      seenObjects.clear();
    }
  
    function _traverse (val, seen) {
      var i, keys;
      var isA = Array.isArray(val);
      if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {
        return
      }
      if (val.__ob__) {
        var depId = val.__ob__.dep.id;
        if (seen.has(depId)) {
          return
        }
        seen.add(depId);
      }
      if (isA) {
        i = val.length;
        while (i--) { _traverse(val[i], seen); }
      } else {
        keys = Object.keys(val);
        i = keys.length;
        while (i--) { _traverse(val[keys[i]], seen); }
      }
    }
  
    /*  */
  
    var normalizeEvent = cached(function (name) {
      var passive = name.charAt(0) === '&';
      name = passive ? name.slice(1) : name;
      var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first
      name = once$$1 ? name.slice(1) : name;
      var capture = name.charAt(0) === '!';
      name = capture ? name.slice(1) : name;
      return {
        name: name,
        once: once$$1,
        capture: capture,
        passive: passive
      }
    });
  
    function createFnInvoker (fns, vm) {
      function invoker () {
        var arguments$1 = arguments;
  
        var fns = invoker.fns;
        if (Array.isArray(fns)) {
          var cloned = fns.slice();
          for (var i = 0; i < cloned.length; i++) {
            invokeWithErrorHandling(cloned[i], null, arguments$1, vm, "v-on handler");
          }
        } else {
          // return handler return value for single handlers
          return invokeWithErrorHandling(fns, null, arguments, vm, "v-on handler")
        }
      }
      invoker.fns = fns;
      return invoker
    }
  
    function updateListeners (
      on,
      oldOn,
      add,
      remove$$1,
      createOnceHandler,
      vm
    ) {
      var name, def$$1, cur, old, event;
      for (name in on) {
        def$$1 = cur = on[name];
        old = oldOn[name];
        event = normalizeEvent(name);
        if (isUndef(cur)) {
          warn(
            "Invalid handler for event \"" + (event.name) + "\": got " + String(cur),
            vm
          );
        } else if (isUndef(old)) {
          if (isUndef(cur.fns)) {
            cur = on[name] = createFnInvoker(cur, vm);
          }
          if (isTrue(event.once)) {
            cur = on[name] = createOnceHandler(event.name, cur, event.capture);
          }
          add(event.name, cur, event.capture, event.passive, event.params);
        } else if (cur !== old) {
          old.fns = cur;
          on[name] = old;
        }
      }
      for (name in oldOn) {
        if (isUndef(on[name])) {
          event = normalizeEvent(name);
          remove$$1(event.name, oldOn[name], event.capture);
        }
      }
    }
  
    /*  */
  
    function mergeVNodeHook (def, hookKey, hook) {
      if (def instanceof VNode) {
        def = def.data.hook || (def.data.hook = {});
      }
      var invoker;
      var oldHook = def[hookKey];
  
      function wrappedHook () {
        hook.apply(this, arguments);
        // important: remove merged hook to ensure it's called only once
        // and prevent memory leak
        remove(invoker.fns, wrappedHook);
      }
  
      if (isUndef(oldHook)) {
        // no existing hook
        invoker = createFnInvoker([wrappedHook]);
      } else {
        /* istanbul ignore if */
        if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
          // already a merged invoker
          invoker = oldHook;
          invoker.fns.push(wrappedHook);
        } else {
          // existing plain hook
          invoker = createFnInvoker([oldHook, wrappedHook]);
        }
      }
  
      invoker.merged = true;
      def[hookKey] = invoker;
    }
  
    /*  */
  
    function extractPropsFromVNodeData (
      data,
      Ctor,
      tag
    ) {
      // we are only extracting raw values here.
      // validation and default values are handled in the child
      // component itself.
      var propOptions = Ctor.options.props;
      if (isUndef(propOptions)) {
        return
      }
      var res = {};
      var attrs = data.attrs;
      var props = data.props;
      if (isDef(attrs) || isDef(props)) {
        for (var key in propOptions) {
          var altKey = hyphenate(key);
          {
            var keyInLowerCase = key.toLowerCase();
            if (
              key !== keyInLowerCase &&
              attrs && hasOwn(attrs, keyInLowerCase)
            ) {
              tip(
                "Prop \"" + keyInLowerCase + "\" is passed to component " +
                (formatComponentName(tag || Ctor)) + ", but the declared prop name is" +
                " \"" + key + "\". " +
                "Note that HTML attributes are case-insensitive and camelCased " +
                "props need to use their kebab-case equivalents when using in-DOM " +
                "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\"."
              );
            }
          }
          checkProp(res, props, key, altKey, true) ||
          checkProp(res, attrs, key, altKey, false);
        }
      }
      return res
    }
  
    function checkProp (
      res,
      hash,
      key,
      altKey,
      preserve
    ) {
      if (isDef(hash)) {
        if (hasOwn(hash, key)) {
          res[key] = hash[key];
          if (!preserve) {
            delete hash[key];
          }
          return true
        } else if (hasOwn(hash, altKey)) {
          res[key] = hash[altKey];
          if (!preserve) {
            delete hash[altKey];
          }
          return true
        }
      }
      return false
    }
  
    /*  */
  
    // The template compiler attempts to minimize the need for normalization by
    // statically analyzing the template at compile time.
    //
    // For plain HTML markup, normalization can be completely skipped because the
    // generated render function is guaranteed to return Array<VNode>. There are
    // two cases where extra normalization is needed:
  
    // 1. When the children contains components - because a functional component
    // may return an Array instead of a single root. In this case, just a simple
    // normalization is needed - if any child is an Array, we flatten the whole
    // thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
    // because functional components already normalize their own children.
    function simpleNormalizeChildren (children) {
      for (var i = 0; i < children.length; i++) {
        if (Array.isArray(children[i])) {
          return Array.prototype.concat.apply([], children)
        }
      }
      return children
    }
  
    // 2. When the children contains constructs that always generated nested Arrays,
    // e.g. <template>, <slot>, v-for, or when the children is provided by user
    // with hand-written render functions / JSX. In such cases a full normalization
    // is needed to cater to all possible types of children values.
    function normalizeChildren (children) {
      return isPrimitive(children)
        ? [createTextVNode(children)]
        : Array.isArray(children)
          ? normalizeArrayChildren(children)
          : undefined
    }
  
    function isTextNode (node) {
      return isDef(node) && isDef(node.text) && isFalse(node.isComment)
    }
  
    function normalizeArrayChildren (children, nestedIndex) {
      var res = [];
      var i, c, lastIndex, last;
      for (i = 0; i < children.length; i++) {
        c = children[i];
        if (isUndef(c) || typeof c === 'boolean') { continue }
        lastIndex = res.length - 1;
        last = res[lastIndex];
        //  nested
        if (Array.isArray(c)) {
          if (c.length > 0) {
            c = normalizeArrayChildren(c, ((nestedIndex || '') + "_" + i));
            // merge adjacent text nodes
            if (isTextNode(c[0]) && isTextNode(last)) {
              res[lastIndex] = createTextVNode(last.text + (c[0]).text);
              c.shift();
            }
            res.push.apply(res, c);
          }
        } else if (isPrimitive(c)) {
          if (isTextNode(last)) {
            // merge adjacent text nodes
            // this is necessary for SSR hydration because text nodes are
            // essentially merged when rendered to HTML strings
            res[lastIndex] = createTextVNode(last.text + c);
          } else if (c !== '') {
            // convert primitive to vnode
            res.push(createTextVNode(c));
          }
        } else {
          if (isTextNode(c) && isTextNode(last)) {
            // merge adjacent text nodes
            res[lastIndex] = createTextVNode(last.text + c.text);
          } else {
            // default key for nested array children (likely generated by v-for)
            if (isTrue(children._isVList) &&
              isDef(c.tag) &&
              isUndef(c.key) &&
              isDef(nestedIndex)) {
              c.key = "__vlist" + nestedIndex + "_" + i + "__";
            }
            res.push(c);
          }
        }
      }
      return res
    }
  
    /*  */
  
    function initProvide (vm) {
      var provide = vm.$options.provide;
      if (provide) {
        vm._provided = typeof provide === 'function'
          ? provide.call(vm)
          : provide;
      }
    }
  
    function initInjections (vm) {
      var result = resolveInject(vm.$options.inject, vm);
      if (result) {
        toggleObserving(false);
        Object.keys(result).forEach(function (key) {
          /* istanbul ignore else */
          {
            defineReactive$$1(vm, key, result[key], function () {
              warn(
                "Avoid mutating an injected value directly since the changes will be " +
                "overwritten whenever the provided component re-renders. " +
                "injection being mutated: \"" + key + "\"",
                vm
              );
            });
          }
        });
        toggleObserving(true);
      }
    }
  
    function resolveInject (inject, vm) {
      if (inject) {
        // inject is :any because flow is not smart enough to figure out cached
        var result = Object.create(null);
        var keys = hasSymbol
          ? Reflect.ownKeys(inject)
          : Object.keys(inject);
  
        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          // #6574 in case the inject object is observed...
          if (key === '__ob__') { continue }
          var provideKey = inject[key].from;
          var source = vm;
          while (source) {
            if (source._provided && hasOwn(source._provided, provideKey)) {
              result[key] = source._provided[provideKey];
              break
            }
            source = source.$parent;
          }
          if (!source) {
            if ('default' in inject[key]) {
              var provideDefault = inject[key].default;
              result[key] = typeof provideDefault === 'function'
                ? provideDefault.call(vm)
                : provideDefault;
            } else {
              warn(("Injection \"" + key + "\" not found"), vm);
            }
          }
        }
        return result
      }
    }
  
    /*  */
  
  
  
    /**
     * Runtime helper for resolving raw children VNodes into a slot object.
     */
    function resolveSlots (
      children,
      context
    ) {
      if (!children || !children.length) {
        return {}
      }
      var slots = {};
      for (var i = 0, l = children.length; i < l; i++) {
        var child = children[i];
        var data = child.data;
        // remove slot attribute if the node is resolved as a Vue slot node
        if (data && data.attrs && data.attrs.slot) {
          delete data.attrs.slot;
        }
        // named slots should only be respected if the vnode was rendered in the
        // same context.
        if ((child.context === context || child.fnContext === context) &&
          data && data.slot != null
        ) {
          var name = data.slot;
          var slot = (slots[name] || (slots[name] = []));
          if (child.tag === 'template') {
            slot.push.apply(slot, child.children || []);
          } else {
            slot.push(child);
          }
        } else {
          (slots.default || (slots.default = [])).push(child);
        }
      }
      // ignore slots that contains only whitespace
      for (var name$1 in slots) {
        if (slots[name$1].every(isWhitespace)) {
          delete slots[name$1];
        }
      }
      return slots
    }
  
    function isWhitespace (node) {
      return (node.isComment && !node.asyncFactory) || node.text === ' '
    }
  
    /*  */
  
    function isAsyncPlaceholder (node) {
      return node.isComment && node.asyncFactory
    }
  
    /*  */
  
    function normalizeScopedSlots (
      slots,
      normalSlots,
      prevSlots
    ) {
      var res;
      var hasNormalSlots = Object.keys(normalSlots).length > 0;
      var isStable = slots ? !!slots.$stable : !hasNormalSlots;
      var key = slots && slots.$key;
      if (!slots) {
        res = {};
      } else if (slots._normalized) {
        // fast path 1: child component re-render only, parent did not change
        return slots._normalized
      } else if (
        isStable &&
        prevSlots &&
        prevSlots !== emptyObject &&
        key === prevSlots.$key &&
        !hasNormalSlots &&
        !prevSlots.$hasNormal
      ) {
        // fast path 2: stable scoped slots w/ no normal slots to proxy,
        // only need to normalize once
        return prevSlots
      } else {
        res = {};
        for (var key$1 in slots) {
          if (slots[key$1] && key$1[0] !== '$') {
            res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);
          }
        }
      }
      // expose normal slots on scopedSlots
      for (var key$2 in normalSlots) {
        if (!(key$2 in res)) {
          res[key$2] = proxyNormalSlot(normalSlots, key$2);
        }
      }
      // avoriaz seems to mock a non-extensible $scopedSlots object
      // and when that is passed down this would cause an error
      if (slots && Object.isExtensible(slots)) {
        (slots)._normalized = res;
      }
      def(res, '$stable', isStable);
      def(res, '$key', key);
      def(res, '$hasNormal', hasNormalSlots);
      return res
    }
  
    function normalizeScopedSlot(normalSlots, key, fn) {
      var normalized = function () {
        var res = arguments.length ? fn.apply(null, arguments) : fn({});
        res = res && typeof res === 'object' && !Array.isArray(res)
          ? [res] // single vnode
          : normalizeChildren(res);
        var vnode = res && res[0];
        return res && (
          !vnode ||
          (res.length === 1 && vnode.isComment && !isAsyncPlaceholder(vnode)) // #9658, #10391
        ) ? undefined
          : res
      };
      // this is a slot using the new v-slot syntax without scope. although it is
      // compiled as a scoped slot, render fn users would expect it to be present
      // on this.$slots because the usage is semantically a normal slot.
      if (fn.proxy) {
        Object.defineProperty(normalSlots, key, {
          get: normalized,
          enumerable: true,
          configurable: true
        });
      }
      return normalized
    }
  
    function proxyNormalSlot(slots, key) {
      return function () { return slots[key]; }
    }
  
    /*  */
  
    /**
     * Runtime helper for rendering v-for lists.
     */
    function renderList (
      val,
      render
    ) {
      var ret, i, l, keys, key;
      if (Array.isArray(val) || typeof val === 'string') {
        ret = new Array(val.length);
        for (i = 0, l = val.length; i < l; i++) {
          ret[i] = render(val[i], i);
        }
      } else if (typeof val === 'number') {
        ret = new Array(val);
        for (i = 0; i < val; i++) {
          ret[i] = render(i + 1, i);
        }
      } else if (isObject(val)) {
        if (hasSymbol && val[Symbol.iterator]) {
          ret = [];
          var iterator = val[Symbol.iterator]();
          var result = iterator.next();
          while (!result.done) {
            ret.push(render(result.value, ret.length));
            result = iterator.next();
          }
        } else {
          keys = Object.keys(val);
          ret = new Array(keys.length);
          for (i = 0, l = keys.length; i < l; i++) {
            key = keys[i];
            ret[i] = render(val[key], key, i);
          }
        }
      }
      if (!isDef(ret)) {
        ret = [];
      }
      (ret)._isVList = true;
      return ret
    }
  
    /*  */
  
    /**
     * Runtime helper for rendering <slot>
     */
    function renderSlot (
      name,
      fallbackRender,
      props,
      bindObject
    ) {
      var scopedSlotFn = this.$scopedSlots[name];
      var nodes;
      if (scopedSlotFn) {
        // scoped slot
        props = props || {};
        if (bindObject) {
          if (!isObject(bindObject)) {
            warn('slot v-bind without argument expects an Object', this);
          }
          props = extend(extend({}, bindObject), props);
        }
        nodes =
          scopedSlotFn(props) ||
          (typeof fallbackRender === 'function' ? fallbackRender() : fallbackRender);
      } else {
        nodes =
          this.$slots[name] ||
          (typeof fallbackRender === 'function' ? fallbackRender() : fallbackRender);
      }
  
      var target = props && props.slot;
      if (target) {
        return this.$createElement('template', { slot: target }, nodes)
      } else {
        return nodes
      }
    }
  
    /*  */
  
    /**
     * Runtime helper for resolving filters
     */
    function resolveFilter (id) {
      return resolveAsset(this.$options, 'filters', id, true) || identity
    }
  
    /*  */
  
    function isKeyNotMatch (expect, actual) {
      if (Array.isArray(expect)) {
        return expect.indexOf(actual) === -1
      } else {
        return expect !== actual
      }
    }
  
    /**
     * Runtime helper for checking keyCodes from config.
     * exposed as Vue.prototype._k
     * passing in eventKeyName as last argument separately for backwards compat
     */
    function checkKeyCodes (
      eventKeyCode,
      key,
      builtInKeyCode,
      eventKeyName,
      builtInKeyName
    ) {
      var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;
      if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
        return isKeyNotMatch(builtInKeyName, eventKeyName)
      } else if (mappedKeyCode) {
        return isKeyNotMatch(mappedKeyCode, eventKeyCode)
      } else if (eventKeyName) {
        return hyphenate(eventKeyName) !== key
      }
      return eventKeyCode === undefined
    }
  
    /*  */
  
    /**
     * Runtime helper for merging v-bind="object" into a VNode's data.
     */
    function bindObjectProps (
      data,
      tag,
      value,
      asProp,
      isSync
    ) {
      if (value) {
        if (!isObject(value)) {
          warn(
            'v-bind without argument expects an Object or Array value',
            this
          );
        } else {
          if (Array.isArray(value)) {
            value = toObject(value);
          }
          var hash;
          var loop = function ( key ) {
            if (
              key === 'class' ||
              key === 'style' ||
              isReservedAttribute(key)
            ) {
              hash = data;
            } else {
              var type = data.attrs && data.attrs.type;
              hash = asProp || config.mustUseProp(tag, type, key)
                ? data.domProps || (data.domProps = {})
                : data.attrs || (data.attrs = {});
            }
            var camelizedKey = camelize(key);
            var hyphenatedKey = hyphenate(key);
            if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {
              hash[key] = value[key];
  
              if (isSync) {
                var on = data.on || (data.on = {});
                on[("update:" + key)] = function ($event) {
                  value[key] = $event;
                };
              }
            }
          };
  
          for (var key in value) loop( key );
        }
      }
      return data
    }
  
    /*  */
  
    /**
     * Runtime helper for rendering static trees.
     */
    function renderStatic (
      index,
      isInFor
    ) {
      var cached = this._staticTrees || (this._staticTrees = []);
      var tree = cached[index];
      // if has already-rendered static tree and not inside v-for,
      // we can reuse the same tree.
      if (tree && !isInFor) {
        return tree
      }
      // otherwise, render a fresh tree.
      tree = cached[index] = this.$options.staticRenderFns[index].call(
        this._renderProxy,
        null,
        this // for render fns generated for functional component templates
      );
      markStatic(tree, ("__static__" + index), false);
      return tree
    }
  
    /**
     * Runtime helper for v-once.
     * Effectively it means marking the node as static with a unique key.
     */
    function markOnce (
      tree,
      index,
      key
    ) {
      markStatic(tree, ("__once__" + index + (key ? ("_" + key) : "")), true);
      return tree
    }
  
    function markStatic (
      tree,
      key,
      isOnce
    ) {
      if (Array.isArray(tree)) {
        for (var i = 0; i < tree.length; i++) {
          if (tree[i] && typeof tree[i] !== 'string') {
            markStaticNode(tree[i], (key + "_" + i), isOnce);
          }
        }
      } else {
        markStaticNode(tree, key, isOnce);
      }
    }
  
    function markStaticNode (node, key, isOnce) {
      node.isStatic = true;
      node.key = key;
      node.isOnce = isOnce;
    }
  
    /*  */
  
    function bindObjectListeners (data, value) {
      if (value) {
        if (!isPlainObject(value)) {
          warn(
            'v-on without argument expects an Object value',
            this
          );
        } else {
          var on = data.on = data.on ? extend({}, data.on) : {};
          for (var key in value) {
            var existing = on[key];
            var ours = value[key];
            on[key] = existing ? [].concat(existing, ours) : ours;
          }
        }
      }
      return data
    }
  
    /*  */
  
    function resolveScopedSlots (
      fns, // see flow/vnode
      res,
      // the following are added in 2.6
      hasDynamicKeys,
      contentHashKey
    ) {
      res = res || { $stable: !hasDynamicKeys };
      for (var i = 0; i < fns.length; i++) {
        var slot = fns[i];
        if (Array.isArray(slot)) {
          resolveScopedSlots(slot, res, hasDynamicKeys);
        } else if (slot) {
          // marker for reverse proxying v-slot without scope on this.$slots
          if (slot.proxy) {
            slot.fn.proxy = true;
          }
          res[slot.key] = slot.fn;
        }
      }
      if (contentHashKey) {
        (res).$key = contentHashKey;
      }
      return res
    }
  
    /*  */
  
    function bindDynamicKeys (baseObj, values) {
      for (var i = 0; i < values.length; i += 2) {
        var key = values[i];
        if (typeof key === 'string' && key) {
          baseObj[values[i]] = values[i + 1];
        } else if (key !== '' && key !== null) {
          // null is a special value for explicitly removing a binding
          warn(
            ("Invalid value for dynamic directive argument (expected string or null): " + key),
            this
          );
        }
      }
      return baseObj
    }
  
    // helper to dynamically append modifier runtime markers to event names.
    // ensure only append when value is already string, otherwise it will be cast
    // to string and cause the type check to miss.
    function prependModifier (value, symbol) {
      return typeof value === 'string' ? symbol + value : value
    }
  
    /*  */
  
    function installRenderHelpers (target) {
      target._o = markOnce;
      target._n = toNumber;
      target._s = toString;
      target._l = renderList;
      target._t = renderSlot;
      target._q = looseEqual;
      target._i = looseIndexOf;
      target._m = renderStatic;
      target._f = resolveFilter;
      target._k = checkKeyCodes;
      target._b = bindObjectProps;
      target._v = createTextVNode;
      target._e = createEmptyVNode;
      target._u = resolveScopedSlots;
      target._g = bindObjectListeners;
      target._d = bindDynamicKeys;
      target._p = prependModifier;
    }
  
    /*  */
  
    function FunctionalRenderContext (
      data,
      props,
      children,
      parent,
      Ctor
    ) {
      var this$1 = this;
  
      var options = Ctor.options;
      // ensure the createElement function in functional components
      // gets a unique context - this is necessary for correct named slot check
      var contextVm;
      if (hasOwn(parent, '_uid')) {
        contextVm = Object.create(parent);
        // $flow-disable-line
        contextVm._original = parent;
      } else {
        // the context vm passed in is a functional context as well.
        // in this case we want to make sure we are able to get a hold to the
        // real context instance.
        contextVm = parent;
        // $flow-disable-line
        parent = parent._original;
      }
      var isCompiled = isTrue(options._compiled);
      var needNormalization = !isCompiled;
  
      this.data = data;
      this.props = props;
      this.children = children;
      this.parent = parent;
      this.listeners = data.on || emptyObject;
      this.injections = resolveInject(options.inject, parent);
      this.slots = function () {
        if (!this$1.$slots) {
          normalizeScopedSlots(
            data.scopedSlots,
            this$1.$slots = resolveSlots(children, parent)
          );
        }
        return this$1.$slots
      };
  
      Object.defineProperty(this, 'scopedSlots', ({
        enumerable: true,
        get: function get () {
          return normalizeScopedSlots(data.scopedSlots, this.slots())
        }
      }));
  
      // support for compiled functional template
      if (isCompiled) {
        // exposing $options for renderStatic()
        this.$options = options;
        // pre-resolve slots for renderSlot()
        this.$slots = this.slots();
        this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);
      }
  
      if (options._scopeId) {
        this._c = function (a, b, c, d) {
          var vnode = createElement(contextVm, a, b, c, d, needNormalization);
          if (vnode && !Array.isArray(vnode)) {
            vnode.fnScopeId = options._scopeId;
            vnode.fnContext = parent;
          }
          return vnode
        };
      } else {
        this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };
      }
    }
  
    installRenderHelpers(FunctionalRenderContext.prototype);
  
    function createFunctionalComponent (
      Ctor,
      propsData,
      data,
      contextVm,
      children
    ) {
      var options = Ctor.options;
      var props = {};
      var propOptions = options.props;
      if (isDef(propOptions)) {
        for (var key in propOptions) {
          props[key] = validateProp(key, propOptions, propsData || emptyObject);
        }
      } else {
        if (isDef(data.attrs)) { mergeProps(props, data.attrs); }
        if (isDef(data.props)) { mergeProps(props, data.props); }
      }
  
      var renderContext = new FunctionalRenderContext(
        data,
        props,
        children,
        contextVm,
        Ctor
      );
  
      var vnode = options.render.call(null, renderContext._c, renderContext);
  
      if (vnode instanceof VNode) {
        return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)
      } else if (Array.isArray(vnode)) {
        var vnodes = normalizeChildren(vnode) || [];
        var res = new Array(vnodes.length);
        for (var i = 0; i < vnodes.length; i++) {
          res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);
        }
        return res
      }
    }
  
    function cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {
      // #7817 clone node before setting fnContext, otherwise if the node is reused
      // (e.g. it was from a cached normal slot) the fnContext causes named slots
      // that should not be matched to match.
      var clone = cloneVNode(vnode);
      clone.fnContext = contextVm;
      clone.fnOptions = options;
      {
        (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;
      }
      if (data.slot) {
        (clone.data || (clone.data = {})).slot = data.slot;
      }
      return clone
    }
  
    function mergeProps (to, from) {
      for (var key in from) {
        to[camelize(key)] = from[key];
      }
    }
  
    /*  */
  
    /*  */
  
    /*  */
  
    /*  */
  
    // inline hooks to be invoked on component VNodes during patch
    var componentVNodeHooks = {
      init: function init (vnode, hydrating) {
        if (
          vnode.componentInstance &&
          !vnode.componentInstance._isDestroyed &&
          vnode.data.keepAlive
        ) {
          // kept-alive components, treat as a patch
          var mountedNode = vnode; // work around flow
          componentVNodeHooks.prepatch(mountedNode, mountedNode);
        } else {
          var child = vnode.componentInstance = createComponentInstanceForVnode(
            vnode,
            activeInstance
          );
          child.$mount(hydrating ? vnode.elm : undefined, hydrating);
        }
      },
  
      prepatch: function prepatch (oldVnode, vnode) {
        var options = vnode.componentOptions;
        var child = vnode.componentInstance = oldVnode.componentInstance;
        updateChildComponent(
          child,
          options.propsData, // updated props
          options.listeners, // updated listeners
          vnode, // new parent vnode
          options.children // new children
        );
      },
  
      insert: function insert (vnode) {
        var context = vnode.context;
        var componentInstance = vnode.componentInstance;
        if (!componentInstance._isMounted) {
          componentInstance._isMounted = true;
          callHook(componentInstance, 'mounted');
        }
        if (vnode.data.keepAlive) {
          if (context._isMounted) {
            // vue-router#1212
            // During updates, a kept-alive component's child components may
            // change, so directly walking the tree here may call activated hooks
            // on incorrect children. Instead we push them into a queue which will
            // be processed after the whole patch process ended.
            queueActivatedComponent(componentInstance);
          } else {
            activateChildComponent(componentInstance, true /* direct */);
          }
        }
      },
  
      destroy: function destroy (vnode) {
        var componentInstance = vnode.componentInstance;
        if (!componentInstance._isDestroyed) {
          if (!vnode.data.keepAlive) {
            componentInstance.$destroy();
          } else {
            deactivateChildComponent(componentInstance, true /* direct */);
          }
        }
      }
    };
  
    var hooksToMerge = Object.keys(componentVNodeHooks);
  
    function createComponent (
      Ctor,
      data,
      context,
      children,
      tag
    ) {
      if (isUndef(Ctor)) {
        return
      }
  
      var baseCtor = context.$options._base;
  
      // plain options object: turn it into a constructor
      if (isObject(Ctor)) {
        Ctor = baseCtor.extend(Ctor);
      }
  
      // if at this stage it's not a constructor or an async component factory,
      // reject.
      if (typeof Ctor !== 'function') {
        {
          warn(("Invalid Component definition: " + (String(Ctor))), context);
        }
        return
      }
  
      // async component
      var asyncFactory;
      if (isUndef(Ctor.cid)) {
        asyncFactory = Ctor;
        Ctor = resolveAsyncComponent(asyncFactory, baseCtor);
        if (Ctor === undefined) {
          // return a placeholder node for async component, which is rendered
          // as a comment node but preserves all the raw information for the node.
          // the information will be used for async server-rendering and hydration.
          return createAsyncPlaceholder(
            asyncFactory,
            data,
            context,
            children,
            tag
          )
        }
      }
  
      data = data || {};
  
      // resolve constructor options in case global mixins are applied after
      // component constructor creation
      resolveConstructorOptions(Ctor);
  
      // transform component v-model data into props & events
      if (isDef(data.model)) {
        transformModel(Ctor.options, data);
      }
  
      // extract props
      var propsData = extractPropsFromVNodeData(data, Ctor, tag);
  
      // functional component
      if (isTrue(Ctor.options.functional)) {
        return createFunctionalComponent(Ctor, propsData, data, context, children)
      }
  
      // extract listeners, since these needs to be treated as
      // child component listeners instead of DOM listeners
      var listeners = data.on;
      // replace with listeners with .native modifier
      // so it gets processed during parent component patch.
      data.on = data.nativeOn;
  
      if (isTrue(Ctor.options.abstract)) {
        // abstract components do not keep anything
        // other than props & listeners & slot
  
        // work around flow
        var slot = data.slot;
        data = {};
        if (slot) {
          data.slot = slot;
        }
      }
  
      // install component management hooks onto the placeholder node
      installComponentHooks(data);
  
      // return a placeholder vnode
      var name = Ctor.options.name || tag;
      var vnode = new VNode(
        ("vue-component-" + (Ctor.cid) + (name ? ("-" + name) : '')),
        data, undefined, undefined, undefined, context,
        { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },
        asyncFactory
      );
  
      return vnode
    }
  
    function createComponentInstanceForVnode (
      // we know it's MountedComponentVNode but flow doesn't
      vnode,
      // activeInstance in lifecycle state
      parent
    ) {
      var options = {
        _isComponent: true,
        _parentVnode: vnode,
        parent: parent
      };
      // check inline-template render functions
      var inlineTemplate = vnode.data.inlineTemplate;
      if (isDef(inlineTemplate)) {
        options.render = inlineTemplate.render;
        options.staticRenderFns = inlineTemplate.staticRenderFns;
      }
      return new vnode.componentOptions.Ctor(options)
    }
  
    function installComponentHooks (data) {
      var hooks = data.hook || (data.hook = {});
      for (var i = 0; i < hooksToMerge.length; i++) {
        var key = hooksToMerge[i];
        var existing = hooks[key];
        var toMerge = componentVNodeHooks[key];
        if (existing !== toMerge && !(existing && existing._merged)) {
          hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;
        }
      }
    }
  
    function mergeHook$1 (f1, f2) {
      var merged = function (a, b) {
        // flow complains about extra args which is why we use any
        f1(a, b);
        f2(a, b);
      };
      merged._merged = true;
      return merged
    }
  
    // transform component v-model info (value and callback) into
    // prop and event handler respectively.
    function transformModel (options, data) {
      var prop = (options.model && options.model.prop) || 'value';
      var event = (options.model && options.model.event) || 'input'
      ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;
      var on = data.on || (data.on = {});
      var existing = on[event];
      var callback = data.model.callback;
      if (isDef(existing)) {
        if (
          Array.isArray(existing)
            ? existing.indexOf(callback) === -1
            : existing !== callback
        ) {
          on[event] = [callback].concat(existing);
        }
      } else {
        on[event] = callback;
      }
    }
  
    /*  */
  
    var SIMPLE_NORMALIZE = 1;
    var ALWAYS_NORMALIZE = 2;
  
    // wrapper function for providing a more flexible interface
    // without getting yelled at by flow
    function createElement (
      context,
      tag,
      data,
      children,
      normalizationType,
      alwaysNormalize
    ) {
      if (Array.isArray(data) || isPrimitive(data)) {
        normalizationType = children;
        children = data;
        data = undefined;
      }
      if (isTrue(alwaysNormalize)) {
        normalizationType = ALWAYS_NORMALIZE;
      }
      return _createElement(context, tag, data, children, normalizationType)
    }
  
    function _createElement (
      context,
      tag,
      data,
      children,
      normalizationType
    ) {
      if (isDef(data) && isDef((data).__ob__)) {
        warn(
          "Avoid using observed data object as vnode data: " + (JSON.stringify(data)) + "\n" +
          'Always create fresh vnode data objects in each render!',
          context
        );
        return createEmptyVNode()
      }
      // object syntax in v-bind
      if (isDef(data) && isDef(data.is)) {
        tag = data.is;
      }
      if (!tag) {
        // in case of component :is set to falsy value
        return createEmptyVNode()
      }
      // warn against non-primitive key
      if (isDef(data) && isDef(data.key) && !isPrimitive(data.key)
      ) {
        {
          warn(
            'Avoid using non-primitive value as key, ' +
            'use string/number value instead.',
            context
          );
        }
      }
      // support single function children as default scoped slot
      if (Array.isArray(children) &&
        typeof children[0] === 'function'
      ) {
        data = data || {};
        data.scopedSlots = { default: children[0] };
        children.length = 0;
      }
      if (normalizationType === ALWAYS_NORMALIZE) {
        children = normalizeChildren(children);
      } else if (normalizationType === SIMPLE_NORMALIZE) {
        children = simpleNormalizeChildren(children);
      }
      var vnode, ns;
      if (typeof tag === 'string') {
        var Ctor;
        ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);
        if (config.isReservedTag(tag)) {
          // platform built-in elements
          if (isDef(data) && isDef(data.nativeOn) && data.tag !== 'component') {
            warn(
              ("The .native modifier for v-on is only valid on components but it was used on <" + tag + ">."),
              context
            );
          }
          vnode = new VNode(
            config.parsePlatformTagName(tag), data, children,
            undefined, undefined, context
          );
        } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
          // component
          vnode = createComponent(Ctor, data, context, children, tag);
        } else {
          // unknown or unlisted namespaced elements
          // check at runtime because it may get assigned a namespace when its
          // parent normalizes children
          vnode = new VNode(
            tag, data, children,
            undefined, undefined, context
          );
        }
      } else {
        // direct component options / constructor
        vnode = createComponent(tag, data, context, children);
      }
      if (Array.isArray(vnode)) {
        return vnode
      } else if (isDef(vnode)) {
        if (isDef(ns)) { applyNS(vnode, ns); }
        if (isDef(data)) { registerDeepBindings(data); }
        return vnode
      } else {
        return createEmptyVNode()
      }
    }
  
    function applyNS (vnode, ns, force) {
      vnode.ns = ns;
      if (vnode.tag === 'foreignObject') {
        // use default namespace inside foreignObject
        ns = undefined;
        force = true;
      }
      if (isDef(vnode.children)) {
        for (var i = 0, l = vnode.children.length; i < l; i++) {
          var child = vnode.children[i];
          if (isDef(child.tag) && (
            isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {
            applyNS(child, ns, force);
          }
        }
      }
    }
  
    // ref #5318
    // necessary to ensure parent re-render when deep bindings like :style and
    // :class are used on slot nodes
    function registerDeepBindings (data) {
      if (isObject(data.style)) {
        traverse(data.style);
      }
      if (isObject(data.class)) {
        traverse(data.class);
      }
    }
  
    /*  */
  
    function initRender (vm) {
      vm._vnode = null; // the root of the child tree
      vm._staticTrees = null; // v-once cached trees
      var options = vm.$options;
      var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree
      var renderContext = parentVnode && parentVnode.context;
      vm.$slots = resolveSlots(options._renderChildren, renderContext);
      vm.$scopedSlots = emptyObject;
      // bind the createElement fn to this instance
      // so that we get proper render context inside it.
      // args order: tag, data, children, normalizationType, alwaysNormalize
      // internal version is used by render functions compiled from templates
      vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };
      // normalization is always applied for the public version, used in
      // user-written render functions.
      vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };
  
      // $attrs & $listeners are exposed for easier HOC creation.
      // they need to be reactive so that HOCs using them are always updated
      var parentData = parentVnode && parentVnode.data;
  
      /* istanbul ignore else */
      {
        defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {
          !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
        }, true);
        defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {
          !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
        }, true);
      }
    }
  
    var currentRenderingInstance = null;
  
    function renderMixin (Vue) {
      // install runtime convenience helpers
      installRenderHelpers(Vue.prototype);
  
      Vue.prototype.$nextTick = function (fn) {
        return nextTick(fn, this)
      };
  
      Vue.prototype._render = function () {
        var vm = this;
        var ref = vm.$options;
        var render = ref.render;
        var _parentVnode = ref._parentVnode;
  
        if (_parentVnode) {
          vm.$scopedSlots = normalizeScopedSlots(
            _parentVnode.data.scopedSlots,
            vm.$slots,
            vm.$scopedSlots
          );
        }
  
        // set parent vnode. this allows render functions to have access
        // to the data on the placeholder node.
        vm.$vnode = _parentVnode;
        // render self
        var vnode;
        try {
          // There's no need to maintain a stack because all render fns are called
          // separately from one another. Nested component's render fns are called
          // when parent component is patched.
          currentRenderingInstance = vm;
          vnode = render.call(vm._renderProxy, vm.$createElement);
        } catch (e) {
          handleError(e, vm, "render");
          // return error render result,
          // or previous vnode to prevent render error causing blank component
          /* istanbul ignore else */
          if (vm.$options.renderError) {
            try {
              vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
            } catch (e) {
              handleError(e, vm, "renderError");
              vnode = vm._vnode;
            }
          } else {
            vnode = vm._vnode;
          }
        } finally {
          currentRenderingInstance = null;
        }
        // if the returned array contains only a single node, allow it
        if (Array.isArray(vnode) && vnode.length === 1) {
          vnode = vnode[0];
        }
        // return empty vnode in case the render function errored out
        if (!(vnode instanceof VNode)) {
          if (Array.isArray(vnode)) {
            warn(
              'Multiple root nodes returned from render function. Render function ' +
              'should return a single root node.',
              vm
            );
          }
          vnode = createEmptyVNode();
        }
        // set parent
        vnode.parent = _parentVnode;
        return vnode
      };
    }
  
    /*  */
  
    function ensureCtor (comp, base) {
      if (
        comp.__esModule ||
        (hasSymbol && comp[Symbol.toStringTag] === 'Module')
      ) {
        comp = comp.default;
      }
      return isObject(comp)
        ? base.extend(comp)
        : comp
    }
  
    function createAsyncPlaceholder (
      factory,
      data,
      context,
      children,
      tag
    ) {
      var node = createEmptyVNode();
      node.asyncFactory = factory;
      node.asyncMeta = { data: data, context: context, children: children, tag: tag };
      return node
    }
  
    function resolveAsyncComponent (
      factory,
      baseCtor
    ) {
      if (isTrue(factory.error) && isDef(factory.errorComp)) {
        return factory.errorComp
      }
  
      if (isDef(factory.resolved)) {
        return factory.resolved
      }
  
      var owner = currentRenderingInstance;
      if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {
        // already pending
        factory.owners.push(owner);
      }
  
      if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
        return factory.loadingComp
      }
  
      if (owner && !isDef(factory.owners)) {
        var owners = factory.owners = [owner];
        var sync = true;
        var timerLoading = null;
        var timerTimeout = null
  
        ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });
  
        var forceRender = function (renderCompleted) {
          for (var i = 0, l = owners.length; i < l; i++) {
            (owners[i]).$forceUpdate();
          }
  
          if (renderCompleted) {
            owners.length = 0;
            if (timerLoading !== null) {
              clearTimeout(timerLoading);
              timerLoading = null;
            }
            if (timerTimeout !== null) {
              clearTimeout(timerTimeout);
              timerTimeout = null;
            }
          }
        };
  
        var resolve = once(function (res) {
          // cache resolved
          factory.resolved = ensureCtor(res, baseCtor);
          // invoke callbacks only if this is not a synchronous resolve
          // (async resolves are shimmed as synchronous during SSR)
          if (!sync) {
            forceRender(true);
          } else {
            owners.length = 0;
          }
        });
  
        var reject = once(function (reason) {
          warn(
            "Failed to resolve async component: " + (String(factory)) +
            (reason ? ("\nReason: " + reason) : '')
          );
          if (isDef(factory.errorComp)) {
            factory.error = true;
            forceRender(true);
          }
        });
  
        var res = factory(resolve, reject);
  
        if (isObject(res)) {
          if (isPromise(res)) {
            // () => Promise
            if (isUndef(factory.resolved)) {
              res.then(resolve, reject);
            }
          } else if (isPromise(res.component)) {
            res.component.then(resolve, reject);
  
            if (isDef(res.error)) {
              factory.errorComp = ensureCtor(res.error, baseCtor);
            }
  
            if (isDef(res.loading)) {
              factory.loadingComp = ensureCtor(res.loading, baseCtor);
              if (res.delay === 0) {
                factory.loading = true;
              } else {
                timerLoading = setTimeout(function () {
                  timerLoading = null;
                  if (isUndef(factory.resolved) && isUndef(factory.error)) {
                    factory.loading = true;
                    forceRender(false);
                  }
                }, res.delay || 200);
              }
            }
  
            if (isDef(res.timeout)) {
              timerTimeout = setTimeout(function () {
                timerTimeout = null;
                if (isUndef(factory.resolved)) {
                  reject(
                    "timeout (" + (res.timeout) + "ms)"
                  );
                }
              }, res.timeout);
            }
          }
        }
  
        sync = false;
        // return in case resolved synchronously
        return factory.loading
          ? factory.loadingComp
          : factory.resolved
      }
    }
  
    /*  */
  
    function getFirstComponentChild (children) {
      if (Array.isArray(children)) {
        for (var i = 0; i < children.length; i++) {
          var c = children[i];
          if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
            return c
          }
        }
      }
    }
  
    /*  */
  
    /*  */
  
    function initEvents (vm) {
      vm._events = Object.create(null);
      vm._hasHookEvent = false;
      // init parent attached events
      var listeners = vm.$options._parentListeners;
      if (listeners) {
        updateComponentListeners(vm, listeners);
      }
    }
  
    var target;
  
    function add (event, fn) {
      target.$on(event, fn);
    }
  
    function remove$1 (event, fn) {
      target.$off(event, fn);
    }
  
    function createOnceHandler (event, fn) {
      var _target = target;
      return function onceHandler () {
        var res = fn.apply(null, arguments);
        if (res !== null) {
          _target.$off(event, onceHandler);
        }
      }
    }
  
    function updateComponentListeners (
      vm,
      listeners,
      oldListeners
    ) {
      target = vm;
      updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);
      target = undefined;
    }
  
    function eventsMixin (Vue) {
      var hookRE = /^hook:/;
      Vue.prototype.$on = function (event, fn) {
        var vm = this;
        if (Array.isArray(event)) {
          for (var i = 0, l = event.length; i < l; i++) {
            vm.$on(event[i], fn);
          }
        } else {
          (vm._events[event] || (vm._events[event] = [])).push(fn);
          // optimize hook:event cost by using a boolean flag marked at registration
          // instead of a hash lookup
          if (hookRE.test(event)) {
            vm._hasHookEvent = true;
          }
        }
        return vm
      };
  
      Vue.prototype.$once = function (event, fn) {
        var vm = this;
        function on () {
          vm.$off(event, on);
          fn.apply(vm, arguments);
        }
        on.fn = fn;
        vm.$on(event, on);
        return vm
      };
  
      Vue.prototype.$off = function (event, fn) {
        var vm = this;
        // all
        if (!arguments.length) {
          vm._events = Object.create(null);
          return vm
        }
        // array of events
        if (Array.isArray(event)) {
          for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {
            vm.$off(event[i$1], fn);
          }
          return vm
        }
        // specific event
        var cbs = vm._events[event];
        if (!cbs) {
          return vm
        }
        if (!fn) {
          vm._events[event] = null;
          return vm
        }
        // specific handler
        var cb;
        var i = cbs.length;
        while (i--) {
          cb = cbs[i];
          if (cb === fn || cb.fn === fn) {
            cbs.splice(i, 1);
            break
          }
        }
        return vm
      };
  
      Vue.prototype.$emit = function (event) {
        var vm = this;
        {
          var lowerCaseEvent = event.toLowerCase();
          if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
            tip(
              "Event \"" + lowerCaseEvent + "\" is emitted in component " +
              (formatComponentName(vm)) + " but the handler is registered for \"" + event + "\". " +
              "Note that HTML attributes are case-insensitive and you cannot use " +
              "v-on to listen to camelCase events when using in-DOM templates. " +
              "You should probably use \"" + (hyphenate(event)) + "\" instead of \"" + event + "\"."
            );
          }
        }
        var cbs = vm._events[event];
        if (cbs) {
          cbs = cbs.length > 1 ? toArray(cbs) : cbs;
          var args = toArray(arguments, 1);
          var info = "event handler for \"" + event + "\"";
          for (var i = 0, l = cbs.length; i < l; i++) {
            invokeWithErrorHandling(cbs[i], vm, args, vm, info);
          }
        }
        return vm
      };
    }
  
    /*  */
  
    var activeInstance = null;
    var isUpdatingChildComponent = false;
  
    function setActiveInstance(vm) {
      var prevActiveInstance = activeInstance;
      activeInstance = vm;
      return function () {
        activeInstance = prevActiveInstance;
      }
    }
  
    function initLifecycle (vm) {
      var options = vm.$options;
  
      // locate first non-abstract parent
      var parent = options.parent;
      if (parent && !options.abstract) {
        while (parent.$options.abstract && parent.$parent) {
          parent = parent.$parent;
        }
        parent.$children.push(vm);
      }
  
      vm.$parent = parent;
      vm.$root = parent ? parent.$root : vm;
  
      vm.$children = [];
      vm.$refs = {};
  
      vm._watcher = null;
      vm._inactive = null;
      vm._directInactive = false;
      vm._isMounted = false;
      vm._isDestroyed = false;
      vm._isBeingDestroyed = false;
    }
  
    function lifecycleMixin (Vue) {
      Vue.prototype._update = function (vnode, hydrating) {
        var vm = this;
        var prevEl = vm.$el;
        var prevVnode = vm._vnode;
        var restoreActiveInstance = setActiveInstance(vm);
        vm._vnode = vnode;
        // Vue.prototype.__patch__ is injected in entry points
        // based on the rendering backend used.
        if (!prevVnode) {
          // initial render
          vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);
        } else {
          // updates
          vm.$el = vm.__patch__(prevVnode, vnode);
        }
        restoreActiveInstance();
        // update __vue__ reference
        if (prevEl) {
          prevEl.__vue__ = null;
        }
        if (vm.$el) {
          vm.$el.__vue__ = vm;
        }
        // if parent is an HOC, update its $el as well
        if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
          vm.$parent.$el = vm.$el;
        }
        // updated hook is called by the scheduler to ensure that children are
        // updated in a parent's updated hook.
      };
  
      Vue.prototype.$forceUpdate = function () {
        var vm = this;
        if (vm._watcher) {
          vm._watcher.update();
        }
      };
  
      Vue.prototype.$destroy = function () {
        var vm = this;
        if (vm._isBeingDestroyed) {
          return
        }
        callHook(vm, 'beforeDestroy');
        vm._isBeingDestroyed = true;
        // remove self from parent
        var parent = vm.$parent;
        if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
          remove(parent.$children, vm);
        }
        // teardown watchers
        if (vm._watcher) {
          vm._watcher.teardown();
        }
        var i = vm._watchers.length;
        while (i--) {
          vm._watchers[i].teardown();
        }
        // remove reference from data ob
        // frozen object may not have observer.
        if (vm._data.__ob__) {
          vm._data.__ob__.vmCount--;
        }
        // call the last hook...
        vm._isDestroyed = true;
        // invoke destroy hooks on current rendered tree
        vm.__patch__(vm._vnode, null);
        // fire destroyed hook
        callHook(vm, 'destroyed');
        // turn off all instance listeners.
        vm.$off();
        // remove __vue__ reference
        if (vm.$el) {
          vm.$el.__vue__ = null;
        }
        // release circular reference (#6759)
        if (vm.$vnode) {
          vm.$vnode.parent = null;
        }
      };
    }
  
    function mountComponent (
      vm,
      el,
      hydrating
    ) {
      vm.$el = el;
      if (!vm.$options.render) {
        vm.$options.render = createEmptyVNode;
        {
          /* istanbul ignore if */
          if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||
            vm.$options.el || el) {
            warn(
              'You are using the runtime-only build of Vue where the template ' +
              'compiler is not available. Either pre-compile the templates into ' +
              'render functions, or use the compiler-included build.',
              vm
            );
          } else {
            warn(
              'Failed to mount component: template or render function not defined.',
              vm
            );
          }
        }
      }
      callHook(vm, 'beforeMount');
  
      var updateComponent;
      /* istanbul ignore if */
      if (config.performance && mark) {
        updateComponent = function () {
          var name = vm._name;
          var id = vm._uid;
          var startTag = "vue-perf-start:" + id;
          var endTag = "vue-perf-end:" + id;
  
          mark(startTag);
          var vnode = vm._render();
          mark(endTag);
          measure(("vue " + name + " render"), startTag, endTag);
  
          mark(startTag);
          vm._update(vnode, hydrating);
          mark(endTag);
          measure(("vue " + name + " patch"), startTag, endTag);
        };
      } else {
        updateComponent = function () {
          vm._update(vm._render(), hydrating);
        };
      }
  
      // we set this to vm._watcher inside the watcher's constructor
      // since the watcher's initial patch may call $forceUpdate (e.g. inside child
      // component's mounted hook), which relies on vm._watcher being already defined
      new Watcher(vm, updateComponent, noop, {
        before: function before () {
          if (vm._isMounted && !vm._isDestroyed) {
            callHook(vm, 'beforeUpdate');
          }
        }
      }, true /* isRenderWatcher */);
      hydrating = false;
  
      // manually mounted instance, call mounted on self
      // mounted is called for render-created child components in its inserted hook
      if (vm.$vnode == null) {
        vm._isMounted = true;
        callHook(vm, 'mounted');
      }
      return vm
    }
  
    function updateChildComponent (
      vm,
      propsData,
      listeners,
      parentVnode,
      renderChildren
    ) {
      {
        isUpdatingChildComponent = true;
      }
  
      // determine whether component has slot children
      // we need to do this before overwriting $options._renderChildren.
  
      // check if there are dynamic scopedSlots (hand-written or compiled but with
      // dynamic slot names). Static scoped slots compiled from template has the
      // "$stable" marker.
      var newScopedSlots = parentVnode.data.scopedSlots;
      var oldScopedSlots = vm.$scopedSlots;
      var hasDynamicScopedSlot = !!(
        (newScopedSlots && !newScopedSlots.$stable) ||
        (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||
        (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key) ||
        (!newScopedSlots && vm.$scopedSlots.$key)
      );
  
      // Any static slot children from the parent may have changed during parent's
      // update. Dynamic scoped slots may also have changed. In such cases, a forced
      // update is necessary to ensure correctness.
      var needsForceUpdate = !!(
        renderChildren ||               // has new static slots
        vm.$options._renderChildren ||  // has old static slots
        hasDynamicScopedSlot
      );
  
      vm.$options._parentVnode = parentVnode;
      vm.$vnode = parentVnode; // update vm's placeholder node without re-render
  
      if (vm._vnode) { // update child tree's parent
        vm._vnode.parent = parentVnode;
      }
      vm.$options._renderChildren = renderChildren;
  
      // update $attrs and $listeners hash
      // these are also reactive so they may trigger child update if the child
      // used them during render
      vm.$attrs = parentVnode.data.attrs || emptyObject;
      vm.$listeners = listeners || emptyObject;
  
      // update props
      if (propsData && vm.$options.props) {
        toggleObserving(false);
        var props = vm._props;
        var propKeys = vm.$options._propKeys || [];
        for (var i = 0; i < propKeys.length; i++) {
          var key = propKeys[i];
          var propOptions = vm.$options.props; // wtf flow?
          props[key] = validateProp(key, propOptions, propsData, vm);
        }
        toggleObserving(true);
        // keep a copy of raw propsData
        vm.$options.propsData = propsData;
      }
  
      // update listeners
      listeners = listeners || emptyObject;
      var oldListeners = vm.$options._parentListeners;
      vm.$options._parentListeners = listeners;
      updateComponentListeners(vm, listeners, oldListeners);
  
      // resolve slots + force update if has children
      if (needsForceUpdate) {
        vm.$slots = resolveSlots(renderChildren, parentVnode.context);
        vm.$forceUpdate();
      }
  
      {
        isUpdatingChildComponent = false;
      }
    }
  
    function isInInactiveTree (vm) {
      while (vm && (vm = vm.$parent)) {
        if (vm._inactive) { return true }
      }
      return false
    }
  
    function activateChildComponent (vm, direct) {
      if (direct) {
        vm._directInactive = false;
        if (isInInactiveTree(vm)) {
          return
        }
      } else if (vm._directInactive) {
        return
      }
      if (vm._inactive || vm._inactive === null) {
        vm._inactive = false;
        for (var i = 0; i < vm.$children.length; i++) {
          activateChildComponent(vm.$children[i]);
        }
        callHook(vm, 'activated');
      }
    }
  
    function deactivateChildComponent (vm, direct) {
      if (direct) {
        vm._directInactive = true;
        if (isInInactiveTree(vm)) {
          return
        }
      }
      if (!vm._inactive) {
        vm._inactive = true;
        for (var i = 0; i < vm.$children.length; i++) {
          deactivateChildComponent(vm.$children[i]);
        }
        callHook(vm, 'deactivated');
      }
    }
  
    function callHook (vm, hook) {
      // #7573 disable dep collection when invoking lifecycle hooks
      pushTarget();
      var handlers = vm.$options[hook];
      var info = hook + " hook";
      if (handlers) {
        for (var i = 0, j = handlers.length; i < j; i++) {
          invokeWithErrorHandling(handlers[i], vm, null, vm, info);
        }
      }
      if (vm._hasHookEvent) {
        vm.$emit('hook:' + hook);
      }
      popTarget();
    }
  
    /*  */
  
    var MAX_UPDATE_COUNT = 100;
  
    var queue = [];
    var activatedChildren = [];
    var has = {};
    var circular = {};
    var waiting = false;
    var flushing = false;
    var index = 0;
  
    /**
     * Reset the scheduler's state.
     */
    function resetSchedulerState () {
      index = queue.length = activatedChildren.length = 0;
      has = {};
      {
        circular = {};
      }
      waiting = flushing = false;
    }
  
    // Async edge case #6566 requires saving the timestamp when event listeners are
    // attached. However, calling performance.now() has a perf overhead especially
    // if the page has thousands of event listeners. Instead, we take a timestamp
    // every time the scheduler flushes and use that for all event listeners
    // attached during that flush.
    var currentFlushTimestamp = 0;
  
    // Async edge case fix requires storing an event listener's attach timestamp.
    var getNow = Date.now;
  
    // Determine what event timestamp the browser is using. Annoyingly, the
    // timestamp can either be hi-res (relative to page load) or low-res
    // (relative to UNIX epoch), so in order to compare time we have to use the
    // same timestamp type when saving the flush timestamp.
    // All IE versions use low-res event timestamps, and have problematic clock
    // implementations (#9632)
    if (inBrowser && !isIE) {
      var performance = window.performance;
      if (
        performance &&
        typeof performance.now === 'function' &&
        getNow() > document.createEvent('Event').timeStamp
      ) {
        // if the event timestamp, although evaluated AFTER the Date.now(), is
        // smaller than it, it means the event is using a hi-res timestamp,
        // and we need to use the hi-res version for event listener timestamps as
        // well.
        getNow = function () { return performance.now(); };
      }
    }
  
    /**
     * Flush both queues and run the watchers.
     */
    function flushSchedulerQueue () {
      currentFlushTimestamp = getNow();
      flushing = true;
      var watcher, id;
  
      // Sort queue before flush.
      // This ensures that:
      // 1. Components are updated from parent to child. (because parent is always
      //    created before the child)
      // 2. A component's user watchers are run before its render watcher (because
      //    user watchers are created before the render watcher)
      // 3. If a component is destroyed during a parent component's watcher run,
      //    its watchers can be skipped.
      queue.sort(function (a, b) { return a.id - b.id; });
  
      // do not cache length because more watchers might be pushed
      // as we run existing watchers
      for (index = 0; index < queue.length; index++) {
        watcher = queue[index];
        if (watcher.before) {
          watcher.before();
        }
        id = watcher.id;
        has[id] = null;
        watcher.run();
        // in dev build, check and stop circular updates.
        if (has[id] != null) {
          circular[id] = (circular[id] || 0) + 1;
          if (circular[id] > MAX_UPDATE_COUNT) {
            warn(
              'You may have an infinite update loop ' + (
                watcher.user
                  ? ("in watcher with expression \"" + (watcher.expression) + "\"")
                  : "in a component render function."
              ),
              watcher.vm
            );
            break
          }
        }
      }
  
      // keep copies of post queues before resetting state
      var activatedQueue = activatedChildren.slice();
      var updatedQueue = queue.slice();
  
      resetSchedulerState();
  
      // call component updated and activated hooks
      callActivatedHooks(activatedQueue);
      callUpdatedHooks(updatedQueue);
  
      // devtool hook
      /* istanbul ignore if */
      if (devtools && config.devtools) {
        devtools.emit('flush');
      }
    }
  
    function callUpdatedHooks (queue) {
      var i = queue.length;
      while (i--) {
        var watcher = queue[i];
        var vm = watcher.vm;
        if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {
          callHook(vm, 'updated');
        }
      }
    }
  
    /**
     * Queue a kept-alive component that was activated during patch.
     * The queue will be processed after the entire tree has been patched.
     */
    function queueActivatedComponent (vm) {
      // setting _inactive to false here so that a render function can
      // rely on checking whether it's in an inactive tree (e.g. router-view)
      vm._inactive = false;
      activatedChildren.push(vm);
    }
  
    function callActivatedHooks (queue) {
      for (var i = 0; i < queue.length; i++) {
        queue[i]._inactive = true;
        activateChildComponent(queue[i], true /* true */);
      }
    }
  
    /**
     * Push a watcher into the watcher queue.
     * Jobs with duplicate IDs will be skipped unless it's
     * pushed when the queue is being flushed.
     */
    function queueWatcher (watcher) {
      var id = watcher.id;
      if (has[id] == null) {
        has[id] = true;
        if (!flushing) {
          queue.push(watcher);
        } else {
          // if already flushing, splice the watcher based on its id
          // if already past its id, it will be run next immediately.
          var i = queue.length - 1;
          while (i > index && queue[i].id > watcher.id) {
            i--;
          }
          queue.splice(i + 1, 0, watcher);
        }
        // queue the flush
        if (!waiting) {
          waiting = true;
  
          if (!config.async) {
            flushSchedulerQueue();
            return
          }
          nextTick(flushSchedulerQueue);
        }
      }
    }
  
    /*  */
  
  
  
    var uid$2 = 0;
  
    /**
     * A watcher parses an expression, collects dependencies,
     * and fires callback when the expression value changes.
     * This is used for both the $watch() api and directives.
     */
    var Watcher = function Watcher (
      vm,
      expOrFn,
      cb,
      options,
      isRenderWatcher
    ) {
      this.vm = vm;
      if (isRenderWatcher) {
        vm._watcher = this;
      }
      vm._watchers.push(this);
      // options
      if (options) {
        this.deep = !!options.deep;
        this.user = !!options.user;
        this.lazy = !!options.lazy;
        this.sync = !!options.sync;
        this.before = options.before;
      } else {
        this.deep = this.user = this.lazy = this.sync = false;
      }
      this.cb = cb;
      this.id = ++uid$2; // uid for batching
      this.active = true;
      this.dirty = this.lazy; // for lazy watchers
      this.deps = [];
      this.newDeps = [];
      this.depIds = new _Set();
      this.newDepIds = new _Set();
      this.expression = expOrFn.toString();
      // parse expression for getter
      if (typeof expOrFn === 'function') {
        this.getter = expOrFn;
      } else {
        this.getter = parsePath(expOrFn);
        if (!this.getter) {
          this.getter = noop;
          warn(
            "Failed watching path: \"" + expOrFn + "\" " +
            'Watcher only accepts simple dot-delimited paths. ' +
            'For full control, use a function instead.',
            vm
          );
        }
      }
      this.value = this.lazy
        ? undefined
        : this.get();
    };
  
    /**
     * Evaluate the getter, and re-collect dependencies.
     */
    Watcher.prototype.get = function get () {
      pushTarget(this);
      var value;
      var vm = this.vm;
      try {
        value = this.getter.call(vm, vm);
      } catch (e) {
        if (this.user) {
          handleError(e, vm, ("getter for watcher \"" + (this.expression) + "\""));
        } else {
          throw e
        }
      } finally {
        // "touch" every property so they are all tracked as
        // dependencies for deep watching
        if (this.deep) {
          traverse(value);
        }
        popTarget();
        this.cleanupDeps();
      }
      return value
    };
  
    /**
     * Add a dependency to this directive.
     */
    Watcher.prototype.addDep = function addDep (dep) {
      var id = dep.id;
      if (!this.newDepIds.has(id)) {
        this.newDepIds.add(id);
        this.newDeps.push(dep);
        if (!this.depIds.has(id)) {
          dep.addSub(this);
        }
      }
    };
  
    /**
     * Clean up for dependency collection.
     */
    Watcher.prototype.cleanupDeps = function cleanupDeps () {
      var i = this.deps.length;
      while (i--) {
        var dep = this.deps[i];
        if (!this.newDepIds.has(dep.id)) {
          dep.removeSub(this);
        }
      }
      var tmp = this.depIds;
      this.depIds = this.newDepIds;
      this.newDepIds = tmp;
      this.newDepIds.clear();
      tmp = this.deps;
      this.deps = this.newDeps;
      this.newDeps = tmp;
      this.newDeps.length = 0;
    };
  
    /**
     * Subscriber interface.
     * Will be called when a dependency changes.
     */
    Watcher.prototype.update = function update () {
      /* istanbul ignore else */
      if (this.lazy) {
        this.dirty = true;
      } else if (this.sync) {
        this.run();
      } else {
        queueWatcher(this);
      }
    };
  
    /**
     * Scheduler job interface.
     * Will be called by the scheduler.
     */
    Watcher.prototype.run = function run () {
      if (this.active) {
        var value = this.get();
        if (
          value !== this.value ||
          // Deep watchers and watchers on Object/Arrays should fire even
          // when the value is the same, because the value may
          // have mutated.
          isObject(value) ||
          this.deep
        ) {
          // set new value
          var oldValue = this.value;
          this.value = value;
          if (this.user) {
            var info = "callback for watcher \"" + (this.expression) + "\"";
            invokeWithErrorHandling(this.cb, this.vm, [value, oldValue], this.vm, info);
          } else {
            this.cb.call(this.vm, value, oldValue);
          }
        }
      }
    };
  
    /**
     * Evaluate the value of the watcher.
     * This only gets called for lazy watchers.
     */
    Watcher.prototype.evaluate = function evaluate () {
      this.value = this.get();
      this.dirty = false;
    };
  
    /**
     * Depend on all deps collected by this watcher.
     */
    Watcher.prototype.depend = function depend () {
      var i = this.deps.length;
      while (i--) {
        this.deps[i].depend();
      }
    };
  
    /**
     * Remove self from all dependencies' subscriber list.
     */
    Watcher.prototype.teardown = function teardown () {
      if (this.active) {
        // remove self from vm's watcher list
        // this is a somewhat expensive operation so we skip it
        // if the vm is being destroyed.
        if (!this.vm._isBeingDestroyed) {
          remove(this.vm._watchers, this);
        }
        var i = this.deps.length;
        while (i--) {
          this.deps[i].removeSub(this);
        }
        this.active = false;
      }
    };
  
    /*  */
  
    var sharedPropertyDefinition = {
      enumerable: true,
      configurable: true,
      get: noop,
      set: noop
    };
  
    function proxy (target, sourceKey, key) {
      sharedPropertyDefinition.get = function proxyGetter () {
        return this[sourceKey][key]
      };
      sharedPropertyDefinition.set = function proxySetter (val) {
        this[sourceKey][key] = val;
      };
      Object.defineProperty(target, key, sharedPropertyDefinition);
    }
  
    function initState (vm) {
      vm._watchers = [];
      var opts = vm.$options;
      if (opts.props) { initProps(vm, opts.props); }
      if (opts.methods) { initMethods(vm, opts.methods); }
      if (opts.data) {
        initData(vm);
      } else {
        observe(vm._data = {}, true /* asRootData */);
      }
      if (opts.computed) { initComputed(vm, opts.computed); }
      if (opts.watch && opts.watch !== nativeWatch) {
        initWatch(vm, opts.watch);
      }
    }
  
    function initProps (vm, propsOptions) {
      var propsData = vm.$options.propsData || {};
      var props = vm._props = {};
      // cache prop keys so that future props updates can iterate using Array
      // instead of dynamic object key enumeration.
      var keys = vm.$options._propKeys = [];
      var isRoot = !vm.$parent;
      // root instance props should be converted
      if (!isRoot) {
        toggleObserving(false);
      }
      var loop = function ( key ) {
        keys.push(key);
        var value = validateProp(key, propsOptions, propsData, vm);
        /* istanbul ignore else */
        {
          var hyphenatedKey = hyphenate(key);
          if (isReservedAttribute(hyphenatedKey) ||
              config.isReservedAttr(hyphenatedKey)) {
            warn(
              ("\"" + hyphenatedKey + "\" is a reserved attribute and cannot be used as component prop."),
              vm
            );
          }
          defineReactive$$1(props, key, value, function () {
            if (!isRoot && !isUpdatingChildComponent) {
              warn(
                "Avoid mutating a prop directly since the value will be " +
                "overwritten whenever the parent component re-renders. " +
                "Instead, use a data or computed property based on the prop's " +
                "value. Prop being mutated: \"" + key + "\"",
                vm
              );
            }
          });
        }
        // static props are already proxied on the component's prototype
        // during Vue.extend(). We only need to proxy props defined at
        // instantiation here.
        if (!(key in vm)) {
          proxy(vm, "_props", key);
        }
      };
  
      for (var key in propsOptions) loop( key );
      toggleObserving(true);
    }
  
    function initData (vm) {
      var data = vm.$options.data;
      data = vm._data = typeof data === 'function'
        ? getData(data, vm)
        : data || {};
      if (!isPlainObject(data)) {
        data = {};
        warn(
          'data functions should return an object:\n' +
          'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',
          vm
        );
      }
      // proxy data on instance
      var keys = Object.keys(data);
      var props = vm.$options.props;
      var methods = vm.$options.methods;
      var i = keys.length;
      while (i--) {
        var key = keys[i];
        {
          if (methods && hasOwn(methods, key)) {
            warn(
              ("Method \"" + key + "\" has already been defined as a data property."),
              vm
            );
          }
        }
        if (props && hasOwn(props, key)) {
          warn(
            "The data property \"" + key + "\" is already declared as a prop. " +
            "Use prop default value instead.",
            vm
          );
        } else if (!isReserved(key)) {
          proxy(vm, "_data", key);
        }
      }
      // observe data
      observe(data, true /* asRootData */);
    }
  
    function getData (data, vm) {
      // #7573 disable dep collection when invoking data getters
      pushTarget();
      try {
        return data.call(vm, vm)
      } catch (e) {
        handleError(e, vm, "data()");
        return {}
      } finally {
        popTarget();
      }
    }
  
    var computedWatcherOptions = { lazy: true };
  
    function initComputed (vm, computed) {
      // $flow-disable-line
      var watchers = vm._computedWatchers = Object.create(null);
      // computed properties are just getters during SSR
      var isSSR = isServerRendering();
  
      for (var key in computed) {
        var userDef = computed[key];
        var getter = typeof userDef === 'function' ? userDef : userDef.get;
        if (getter == null) {
          warn(
            ("Getter is missing for computed property \"" + key + "\"."),
            vm
          );
        }
  
        if (!isSSR) {
          // create internal watcher for the computed property.
          watchers[key] = new Watcher(
            vm,
            getter || noop,
            noop,
            computedWatcherOptions
          );
        }
  
        // component-defined computed properties are already defined on the
        // component prototype. We only need to define computed properties defined
        // at instantiation here.
        if (!(key in vm)) {
          defineComputed(vm, key, userDef);
        } else {
          if (key in vm.$data) {
            warn(("The computed property \"" + key + "\" is already defined in data."), vm);
          } else if (vm.$options.props && key in vm.$options.props) {
            warn(("The computed property \"" + key + "\" is already defined as a prop."), vm);
          } else if (vm.$options.methods && key in vm.$options.methods) {
            warn(("The computed property \"" + key + "\" is already defined as a method."), vm);
          }
        }
      }
    }
  
    function defineComputed (
      target,
      key,
      userDef
    ) {
      var shouldCache = !isServerRendering();
      if (typeof userDef === 'function') {
        sharedPropertyDefinition.get = shouldCache
          ? createComputedGetter(key)
          : createGetterInvoker(userDef);
        sharedPropertyDefinition.set = noop;
      } else {
        sharedPropertyDefinition.get = userDef.get
          ? shouldCache && userDef.cache !== false
            ? createComputedGetter(key)
            : createGetterInvoker(userDef.get)
          : noop;
        sharedPropertyDefinition.set = userDef.set || noop;
      }
      if (sharedPropertyDefinition.set === noop) {
        sharedPropertyDefinition.set = function () {
          warn(
            ("Computed property \"" + key + "\" was assigned to but it has no setter."),
            this
          );
        };
      }
      Object.defineProperty(target, key, sharedPropertyDefinition);
    }
  
    function createComputedGetter (key) {
      return function computedGetter () {
        var watcher = this._computedWatchers && this._computedWatchers[key];
        if (watcher) {
          if (watcher.dirty) {
            watcher.evaluate();
          }
          if (Dep.target) {
            watcher.depend();
          }
          return watcher.value
        }
      }
    }
  
    function createGetterInvoker(fn) {
      return function computedGetter () {
        return fn.call(this, this)
      }
    }
  
    function initMethods (vm, methods) {
      var props = vm.$options.props;
      for (var key in methods) {
        {
          if (typeof methods[key] !== 'function') {
            warn(
              "Method \"" + key + "\" has type \"" + (typeof methods[key]) + "\" in the component definition. " +
              "Did you reference the function correctly?",
              vm
            );
          }
          if (props && hasOwn(props, key)) {
            warn(
              ("Method \"" + key + "\" has already been defined as a prop."),
              vm
            );
          }
          if ((key in vm) && isReserved(key)) {
            warn(
              "Method \"" + key + "\" conflicts with an existing Vue instance method. " +
              "Avoid defining component methods that start with _ or $."
            );
          }
        }
        vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);
      }
    }
  
    function initWatch (vm, watch) {
      for (var key in watch) {
        var handler = watch[key];
        if (Array.isArray(handler)) {
          for (var i = 0; i < handler.length; i++) {
            createWatcher(vm, key, handler[i]);
          }
        } else {
          createWatcher(vm, key, handler);
        }
      }
    }
  
    function createWatcher (
      vm,
      expOrFn,
      handler,
      options
    ) {
      if (isPlainObject(handler)) {
        options = handler;
        handler = handler.handler;
      }
      if (typeof handler === 'string') {
        handler = vm[handler];
      }
      return vm.$watch(expOrFn, handler, options)
    }
  
    function stateMixin (Vue) {
      // flow somehow has problems with directly declared definition object
      // when using Object.defineProperty, so we have to procedurally build up
      // the object here.
      var dataDef = {};
      dataDef.get = function () { return this._data };
      var propsDef = {};
      propsDef.get = function () { return this._props };
      {
        dataDef.set = function () {
          warn(
            'Avoid replacing instance root $data. ' +
            'Use nested data properties instead.',
            this
          );
        };
        propsDef.set = function () {
          warn("$props is readonly.", this);
        };
      }
      Object.defineProperty(Vue.prototype, '$data', dataDef);
      Object.defineProperty(Vue.prototype, '$props', propsDef);
  
      Vue.prototype.$set = set;
      Vue.prototype.$delete = del;
  
      Vue.prototype.$watch = function (
        expOrFn,
        cb,
        options
      ) {
        var vm = this;
        if (isPlainObject(cb)) {
          return createWatcher(vm, expOrFn, cb, options)
        }
        options = options || {};
        options.user = true;
        var watcher = new Watcher(vm, expOrFn, cb, options);
        if (options.immediate) {
          var info = "callback for immediate watcher \"" + (watcher.expression) + "\"";
          pushTarget();
          invokeWithErrorHandling(cb, vm, [watcher.value], vm, info);
          popTarget();
        }
        return function unwatchFn () {
          watcher.teardown();
        }
      };
    }
  
    /*  */
  
    var uid$3 = 0;
  
    function initMixin (Vue) {
      Vue.prototype._init = function (options) {
        var vm = this;
        // a uid
        vm._uid = uid$3++;
  
        var startTag, endTag;
        /* istanbul ignore if */
        if (config.performance && mark) {
          startTag = "vue-perf-start:" + (vm._uid);
          endTag = "vue-perf-end:" + (vm._uid);
          mark(startTag);
        }
  
        // a flag to avoid this being observed
        vm._isVue = true;
        // merge options
        if (options && options._isComponent) {
          // optimize internal component instantiation
          // since dynamic options merging is pretty slow, and none of the
          // internal component options needs special treatment.
          initInternalComponent(vm, options);
        } else {
          vm.$options = mergeOptions(
            resolveConstructorOptions(vm.constructor),
            options || {},
            vm
          );
        }
        /* istanbul ignore else */
        {
          initProxy(vm);
        }
        // expose real self
        vm._self = vm;
        initLifecycle(vm);
        initEvents(vm);
        initRender(vm);
        callHook(vm, 'beforeCreate');
        initInjections(vm); // resolve injections before data/props
        initState(vm);
        initProvide(vm); // resolve provide after data/props
        callHook(vm, 'created');
  
        /* istanbul ignore if */
        if (config.performance && mark) {
          vm._name = formatComponentName(vm, false);
          mark(endTag);
          measure(("vue " + (vm._name) + " init"), startTag, endTag);
        }
  
        if (vm.$options.el) {
          vm.$mount(vm.$options.el);
        }
      };
    }
  
    function initInternalComponent (vm, options) {
      var opts = vm.$options = Object.create(vm.constructor.options);
      // doing this because it's faster than dynamic enumeration.
      var parentVnode = options._parentVnode;
      opts.parent = options.parent;
      opts._parentVnode = parentVnode;
  
      var vnodeComponentOptions = parentVnode.componentOptions;
      opts.propsData = vnodeComponentOptions.propsData;
      opts._parentListeners = vnodeComponentOptions.listeners;
      opts._renderChildren = vnodeComponentOptions.children;
      opts._componentTag = vnodeComponentOptions.tag;
  
      if (options.render) {
        opts.render = options.render;
        opts.staticRenderFns = options.staticRenderFns;
      }
    }
  
    function resolveConstructorOptions (Ctor) {
      var options = Ctor.options;
      if (Ctor.super) {
        var superOptions = resolveConstructorOptions(Ctor.super);
        var cachedSuperOptions = Ctor.superOptions;
        if (superOptions !== cachedSuperOptions) {
          // super option changed,
          // need to resolve new options.
          Ctor.superOptions = superOptions;
          // check if there are any late-modified/attached options (#4976)
          var modifiedOptions = resolveModifiedOptions(Ctor);
          // update base extend options
          if (modifiedOptions) {
            extend(Ctor.extendOptions, modifiedOptions);
          }
          options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
          if (options.name) {
            options.components[options.name] = Ctor;
          }
        }
      }
      return options
    }
  
    function resolveModifiedOptions (Ctor) {
      var modified;
      var latest = Ctor.options;
      var sealed = Ctor.sealedOptions;
      for (var key in latest) {
        if (latest[key] !== sealed[key]) {
          if (!modified) { modified = {}; }
          modified[key] = latest[key];
        }
      }
      return modified
    }
  
    function Vue (options) {
      if (!(this instanceof Vue)
      ) {
        warn('Vue is a constructor and should be called with the `new` keyword');
      }
      this._init(options);
    }
  
    initMixin(Vue);
    stateMixin(Vue);
    eventsMixin(Vue);
    lifecycleMixin(Vue);
    renderMixin(Vue);
  
    /*  */
  
    function initUse (Vue) {
      Vue.use = function (plugin) {
        var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));
        if (installedPlugins.indexOf(plugin) > -1) {
          return this
        }
  
        // additional parameters
        var args = toArray(arguments, 1);
        args.unshift(this);
        if (typeof plugin.install === 'function') {
          plugin.install.apply(plugin, args);
        } else if (typeof plugin === 'function') {
          plugin.apply(null, args);
        }
        installedPlugins.push(plugin);
        return this
      };
    }
  
    /*  */
  
    function initMixin$1 (Vue) {
      Vue.mixin = function (mixin) {
        this.options = mergeOptions(this.options, mixin);
        return this
      };
    }
  
    /*  */
  
    function initExtend (Vue) {
      /**
       * Each instance constructor, including Vue, has a unique
       * cid. This enables us to create wrapped "child
       * constructors" for prototypal inheritance and cache them.
       */
      Vue.cid = 0;
      var cid = 1;
  
      /**
       * Class inheritance
       */
      Vue.extend = function (extendOptions) {
        extendOptions = extendOptions || {};
        var Super = this;
        var SuperId = Super.cid;
        var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
        if (cachedCtors[SuperId]) {
          return cachedCtors[SuperId]
        }
  
        var name = extendOptions.name || Super.options.name;
        if (name) {
          validateComponentName(name);
        }
  
        var Sub = function VueComponent (options) {
          this._init(options);
        };
        Sub.prototype = Object.create(Super.prototype);
        Sub.prototype.constructor = Sub;
        Sub.cid = cid++;
        Sub.options = mergeOptions(
          Super.options,
          extendOptions
        );
        Sub['super'] = Super;
  
        // For props and computed properties, we define the proxy getters on
        // the Vue instances at extension time, on the extended prototype. This
        // avoids Object.defineProperty calls for each instance created.
        if (Sub.options.props) {
          initProps$1(Sub);
        }
        if (Sub.options.computed) {
          initComputed$1(Sub);
        }
  
        // allow further extension/mixin/plugin usage
        Sub.extend = Super.extend;
        Sub.mixin = Super.mixin;
        Sub.use = Super.use;
  
        // create asset registers, so extended classes
        // can have their private assets too.
        ASSET_TYPES.forEach(function (type) {
          Sub[type] = Super[type];
        });
        // enable recursive self-lookup
        if (name) {
          Sub.options.components[name] = Sub;
        }
  
        // keep a reference to the super options at extension time.
        // later at instantiation we can check if Super's options have
        // been updated.
        Sub.superOptions = Super.options;
        Sub.extendOptions = extendOptions;
        Sub.sealedOptions = extend({}, Sub.options);
  
        // cache constructor
        cachedCtors[SuperId] = Sub;
        return Sub
      };
    }
  
    function initProps$1 (Comp) {
      var props = Comp.options.props;
      for (var key in props) {
        proxy(Comp.prototype, "_props", key);
      }
    }
  
    function initComputed$1 (Comp) {
      var computed = Comp.options.computed;
      for (var key in computed) {
        defineComputed(Comp.prototype, key, computed[key]);
      }
    }
  
    /*  */
  
    function initAssetRegisters (Vue) {
      /**
       * Create asset registration methods.
       */
      ASSET_TYPES.forEach(function (type) {
        Vue[type] = function (
          id,
          definition
        ) {
          if (!definition) {
            return this.options[type + 's'][id]
          } else {
            /* istanbul ignore if */
            if (type === 'component') {
              validateComponentName(id);
            }
            if (type === 'component' && isPlainObject(definition)) {
              definition.name = definition.name || id;
              definition = this.options._base.extend(definition);
            }
            if (type === 'directive' && typeof definition === 'function') {
              definition = { bind: definition, update: definition };
            }
            this.options[type + 's'][id] = definition;
            return definition
          }
        };
      });
    }
  
    /*  */
  
  
  
  
  
    function getComponentName (opts) {
      return opts && (opts.Ctor.options.name || opts.tag)
    }
  
    function matches (pattern, name) {
      if (Array.isArray(pattern)) {
        return pattern.indexOf(name) > -1
      } else if (typeof pattern === 'string') {
        return pattern.split(',').indexOf(name) > -1
      } else if (isRegExp(pattern)) {
        return pattern.test(name)
      }
      /* istanbul ignore next */
      return false
    }
  
    function pruneCache (keepAliveInstance, filter) {
      var cache = keepAliveInstance.cache;
      var keys = keepAliveInstance.keys;
      var _vnode = keepAliveInstance._vnode;
      for (var key in cache) {
        var entry = cache[key];
        if (entry) {
          var name = entry.name;
          if (name && !filter(name)) {
            pruneCacheEntry(cache, key, keys, _vnode);
          }
        }
      }
    }
  
    function pruneCacheEntry (
      cache,
      key,
      keys,
      current
    ) {
      var entry = cache[key];
      if (entry && (!current || entry.tag !== current.tag)) {
        entry.componentInstance.$destroy();
      }
      cache[key] = null;
      remove(keys, key);
    }
  
    var patternTypes = [String, RegExp, Array];
  
    var KeepAlive = {
      name: 'keep-alive',
      abstract: true,
  
      props: {
        include: patternTypes,
        exclude: patternTypes,
        max: [String, Number]
      },
  
      methods: {
        cacheVNode: function cacheVNode() {
          var ref = this;
          var cache = ref.cache;
          var keys = ref.keys;
          var vnodeToCache = ref.vnodeToCache;
          var keyToCache = ref.keyToCache;
          if (vnodeToCache) {
            var tag = vnodeToCache.tag;
            var componentInstance = vnodeToCache.componentInstance;
            var componentOptions = vnodeToCache.componentOptions;
            cache[keyToCache] = {
              name: getComponentName(componentOptions),
              tag: tag,
              componentInstance: componentInstance,
            };
            keys.push(keyToCache);
            // prune oldest entry
            if (this.max && keys.length > parseInt(this.max)) {
              pruneCacheEntry(cache, keys[0], keys, this._vnode);
            }
            this.vnodeToCache = null;
          }
        }
      },
  
      created: function created () {
        this.cache = Object.create(null);
        this.keys = [];
      },
  
      destroyed: function destroyed () {
        for (var key in this.cache) {
          pruneCacheEntry(this.cache, key, this.keys);
        }
      },
  
      mounted: function mounted () {
        var this$1 = this;
  
        this.cacheVNode();
        this.$watch('include', function (val) {
          pruneCache(this$1, function (name) { return matches(val, name); });
        });
        this.$watch('exclude', function (val) {
          pruneCache(this$1, function (name) { return !matches(val, name); });
        });
      },
  
      updated: function updated () {
        this.cacheVNode();
      },
  
      render: function render () {
        var slot = this.$slots.default;
        var vnode = getFirstComponentChild(slot);
        var componentOptions = vnode && vnode.componentOptions;
        if (componentOptions) {
          // check pattern
          var name = getComponentName(componentOptions);
          var ref = this;
          var include = ref.include;
          var exclude = ref.exclude;
          if (
            // not included
            (include && (!name || !matches(include, name))) ||
            // excluded
            (exclude && name && matches(exclude, name))
          ) {
            return vnode
          }
  
          var ref$1 = this;
          var cache = ref$1.cache;
          var keys = ref$1.keys;
          var key = vnode.key == null
            // same constructor may get registered as different local components
            // so cid alone is not enough (#3269)
            ? componentOptions.Ctor.cid + (componentOptions.tag ? ("::" + (componentOptions.tag)) : '')
            : vnode.key;
          if (cache[key]) {
            vnode.componentInstance = cache[key].componentInstance;
            // make current key freshest
            remove(keys, key);
            keys.push(key);
          } else {
            // delay setting the cache until update
            this.vnodeToCache = vnode;
            this.keyToCache = key;
          }
  
          vnode.data.keepAlive = true;
        }
        return vnode || (slot && slot[0])
      }
    };
  
    var builtInComponents = {
      KeepAlive: KeepAlive
    };
  
    /*  */
  
    function initGlobalAPI (Vue) {
      // config
      var configDef = {};
      configDef.get = function () { return config; };
      {
        configDef.set = function () {
          warn(
            'Do not replace the Vue.config object, set individual fields instead.'
          );
        };
      }
      Object.defineProperty(Vue, 'config', configDef);
  
      // exposed util methods.
      // NOTE: these are not considered part of the public API - avoid relying on
      // them unless you are aware of the risk.
      Vue.util = {
        warn: warn,
        extend: extend,
        mergeOptions: mergeOptions,
        defineReactive: defineReactive$$1
      };
  
      Vue.set = set;
      Vue.delete = del;
      Vue.nextTick = nextTick;
  
      // 2.6 explicit observable API
      Vue.observable = function (obj) {
        observe(obj);
        return obj
      };
  
      Vue.options = Object.create(null);
      ASSET_TYPES.forEach(function (type) {
        Vue.options[type + 's'] = Object.create(null);
      });
  
      // this is used to identify the "base" constructor to extend all plain-object
      // components with in Weex's multi-instance scenarios.
      Vue.options._base = Vue;
  
      extend(Vue.options.components, builtInComponents);
  
      initUse(Vue);
      initMixin$1(Vue);
      initExtend(Vue);
      initAssetRegisters(Vue);
    }
  
    initGlobalAPI(Vue);
  
    Object.defineProperty(Vue.prototype, '$isServer', {
      get: isServerRendering
    });
  
    Object.defineProperty(Vue.prototype, '$ssrContext', {
      get: function get () {
        /* istanbul ignore next */
        return this.$vnode && this.$vnode.ssrContext
      }
    });
  
    // expose FunctionalRenderContext for ssr runtime helper installation
    Object.defineProperty(Vue, 'FunctionalRenderContext', {
      value: FunctionalRenderContext
    });
  
    Vue.version = '2.6.14';
  
    /*  */
  
    // these are reserved for web because they are directly compiled away
    // during template compilation
    var isReservedAttr = makeMap('style,class');
  
    // attributes that should be using props for binding
    var acceptValue = makeMap('input,textarea,option,select,progress');
    var mustUseProp = function (tag, type, attr) {
      return (
        (attr === 'value' && acceptValue(tag)) && type !== 'button' ||
        (attr === 'selected' && tag === 'option') ||
        (attr === 'checked' && tag === 'input') ||
        (attr === 'muted' && tag === 'video')
      )
    };
  
    var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');
  
    var isValidContentEditableValue = makeMap('events,caret,typing,plaintext-only');
  
    var convertEnumeratedValue = function (key, value) {
      return isFalsyAttrValue(value) || value === 'false'
        ? 'false'
        // allow arbitrary string value for contenteditable
        : key === 'contenteditable' && isValidContentEditableValue(value)
          ? value
          : 'true'
    };
  
    var isBooleanAttr = makeMap(
      'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +
      'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +
      'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +
      'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +
      'required,reversed,scoped,seamless,selected,sortable,' +
      'truespeed,typemustmatch,visible'
    );
  
    var xlinkNS = 'http://www.w3.org/1999/xlink';
  
    var isXlink = function (name) {
      return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'
    };
  
    var getXlinkProp = function (name) {
      return isXlink(name) ? name.slice(6, name.length) : ''
    };
  
    var isFalsyAttrValue = function (val) {
      return val == null || val === false
    };
  
    /*  */
  
    function genClassForVnode (vnode) {
      var data = vnode.data;
      var parentNode = vnode;
      var childNode = vnode;
      while (isDef(childNode.componentInstance)) {
        childNode = childNode.componentInstance._vnode;
        if (childNode && childNode.data) {
          data = mergeClassData(childNode.data, data);
        }
      }
      while (isDef(parentNode = parentNode.parent)) {
        if (parentNode && parentNode.data) {
          data = mergeClassData(data, parentNode.data);
        }
      }
      return renderClass(data.staticClass, data.class)
    }
  
    function mergeClassData (child, parent) {
      return {
        staticClass: concat(child.staticClass, parent.staticClass),
        class: isDef(child.class)
          ? [child.class, parent.class]
          : parent.class
      }
    }
  
    function renderClass (
      staticClass,
      dynamicClass
    ) {
      if (isDef(staticClass) || isDef(dynamicClass)) {
        return concat(staticClass, stringifyClass(dynamicClass))
      }
      /* istanbul ignore next */
      return ''
    }
  
    function concat (a, b) {
      return a ? b ? (a + ' ' + b) : a : (b || '')
    }
  
    function stringifyClass (value) {
      if (Array.isArray(value)) {
        return stringifyArray(value)
      }
      if (isObject(value)) {
        return stringifyObject(value)
      }
      if (typeof value === 'string') {
        return value
      }
      /* istanbul ignore next */
      return ''
    }
  
    function stringifyArray (value) {
      var res = '';
      var stringified;
      for (var i = 0, l = value.length; i < l; i++) {
        if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
          if (res) { res += ' '; }
          res += stringified;
        }
      }
      return res
    }
  
    function stringifyObject (value) {
      var res = '';
      for (var key in value) {
        if (value[key]) {
          if (res) { res += ' '; }
          res += key;
        }
      }
      return res
    }
  
    /*  */
  
    var namespaceMap = {
      svg: 'http://www.w3.org/2000/svg',
      math: 'http://www.w3.org/1998/Math/MathML'
    };
  
    var isHTMLTag = makeMap(
      'html,body,base,head,link,meta,style,title,' +
      'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +
      'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +
      'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +
      's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +
      'embed,object,param,source,canvas,script,noscript,del,ins,' +
      'caption,col,colgroup,table,thead,tbody,td,th,tr,' +
      'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +
      'output,progress,select,textarea,' +
      'details,dialog,menu,menuitem,summary,' +
      'content,element,shadow,template,blockquote,iframe,tfoot'
    );
  
    // this map is intentionally selective, only covering SVG elements that may
    // contain child elements.
    var isSVG = makeMap(
      'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +
      'foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +
      'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',
      true
    );
  
    var isPreTag = function (tag) { return tag === 'pre'; };
  
    var isReservedTag = function (tag) {
      return isHTMLTag(tag) || isSVG(tag)
    };
  
    function getTagNamespace (tag) {
      if (isSVG(tag)) {
        return 'svg'
      }
      // basic support for MathML
      // note it doesn't support other MathML elements being component roots
      if (tag === 'math') {
        return 'math'
      }
    }
  
    var unknownElementCache = Object.create(null);
    function isUnknownElement (tag) {
      /* istanbul ignore if */
      if (!inBrowser) {
        return true
      }
      if (isReservedTag(tag)) {
        return false
      }
      tag = tag.toLowerCase();
      /* istanbul ignore if */
      if (unknownElementCache[tag] != null) {
        return unknownElementCache[tag]
      }
      var el = document.createElement(tag);
      if (tag.indexOf('-') > -1) {
        // http://stackoverflow.com/a/28210364/1070244
        return (unknownElementCache[tag] = (
          el.constructor === window.HTMLUnknownElement ||
          el.constructor === window.HTMLElement
        ))
      } else {
        return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))
      }
    }
  
    var isTextInputType = makeMap('text,number,password,search,email,tel,url');
  
    /*  */
  
    /**
     * Query an element selector if it's not an element already.
     */
    function query (el) {
      if (typeof el === 'string') {
        var selected = document.querySelector(el);
        if (!selected) {
          warn(
            'Cannot find element: ' + el
          );
          return document.createElement('div')
        }
        return selected
      } else {
        return el
      }
    }
  
    /*  */
  
    function createElement$1 (tagName, vnode) {
      var elm = document.createElement(tagName);
      if (tagName !== 'select') {
        return elm
      }
      // false or null will remove the attribute but undefined will not
      if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
        elm.setAttribute('multiple', 'multiple');
      }
      return elm
    }
  
    function createElementNS (namespace, tagName) {
      return document.createElementNS(namespaceMap[namespace], tagName)
    }
  
    function createTextNode (text) {
      return document.createTextNode(text)
    }
  
    function createComment (text) {
      return document.createComment(text)
    }
  
    function insertBefore (parentNode, newNode, referenceNode) {
      parentNode.insertBefore(newNode, referenceNode);
    }
  
    function removeChild (node, child) {
      node.removeChild(child);
    }
  
    function appendChild (node, child) {
      node.appendChild(child);
    }
  
    function parentNode (node) {
      return node.parentNode
    }
  
    function nextSibling (node) {
      return node.nextSibling
    }
  
    function tagName (node) {
      return node.tagName
    }
  
    function setTextContent (node, text) {
      node.textContent = text;
    }
  
    function setStyleScope (node, scopeId) {
      node.setAttribute(scopeId, '');
    }
  
    var nodeOps = /*#__PURE__*/Object.freeze({
      createElement: createElement$1,
      createElementNS: createElementNS,
      createTextNode: createTextNode,
      createComment: createComment,
      insertBefore: insertBefore,
      removeChild: removeChild,
      appendChild: appendChild,
      parentNode: parentNode,
      nextSibling: nextSibling,
      tagName: tagName,
      setTextContent: setTextContent,
      setStyleScope: setStyleScope
    });
  
    /*  */
  
    var ref = {
      create: function create (_, vnode) {
        registerRef(vnode);
      },
      update: function update (oldVnode, vnode) {
        if (oldVnode.data.ref !== vnode.data.ref) {
          registerRef(oldVnode, true);
          registerRef(vnode);
        }
      },
      destroy: function destroy (vnode) {
        registerRef(vnode, true);
      }
    };
  
    function registerRef (vnode, isRemoval) {
      var key = vnode.data.ref;
      if (!isDef(key)) { return }
  
      var vm = vnode.context;
      var ref = vnode.componentInstance || vnode.elm;
      var refs = vm.$refs;
      if (isRemoval) {
        if (Array.isArray(refs[key])) {
          remove(refs[key], ref);
        } else if (refs[key] === ref) {
          refs[key] = undefined;
        }
      } else {
        if (vnode.data.refInFor) {
          if (!Array.isArray(refs[key])) {
            refs[key] = [ref];
          } else if (refs[key].indexOf(ref) < 0) {
            // $flow-disable-line
            refs[key].push(ref);
          }
        } else {
          refs[key] = ref;
        }
      }
    }
  
    /**
     * Virtual DOM patching algorithm based on Snabbdom by
     * Simon Friis Vindum (@paldepind)
     * Licensed under the MIT License
     * https://github.com/paldepind/snabbdom/blob/master/LICENSE
     *
     * modified by Evan You (@yyx990803)
     *
     * Not type-checking this because this file is perf-critical and the cost
     * of making flow understand it is not worth it.
     */
  
    var emptyNode = new VNode('', {}, []);
  
    var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];
  
    function sameVnode (a, b) {
      return (
        a.key === b.key &&
        a.asyncFactory === b.asyncFactory && (
          (
            a.tag === b.tag &&
            a.isComment === b.isComment &&
            isDef(a.data) === isDef(b.data) &&
            sameInputType(a, b)
          ) || (
            isTrue(a.isAsyncPlaceholder) &&
            isUndef(b.asyncFactory.error)
          )
        )
      )
    }
  
    function sameInputType (a, b) {
      if (a.tag !== 'input') { return true }
      var i;
      var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
      var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
      return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)
    }
  
    function createKeyToOldIdx (children, beginIdx, endIdx) {
      var i, key;
      var map = {};
      for (i = beginIdx; i <= endIdx; ++i) {
        key = children[i].key;
        if (isDef(key)) { map[key] = i; }
      }
      return map
    }
  
    function createPatchFunction (backend) {
      var i, j;
      var cbs = {};
  
      var modules = backend.modules;
      var nodeOps = backend.nodeOps;
  
      for (i = 0; i < hooks.length; ++i) {
        cbs[hooks[i]] = [];
        for (j = 0; j < modules.length; ++j) {
          if (isDef(modules[j][hooks[i]])) {
            cbs[hooks[i]].push(modules[j][hooks[i]]);
          }
        }
      }
  
      function emptyNodeAt (elm) {
        return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)
      }
  
      function createRmCb (childElm, listeners) {
        function remove$$1 () {
          if (--remove$$1.listeners === 0) {
            removeNode(childElm);
          }
        }
        remove$$1.listeners = listeners;
        return remove$$1
      }
  
      function removeNode (el) {
        var parent = nodeOps.parentNode(el);
        // element may have already been removed due to v-html / v-text
        if (isDef(parent)) {
          nodeOps.removeChild(parent, el);
        }
      }
  
      function isUnknownElement$$1 (vnode, inVPre) {
        return (
          !inVPre &&
          !vnode.ns &&
          !(
            config.ignoredElements.length &&
            config.ignoredElements.some(function (ignore) {
              return isRegExp(ignore)
                ? ignore.test(vnode.tag)
                : ignore === vnode.tag
            })
          ) &&
          config.isUnknownElement(vnode.tag)
        )
      }
  
      var creatingElmInVPre = 0;
  
      function createElm (
        vnode,
        insertedVnodeQueue,
        parentElm,
        refElm,
        nested,
        ownerArray,
        index
      ) {
        if (isDef(vnode.elm) && isDef(ownerArray)) {
          // This vnode was used in a previous render!
          // now it's used as a new node, overwriting its elm would cause
          // potential patch errors down the road when it's used as an insertion
          // reference node. Instead, we clone the node on-demand before creating
          // associated DOM element for it.
          vnode = ownerArray[index] = cloneVNode(vnode);
        }
  
        vnode.isRootInsert = !nested; // for transition enter check
        if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
          return
        }
  
        var data = vnode.data;
        var children = vnode.children;
        var tag = vnode.tag;
        if (isDef(tag)) {
          {
            if (data && data.pre) {
              creatingElmInVPre++;
            }
            if (isUnknownElement$$1(vnode, creatingElmInVPre)) {
              warn(
                'Unknown custom element: <' + tag + '> - did you ' +
                'register the component correctly? For recursive components, ' +
                'make sure to provide the "name" option.',
                vnode.context
              );
            }
          }
  
          vnode.elm = vnode.ns
            ? nodeOps.createElementNS(vnode.ns, tag)
            : nodeOps.createElement(tag, vnode);
          setScope(vnode);
  
          /* istanbul ignore if */
          {
            createChildren(vnode, children, insertedVnodeQueue);
            if (isDef(data)) {
              invokeCreateHooks(vnode, insertedVnodeQueue);
            }
            insert(parentElm, vnode.elm, refElm);
          }
  
          if (data && data.pre) {
            creatingElmInVPre--;
          }
        } else if (isTrue(vnode.isComment)) {
          vnode.elm = nodeOps.createComment(vnode.text);
          insert(parentElm, vnode.elm, refElm);
        } else {
          vnode.elm = nodeOps.createTextNode(vnode.text);
          insert(parentElm, vnode.elm, refElm);
        }
      }
  
      function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
        var i = vnode.data;
        if (isDef(i)) {
          var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;
          if (isDef(i = i.hook) && isDef(i = i.init)) {
            i(vnode, false /* hydrating */);
          }
          // after calling the init hook, if the vnode is a child component
          // it should've created a child instance and mounted it. the child
          // component also has set the placeholder vnode's elm.
          // in that case we can just return the element and be done.
          if (isDef(vnode.componentInstance)) {
            initComponent(vnode, insertedVnodeQueue);
            insert(parentElm, vnode.elm, refElm);
            if (isTrue(isReactivated)) {
              reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
            }
            return true
          }
        }
      }
  
      function initComponent (vnode, insertedVnodeQueue) {
        if (isDef(vnode.data.pendingInsert)) {
          insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
          vnode.data.pendingInsert = null;
        }
        vnode.elm = vnode.componentInstance.$el;
        if (isPatchable(vnode)) {
          invokeCreateHooks(vnode, insertedVnodeQueue);
          setScope(vnode);
        } else {
          // empty component root.
          // skip all element-related modules except for ref (#3455)
          registerRef(vnode);
          // make sure to invoke the insert hook
          insertedVnodeQueue.push(vnode);
        }
      }
  
      function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
        var i;
        // hack for #4339: a reactivated component with inner transition
        // does not trigger because the inner node's created hooks are not called
        // again. It's not ideal to involve module-specific logic in here but
        // there doesn't seem to be a better way to do it.
        var innerNode = vnode;
        while (innerNode.componentInstance) {
          innerNode = innerNode.componentInstance._vnode;
          if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
            for (i = 0; i < cbs.activate.length; ++i) {
              cbs.activate[i](emptyNode, innerNode);
            }
            insertedVnodeQueue.push(innerNode);
            break
          }
        }
        // unlike a newly created component,
        // a reactivated keep-alive component doesn't insert itself
        insert(parentElm, vnode.elm, refElm);
      }
  
      function insert (parent, elm, ref$$1) {
        if (isDef(parent)) {
          if (isDef(ref$$1)) {
            if (nodeOps.parentNode(ref$$1) === parent) {
              nodeOps.insertBefore(parent, elm, ref$$1);
            }
          } else {
            nodeOps.appendChild(parent, elm);
          }
        }
      }
  
      function createChildren (vnode, children, insertedVnodeQueue) {
        if (Array.isArray(children)) {
          {
            checkDuplicateKeys(children);
          }
          for (var i = 0; i < children.length; ++i) {
            createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);
          }
        } else if (isPrimitive(vnode.text)) {
          nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));
        }
      }
  
      function isPatchable (vnode) {
        while (vnode.componentInstance) {
          vnode = vnode.componentInstance._vnode;
        }
        return isDef(vnode.tag)
      }
  
      function invokeCreateHooks (vnode, insertedVnodeQueue) {
        for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
          cbs.create[i$1](emptyNode, vnode);
        }
        i = vnode.data.hook; // Reuse variable
        if (isDef(i)) {
          if (isDef(i.create)) { i.create(emptyNode, vnode); }
          if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }
        }
      }
  
      // set scope id attribute for scoped CSS.
      // this is implemented as a special case to avoid the overhead
      // of going through the normal attribute patching process.
      function setScope (vnode) {
        var i;
        if (isDef(i = vnode.fnScopeId)) {
          nodeOps.setStyleScope(vnode.elm, i);
        } else {
          var ancestor = vnode;
          while (ancestor) {
            if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
              nodeOps.setStyleScope(vnode.elm, i);
            }
            ancestor = ancestor.parent;
          }
        }
        // for slot content they should also get the scopeId from the host instance.
        if (isDef(i = activeInstance) &&
          i !== vnode.context &&
          i !== vnode.fnContext &&
          isDef(i = i.$options._scopeId)
        ) {
          nodeOps.setStyleScope(vnode.elm, i);
        }
      }
  
      function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
        for (; startIdx <= endIdx; ++startIdx) {
          createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
        }
      }
  
      function invokeDestroyHook (vnode) {
        var i, j;
        var data = vnode.data;
        if (isDef(data)) {
          if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }
          for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }
        }
        if (isDef(i = vnode.children)) {
          for (j = 0; j < vnode.children.length; ++j) {
            invokeDestroyHook(vnode.children[j]);
          }
        }
      }
  
      function removeVnodes (vnodes, startIdx, endIdx) {
        for (; startIdx <= endIdx; ++startIdx) {
          var ch = vnodes[startIdx];
          if (isDef(ch)) {
            if (isDef(ch.tag)) {
              removeAndInvokeRemoveHook(ch);
              invokeDestroyHook(ch);
            } else { // Text node
              removeNode(ch.elm);
            }
          }
        }
      }
  
      function removeAndInvokeRemoveHook (vnode, rm) {
        if (isDef(rm) || isDef(vnode.data)) {
          var i;
          var listeners = cbs.remove.length + 1;
          if (isDef(rm)) {
            // we have a recursively passed down rm callback
            // increase the listeners count
            rm.listeners += listeners;
          } else {
            // directly removing
            rm = createRmCb(vnode.elm, listeners);
          }
          // recursively invoke hooks on child component root node
          if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
            removeAndInvokeRemoveHook(i, rm);
          }
          for (i = 0; i < cbs.remove.length; ++i) {
            cbs.remove[i](vnode, rm);
          }
          if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
            i(vnode, rm);
          } else {
            rm();
          }
        } else {
          removeNode(vnode.elm);
        }
      }
  
      function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
        var oldStartIdx = 0;
        var newStartIdx = 0;
        var oldEndIdx = oldCh.length - 1;
        var oldStartVnode = oldCh[0];
        var oldEndVnode = oldCh[oldEndIdx];
        var newEndIdx = newCh.length - 1;
        var newStartVnode = newCh[0];
        var newEndVnode = newCh[newEndIdx];
        var oldKeyToIdx, idxInOld, vnodeToMove, refElm;
  
        // removeOnly is a special flag used only by <transition-group>
        // to ensure removed elements stay in correct relative positions
        // during leaving transitions
        var canMove = !removeOnly;
  
        {
          checkDuplicateKeys(newCh);
        }
  
        while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
          if (isUndef(oldStartVnode)) {
            oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
          } else if (isUndef(oldEndVnode)) {
            oldEndVnode = oldCh[--oldEndIdx];
          } else if (sameVnode(oldStartVnode, newStartVnode)) {
            patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
            oldStartVnode = oldCh[++oldStartIdx];
            newStartVnode = newCh[++newStartIdx];
          } else if (sameVnode(oldEndVnode, newEndVnode)) {
            patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
            oldEndVnode = oldCh[--oldEndIdx];
            newEndVnode = newCh[--newEndIdx];
          } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right
            patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
            canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
            oldStartVnode = oldCh[++oldStartIdx];
            newEndVnode = newCh[--newEndIdx];
          } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left
            patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
            canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
            oldEndVnode = oldCh[--oldEndIdx];
            newStartVnode = newCh[++newStartIdx];
          } else {
            if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }
            idxInOld = isDef(newStartVnode.key)
              ? oldKeyToIdx[newStartVnode.key]
              : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);
            if (isUndef(idxInOld)) { // New element
              createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
            } else {
              vnodeToMove = oldCh[idxInOld];
              if (sameVnode(vnodeToMove, newStartVnode)) {
                patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
                oldCh[idxInOld] = undefined;
                canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
              } else {
                // same key but different element. treat as new element
                createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
              }
            }
            newStartVnode = newCh[++newStartIdx];
          }
        }
        if (oldStartIdx > oldEndIdx) {
          refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
          addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
        } else if (newStartIdx > newEndIdx) {
          removeVnodes(oldCh, oldStartIdx, oldEndIdx);
        }
      }
  
      function checkDuplicateKeys (children) {
        var seenKeys = {};
        for (var i = 0; i < children.length; i++) {
          var vnode = children[i];
          var key = vnode.key;
          if (isDef(key)) {
            if (seenKeys[key]) {
              warn(
                ("Duplicate keys detected: '" + key + "'. This may cause an update error."),
                vnode.context
              );
            } else {
              seenKeys[key] = true;
            }
          }
        }
      }
  
      function findIdxInOld (node, oldCh, start, end) {
        for (var i = start; i < end; i++) {
          var c = oldCh[i];
          if (isDef(c) && sameVnode(node, c)) { return i }
        }
      }
  
      function patchVnode (
        oldVnode,
        vnode,
        insertedVnodeQueue,
        ownerArray,
        index,
        removeOnly
      ) {
        if (oldVnode === vnode) {
          return
        }
  
        if (isDef(vnode.elm) && isDef(ownerArray)) {
          // clone reused vnode
          vnode = ownerArray[index] = cloneVNode(vnode);
        }
  
        var elm = vnode.elm = oldVnode.elm;
  
        if (isTrue(oldVnode.isAsyncPlaceholder)) {
          if (isDef(vnode.asyncFactory.resolved)) {
            hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
          } else {
            vnode.isAsyncPlaceholder = true;
          }
          return
        }
  
        // reuse element for static trees.
        // note we only do this if the vnode is cloned -
        // if the new node is not cloned it means the render functions have been
        // reset by the hot-reload-api and we need to do a proper re-render.
        if (isTrue(vnode.isStatic) &&
          isTrue(oldVnode.isStatic) &&
          vnode.key === oldVnode.key &&
          (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))
        ) {
          vnode.componentInstance = oldVnode.componentInstance;
          return
        }
  
        var i;
        var data = vnode.data;
        if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
          i(oldVnode, vnode);
        }
  
        var oldCh = oldVnode.children;
        var ch = vnode.children;
        if (isDef(data) && isPatchable(vnode)) {
          for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }
          if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }
        }
        if (isUndef(vnode.text)) {
          if (isDef(oldCh) && isDef(ch)) {
            if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }
          } else if (isDef(ch)) {
            {
              checkDuplicateKeys(ch);
            }
            if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }
            addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
          } else if (isDef(oldCh)) {
            removeVnodes(oldCh, 0, oldCh.length - 1);
          } else if (isDef(oldVnode.text)) {
            nodeOps.setTextContent(elm, '');
          }
        } else if (oldVnode.text !== vnode.text) {
          nodeOps.setTextContent(elm, vnode.text);
        }
        if (isDef(data)) {
          if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }
        }
      }
  
      function invokeInsertHook (vnode, queue, initial) {
        // delay insert hooks for component root nodes, invoke them after the
        // element is really inserted
        if (isTrue(initial) && isDef(vnode.parent)) {
          vnode.parent.data.pendingInsert = queue;
        } else {
          for (var i = 0; i < queue.length; ++i) {
            queue[i].data.hook.insert(queue[i]);
          }
        }
      }
  
      var hydrationBailed = false;
      // list of modules that can skip create hook during hydration because they
      // are already rendered on the client or has no need for initialization
      // Note: style is excluded because it relies on initial clone for future
      // deep updates (#7063).
      var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');
  
      // Note: this is a browser-only function so we can assume elms are DOM nodes.
      function hydrate (elm, vnode, insertedVnodeQueue, inVPre) {
        var i;
        var tag = vnode.tag;
        var data = vnode.data;
        var children = vnode.children;
        inVPre = inVPre || (data && data.pre);
        vnode.elm = elm;
  
        if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
          vnode.isAsyncPlaceholder = true;
          return true
        }
        // assert node match
        {
          if (!assertNodeMatch(elm, vnode, inVPre)) {
            return false
          }
        }
        if (isDef(data)) {
          if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }
          if (isDef(i = vnode.componentInstance)) {
            // child component. it should have hydrated its own tree.
            initComponent(vnode, insertedVnodeQueue);
            return true
          }
        }
        if (isDef(tag)) {
          if (isDef(children)) {
            // empty element, allow client to pick up and populate children
            if (!elm.hasChildNodes()) {
              createChildren(vnode, children, insertedVnodeQueue);
            } else {
              // v-html and domProps: innerHTML
              if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {
                if (i !== elm.innerHTML) {
                  /* istanbul ignore if */
                  if (typeof console !== 'undefined' &&
                    !hydrationBailed
                  ) {
                    hydrationBailed = true;
                    console.warn('Parent: ', elm);
                    console.warn('server innerHTML: ', i);
                    console.warn('client innerHTML: ', elm.innerHTML);
                  }
                  return false
                }
              } else {
                // iterate and compare children lists
                var childrenMatch = true;
                var childNode = elm.firstChild;
                for (var i$1 = 0; i$1 < children.length; i$1++) {
                  if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {
                    childrenMatch = false;
                    break
                  }
                  childNode = childNode.nextSibling;
                }
                // if childNode is not null, it means the actual childNodes list is
                // longer than the virtual children list.
                if (!childrenMatch || childNode) {
                  /* istanbul ignore if */
                  if (typeof console !== 'undefined' &&
                    !hydrationBailed
                  ) {
                    hydrationBailed = true;
                    console.warn('Parent: ', elm);
                    console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
                  }
                  return false
                }
              }
            }
          }
          if (isDef(data)) {
            var fullInvoke = false;
            for (var key in data) {
              if (!isRenderedModule(key)) {
                fullInvoke = true;
                invokeCreateHooks(vnode, insertedVnodeQueue);
                break
              }
            }
            if (!fullInvoke && data['class']) {
              // ensure collecting deps for deep class bindings for future updates
              traverse(data['class']);
            }
          }
        } else if (elm.data !== vnode.text) {
          elm.data = vnode.text;
        }
        return true
      }
  
      function assertNodeMatch (node, vnode, inVPre) {
        if (isDef(vnode.tag)) {
          return vnode.tag.indexOf('vue-component') === 0 || (
            !isUnknownElement$$1(vnode, inVPre) &&
            vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())
          )
        } else {
          return node.nodeType === (vnode.isComment ? 8 : 3)
        }
      }
  
      return function patch (oldVnode, vnode, hydrating, removeOnly) {
        if (isUndef(vnode)) {
          if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }
          return
        }
  
        var isInitialPatch = false;
        var insertedVnodeQueue = [];
  
        if (isUndef(oldVnode)) {
          // empty mount (likely as component), create new root element
          isInitialPatch = true;
          createElm(vnode, insertedVnodeQueue);
        } else {
          var isRealElement = isDef(oldVnode.nodeType);
          if (!isRealElement && sameVnode(oldVnode, vnode)) {
            // patch existing root node
            patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);
          } else {
            if (isRealElement) {
              // mounting to a real element
              // check if this is server-rendered content and if we can perform
              // a successful hydration.
              if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
                oldVnode.removeAttribute(SSR_ATTR);
                hydrating = true;
              }
              if (isTrue(hydrating)) {
                if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
                  invokeInsertHook(vnode, insertedVnodeQueue, true);
                  return oldVnode
                } else {
                  warn(
                    'The client-side rendered virtual DOM tree is not matching ' +
                    'server-rendered content. This is likely caused by incorrect ' +
                    'HTML markup, for example nesting block-level elements inside ' +
                    '<p>, or missing <tbody>. Bailing hydration and performing ' +
                    'full client-side render.'
                  );
                }
              }
              // either not server-rendered, or hydration failed.
              // create an empty node and replace it
              oldVnode = emptyNodeAt(oldVnode);
            }
  
            // replacing existing element
            var oldElm = oldVnode.elm;
            var parentElm = nodeOps.parentNode(oldElm);
  
            // create new node
            createElm(
              vnode,
              insertedVnodeQueue,
              // extremely rare edge case: do not insert if old element is in a
              // leaving transition. Only happens when combining transition +
              // keep-alive + HOCs. (#4590)
              oldElm._leaveCb ? null : parentElm,
              nodeOps.nextSibling(oldElm)
            );
  
            // update parent placeholder node element, recursively
            if (isDef(vnode.parent)) {
              var ancestor = vnode.parent;
              var patchable = isPatchable(vnode);
              while (ancestor) {
                for (var i = 0; i < cbs.destroy.length; ++i) {
                  cbs.destroy[i](ancestor);
                }
                ancestor.elm = vnode.elm;
                if (patchable) {
                  for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                    cbs.create[i$1](emptyNode, ancestor);
                  }
                  // #6513
                  // invoke insert hooks that may have been merged by create hooks.
                  // e.g. for directives that uses the "inserted" hook.
                  var insert = ancestor.data.hook.insert;
                  if (insert.merged) {
                    // start at index 1 to avoid re-invoking component mounted hook
                    for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {
                      insert.fns[i$2]();
                    }
                  }
                } else {
                  registerRef(ancestor);
                }
                ancestor = ancestor.parent;
              }
            }
  
            // destroy old node
            if (isDef(parentElm)) {
              removeVnodes([oldVnode], 0, 0);
            } else if (isDef(oldVnode.tag)) {
              invokeDestroyHook(oldVnode);
            }
          }
        }
  
        invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
        return vnode.elm
      }
    }
  
    /*  */
  
    var directives = {
      create: updateDirectives,
      update: updateDirectives,
      destroy: function unbindDirectives (vnode) {
        updateDirectives(vnode, emptyNode);
      }
    };
  
    function updateDirectives (oldVnode, vnode) {
      if (oldVnode.data.directives || vnode.data.directives) {
        _update(oldVnode, vnode);
      }
    }
  
    function _update (oldVnode, vnode) {
      var isCreate = oldVnode === emptyNode;
      var isDestroy = vnode === emptyNode;
      var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
      var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);
  
      var dirsWithInsert = [];
      var dirsWithPostpatch = [];
  
      var key, oldDir, dir;
      for (key in newDirs) {
        oldDir = oldDirs[key];
        dir = newDirs[key];
        if (!oldDir) {
          // new directive, bind
          callHook$1(dir, 'bind', vnode, oldVnode);
          if (dir.def && dir.def.inserted) {
            dirsWithInsert.push(dir);
          }
        } else {
          // existing directive, update
          dir.oldValue = oldDir.value;
          dir.oldArg = oldDir.arg;
          callHook$1(dir, 'update', vnode, oldVnode);
          if (dir.def && dir.def.componentUpdated) {
            dirsWithPostpatch.push(dir);
          }
        }
      }
  
      if (dirsWithInsert.length) {
        var callInsert = function () {
          for (var i = 0; i < dirsWithInsert.length; i++) {
            callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
          }
        };
        if (isCreate) {
          mergeVNodeHook(vnode, 'insert', callInsert);
        } else {
          callInsert();
        }
      }
  
      if (dirsWithPostpatch.length) {
        mergeVNodeHook(vnode, 'postpatch', function () {
          for (var i = 0; i < dirsWithPostpatch.length; i++) {
            callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
          }
        });
      }
  
      if (!isCreate) {
        for (key in oldDirs) {
          if (!newDirs[key]) {
            // no longer present, unbind
            callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
          }
        }
      }
    }
  
    var emptyModifiers = Object.create(null);
  
    function normalizeDirectives$1 (
      dirs,
      vm
    ) {
      var res = Object.create(null);
      if (!dirs) {
        // $flow-disable-line
        return res
      }
      var i, dir;
      for (i = 0; i < dirs.length; i++) {
        dir = dirs[i];
        if (!dir.modifiers) {
          // $flow-disable-line
          dir.modifiers = emptyModifiers;
        }
        res[getRawDirName(dir)] = dir;
        dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
      }
      // $flow-disable-line
      return res
    }
  
    function getRawDirName (dir) {
      return dir.rawName || ((dir.name) + "." + (Object.keys(dir.modifiers || {}).join('.')))
    }
  
    function callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {
      var fn = dir.def && dir.def[hook];
      if (fn) {
        try {
          fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
        } catch (e) {
          handleError(e, vnode.context, ("directive " + (dir.name) + " " + hook + " hook"));
        }
      }
    }
  
    var baseModules = [
      ref,
      directives
    ];
  
    /*  */
  
    function updateAttrs (oldVnode, vnode) {
      var opts = vnode.componentOptions;
      if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
        return
      }
      if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
        return
      }
      var key, cur, old;
      var elm = vnode.elm;
      var oldAttrs = oldVnode.data.attrs || {};
      var attrs = vnode.data.attrs || {};
      // clone observed objects, as the user probably wants to mutate it
      if (isDef(attrs.__ob__)) {
        attrs = vnode.data.attrs = extend({}, attrs);
      }
  
      for (key in attrs) {
        cur = attrs[key];
        old = oldAttrs[key];
        if (old !== cur) {
          setAttr(elm, key, cur, vnode.data.pre);
        }
      }
      // #4391: in IE9, setting type can reset value for input[type=radio]
      // #6666: IE/Edge forces progress value down to 1 before setting a max
      /* istanbul ignore if */
      if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {
        setAttr(elm, 'value', attrs.value);
      }
      for (key in oldAttrs) {
        if (isUndef(attrs[key])) {
          if (isXlink(key)) {
            elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
          } else if (!isEnumeratedAttr(key)) {
            elm.removeAttribute(key);
          }
        }
      }
    }
  
    function setAttr (el, key, value, isInPre) {
      if (isInPre || el.tagName.indexOf('-') > -1) {
        baseSetAttr(el, key, value);
      } else if (isBooleanAttr(key)) {
        // set attribute for blank value
        // e.g. <option disabled>Select one</option>
        if (isFalsyAttrValue(value)) {
          el.removeAttribute(key);
        } else {
          // technically allowfullscreen is a boolean attribute for <iframe>,
          // but Flash expects a value of "true" when used on <embed> tag
          value = key === 'allowfullscreen' && el.tagName === 'EMBED'
            ? 'true'
            : key;
          el.setAttribute(key, value);
        }
      } else if (isEnumeratedAttr(key)) {
        el.setAttribute(key, convertEnumeratedValue(key, value));
      } else if (isXlink(key)) {
        if (isFalsyAttrValue(value)) {
          el.removeAttributeNS(xlinkNS, getXlinkProp(key));
        } else {
          el.setAttributeNS(xlinkNS, key, value);
        }
      } else {
        baseSetAttr(el, key, value);
      }
    }
  
    function baseSetAttr (el, key, value) {
      if (isFalsyAttrValue(value)) {
        el.removeAttribute(key);
      } else {
        // #7138: IE10 & 11 fires input event when setting placeholder on
        // <textarea>... block the first input event and remove the blocker
        // immediately.
        /* istanbul ignore if */
        if (
          isIE && !isIE9 &&
          el.tagName === 'TEXTAREA' &&
          key === 'placeholder' && value !== '' && !el.__ieph
        ) {
          var blocker = function (e) {
            e.stopImmediatePropagation();
            el.removeEventListener('input', blocker);
          };
          el.addEventListener('input', blocker);
          // $flow-disable-line
          el.__ieph = true; /* IE placeholder patched */
        }
        el.setAttribute(key, value);
      }
    }
  
    var attrs = {
      create: updateAttrs,
      update: updateAttrs
    };
  
    /*  */
  
    function updateClass (oldVnode, vnode) {
      var el = vnode.elm;
      var data = vnode.data;
      var oldData = oldVnode.data;
      if (
        isUndef(data.staticClass) &&
        isUndef(data.class) && (
          isUndef(oldData) || (
            isUndef(oldData.staticClass) &&
            isUndef(oldData.class)
          )
        )
      ) {
        return
      }
  
      var cls = genClassForVnode(vnode);
  
      // handle transition classes
      var transitionClass = el._transitionClasses;
      if (isDef(transitionClass)) {
        cls = concat(cls, stringifyClass(transitionClass));
      }
  
      // set the class
      if (cls !== el._prevClass) {
        el.setAttribute('class', cls);
        el._prevClass = cls;
      }
    }
  
    var klass = {
      create: updateClass,
      update: updateClass
    };
  
    /*  */
  
    var validDivisionCharRE = /[\w).+\-_$\]]/;
  
    function parseFilters (exp) {
      var inSingle = false;
      var inDouble = false;
      var inTemplateString = false;
      var inRegex = false;
      var curly = 0;
      var square = 0;
      var paren = 0;
      var lastFilterIndex = 0;
      var c, prev, i, expression, filters;
  
      for (i = 0; i < exp.length; i++) {
        prev = c;
        c = exp.charCodeAt(i);
        if (inSingle) {
          if (c === 0x27 && prev !== 0x5C) { inSingle = false; }
        } else if (inDouble) {
          if (c === 0x22 && prev !== 0x5C) { inDouble = false; }
        } else if (inTemplateString) {
          if (c === 0x60 && prev !== 0x5C) { inTemplateString = false; }
        } else if (inRegex) {
          if (c === 0x2f && prev !== 0x5C) { inRegex = false; }
        } else if (
          c === 0x7C && // pipe
          exp.charCodeAt(i + 1) !== 0x7C &&
          exp.charCodeAt(i - 1) !== 0x7C &&
          !curly && !square && !paren
        ) {
          if (expression === undefined) {
            // first filter, end of expression
            lastFilterIndex = i + 1;
            expression = exp.slice(0, i).trim();
          } else {
            pushFilter();
          }
        } else {
          switch (c) {
            case 0x22: inDouble = true; break         // "
            case 0x27: inSingle = true; break         // '
            case 0x60: inTemplateString = true; break // `
            case 0x28: paren++; break                 // (
            case 0x29: paren--; break                 // )
            case 0x5B: square++; break                // [
            case 0x5D: square--; break                // ]
            case 0x7B: curly++; break                 // {
            case 0x7D: curly--; break                 // }
          }
          if (c === 0x2f) { // /
            var j = i - 1;
            var p = (void 0);
            // find first non-whitespace prev char
            for (; j >= 0; j--) {
              p = exp.charAt(j);
              if (p !== ' ') { break }
            }
            if (!p || !validDivisionCharRE.test(p)) {
              inRegex = true;
            }
          }
        }
      }
  
      if (expression === undefined) {
        expression = exp.slice(0, i).trim();
      } else if (lastFilterIndex !== 0) {
        pushFilter();
      }
  
      function pushFilter () {
        (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());
        lastFilterIndex = i + 1;
      }
  
      if (filters) {
        for (i = 0; i < filters.length; i++) {
          expression = wrapFilter(expression, filters[i]);
        }
      }
  
      return expression
    }
  
    function wrapFilter (exp, filter) {
      var i = filter.indexOf('(');
      if (i < 0) {
        // _f: resolveFilter
        return ("_f(\"" + filter + "\")(" + exp + ")")
      } else {
        var name = filter.slice(0, i);
        var args = filter.slice(i + 1);
        return ("_f(\"" + name + "\")(" + exp + (args !== ')' ? ',' + args : args))
      }
    }
  
    /*  */
  
  
  
    /* eslint-disable no-unused-vars */
    function baseWarn (msg, range) {
      console.error(("[Vue compiler]: " + msg));
    }
    /* eslint-enable no-unused-vars */
  
    function pluckModuleFunction (
      modules,
      key
    ) {
      return modules
        ? modules.map(function (m) { return m[key]; }).filter(function (_) { return _; })
        : []
    }
  
    function addProp (el, name, value, range, dynamic) {
      (el.props || (el.props = [])).push(rangeSetItem({ name: name, value: value, dynamic: dynamic }, range));
      el.plain = false;
    }
  
    function addAttr (el, name, value, range, dynamic) {
      var attrs = dynamic
        ? (el.dynamicAttrs || (el.dynamicAttrs = []))
        : (el.attrs || (el.attrs = []));
      attrs.push(rangeSetItem({ name: name, value: value, dynamic: dynamic }, range));
      el.plain = false;
    }
  
    // add a raw attr (use this in preTransforms)
    function addRawAttr (el, name, value, range) {
      el.attrsMap[name] = value;
      el.attrsList.push(rangeSetItem({ name: name, value: value }, range));
    }
  
    function addDirective (
      el,
      name,
      rawName,
      value,
      arg,
      isDynamicArg,
      modifiers,
      range
    ) {
      (el.directives || (el.directives = [])).push(rangeSetItem({
        name: name,
        rawName: rawName,
        value: value,
        arg: arg,
        isDynamicArg: isDynamicArg,
        modifiers: modifiers
      }, range));
      el.plain = false;
    }
  
    function prependModifierMarker (symbol, name, dynamic) {
      return dynamic
        ? ("_p(" + name + ",\"" + symbol + "\")")
        : symbol + name // mark the event as captured
    }
  
    function addHandler (
      el,
      name,
      value,
      modifiers,
      important,
      warn,
      range,
      dynamic
    ) {
      modifiers = modifiers || emptyObject;
      // warn prevent and passive modifier
      /* istanbul ignore if */
      if (
        warn &&
        modifiers.prevent && modifiers.passive
      ) {
        warn(
          'passive and prevent can\'t be used together. ' +
          'Passive handler can\'t prevent default event.',
          range
        );
      }
  
      // normalize click.right and click.middle since they don't actually fire
      // this is technically browser-specific, but at least for now browsers are
      // the only target envs that have right/middle clicks.
      if (modifiers.right) {
        if (dynamic) {
          name = "(" + name + ")==='click'?'contextmenu':(" + name + ")";
        } else if (name === 'click') {
          name = 'contextmenu';
          delete modifiers.right;
        }
      } else if (modifiers.middle) {
        if (dynamic) {
          name = "(" + name + ")==='click'?'mouseup':(" + name + ")";
        } else if (name === 'click') {
          name = 'mouseup';
        }
      }
  
      // check capture modifier
      if (modifiers.capture) {
        delete modifiers.capture;
        name = prependModifierMarker('!', name, dynamic);
      }
      if (modifiers.once) {
        delete modifiers.once;
        name = prependModifierMarker('~', name, dynamic);
      }
      /* istanbul ignore if */
      if (modifiers.passive) {
        delete modifiers.passive;
        name = prependModifierMarker('&', name, dynamic);
      }
  
      var events;
      if (modifiers.native) {
        delete modifiers.native;
        events = el.nativeEvents || (el.nativeEvents = {});
      } else {
        events = el.events || (el.events = {});
      }
  
      var newHandler = rangeSetItem({ value: value.trim(), dynamic: dynamic }, range);
      if (modifiers !== emptyObject) {
        newHandler.modifiers = modifiers;
      }
  
      var handlers = events[name];
      /* istanbul ignore if */
      if (Array.isArray(handlers)) {
        important ? handlers.unshift(newHandler) : handlers.push(newHandler);
      } else if (handlers) {
        events[name] = important ? [newHandler, handlers] : [handlers, newHandler];
      } else {
        events[name] = newHandler;
      }
  
      el.plain = false;
    }
  
    function getRawBindingAttr (
      el,
      name
    ) {
      return el.rawAttrsMap[':' + name] ||
        el.rawAttrsMap['v-bind:' + name] ||
        el.rawAttrsMap[name]
    }
  
    function getBindingAttr (
      el,
      name,
      getStatic
    ) {
      var dynamicValue =
        getAndRemoveAttr(el, ':' + name) ||
        getAndRemoveAttr(el, 'v-bind:' + name);
      if (dynamicValue != null) {
        return parseFilters(dynamicValue)
      } else if (getStatic !== false) {
        var staticValue = getAndRemoveAttr(el, name);
        if (staticValue != null) {
          return JSON.stringify(staticValue)
        }
      }
    }
  
    // note: this only removes the attr from the Array (attrsList) so that it
    // doesn't get processed by processAttrs.
    // By default it does NOT remove it from the map (attrsMap) because the map is
    // needed during codegen.
    function getAndRemoveAttr (
      el,
      name,
      removeFromMap
    ) {
      var val;
      if ((val = el.attrsMap[name]) != null) {
        var list = el.attrsList;
        for (var i = 0, l = list.length; i < l; i++) {
          if (list[i].name === name) {
            list.splice(i, 1);
            break
          }
        }
      }
      if (removeFromMap) {
        delete el.attrsMap[name];
      }
      return val
    }
  
    function getAndRemoveAttrByRegex (
      el,
      name
    ) {
      var list = el.attrsList;
      for (var i = 0, l = list.length; i < l; i++) {
        var attr = list[i];
        if (name.test(attr.name)) {
          list.splice(i, 1);
          return attr
        }
      }
    }
  
    function rangeSetItem (
      item,
      range
    ) {
      if (range) {
        if (range.start != null) {
          item.start = range.start;
        }
        if (range.end != null) {
          item.end = range.end;
        }
      }
      return item
    }
  
    /*  */
  
    /**
     * Cross-platform code generation for component v-model
     */
    function genComponentModel (
      el,
      value,
      modifiers
    ) {
      var ref = modifiers || {};
      var number = ref.number;
      var trim = ref.trim;
  
      var baseValueExpression = '$$v';
      var valueExpression = baseValueExpression;
      if (trim) {
        valueExpression =
          "(typeof " + baseValueExpression + " === 'string'" +
          "? " + baseValueExpression + ".trim()" +
          ": " + baseValueExpression + ")";
      }
      if (number) {
        valueExpression = "_n(" + valueExpression + ")";
      }
      var assignment = genAssignmentCode(value, valueExpression);
  
      el.model = {
        value: ("(" + value + ")"),
        expression: JSON.stringify(value),
        callback: ("function (" + baseValueExpression + ") {" + assignment + "}")
      };
    }
  
    /**
     * Cross-platform codegen helper for generating v-model value assignment code.
     */
    function genAssignmentCode (
      value,
      assignment
    ) {
      var res = parseModel(value);
      if (res.key === null) {
        return (value + "=" + assignment)
      } else {
        return ("$set(" + (res.exp) + ", " + (res.key) + ", " + assignment + ")")
      }
    }
  
    /**
     * Parse a v-model expression into a base path and a final key segment.
     * Handles both dot-path and possible square brackets.
     *
     * Possible cases:
     *
     * - test
     * - test[key]
     * - test[test1[key]]
     * - test["a"][key]
     * - xxx.test[a[a].test1[key]]
     * - test.xxx.a["asa"][test1[key]]
     *
     */
  
    var len, str, chr, index$1, expressionPos, expressionEndPos;
  
  
  
    function parseModel (val) {
      // Fix https://github.com/vuejs/vue/pull/7730
      // allow v-model="obj.val " (trailing whitespace)
      val = val.trim();
      len = val.length;
  
      if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {
        index$1 = val.lastIndexOf('.');
        if (index$1 > -1) {
          return {
            exp: val.slice(0, index$1),
            key: '"' + val.slice(index$1 + 1) + '"'
          }
        } else {
          return {
            exp: val,
            key: null
          }
        }
      }
  
      str = val;
      index$1 = expressionPos = expressionEndPos = 0;
  
      while (!eof()) {
        chr = next();
        /* istanbul ignore if */
        if (isStringStart(chr)) {
          parseString(chr);
        } else if (chr === 0x5B) {
          parseBracket(chr);
        }
      }
  
      return {
        exp: val.slice(0, expressionPos),
        key: val.slice(expressionPos + 1, expressionEndPos)
      }
    }
  
    function next () {
      return str.charCodeAt(++index$1)
    }
  
    function eof () {
      return index$1 >= len
    }
  
    function isStringStart (chr) {
      return chr === 0x22 || chr === 0x27
    }
  
    function parseBracket (chr) {
      var inBracket = 1;
      expressionPos = index$1;
      while (!eof()) {
        chr = next();
        if (isStringStart(chr)) {
          parseString(chr);
          continue
        }
        if (chr === 0x5B) { inBracket++; }
        if (chr === 0x5D) { inBracket--; }
        if (inBracket === 0) {
          expressionEndPos = index$1;
          break
        }
      }
    }
  
    function parseString (chr) {
      var stringQuote = chr;
      while (!eof()) {
        chr = next();
        if (chr === stringQuote) {
          break
        }
      }
    }
  
    /*  */
  
    var warn$1;
  
    // in some cases, the event used has to be determined at runtime
    // so we used some reserved tokens during compile.
    var RANGE_TOKEN = '__r';
    var CHECKBOX_RADIO_TOKEN = '__c';
  
    function model (
      el,
      dir,
      _warn
    ) {
      warn$1 = _warn;
      var value = dir.value;
      var modifiers = dir.modifiers;
      var tag = el.tag;
      var type = el.attrsMap.type;
  
      {
        // inputs with type="file" are read only and setting the input's
        // value will throw an error.
        if (tag === 'input' && type === 'file') {
          warn$1(
            "<" + (el.tag) + " v-model=\"" + value + "\" type=\"file\">:\n" +
            "File inputs are read only. Use a v-on:change listener instead.",
            el.rawAttrsMap['v-model']
          );
        }
      }
  
      if (el.component) {
        genComponentModel(el, value, modifiers);
        // component v-model doesn't need extra runtime
        return false
      } else if (tag === 'select') {
        genSelect(el, value, modifiers);
      } else if (tag === 'input' && type === 'checkbox') {
        genCheckboxModel(el, value, modifiers);
      } else if (tag === 'input' && type === 'radio') {
        genRadioModel(el, value, modifiers);
      } else if (tag === 'input' || tag === 'textarea') {
        genDefaultModel(el, value, modifiers);
      } else if (!config.isReservedTag(tag)) {
        genComponentModel(el, value, modifiers);
        // component v-model doesn't need extra runtime
        return false
      } else {
        warn$1(
          "<" + (el.tag) + " v-model=\"" + value + "\">: " +
          "v-model is not supported on this element type. " +
          'If you are working with contenteditable, it\'s recommended to ' +
          'wrap a library dedicated for that purpose inside a custom component.',
          el.rawAttrsMap['v-model']
        );
      }
  
      // ensure runtime directive metadata
      return true
    }
  
    function genCheckboxModel (
      el,
      value,
      modifiers
    ) {
      var number = modifiers && modifiers.number;
      var valueBinding = getBindingAttr(el, 'value') || 'null';
      var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';
      var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';
      addProp(el, 'checked',
        "Array.isArray(" + value + ")" +
        "?_i(" + value + "," + valueBinding + ")>-1" + (
          trueValueBinding === 'true'
            ? (":(" + value + ")")
            : (":_q(" + value + "," + trueValueBinding + ")")
        )
      );
      addHandler(el, 'change',
        "var $$a=" + value + "," +
            '$$el=$event.target,' +
            "$$c=$$el.checked?(" + trueValueBinding + "):(" + falseValueBinding + ");" +
        'if(Array.isArray($$a)){' +
          "var $$v=" + (number ? '_n(' + valueBinding + ')' : valueBinding) + "," +
              '$$i=_i($$a,$$v);' +
          "if($$el.checked){$$i<0&&(" + (genAssignmentCode(value, '$$a.concat([$$v])')) + ")}" +
          "else{$$i>-1&&(" + (genAssignmentCode(value, '$$a.slice(0,$$i).concat($$a.slice($$i+1))')) + ")}" +
        "}else{" + (genAssignmentCode(value, '$$c')) + "}",
        null, true
      );
    }
  
    function genRadioModel (
      el,
      value,
      modifiers
    ) {
      var number = modifiers && modifiers.number;
      var valueBinding = getBindingAttr(el, 'value') || 'null';
      valueBinding = number ? ("_n(" + valueBinding + ")") : valueBinding;
      addProp(el, 'checked', ("_q(" + value + "," + valueBinding + ")"));
      addHandler(el, 'change', genAssignmentCode(value, valueBinding), null, true);
    }
  
    function genSelect (
      el,
      value,
      modifiers
    ) {
      var number = modifiers && modifiers.number;
      var selectedVal = "Array.prototype.filter" +
        ".call($event.target.options,function(o){return o.selected})" +
        ".map(function(o){var val = \"_value\" in o ? o._value : o.value;" +
        "return " + (number ? '_n(val)' : 'val') + "})";
  
      var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';
      var code = "var $$selectedVal = " + selectedVal + ";";
      code = code + " " + (genAssignmentCode(value, assignment));
      addHandler(el, 'change', code, null, true);
    }
  
    function genDefaultModel (
      el,
      value,
      modifiers
    ) {
      var type = el.attrsMap.type;
  
      // warn if v-bind:value conflicts with v-model
      // except for inputs with v-bind:type
      {
        var value$1 = el.attrsMap['v-bind:value'] || el.attrsMap[':value'];
        var typeBinding = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];
        if (value$1 && !typeBinding) {
          var binding = el.attrsMap['v-bind:value'] ? 'v-bind:value' : ':value';
          warn$1(
            binding + "=\"" + value$1 + "\" conflicts with v-model on the same element " +
            'because the latter already expands to a value binding internally',
            el.rawAttrsMap[binding]
          );
        }
      }
  
      var ref = modifiers || {};
      var lazy = ref.lazy;
      var number = ref.number;
      var trim = ref.trim;
      var needCompositionGuard = !lazy && type !== 'range';
      var event = lazy
        ? 'change'
        : type === 'range'
          ? RANGE_TOKEN
          : 'input';
  
      var valueExpression = '$event.target.value';
      if (trim) {
        valueExpression = "$event.target.value.trim()";
      }
      if (number) {
        valueExpression = "_n(" + valueExpression + ")";
      }
  
      var code = genAssignmentCode(value, valueExpression);
      if (needCompositionGuard) {
        code = "if($event.target.composing)return;" + code;
      }
  
      addProp(el, 'value', ("(" + value + ")"));
      addHandler(el, event, code, null, true);
      if (trim || number) {
        addHandler(el, 'blur', '$forceUpdate()');
      }
    }
  
    /*  */
  
    // normalize v-model event tokens that can only be determined at runtime.
    // it's important to place the event as the first in the array because
    // the whole point is ensuring the v-model callback gets called before
    // user-attached handlers.
    function normalizeEvents (on) {
      /* istanbul ignore if */
      if (isDef(on[RANGE_TOKEN])) {
        // IE input[type=range] only supports `change` event
        var event = isIE ? 'change' : 'input';
        on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
        delete on[RANGE_TOKEN];
      }
      // This was originally intended to fix #4521 but no longer necessary
      // after 2.5. Keeping it for backwards compat with generated code from < 2.4
      /* istanbul ignore if */
      if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
        on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);
        delete on[CHECKBOX_RADIO_TOKEN];
      }
    }
  
    var target$1;
  
    function createOnceHandler$1 (event, handler, capture) {
      var _target = target$1; // save current target element in closure
      return function onceHandler () {
        var res = handler.apply(null, arguments);
        if (res !== null) {
          remove$2(event, onceHandler, capture, _target);
        }
      }
    }
  
    // #9446: Firefox <= 53 (in particular, ESR 52) has incorrect Event.timeStamp
    // implementation and does not fire microtasks in between event propagation, so
    // safe to exclude.
    var useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);
  
    function add$1 (
      name,
      handler,
      capture,
      passive
    ) {
      // async edge case #6566: inner click event triggers patch, event handler
      // attached to outer element during patch, and triggered again. This
      // happens because browsers fire microtask ticks between event propagation.
      // the solution is simple: we save the timestamp when a handler is attached,
      // and the handler would only fire if the event passed to it was fired
      // AFTER it was attached.
      if (useMicrotaskFix) {
        var attachedTimestamp = currentFlushTimestamp;
        var original = handler;
        handler = original._wrapper = function (e) {
          if (
            // no bubbling, should always fire.
            // this is just a safety net in case event.timeStamp is unreliable in
            // certain weird environments...
            e.target === e.currentTarget ||
            // event is fired after handler attachment
            e.timeStamp >= attachedTimestamp ||
            // bail for environments that have buggy event.timeStamp implementations
            // #9462 iOS 9 bug: event.timeStamp is 0 after history.pushState
            // #9681 QtWebEngine event.timeStamp is negative value
            e.timeStamp <= 0 ||
            // #9448 bail if event is fired in another document in a multi-page
            // electron/nw.js app, since event.timeStamp will be using a different
            // starting reference
            e.target.ownerDocument !== document
          ) {
            return original.apply(this, arguments)
          }
        };
      }
      target$1.addEventListener(
        name,
        handler,
        supportsPassive
          ? { capture: capture, passive: passive }
          : capture
      );
    }
  
    function remove$2 (
      name,
      handler,
      capture,
      _target
    ) {
      (_target || target$1).removeEventListener(
        name,
        handler._wrapper || handler,
        capture
      );
    }
  
    function updateDOMListeners (oldVnode, vnode) {
      if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
        return
      }
      var on = vnode.data.on || {};
      var oldOn = oldVnode.data.on || {};
      target$1 = vnode.elm;
      normalizeEvents(on);
      updateListeners(on, oldOn, add$1, remove$2, createOnceHandler$1, vnode.context);
      target$1 = undefined;
    }
  
    var events = {
      create: updateDOMListeners,
      update: updateDOMListeners
    };
  
    /*  */
  
    var svgContainer;
  
    function updateDOMProps (oldVnode, vnode) {
      if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
        return
      }
      var key, cur;
      var elm = vnode.elm;
      var oldProps = oldVnode.data.domProps || {};
      var props = vnode.data.domProps || {};
      // clone observed objects, as the user probably wants to mutate it
      if (isDef(props.__ob__)) {
        props = vnode.data.domProps = extend({}, props);
      }
  
      for (key in oldProps) {
        if (!(key in props)) {
          elm[key] = '';
        }
      }
  
      for (key in props) {
        cur = props[key];
        // ignore children if the node has textContent or innerHTML,
        // as these will throw away existing DOM nodes and cause removal errors
        // on subsequent patches (#3360)
        if (key === 'textContent' || key === 'innerHTML') {
          if (vnode.children) { vnode.children.length = 0; }
          if (cur === oldProps[key]) { continue }
          // #6601 work around Chrome version <= 55 bug where single textNode
          // replaced by innerHTML/textContent retains its parentNode property
          if (elm.childNodes.length === 1) {
            elm.removeChild(elm.childNodes[0]);
          }
        }
  
        if (key === 'value' && elm.tagName !== 'PROGRESS') {
          // store value as _value as well since
          // non-string values will be stringified
          elm._value = cur;
          // avoid resetting cursor position when value is the same
          var strCur = isUndef(cur) ? '' : String(cur);
          if (shouldUpdateValue(elm, strCur)) {
            elm.value = strCur;
          }
        } else if (key === 'innerHTML' && isSVG(elm.tagName) && isUndef(elm.innerHTML)) {
          // IE doesn't support innerHTML for SVG elements
          svgContainer = svgContainer || document.createElement('div');
          svgContainer.innerHTML = "<svg>" + cur + "</svg>";
          var svg = svgContainer.firstChild;
          while (elm.firstChild) {
            elm.removeChild(elm.firstChild);
          }
          while (svg.firstChild) {
            elm.appendChild(svg.firstChild);
          }
        } else if (
          // skip the update if old and new VDOM state is the same.
          // `value` is handled separately because the DOM value may be temporarily
          // out of sync with VDOM state due to focus, composition and modifiers.
          // This  #4521 by skipping the unnecessary `checked` update.
          cur !== oldProps[key]
        ) {
          // some property updates can throw
          // e.g. `value` on <progress> w/ non-finite value
          try {
            elm[key] = cur;
          } catch (e) {}
        }
      }
    }
  
    // check platforms/web/util/attrs.js acceptValue
  
  
    function shouldUpdateValue (elm, checkVal) {
      return (!elm.composing && (
        elm.tagName === 'OPTION' ||
        isNotInFocusAndDirty(elm, checkVal) ||
        isDirtyWithModifiers(elm, checkVal)
      ))
    }
  
    function isNotInFocusAndDirty (elm, checkVal) {
      // return true when textbox (.number and .trim) loses focus and its value is
      // not equal to the updated value
      var notInFocus = true;
      // #6157
      // work around IE bug when accessing document.activeElement in an iframe
      try { notInFocus = document.activeElement !== elm; } catch (e) {}
      return notInFocus && elm.value !== checkVal
    }
  
    function isDirtyWithModifiers (elm, newVal) {
      var value = elm.value;
      var modifiers = elm._vModifiers; // injected by v-model runtime
      if (isDef(modifiers)) {
        if (modifiers.number) {
          return toNumber(value) !== toNumber(newVal)
        }
        if (modifiers.trim) {
          return value.trim() !== newVal.trim()
        }
      }
      return value !== newVal
    }
  
    var domProps = {
      create: updateDOMProps,
      update: updateDOMProps
    };
  
    /*  */
  
    var parseStyleText = cached(function (cssText) {
      var res = {};
      var listDelimiter = /;(?![^(]*\))/g;
      var propertyDelimiter = /:(.+)/;
      cssText.split(listDelimiter).forEach(function (item) {
        if (item) {
          var tmp = item.split(propertyDelimiter);
          tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
        }
      });
      return res
    });
  
    // merge static and dynamic style data on the same vnode
    function normalizeStyleData (data) {
      var style = normalizeStyleBinding(data.style);
      // static style is pre-processed into an object during compilation
      // and is always a fresh object, so it's safe to merge into it
      return data.staticStyle
        ? extend(data.staticStyle, style)
        : style
    }
  
    // normalize possible array / string values into Object
    function normalizeStyleBinding (bindingStyle) {
      if (Array.isArray(bindingStyle)) {
        return toObject(bindingStyle)
      }
      if (typeof bindingStyle === 'string') {
        return parseStyleText(bindingStyle)
      }
      return bindingStyle
    }
  
    /**
     * parent component style should be after child's
     * so that parent component's style could override it
     */
    function getStyle (vnode, checkChild) {
      var res = {};
      var styleData;
  
      if (checkChild) {
        var childNode = vnode;
        while (childNode.componentInstance) {
          childNode = childNode.componentInstance._vnode;
          if (
            childNode && childNode.data &&
            (styleData = normalizeStyleData(childNode.data))
          ) {
            extend(res, styleData);
          }
        }
      }
  
      if ((styleData = normalizeStyleData(vnode.data))) {
        extend(res, styleData);
      }
  
      var parentNode = vnode;
      while ((parentNode = parentNode.parent)) {
        if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
          extend(res, styleData);
        }
      }
      return res
    }
  
    /*  */
  
    var cssVarRE = /^--/;
    var importantRE = /\s*!important$/;
    var setProp = function (el, name, val) {
      /* istanbul ignore if */
      if (cssVarRE.test(name)) {
        el.style.setProperty(name, val);
      } else if (importantRE.test(val)) {
        el.style.setProperty(hyphenate(name), val.replace(importantRE, ''), 'important');
      } else {
        var normalizedName = normalize(name);
        if (Array.isArray(val)) {
          // Support values array created by autoprefixer, e.g.
          // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
          // Set them one by one, and the browser will only set those it can recognize
          for (var i = 0, len = val.length; i < len; i++) {
            el.style[normalizedName] = val[i];
          }
        } else {
          el.style[normalizedName] = val;
        }
      }
    };
  
    var vendorNames = ['Webkit', 'Moz', 'ms'];
  
    var emptyStyle;
    var normalize = cached(function (prop) {
      emptyStyle = emptyStyle || document.createElement('div').style;
      prop = camelize(prop);
      if (prop !== 'filter' && (prop in emptyStyle)) {
        return prop
      }
      var capName = prop.charAt(0).toUpperCase() + prop.slice(1);
      for (var i = 0; i < vendorNames.length; i++) {
        var name = vendorNames[i] + capName;
        if (name in emptyStyle) {
          return name
        }
      }
    });
  
    function updateStyle (oldVnode, vnode) {
      var data = vnode.data;
      var oldData = oldVnode.data;
  
      if (isUndef(data.staticStyle) && isUndef(data.style) &&
        isUndef(oldData.staticStyle) && isUndef(oldData.style)
      ) {
        return
      }
  
      var cur, name;
      var el = vnode.elm;
      var oldStaticStyle = oldData.staticStyle;
      var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};
  
      // if static style exists, stylebinding already merged into it when doing normalizeStyleData
      var oldStyle = oldStaticStyle || oldStyleBinding;
  
      var style = normalizeStyleBinding(vnode.data.style) || {};
  
      // store normalized style under a different key for next diff
      // make sure to clone it if it's reactive, since the user likely wants
      // to mutate it.
      vnode.data.normalizedStyle = isDef(style.__ob__)
        ? extend({}, style)
        : style;
  
      var newStyle = getStyle(vnode, true);
  
      for (name in oldStyle) {
        if (isUndef(newStyle[name])) {
          setProp(el, name, '');
        }
      }
      for (name in newStyle) {
        cur = newStyle[name];
        if (cur !== oldStyle[name]) {
          // ie9 setting to null has no effect, must use empty string
          setProp(el, name, cur == null ? '' : cur);
        }
      }
    }
  
    var style = {
      create: updateStyle,
      update: updateStyle
    };
  
    /*  */
  
    var whitespaceRE = /\s+/;
  
    /**
     * Add class with compatibility for SVG since classList is not supported on
     * SVG elements in IE
     */
    function addClass (el, cls) {
      /* istanbul ignore if */
      if (!cls || !(cls = cls.trim())) {
        return
      }
  
      /* istanbul ignore else */
      if (el.classList) {
        if (cls.indexOf(' ') > -1) {
          cls.split(whitespaceRE).forEach(function (c) { return el.classList.add(c); });
        } else {
          el.classList.add(cls);
        }
      } else {
        var cur = " " + (el.getAttribute('class') || '') + " ";
        if (cur.indexOf(' ' + cls + ' ') < 0) {
          el.setAttribute('class', (cur + cls).trim());
        }
      }
    }
  
    /**
     * Remove class with compatibility for SVG since classList is not supported on
     * SVG elements in IE
     */
    function removeClass (el, cls) {
      /* istanbul ignore if */
      if (!cls || !(cls = cls.trim())) {
        return
      }
  
      /* istanbul ignore else */
      if (el.classList) {
        if (cls.indexOf(' ') > -1) {
          cls.split(whitespaceRE).forEach(function (c) { return el.classList.remove(c); });
        } else {
          el.classList.remove(cls);
        }
        if (!el.classList.length) {
          el.removeAttribute('class');
        }
      } else {
        var cur = " " + (el.getAttribute('class') || '') + " ";
        var tar = ' ' + cls + ' ';
        while (cur.indexOf(tar) >= 0) {
          cur = cur.replace(tar, ' ');
        }
        cur = cur.trim();
        if (cur) {
          el.setAttribute('class', cur);
        } else {
          el.removeAttribute('class');
        }
      }
    }
  
    /*  */
  
    function resolveTransition (def$$1) {
      if (!def$$1) {
        return
      }
      /* istanbul ignore else */
      if (typeof def$$1 === 'object') {
        var res = {};
        if (def$$1.css !== false) {
          extend(res, autoCssTransition(def$$1.name || 'v'));
        }
        extend(res, def$$1);
        return res
      } else if (typeof def$$1 === 'string') {
        return autoCssTransition(def$$1)
      }
    }
  
    var autoCssTransition = cached(function (name) {
      return {
        enterClass: (name + "-enter"),
        enterToClass: (name + "-enter-to"),
        enterActiveClass: (name + "-enter-active"),
        leaveClass: (name + "-leave"),
        leaveToClass: (name + "-leave-to"),
        leaveActiveClass: (name + "-leave-active")
      }
    });
  
    var hasTransition = inBrowser && !isIE9;
    var TRANSITION = 'transition';
    var ANIMATION = 'animation';
  
    // Transition property/event sniffing
    var transitionProp = 'transition';
    var transitionEndEvent = 'transitionend';
    var animationProp = 'animation';
    var animationEndEvent = 'animationend';
    if (hasTransition) {
      /* istanbul ignore if */
      if (window.ontransitionend === undefined &&
        window.onwebkittransitionend !== undefined
      ) {
        transitionProp = 'WebkitTransition';
        transitionEndEvent = 'webkitTransitionEnd';
      }
      if (window.onanimationend === undefined &&
        window.onwebkitanimationend !== undefined
      ) {
        animationProp = 'WebkitAnimation';
        animationEndEvent = 'webkitAnimationEnd';
      }
    }
  
    // binding to window is necessary to make hot reload work in IE in strict mode
    var raf = inBrowser
      ? window.requestAnimationFrame
        ? window.requestAnimationFrame.bind(window)
        : setTimeout
      : /* istanbul ignore next */ function (fn) { return fn(); };
  
    function nextFrame (fn) {
      raf(function () {
        raf(fn);
      });
    }
  
    function addTransitionClass (el, cls) {
      var transitionClasses = el._transitionClasses || (el._transitionClasses = []);
      if (transitionClasses.indexOf(cls) < 0) {
        transitionClasses.push(cls);
        addClass(el, cls);
      }
    }
  
    function removeTransitionClass (el, cls) {
      if (el._transitionClasses) {
        remove(el._transitionClasses, cls);
      }
      removeClass(el, cls);
    }
  
    function whenTransitionEnds (
      el,
      expectedType,
      cb
    ) {
      var ref = getTransitionInfo(el, expectedType);
      var type = ref.type;
      var timeout = ref.timeout;
      var propCount = ref.propCount;
      if (!type) { return cb() }
      var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
      var ended = 0;
      var end = function () {
        el.removeEventListener(event, onEnd);
        cb();
      };
      var onEnd = function (e) {
        if (e.target === el) {
          if (++ended >= propCount) {
            end();
          }
        }
      };
      setTimeout(function () {
        if (ended < propCount) {
          end();
        }
      }, timeout + 1);
      el.addEventListener(event, onEnd);
    }
  
    var transformRE = /\b(transform|all)(,|$)/;
  
    function getTransitionInfo (el, expectedType) {
      var styles = window.getComputedStyle(el);
      // JSDOM may return undefined for transition properties
      var transitionDelays = (styles[transitionProp + 'Delay'] || '').split(', ');
      var transitionDurations = (styles[transitionProp + 'Duration'] || '').split(', ');
      var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
      var animationDelays = (styles[animationProp + 'Delay'] || '').split(', ');
      var animationDurations = (styles[animationProp + 'Duration'] || '').split(', ');
      var animationTimeout = getTimeout(animationDelays, animationDurations);
  
      var type;
      var timeout = 0;
      var propCount = 0;
      /* istanbul ignore if */
      if (expectedType === TRANSITION) {
        if (transitionTimeout > 0) {
          type = TRANSITION;
          timeout = transitionTimeout;
          propCount = transitionDurations.length;
        }
      } else if (expectedType === ANIMATION) {
        if (animationTimeout > 0) {
          type = ANIMATION;
          timeout = animationTimeout;
          propCount = animationDurations.length;
        }
      } else {
        timeout = Math.max(transitionTimeout, animationTimeout);
        type = timeout > 0
          ? transitionTimeout > animationTimeout
            ? TRANSITION
            : ANIMATION
          : null;
        propCount = type
          ? type === TRANSITION
            ? transitionDurations.length
            : animationDurations.length
          : 0;
      }
      var hasTransform =
        type === TRANSITION &&
        transformRE.test(styles[transitionProp + 'Property']);
      return {
        type: type,
        timeout: timeout,
        propCount: propCount,
        hasTransform: hasTransform
      }
    }
  
    function getTimeout (delays, durations) {
      /* istanbul ignore next */
      while (delays.length < durations.length) {
        delays = delays.concat(delays);
      }
  
      return Math.max.apply(null, durations.map(function (d, i) {
        return toMs(d) + toMs(delays[i])
      }))
    }
  
    // Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers
    // in a locale-dependent way, using a comma instead of a dot.
    // If comma is not replaced with a dot, the input will be rounded down (i.e. acting
    // as a floor function) causing unexpected behaviors
    function toMs (s) {
      return Number(s.slice(0, -1).replace(',', '.')) * 1000
    }
  
    /*  */
  
    function enter (vnode, toggleDisplay) {
      var el = vnode.elm;
  
      // call leave callback now
      if (isDef(el._leaveCb)) {
        el._leaveCb.cancelled = true;
        el._leaveCb();
      }
  
      var data = resolveTransition(vnode.data.transition);
      if (isUndef(data)) {
        return
      }
  
      /* istanbul ignore if */
      if (isDef(el._enterCb) || el.nodeType !== 1) {
        return
      }
  
      var css = data.css;
      var type = data.type;
      var enterClass = data.enterClass;
      var enterToClass = data.enterToClass;
      var enterActiveClass = data.enterActiveClass;
      var appearClass = data.appearClass;
      var appearToClass = data.appearToClass;
      var appearActiveClass = data.appearActiveClass;
      var beforeEnter = data.beforeEnter;
      var enter = data.enter;
      var afterEnter = data.afterEnter;
      var enterCancelled = data.enterCancelled;
      var beforeAppear = data.beforeAppear;
      var appear = data.appear;
      var afterAppear = data.afterAppear;
      var appearCancelled = data.appearCancelled;
      var duration = data.duration;
  
      // activeInstance will always be the <transition> component managing this
      // transition. One edge case to check is when the <transition> is placed
      // as the root node of a child component. In that case we need to check
      // <transition>'s parent for appear check.
      var context = activeInstance;
      var transitionNode = activeInstance.$vnode;
      while (transitionNode && transitionNode.parent) {
        context = transitionNode.context;
        transitionNode = transitionNode.parent;
      }
  
      var isAppear = !context._isMounted || !vnode.isRootInsert;
  
      if (isAppear && !appear && appear !== '') {
        return
      }
  
      var startClass = isAppear && appearClass
        ? appearClass
        : enterClass;
      var activeClass = isAppear && appearActiveClass
        ? appearActiveClass
        : enterActiveClass;
      var toClass = isAppear && appearToClass
        ? appearToClass
        : enterToClass;
  
      var beforeEnterHook = isAppear
        ? (beforeAppear || beforeEnter)
        : beforeEnter;
      var enterHook = isAppear
        ? (typeof appear === 'function' ? appear : enter)
        : enter;
      var afterEnterHook = isAppear
        ? (afterAppear || afterEnter)
        : afterEnter;
      var enterCancelledHook = isAppear
        ? (appearCancelled || enterCancelled)
        : enterCancelled;
  
      var explicitEnterDuration = toNumber(
        isObject(duration)
          ? duration.enter
          : duration
      );
  
      if (explicitEnterDuration != null) {
        checkDuration(explicitEnterDuration, 'enter', vnode);
      }
  
      var expectsCSS = css !== false && !isIE9;
      var userWantsControl = getHookArgumentsLength(enterHook);
  
      var cb = el._enterCb = once(function () {
        if (expectsCSS) {
          removeTransitionClass(el, toClass);
          removeTransitionClass(el, activeClass);
        }
        if (cb.cancelled) {
          if (expectsCSS) {
            removeTransitionClass(el, startClass);
          }
          enterCancelledHook && enterCancelledHook(el);
        } else {
          afterEnterHook && afterEnterHook(el);
        }
        el._enterCb = null;
      });
  
      if (!vnode.data.show) {
        // remove pending leave element on enter by injecting an insert hook
        mergeVNodeHook(vnode, 'insert', function () {
          var parent = el.parentNode;
          var pendingNode = parent && parent._pending && parent._pending[vnode.key];
          if (pendingNode &&
            pendingNode.tag === vnode.tag &&
            pendingNode.elm._leaveCb
          ) {
            pendingNode.elm._leaveCb();
          }
          enterHook && enterHook(el, cb);
        });
      }
  
      // start enter transition
      beforeEnterHook && beforeEnterHook(el);
      if (expectsCSS) {
        addTransitionClass(el, startClass);
        addTransitionClass(el, activeClass);
        nextFrame(function () {
          removeTransitionClass(el, startClass);
          if (!cb.cancelled) {
            addTransitionClass(el, toClass);
            if (!userWantsControl) {
              if (isValidDuration(explicitEnterDuration)) {
                setTimeout(cb, explicitEnterDuration);
              } else {
                whenTransitionEnds(el, type, cb);
              }
            }
          }
        });
      }
  
      if (vnode.data.show) {
        toggleDisplay && toggleDisplay();
        enterHook && enterHook(el, cb);
      }
  
      if (!expectsCSS && !userWantsControl) {
        cb();
      }
    }
  
    function leave (vnode, rm) {
      var el = vnode.elm;
  
      // call enter callback now
      if (isDef(el._enterCb)) {
        el._enterCb.cancelled = true;
        el._enterCb();
      }
  
      var data = resolveTransition(vnode.data.transition);
      if (isUndef(data) || el.nodeType !== 1) {
        return rm()
      }
  
      /* istanbul ignore if */
      if (isDef(el._leaveCb)) {
        return
      }
  
      var css = data.css;
      var type = data.type;
      var leaveClass = data.leaveClass;
      var leaveToClass = data.leaveToClass;
      var leaveActiveClass = data.leaveActiveClass;
      var beforeLeave = data.beforeLeave;
      var leave = data.leave;
      var afterLeave = data.afterLeave;
      var leaveCancelled = data.leaveCancelled;
      var delayLeave = data.delayLeave;
      var duration = data.duration;
  
      var expectsCSS = css !== false && !isIE9;
      var userWantsControl = getHookArgumentsLength(leave);
  
      var explicitLeaveDuration = toNumber(
        isObject(duration)
          ? duration.leave
          : duration
      );
  
      if (isDef(explicitLeaveDuration)) {
        checkDuration(explicitLeaveDuration, 'leave', vnode);
      }
  
      var cb = el._leaveCb = once(function () {
        if (el.parentNode && el.parentNode._pending) {
          el.parentNode._pending[vnode.key] = null;
        }
        if (expectsCSS) {
          removeTransitionClass(el, leaveToClass);
          removeTransitionClass(el, leaveActiveClass);
        }
        if (cb.cancelled) {
          if (expectsCSS) {
            removeTransitionClass(el, leaveClass);
          }
          leaveCancelled && leaveCancelled(el);
        } else {
          rm();
          afterLeave && afterLeave(el);
        }
        el._leaveCb = null;
      });
  
      if (delayLeave) {
        delayLeave(performLeave);
      } else {
        performLeave();
      }
  
      function performLeave () {
        // the delayed leave may have already been cancelled
        if (cb.cancelled) {
          return
        }
        // record leaving element
        if (!vnode.data.show && el.parentNode) {
          (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;
        }
        beforeLeave && beforeLeave(el);
        if (expectsCSS) {
          addTransitionClass(el, leaveClass);
          addTransitionClass(el, leaveActiveClass);
          nextFrame(function () {
            removeTransitionClass(el, leaveClass);
            if (!cb.cancelled) {
              addTransitionClass(el, leaveToClass);
              if (!userWantsControl) {
                if (isValidDuration(explicitLeaveDuration)) {
                  setTimeout(cb, explicitLeaveDuration);
                } else {
                  whenTransitionEnds(el, type, cb);
                }
              }
            }
          });
        }
        leave && leave(el, cb);
        if (!expectsCSS && !userWantsControl) {
          cb();
        }
      }
    }
  
    // only used in dev mode
    function checkDuration (val, name, vnode) {
      if (typeof val !== 'number') {
        warn(
          "<transition> explicit " + name + " duration is not a valid number - " +
          "got " + (JSON.stringify(val)) + ".",
          vnode.context
        );
      } else if (isNaN(val)) {
        warn(
          "<transition> explicit " + name + " duration is NaN - " +
          'the duration expression might be incorrect.',
          vnode.context
        );
      }
    }
  
    function isValidDuration (val) {
      return typeof val === 'number' && !isNaN(val)
    }
  
    /**
     * Normalize a transition hook's argument length. The hook may be:
     * - a merged hook (invoker) with the original in .fns
     * - a wrapped component method (check ._length)
     * - a plain function (.length)
     */
    function getHookArgumentsLength (fn) {
      if (isUndef(fn)) {
        return false
      }
      var invokerFns = fn.fns;
      if (isDef(invokerFns)) {
        // invoker
        return getHookArgumentsLength(
          Array.isArray(invokerFns)
            ? invokerFns[0]
            : invokerFns
        )
      } else {
        return (fn._length || fn.length) > 1
      }
    }
  
    function _enter (_, vnode) {
      if (vnode.data.show !== true) {
        enter(vnode);
      }
    }
  
    var transition = inBrowser ? {
      create: _enter,
      activate: _enter,
      remove: function remove$$1 (vnode, rm) {
        /* istanbul ignore else */
        if (vnode.data.show !== true) {
          leave(vnode, rm);
        } else {
          rm();
        }
      }
    } : {};
  
    var platformModules = [
      attrs,
      klass,
      events,
      domProps,
      style,
      transition
    ];
  
    /*  */
  
    // the directive module should be applied last, after all
    // built-in modules have been applied.
    var modules = platformModules.concat(baseModules);
  
    var patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });
  
    /**
     * Not type checking this file because flow doesn't like attaching
     * properties to Elements.
     */
  
    /* istanbul ignore if */
    if (isIE9) {
      // http://www.matts411.com/post/internet-explorer-9-oninput/
      document.addEventListener('selectionchange', function () {
        var el = document.activeElement;
        if (el && el.vmodel) {
          trigger(el, 'input');
        }
      });
    }
  
    var directive = {
      inserted: function inserted (el, binding, vnode, oldVnode) {
        if (vnode.tag === 'select') {
          // #6903
          if (oldVnode.elm && !oldVnode.elm._vOptions) {
            mergeVNodeHook(vnode, 'postpatch', function () {
              directive.componentUpdated(el, binding, vnode);
            });
          } else {
            setSelected(el, binding, vnode.context);
          }
          el._vOptions = [].map.call(el.options, getValue);
        } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {
          el._vModifiers = binding.modifiers;
          if (!binding.modifiers.lazy) {
            el.addEventListener('compositionstart', onCompositionStart);
            el.addEventListener('compositionend', onCompositionEnd);
            // Safari < 10.2 & UIWebView doesn't fire compositionend when
            // switching focus before confirming composition choice
            // this also fixes the issue where some browsers e.g. iOS Chrome
            // fires "change" instead of "input" on autocomplete.
            el.addEventListener('change', onCompositionEnd);
            /* istanbul ignore if */
            if (isIE9) {
              el.vmodel = true;
            }
          }
        }
      },
  
      componentUpdated: function componentUpdated (el, binding, vnode) {
        if (vnode.tag === 'select') {
          setSelected(el, binding, vnode.context);
          // in case the options rendered by v-for have changed,
          // it's possible that the value is out-of-sync with the rendered options.
          // detect such cases and filter out values that no longer has a matching
          // option in the DOM.
          var prevOptions = el._vOptions;
          var curOptions = el._vOptions = [].map.call(el.options, getValue);
          if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {
            // trigger change event if
            // no matching option found for at least one value
            var needReset = el.multiple
              ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions); })
              : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);
            if (needReset) {
              trigger(el, 'change');
            }
          }
        }
      }
    };
  
    function setSelected (el, binding, vm) {
      actuallySetSelected(el, binding, vm);
      /* istanbul ignore if */
      if (isIE || isEdge) {
        setTimeout(function () {
          actuallySetSelected(el, binding, vm);
        }, 0);
      }
    }
  
    function actuallySetSelected (el, binding, vm) {
      var value = binding.value;
      var isMultiple = el.multiple;
      if (isMultiple && !Array.isArray(value)) {
        warn(
          "<select multiple v-model=\"" + (binding.expression) + "\"> " +
          "expects an Array value for its binding, but got " + (Object.prototype.toString.call(value).slice(8, -1)),
          vm
        );
        return
      }
      var selected, option;
      for (var i = 0, l = el.options.length; i < l; i++) {
        option = el.options[i];
        if (isMultiple) {
          selected = looseIndexOf(value, getValue(option)) > -1;
          if (option.selected !== selected) {
            option.selected = selected;
          }
        } else {
          if (looseEqual(getValue(option), value)) {
            if (el.selectedIndex !== i) {
              el.selectedIndex = i;
            }
            return
          }
        }
      }
      if (!isMultiple) {
        el.selectedIndex = -1;
      }
    }
  
    function hasNoMatchingOption (value, options) {
      return options.every(function (o) { return !looseEqual(o, value); })
    }
  
    function getValue (option) {
      return '_value' in option
        ? option._value
        : option.value
    }
  
    function onCompositionStart (e) {
      e.target.composing = true;
    }
  
    function onCompositionEnd (e) {
      // prevent triggering an input event for no reason
      if (!e.target.composing) { return }
      e.target.composing = false;
      trigger(e.target, 'input');
    }
  
    function trigger (el, type) {
      var e = document.createEvent('HTMLEvents');
      e.initEvent(type, true, true);
      el.dispatchEvent(e);
    }
  
    /*  */
  
    // recursively search for possible transition defined inside the component root
    function locateNode (vnode) {
      return vnode.componentInstance && (!vnode.data || !vnode.data.transition)
        ? locateNode(vnode.componentInstance._vnode)
        : vnode
    }
  
    var show = {
      bind: function bind (el, ref, vnode) {
        var value = ref.value;
  
        vnode = locateNode(vnode);
        var transition$$1 = vnode.data && vnode.data.transition;
        var originalDisplay = el.__vOriginalDisplay =
          el.style.display === 'none' ? '' : el.style.display;
        if (value && transition$$1) {
          vnode.data.show = true;
          enter(vnode, function () {
            el.style.display = originalDisplay;
          });
        } else {
          el.style.display = value ? originalDisplay : 'none';
        }
      },
  
      update: function update (el, ref, vnode) {
        var value = ref.value;
        var oldValue = ref.oldValue;
  
        /* istanbul ignore if */
        if (!value === !oldValue) { return }
        vnode = locateNode(vnode);
        var transition$$1 = vnode.data && vnode.data.transition;
        if (transition$$1) {
          vnode.data.show = true;
          if (value) {
            enter(vnode, function () {
              el.style.display = el.__vOriginalDisplay;
            });
          } else {
            leave(vnode, function () {
              el.style.display = 'none';
            });
          }
        } else {
          el.style.display = value ? el.__vOriginalDisplay : 'none';
        }
      },
  
      unbind: function unbind (
        el,
        binding,
        vnode,
        oldVnode,
        isDestroy
      ) {
        if (!isDestroy) {
          el.style.display = el.__vOriginalDisplay;
        }
      }
    };
  
    var platformDirectives = {
      model: directive,
      show: show
    };
  
    /*  */
  
    var transitionProps = {
      name: String,
      appear: Boolean,
      css: Boolean,
      mode: String,
      type: String,
      enterClass: String,
      leaveClass: String,
      enterToClass: String,
      leaveToClass: String,
      enterActiveClass: String,
      leaveActiveClass: String,
      appearClass: String,
      appearActiveClass: String,
      appearToClass: String,
      duration: [Number, String, Object]
    };
  
    // in case the child is also an abstract component, e.g. <keep-alive>
    // we want to recursively retrieve the real component to be rendered
    function getRealChild (vnode) {
      var compOptions = vnode && vnode.componentOptions;
      if (compOptions && compOptions.Ctor.options.abstract) {
        return getRealChild(getFirstComponentChild(compOptions.children))
      } else {
        return vnode
      }
    }
  
    function extractTransitionData (comp) {
      var data = {};
      var options = comp.$options;
      // props
      for (var key in options.propsData) {
        data[key] = comp[key];
      }
      // events.
      // extract listeners and pass them directly to the transition methods
      var listeners = options._parentListeners;
      for (var key$1 in listeners) {
        data[camelize(key$1)] = listeners[key$1];
      }
      return data
    }
  
    function placeholder (h, rawChild) {
      if (/\d-keep-alive$/.test(rawChild.tag)) {
        return h('keep-alive', {
          props: rawChild.componentOptions.propsData
        })
      }
    }
  
    function hasParentTransition (vnode) {
      while ((vnode = vnode.parent)) {
        if (vnode.data.transition) {
          return true
        }
      }
    }
  
    function isSameChild (child, oldChild) {
      return oldChild.key === child.key && oldChild.tag === child.tag
    }
  
    var isNotTextNode = function (c) { return c.tag || isAsyncPlaceholder(c); };
  
    var isVShowDirective = function (d) { return d.name === 'show'; };
  
    var Transition = {
      name: 'transition',
      props: transitionProps,
      abstract: true,
  
      render: function render (h) {
        var this$1 = this;
  
        var children = this.$slots.default;
        if (!children) {
          return
        }
  
        // filter out text nodes (possible whitespaces)
        children = children.filter(isNotTextNode);
        /* istanbul ignore if */
        if (!children.length) {
          return
        }
  
        // warn multiple elements
        if (children.length > 1) {
          warn(
            '<transition> can only be used on a single element. Use ' +
            '<transition-group> for lists.',
            this.$parent
          );
        }
  
        var mode = this.mode;
  
        // warn invalid mode
        if (mode && mode !== 'in-out' && mode !== 'out-in'
        ) {
          warn(
            'invalid <transition> mode: ' + mode,
            this.$parent
          );
        }
  
        var rawChild = children[0];
  
        // if this is a component root node and the component's
        // parent container node also has transition, skip.
        if (hasParentTransition(this.$vnode)) {
          return rawChild
        }
  
        // apply transition data to child
        // use getRealChild() to ignore abstract components e.g. keep-alive
        var child = getRealChild(rawChild);
        /* istanbul ignore if */
        if (!child) {
          return rawChild
        }
  
        if (this._leaving) {
          return placeholder(h, rawChild)
        }
  
        // ensure a key that is unique to the vnode type and to this transition
        // component instance. This key will be used to remove pending leaving nodes
        // during entering.
        var id = "__transition-" + (this._uid) + "-";
        child.key = child.key == null
          ? child.isComment
            ? id + 'comment'
            : id + child.tag
          : isPrimitive(child.key)
            ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)
            : child.key;
  
        var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
        var oldRawChild = this._vnode;
        var oldChild = getRealChild(oldRawChild);
  
        // mark v-show
        // so that the transition module can hand over the control to the directive
        if (child.data.directives && child.data.directives.some(isVShowDirective)) {
          child.data.show = true;
        }
  
        if (
          oldChild &&
          oldChild.data &&
          !isSameChild(child, oldChild) &&
          !isAsyncPlaceholder(oldChild) &&
          // #6687 component root is a comment node
          !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)
        ) {
          // replace old child transition data with fresh one
          // important for dynamic transitions!
          var oldData = oldChild.data.transition = extend({}, data);
          // handle transition mode
          if (mode === 'out-in') {
            // return placeholder node and queue update when leave finishes
            this._leaving = true;
            mergeVNodeHook(oldData, 'afterLeave', function () {
              this$1._leaving = false;
              this$1.$forceUpdate();
            });
            return placeholder(h, rawChild)
          } else if (mode === 'in-out') {
            if (isAsyncPlaceholder(child)) {
              return oldRawChild
            }
            var delayedLeave;
            var performLeave = function () { delayedLeave(); };
            mergeVNodeHook(data, 'afterEnter', performLeave);
            mergeVNodeHook(data, 'enterCancelled', performLeave);
            mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });
          }
        }
  
        return rawChild
      }
    };
  
    /*  */
  
    var props = extend({
      tag: String,
      moveClass: String
    }, transitionProps);
  
    delete props.mode;
  
    var TransitionGroup = {
      props: props,
  
      beforeMount: function beforeMount () {
        var this$1 = this;
  
        var update = this._update;
        this._update = function (vnode, hydrating) {
          var restoreActiveInstance = setActiveInstance(this$1);
          // force removing pass
          this$1.__patch__(
            this$1._vnode,
            this$1.kept,
            false, // hydrating
            true // removeOnly (!important, avoids unnecessary moves)
          );
          this$1._vnode = this$1.kept;
          restoreActiveInstance();
          update.call(this$1, vnode, hydrating);
        };
      },
  
      render: function render (h) {
        var tag = this.tag || this.$vnode.data.tag || 'span';
        var map = Object.create(null);
        var prevChildren = this.prevChildren = this.children;
        var rawChildren = this.$slots.default || [];
        var children = this.children = [];
        var transitionData = extractTransitionData(this);
  
        for (var i = 0; i < rawChildren.length; i++) {
          var c = rawChildren[i];
          if (c.tag) {
            if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
              children.push(c);
              map[c.key] = c
              ;(c.data || (c.data = {})).transition = transitionData;
            } else {
              var opts = c.componentOptions;
              var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;
              warn(("<transition-group> children must be keyed: <" + name + ">"));
            }
          }
        }
  
        if (prevChildren) {
          var kept = [];
          var removed = [];
          for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
            var c$1 = prevChildren[i$1];
            c$1.data.transition = transitionData;
            c$1.data.pos = c$1.elm.getBoundingClientRect();
            if (map[c$1.key]) {
              kept.push(c$1);
            } else {
              removed.push(c$1);
            }
          }
          this.kept = h(tag, null, kept);
          this.removed = removed;
        }
  
        return h(tag, null, children)
      },
  
      updated: function updated () {
        var children = this.prevChildren;
        var moveClass = this.moveClass || ((this.name || 'v') + '-move');
        if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
          return
        }
  
        // we divide the work into three loops to avoid mixing DOM reads and writes
        // in each iteration - which helps prevent layout thrashing.
        children.forEach(callPendingCbs);
        children.forEach(recordPosition);
        children.forEach(applyTranslation);
  
        // force reflow to put everything in position
        // assign to this to avoid being removed in tree-shaking
        // $flow-disable-line
        this._reflow = document.body.offsetHeight;
  
        children.forEach(function (c) {
          if (c.data.moved) {
            var el = c.elm;
            var s = el.style;
            addTransitionClass(el, moveClass);
            s.transform = s.WebkitTransform = s.transitionDuration = '';
            el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {
              if (e && e.target !== el) {
                return
              }
              if (!e || /transform$/.test(e.propertyName)) {
                el.removeEventListener(transitionEndEvent, cb);
                el._moveCb = null;
                removeTransitionClass(el, moveClass);
              }
            });
          }
        });
      },
  
      methods: {
        hasMove: function hasMove (el, moveClass) {
          /* istanbul ignore if */
          if (!hasTransition) {
            return false
          }
          /* istanbul ignore if */
          if (this._hasMove) {
            return this._hasMove
          }
          // Detect whether an element with the move class applied has
          // CSS transitions. Since the element may be inside an entering
          // transition at this very moment, we make a clone of it and remove
          // all other transition classes applied to ensure only the move class
          // is applied.
          var clone = el.cloneNode();
          if (el._transitionClasses) {
            el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });
          }
          addClass(clone, moveClass);
          clone.style.display = 'none';
          this.$el.appendChild(clone);
          var info = getTransitionInfo(clone);
          this.$el.removeChild(clone);
          return (this._hasMove = info.hasTransform)
        }
      }
    };
  
    function callPendingCbs (c) {
      /* istanbul ignore if */
      if (c.elm._moveCb) {
        c.elm._moveCb();
      }
      /* istanbul ignore if */
      if (c.elm._enterCb) {
        c.elm._enterCb();
      }
    }
  
    function recordPosition (c) {
      c.data.newPos = c.elm.getBoundingClientRect();
    }
  
    function applyTranslation (c) {
      var oldPos = c.data.pos;
      var newPos = c.data.newPos;
      var dx = oldPos.left - newPos.left;
      var dy = oldPos.top - newPos.top;
      if (dx || dy) {
        c.data.moved = true;
        var s = c.elm.style;
        s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
        s.transitionDuration = '0s';
      }
    }
  
    var platformComponents = {
      Transition: Transition,
      TransitionGroup: TransitionGroup
    };
  
    /*  */
  
    // install platform specific utils
    Vue.config.mustUseProp = mustUseProp;
    Vue.config.isReservedTag = isReservedTag;
    Vue.config.isReservedAttr = isReservedAttr;
    Vue.config.getTagNamespace = getTagNamespace;
    Vue.config.isUnknownElement = isUnknownElement;
  
    // install platform runtime directives & components
    extend(Vue.options.directives, platformDirectives);
    extend(Vue.options.components, platformComponents);
  
    // install platform patch function
    Vue.prototype.__patch__ = inBrowser ? patch : noop;
  
    // public mount method
    Vue.prototype.$mount = function (
      el,
      hydrating
    ) {
      el = el && inBrowser ? query(el) : undefined;
      return mountComponent(this, el, hydrating)
    };
  
    // devtools global hook
    /* istanbul ignore next */
    if (inBrowser) {
      setTimeout(function () {
        if (config.devtools) {
          if (devtools) {
            devtools.emit('init', Vue);
          } else {
            console[console.info ? 'info' : 'log'](
              'Download the Vue Devtools extension for a better development experience:\n' +
              'https://github.com/vuejs/vue-devtools'
            );
          }
        }
        if (config.productionTip !== false &&
          typeof console !== 'undefined'
        ) {
          console[console.info ? 'info' : 'log'](
            "You are running Vue in development mode.\n" +
            "Make sure to turn on production mode when deploying for production.\n" +
            "See more tips at https://vuejs.org/guide/deployment.html"
          );
        }
      }, 0);
    }
  
    /*  */
  
    var defaultTagRE = /\{\{((?:.|\r?\n)+?)\}\}/g;
    var regexEscapeRE = /[-.*+?^${}()|[\]\/\\]/g;
  
    var buildRegex = cached(function (delimiters) {
      var open = delimiters[0].replace(regexEscapeRE, '\\$&');
      var close = delimiters[1].replace(regexEscapeRE, '\\$&');
      return new RegExp(open + '((?:.|\\n)+?)' + close, 'g')
    });
  
  
  
    function parseText (
      text,
      delimiters
    ) {
      var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;
      if (!tagRE.test(text)) {
        return
      }
      var tokens = [];
      var rawTokens = [];
      var lastIndex = tagRE.lastIndex = 0;
      var match, index, tokenValue;
      while ((match = tagRE.exec(text))) {
        index = match.index;
        // push text token
        if (index > lastIndex) {
          rawTokens.push(tokenValue = text.slice(lastIndex, index));
          tokens.push(JSON.stringify(tokenValue));
        }
        // tag token
        var exp = parseFilters(match[1].trim());
        tokens.push(("_s(" + exp + ")"));
        rawTokens.push({ '@binding': exp });
        lastIndex = index + match[0].length;
      }
      if (lastIndex < text.length) {
        rawTokens.push(tokenValue = text.slice(lastIndex));
        tokens.push(JSON.stringify(tokenValue));
      }
      return {
        expression: tokens.join('+'),
        tokens: rawTokens
      }
    }
  
    /*  */
  
    function transformNode (el, options) {
      var warn = options.warn || baseWarn;
      var staticClass = getAndRemoveAttr(el, 'class');
      if (staticClass) {
        var res = parseText(staticClass, options.delimiters);
        if (res) {
          warn(
            "class=\"" + staticClass + "\": " +
            'Interpolation inside attributes has been removed. ' +
            'Use v-bind or the colon shorthand instead. For example, ' +
            'instead of <div class="{{ val }}">, use <div :class="val">.',
            el.rawAttrsMap['class']
          );
        }
      }
      if (staticClass) {
        el.staticClass = JSON.stringify(staticClass);
      }
      var classBinding = getBindingAttr(el, 'class', false /* getStatic */);
      if (classBinding) {
        el.classBinding = classBinding;
      }
    }
  
    function genData (el) {
      var data = '';
      if (el.staticClass) {
        data += "staticClass:" + (el.staticClass) + ",";
      }
      if (el.classBinding) {
        data += "class:" + (el.classBinding) + ",";
      }
      return data
    }
  
    var klass$1 = {
      staticKeys: ['staticClass'],
      transformNode: transformNode,
      genData: genData
    };
  
    /*  */
  
    function transformNode$1 (el, options) {
      var warn = options.warn || baseWarn;
      var staticStyle = getAndRemoveAttr(el, 'style');
      if (staticStyle) {
        /* istanbul ignore if */
        {
          var res = parseText(staticStyle, options.delimiters);
          if (res) {
            warn(
              "style=\"" + staticStyle + "\": " +
              'Interpolation inside attributes has been removed. ' +
              'Use v-bind or the colon shorthand instead. For example, ' +
              'instead of <div style="{{ val }}">, use <div :style="val">.',
              el.rawAttrsMap['style']
            );
          }
        }
        el.staticStyle = JSON.stringify(parseStyleText(staticStyle));
      }
  
      var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);
      if (styleBinding) {
        el.styleBinding = styleBinding;
      }
    }
  
    function genData$1 (el) {
      var data = '';
      if (el.staticStyle) {
        data += "staticStyle:" + (el.staticStyle) + ",";
      }
      if (el.styleBinding) {
        data += "style:(" + (el.styleBinding) + "),";
      }
      return data
    }
  
    var style$1 = {
      staticKeys: ['staticStyle'],
      transformNode: transformNode$1,
      genData: genData$1
    };
  
    /*  */
  
    var decoder;
  
    var he = {
      decode: function decode (html) {
        decoder = decoder || document.createElement('div');
        decoder.innerHTML = html;
        return decoder.textContent
      }
    };
  
    /*  */
  
    var isUnaryTag = makeMap(
      'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +
      'link,meta,param,source,track,wbr'
    );
  
    // Elements that you can, intentionally, leave open
    // (and which close themselves)
    var canBeLeftOpenTag = makeMap(
      'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'
    );
  
    // HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3
    // Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content
    var isNonPhrasingTag = makeMap(
      'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +
      'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +
      'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +
      'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +
      'title,tr,track'
    );
  
    /**
     * Not type-checking this file because it's mostly vendor code.
     */
  
    // Regular Expressions for parsing tags and attributes
    var attribute = /^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
    var dynamicArgAttribute = /^\s*((?:v-[\w-]+:|@|:|#)\[[^=]+?\][^\s"'<>\/=]*)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
    var ncname = "[a-zA-Z_][\\-\\.0-9_a-zA-Z" + (unicodeRegExp.source) + "]*";
    var qnameCapture = "((?:" + ncname + "\\:)?" + ncname + ")";
    var startTagOpen = new RegExp(("^<" + qnameCapture));
    var startTagClose = /^\s*(\/?)>/;
    var endTag = new RegExp(("^<\\/" + qnameCapture + "[^>]*>"));
    var doctype = /^<!DOCTYPE [^>]+>/i;
    // #7298: escape - to avoid being passed as HTML comment when inlined in page
    var comment = /^<!\--/;
    var conditionalComment = /^<!\[/;
  
    // Special Elements (can contain anything)
    var isPlainTextElement = makeMap('script,style,textarea', true);
    var reCache = {};
  
    var decodingMap = {
      '&lt;': '<',
      '&gt;': '>',
      '&quot;': '"',
      '&amp;': '&',
      '&#10;': '\n',
      '&#9;': '\t',
      '&#39;': "'"
    };
    var encodedAttr = /&(?:lt|gt|quot|amp|#39);/g;
    var encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#39|#10|#9);/g;
  
    // #5992
    var isIgnoreNewlineTag = makeMap('pre,textarea', true);
    var shouldIgnoreFirstNewline = function (tag, html) { return tag && isIgnoreNewlineTag(tag) && html[0] === '\n'; };
  
    function decodeAttr (value, shouldDecodeNewlines) {
      var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;
      return value.replace(re, function (match) { return decodingMap[match]; })
    }
  
    function parseHTML (html, options) {
      var stack = [];
      var expectHTML = options.expectHTML;
      var isUnaryTag$$1 = options.isUnaryTag || no;
      var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;
      var index = 0;
      var last, lastTag;
      while (html) {
        last = html;
        // Make sure we're not in a plaintext content element like script/style
        if (!lastTag || !isPlainTextElement(lastTag)) {
          var textEnd = html.indexOf('<');
          if (textEnd === 0) {
            // Comment:
            if (comment.test(html)) {
              var commentEnd = html.indexOf('-->');
  
              if (commentEnd >= 0) {
                if (options.shouldKeepComment) {
                  options.comment(html.substring(4, commentEnd), index, index + commentEnd + 3);
                }
                advance(commentEnd + 3);
                continue
              }
            }
  
            // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment
            if (conditionalComment.test(html)) {
              var conditionalEnd = html.indexOf(']>');
  
              if (conditionalEnd >= 0) {
                advance(conditionalEnd + 2);
                continue
              }
            }
  
            // Doctype:
            var doctypeMatch = html.match(doctype);
            if (doctypeMatch) {
              advance(doctypeMatch[0].length);
              continue
            }
  
            // End tag:
            var endTagMatch = html.match(endTag);
            if (endTagMatch) {
              var curIndex = index;
              advance(endTagMatch[0].length);
              parseEndTag(endTagMatch[1], curIndex, index);
              continue
            }
  
            // Start tag:
            var startTagMatch = parseStartTag();
            if (startTagMatch) {
              handleStartTag(startTagMatch);
              if (shouldIgnoreFirstNewline(startTagMatch.tagName, html)) {
                advance(1);
              }
              continue
            }
          }
  
          var text = (void 0), rest = (void 0), next = (void 0);
          if (textEnd >= 0) {
            rest = html.slice(textEnd);
            while (
              !endTag.test(rest) &&
              !startTagOpen.test(rest) &&
              !comment.test(rest) &&
              !conditionalComment.test(rest)
            ) {
              // < in plain text, be forgiving and treat it as text
              next = rest.indexOf('<', 1);
              if (next < 0) { break }
              textEnd += next;
              rest = html.slice(textEnd);
            }
            text = html.substring(0, textEnd);
          }
  
          if (textEnd < 0) {
            text = html;
          }
  
          if (text) {
            advance(text.length);
          }
  
          if (options.chars && text) {
            options.chars(text, index - text.length, index);
          }
        } else {
          var endTagLength = 0;
          var stackedTag = lastTag.toLowerCase();
          var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\s\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));
          var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {
            endTagLength = endTag.length;
            if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {
              text = text
                .replace(/<!\--([\s\S]*?)-->/g, '$1') // #7298
                .replace(/<!\[CDATA\[([\s\S]*?)]]>/g, '$1');
            }
            if (shouldIgnoreFirstNewline(stackedTag, text)) {
              text = text.slice(1);
            }
            if (options.chars) {
              options.chars(text);
            }
            return ''
          });
          index += html.length - rest$1.length;
          html = rest$1;
          parseEndTag(stackedTag, index - endTagLength, index);
        }
  
        if (html === last) {
          options.chars && options.chars(html);
          if (!stack.length && options.warn) {
            options.warn(("Mal-formatted tag at end of template: \"" + html + "\""), { start: index + html.length });
          }
          break
        }
      }
  
      // Clean up any remaining tags
      parseEndTag();
  
      function advance (n) {
        index += n;
        html = html.substring(n);
      }
  
      function parseStartTag () {
        var start = html.match(startTagOpen);
        if (start) {
          var match = {
            tagName: start[1],
            attrs: [],
            start: index
          };
          advance(start[0].length);
          var end, attr;
          while (!(end = html.match(startTagClose)) && (attr = html.match(dynamicArgAttribute) || html.match(attribute))) {
            attr.start = index;
            advance(attr[0].length);
            attr.end = index;
            match.attrs.push(attr);
          }
          if (end) {
            match.unarySlash = end[1];
            advance(end[0].length);
            match.end = index;
            return match
          }
        }
      }
  
      function handleStartTag (match) {
        var tagName = match.tagName;
        var unarySlash = match.unarySlash;
  
        if (expectHTML) {
          if (lastTag === 'p' && isNonPhrasingTag(tagName)) {
            parseEndTag(lastTag);
          }
          if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {
            parseEndTag(tagName);
          }
        }
  
        var unary = isUnaryTag$$1(tagName) || !!unarySlash;
  
        var l = match.attrs.length;
        var attrs = new Array(l);
        for (var i = 0; i < l; i++) {
          var args = match.attrs[i];
          var value = args[3] || args[4] || args[5] || '';
          var shouldDecodeNewlines = tagName === 'a' && args[1] === 'href'
            ? options.shouldDecodeNewlinesForHref
            : options.shouldDecodeNewlines;
          attrs[i] = {
            name: args[1],
            value: decodeAttr(value, shouldDecodeNewlines)
          };
          if (options.outputSourceRange) {
            attrs[i].start = args.start + args[0].match(/^\s*/).length;
            attrs[i].end = args.end;
          }
        }
  
        if (!unary) {
          stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs, start: match.start, end: match.end });
          lastTag = tagName;
        }
  
        if (options.start) {
          options.start(tagName, attrs, unary, match.start, match.end);
        }
      }
  
      function parseEndTag (tagName, start, end) {
        var pos, lowerCasedTagName;
        if (start == null) { start = index; }
        if (end == null) { end = index; }
  
        // Find the closest opened tag of the same type
        if (tagName) {
          lowerCasedTagName = tagName.toLowerCase();
          for (pos = stack.length - 1; pos >= 0; pos--) {
            if (stack[pos].lowerCasedTag === lowerCasedTagName) {
              break
            }
          }
        } else {
          // If no tag name is provided, clean shop
          pos = 0;
        }
  
        if (pos >= 0) {
          // Close all the open elements, up the stack
          for (var i = stack.length - 1; i >= pos; i--) {
            if (i > pos || !tagName &&
              options.warn
            ) {
              options.warn(
                ("tag <" + (stack[i].tag) + "> has no matching end tag."),
                { start: stack[i].start, end: stack[i].end }
              );
            }
            if (options.end) {
              options.end(stack[i].tag, start, end);
            }
          }
  
          // Remove the open elements from the stack
          stack.length = pos;
          lastTag = pos && stack[pos - 1].tag;
        } else if (lowerCasedTagName === 'br') {
          if (options.start) {
            options.start(tagName, [], true, start, end);
          }
        } else if (lowerCasedTagName === 'p') {
          if (options.start) {
            options.start(tagName, [], false, start, end);
          }
          if (options.end) {
            options.end(tagName, start, end);
          }
        }
      }
    }
  
    /*  */
  
    var onRE = /^@|^v-on:/;
    var dirRE = /^v-|^@|^:|^#/;
    var forAliasRE = /([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/;
    var forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
    var stripParensRE = /^\(|\)$/g;
    var dynamicArgRE = /^\[.*\]$/;
  
    var argRE = /:(.*)$/;
    var bindRE = /^:|^\.|^v-bind:/;
    var modifierRE = /\.[^.\]]+(?=[^\]]*$)/g;
  
    var slotRE = /^v-slot(:|$)|^#/;
  
    var lineBreakRE = /[\r\n]/;
    var whitespaceRE$1 = /[ \f\t\r\n]+/g;
  
    var invalidAttributeRE = /[\s"'<>\/=]/;
  
    var decodeHTMLCached = cached(he.decode);
  
    var emptySlotScopeToken = "_empty_";
  
    // configurable state
    var warn$2;
    var delimiters;
    var transforms;
    var preTransforms;
    var postTransforms;
    var platformIsPreTag;
    var platformMustUseProp;
    var platformGetTagNamespace;
    var maybeComponent;
  
    function createASTElement (
      tag,
      attrs,
      parent
    ) {
      return {
        type: 1,
        tag: tag,
        attrsList: attrs,
        attrsMap: makeAttrsMap(attrs),
        rawAttrsMap: {},
        parent: parent,
        children: []
      }
    }
  
    /**
     * Convert HTML string to AST.
     */
    function parse (
      template,
      options
    ) {
      warn$2 = options.warn || baseWarn;
  
      platformIsPreTag = options.isPreTag || no;
      platformMustUseProp = options.mustUseProp || no;
      platformGetTagNamespace = options.getTagNamespace || no;
      var isReservedTag = options.isReservedTag || no;
      maybeComponent = function (el) { return !!(
        el.component ||
        el.attrsMap[':is'] ||
        el.attrsMap['v-bind:is'] ||
        !(el.attrsMap.is ? isReservedTag(el.attrsMap.is) : isReservedTag(el.tag))
      ); };
      transforms = pluckModuleFunction(options.modules, 'transformNode');
      preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');
      postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');
  
      delimiters = options.delimiters;
  
      var stack = [];
      var preserveWhitespace = options.preserveWhitespace !== false;
      var whitespaceOption = options.whitespace;
      var root;
      var currentParent;
      var inVPre = false;
      var inPre = false;
      var warned = false;
  
      function warnOnce (msg, range) {
        if (!warned) {
          warned = true;
          warn$2(msg, range);
        }
      }
  
      function closeElement (element) {
        trimEndingWhitespace(element);
        if (!inVPre && !element.processed) {
          element = processElement(element, options);
        }
        // tree management
        if (!stack.length && element !== root) {
          // allow root elements with v-if, v-else-if and v-else
          if (root.if && (element.elseif || element.else)) {
            {
              checkRootConstraints(element);
            }
            addIfCondition(root, {
              exp: element.elseif,
              block: element
            });
          } else {
            warnOnce(
              "Component template should contain exactly one root element. " +
              "If you are using v-if on multiple elements, " +
              "use v-else-if to chain them instead.",
              { start: element.start }
            );
          }
        }
        if (currentParent && !element.forbidden) {
          if (element.elseif || element.else) {
            processIfConditions(element, currentParent);
          } else {
            if (element.slotScope) {
              // scoped slot
              // keep it in the children list so that v-else(-if) conditions can
              // find it as the prev node.
              var name = element.slotTarget || '"default"'
              ;(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;
            }
            currentParent.children.push(element);
            element.parent = currentParent;
          }
        }
  
        // final children cleanup
        // filter out scoped slots
        element.children = element.children.filter(function (c) { return !(c).slotScope; });
        // remove trailing whitespace node again
        trimEndingWhitespace(element);
  
        // check pre state
        if (element.pre) {
          inVPre = false;
        }
        if (platformIsPreTag(element.tag)) {
          inPre = false;
        }
        // apply post-transforms
        for (var i = 0; i < postTransforms.length; i++) {
          postTransforms[i](element, options);
        }
      }
  
      function trimEndingWhitespace (el) {
        // remove trailing whitespace node
        if (!inPre) {
          var lastNode;
          while (
            (lastNode = el.children[el.children.length - 1]) &&
            lastNode.type === 3 &&
            lastNode.text === ' '
          ) {
            el.children.pop();
          }
        }
      }
  
      function checkRootConstraints (el) {
        if (el.tag === 'slot' || el.tag === 'template') {
          warnOnce(
            "Cannot use <" + (el.tag) + "> as component root element because it may " +
            'contain multiple nodes.',
            { start: el.start }
          );
        }
        if (el.attrsMap.hasOwnProperty('v-for')) {
          warnOnce(
            'Cannot use v-for on stateful component root element because ' +
            'it renders multiple elements.',
            el.rawAttrsMap['v-for']
          );
        }
      }
  
      parseHTML(template, {
        warn: warn$2,
        expectHTML: options.expectHTML,
        isUnaryTag: options.isUnaryTag,
        canBeLeftOpenTag: options.canBeLeftOpenTag,
        shouldDecodeNewlines: options.shouldDecodeNewlines,
        shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,
        shouldKeepComment: options.comments,
        outputSourceRange: options.outputSourceRange,
        start: function start (tag, attrs, unary, start$1, end) {
          // check namespace.
          // inherit parent ns if there is one
          var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);
  
          // handle IE svg bug
          /* istanbul ignore if */
          if (isIE && ns === 'svg') {
            attrs = guardIESVGBug(attrs);
          }
  
          var element = createASTElement(tag, attrs, currentParent);
          if (ns) {
            element.ns = ns;
          }
  
          {
            if (options.outputSourceRange) {
              element.start = start$1;
              element.end = end;
              element.rawAttrsMap = element.attrsList.reduce(function (cumulated, attr) {
                cumulated[attr.name] = attr;
                return cumulated
              }, {});
            }
            attrs.forEach(function (attr) {
              if (invalidAttributeRE.test(attr.name)) {
                warn$2(
                  "Invalid dynamic argument expression: attribute names cannot contain " +
                  "spaces, quotes, <, >, / or =.",
                  {
                    start: attr.start + attr.name.indexOf("["),
                    end: attr.start + attr.name.length
                  }
                );
              }
            });
          }
  
          if (isForbiddenTag(element) && !isServerRendering()) {
            element.forbidden = true;
            warn$2(
              'Templates should only be responsible for mapping the state to the ' +
              'UI. Avoid placing tags with side-effects in your templates, such as ' +
              "<" + tag + ">" + ', as they will not be parsed.',
              { start: element.start }
            );
          }
  
          // apply pre-transforms
          for (var i = 0; i < preTransforms.length; i++) {
            element = preTransforms[i](element, options) || element;
          }
  
          if (!inVPre) {
            processPre(element);
            if (element.pre) {
              inVPre = true;
            }
          }
          if (platformIsPreTag(element.tag)) {
            inPre = true;
          }
          if (inVPre) {
            processRawAttrs(element);
          } else if (!element.processed) {
            // structural directives
            processFor(element);
            processIf(element);
            processOnce(element);
          }
  
          if (!root) {
            root = element;
            {
              checkRootConstraints(root);
            }
          }
  
          if (!unary) {
            currentParent = element;
            stack.push(element);
          } else {
            closeElement(element);
          }
        },
  
        end: function end (tag, start, end$1) {
          var element = stack[stack.length - 1];
          // pop stack
          stack.length -= 1;
          currentParent = stack[stack.length - 1];
          if (options.outputSourceRange) {
            element.end = end$1;
          }
          closeElement(element);
        },
  
        chars: function chars (text, start, end) {
          if (!currentParent) {
            {
              if (text === template) {
                warnOnce(
                  'Component template requires a root element, rather than just text.',
                  { start: start }
                );
              } else if ((text = text.trim())) {
                warnOnce(
                  ("text \"" + text + "\" outside root element will be ignored."),
                  { start: start }
                );
              }
            }
            return
          }
          // IE textarea placeholder bug
          /* istanbul ignore if */
          if (isIE &&
            currentParent.tag === 'textarea' &&
            currentParent.attrsMap.placeholder === text
          ) {
            return
          }
          var children = currentParent.children;
          if (inPre || text.trim()) {
            text = isTextTag(currentParent) ? text : decodeHTMLCached(text);
          } else if (!children.length) {
            // remove the whitespace-only node right after an opening tag
            text = '';
          } else if (whitespaceOption) {
            if (whitespaceOption === 'condense') {
              // in condense mode, remove the whitespace node if it contains
              // line break, otherwise condense to a single space
              text = lineBreakRE.test(text) ? '' : ' ';
            } else {
              text = ' ';
            }
          } else {
            text = preserveWhitespace ? ' ' : '';
          }
          if (text) {
            if (!inPre && whitespaceOption === 'condense') {
              // condense consecutive whitespaces into single space
              text = text.replace(whitespaceRE$1, ' ');
            }
            var res;
            var child;
            if (!inVPre && text !== ' ' && (res = parseText(text, delimiters))) {
              child = {
                type: 2,
                expression: res.expression,
                tokens: res.tokens,
                text: text
              };
            } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {
              child = {
                type: 3,
                text: text
              };
            }
            if (child) {
              if (options.outputSourceRange) {
                child.start = start;
                child.end = end;
              }
              children.push(child);
            }
          }
        },
        comment: function comment (text, start, end) {
          // adding anything as a sibling to the root node is forbidden
          // comments should still be allowed, but ignored
          if (currentParent) {
            var child = {
              type: 3,
              text: text,
              isComment: true
            };
            if (options.outputSourceRange) {
              child.start = start;
              child.end = end;
            }
            currentParent.children.push(child);
          }
        }
      });
      return root
    }
  
    function processPre (el) {
      if (getAndRemoveAttr(el, 'v-pre') != null) {
        el.pre = true;
      }
    }
  
    function processRawAttrs (el) {
      var list = el.attrsList;
      var len = list.length;
      if (len) {
        var attrs = el.attrs = new Array(len);
        for (var i = 0; i < len; i++) {
          attrs[i] = {
            name: list[i].name,
            value: JSON.stringify(list[i].value)
          };
          if (list[i].start != null) {
            attrs[i].start = list[i].start;
            attrs[i].end = list[i].end;
          }
        }
      } else if (!el.pre) {
        // non root node in pre blocks with no attributes
        el.plain = true;
      }
    }
  
    function processElement (
      element,
      options
    ) {
      processKey(element);
  
      // determine whether this is a plain element after
      // removing structural attributes
      element.plain = (
        !element.key &&
        !element.scopedSlots &&
        !element.attrsList.length
      );
  
      processRef(element);
      processSlotContent(element);
      processSlotOutlet(element);
      processComponent(element);
      for (var i = 0; i < transforms.length; i++) {
        element = transforms[i](element, options) || element;
      }
      processAttrs(element);
      return element
    }
  
    function processKey (el) {
      var exp = getBindingAttr(el, 'key');
      if (exp) {
        {
          if (el.tag === 'template') {
            warn$2(
              "<template> cannot be keyed. Place the key on real elements instead.",
              getRawBindingAttr(el, 'key')
            );
          }
          if (el.for) {
            var iterator = el.iterator2 || el.iterator1;
            var parent = el.parent;
            if (iterator && iterator === exp && parent && parent.tag === 'transition-group') {
              warn$2(
                "Do not use v-for index as key on <transition-group> children, " +
                "this is the same as not using keys.",
                getRawBindingAttr(el, 'key'),
                true /* tip */
              );
            }
          }
        }
        el.key = exp;
      }
    }
  
    function processRef (el) {
      var ref = getBindingAttr(el, 'ref');
      if (ref) {
        el.ref = ref;
        el.refInFor = checkInFor(el);
      }
    }
  
    function processFor (el) {
      var exp;
      if ((exp = getAndRemoveAttr(el, 'v-for'))) {
        var res = parseFor(exp);
        if (res) {
          extend(el, res);
        } else {
          warn$2(
            ("Invalid v-for expression: " + exp),
            el.rawAttrsMap['v-for']
          );
        }
      }
    }
  
  
  
    function parseFor (exp) {
      var inMatch = exp.match(forAliasRE);
      if (!inMatch) { return }
      var res = {};
      res.for = inMatch[2].trim();
      var alias = inMatch[1].trim().replace(stripParensRE, '');
      var iteratorMatch = alias.match(forIteratorRE);
      if (iteratorMatch) {
        res.alias = alias.replace(forIteratorRE, '').trim();
        res.iterator1 = iteratorMatch[1].trim();
        if (iteratorMatch[2]) {
          res.iterator2 = iteratorMatch[2].trim();
        }
      } else {
        res.alias = alias;
      }
      return res
    }
  
    function processIf (el) {
      var exp = getAndRemoveAttr(el, 'v-if');
      if (exp) {
        el.if = exp;
        addIfCondition(el, {
          exp: exp,
          block: el
        });
      } else {
        if (getAndRemoveAttr(el, 'v-else') != null) {
          el.else = true;
        }
        var elseif = getAndRemoveAttr(el, 'v-else-if');
        if (elseif) {
          el.elseif = elseif;
        }
      }
    }
  
    function processIfConditions (el, parent) {
      var prev = findPrevElement(parent.children);
      if (prev && prev.if) {
        addIfCondition(prev, {
          exp: el.elseif,
          block: el
        });
      } else {
        warn$2(
          "v-" + (el.elseif ? ('else-if="' + el.elseif + '"') : 'else') + " " +
          "used on element <" + (el.tag) + "> without corresponding v-if.",
          el.rawAttrsMap[el.elseif ? 'v-else-if' : 'v-else']
        );
      }
    }
  
    function findPrevElement (children) {
      var i = children.length;
      while (i--) {
        if (children[i].type === 1) {
          return children[i]
        } else {
          if (children[i].text !== ' ') {
            warn$2(
              "text \"" + (children[i].text.trim()) + "\" between v-if and v-else(-if) " +
              "will be ignored.",
              children[i]
            );
          }
          children.pop();
        }
      }
    }
  
    function addIfCondition (el, condition) {
      if (!el.ifConditions) {
        el.ifConditions = [];
      }
      el.ifConditions.push(condition);
    }
  
    function processOnce (el) {
      var once$$1 = getAndRemoveAttr(el, 'v-once');
      if (once$$1 != null) {
        el.once = true;
      }
    }
  
    // handle content being passed to a component as slot,
    // e.g. <template slot="xxx">, <div slot-scope="xxx">
    function processSlotContent (el) {
      var slotScope;
      if (el.tag === 'template') {
        slotScope = getAndRemoveAttr(el, 'scope');
        /* istanbul ignore if */
        if (slotScope) {
          warn$2(
            "the \"scope\" attribute for scoped slots have been deprecated and " +
            "replaced by \"slot-scope\" since 2.5. The new \"slot-scope\" attribute " +
            "can also be used on plain elements in addition to <template> to " +
            "denote scoped slots.",
            el.rawAttrsMap['scope'],
            true
          );
        }
        el.slotScope = slotScope || getAndRemoveAttr(el, 'slot-scope');
      } else if ((slotScope = getAndRemoveAttr(el, 'slot-scope'))) {
        /* istanbul ignore if */
        if (el.attrsMap['v-for']) {
          warn$2(
            "Ambiguous combined usage of slot-scope and v-for on <" + (el.tag) + "> " +
            "(v-for takes higher priority). Use a wrapper <template> for the " +
            "scoped slot to make it clearer.",
            el.rawAttrsMap['slot-scope'],
            true
          );
        }
        el.slotScope = slotScope;
      }
  
      // slot="xxx"
      var slotTarget = getBindingAttr(el, 'slot');
      if (slotTarget) {
        el.slotTarget = slotTarget === '""' ? '"default"' : slotTarget;
        el.slotTargetDynamic = !!(el.attrsMap[':slot'] || el.attrsMap['v-bind:slot']);
        // preserve slot as an attribute for native shadow DOM compat
        // only for non-scoped slots.
        if (el.tag !== 'template' && !el.slotScope) {
          addAttr(el, 'slot', slotTarget, getRawBindingAttr(el, 'slot'));
        }
      }
  
      // 2.6 v-slot syntax
      {
        if (el.tag === 'template') {
          // v-slot on <template>
          var slotBinding = getAndRemoveAttrByRegex(el, slotRE);
          if (slotBinding) {
            {
              if (el.slotTarget || el.slotScope) {
                warn$2(
                  "Unexpected mixed usage of different slot syntaxes.",
                  el
                );
              }
              if (el.parent && !maybeComponent(el.parent)) {
                warn$2(
                  "<template v-slot> can only appear at the root level inside " +
                  "the receiving component",
                  el
                );
              }
            }
            var ref = getSlotName(slotBinding);
            var name = ref.name;
            var dynamic = ref.dynamic;
            el.slotTarget = name;
            el.slotTargetDynamic = dynamic;
            el.slotScope = slotBinding.value || emptySlotScopeToken; // force it into a scoped slot for perf
          }
        } else {
          // v-slot on component, denotes default slot
          var slotBinding$1 = getAndRemoveAttrByRegex(el, slotRE);
          if (slotBinding$1) {
            {
              if (!maybeComponent(el)) {
                warn$2(
                  "v-slot can only be used on components or <template>.",
                  slotBinding$1
                );
              }
              if (el.slotScope || el.slotTarget) {
                warn$2(
                  "Unexpected mixed usage of different slot syntaxes.",
                  el
                );
              }
              if (el.scopedSlots) {
                warn$2(
                  "To avoid scope ambiguity, the default slot should also use " +
                  "<template> syntax when there are other named slots.",
                  slotBinding$1
                );
              }
            }
            // add the component's children to its default slot
            var slots = el.scopedSlots || (el.scopedSlots = {});
            var ref$1 = getSlotName(slotBinding$1);
            var name$1 = ref$1.name;
            var dynamic$1 = ref$1.dynamic;
            var slotContainer = slots[name$1] = createASTElement('template', [], el);
            slotContainer.slotTarget = name$1;
            slotContainer.slotTargetDynamic = dynamic$1;
            slotContainer.children = el.children.filter(function (c) {
              if (!c.slotScope) {
                c.parent = slotContainer;
                return true
              }
            });
            slotContainer.slotScope = slotBinding$1.value || emptySlotScopeToken;
            // remove children as they are returned from scopedSlots now
            el.children = [];
            // mark el non-plain so data gets generated
            el.plain = false;
          }
        }
      }
    }
  
    function getSlotName (binding) {
      var name = binding.name.replace(slotRE, '');
      if (!name) {
        if (binding.name[0] !== '#') {
          name = 'default';
        } else {
          warn$2(
            "v-slot shorthand syntax requires a slot name.",
            binding
          );
        }
      }
      return dynamicArgRE.test(name)
        // dynamic [name]
        ? { name: name.slice(1, -1), dynamic: true }
        // static name
        : { name: ("\"" + name + "\""), dynamic: false }
    }
  
    // handle <slot/> outlets
    function processSlotOutlet (el) {
      if (el.tag === 'slot') {
        el.slotName = getBindingAttr(el, 'name');
        if (el.key) {
          warn$2(
            "`key` does not work on <slot> because slots are abstract outlets " +
            "and can possibly expand into multiple elements. " +
            "Use the key on a wrapping element instead.",
            getRawBindingAttr(el, 'key')
          );
        }
      }
    }
  
    function processComponent (el) {
      var binding;
      if ((binding = getBindingAttr(el, 'is'))) {
        el.component = binding;
      }
      if (getAndRemoveAttr(el, 'inline-template') != null) {
        el.inlineTemplate = true;
      }
    }
  
    function processAttrs (el) {
      var list = el.attrsList;
      var i, l, name, rawName, value, modifiers, syncGen, isDynamic;
      for (i = 0, l = list.length; i < l; i++) {
        name = rawName = list[i].name;
        value = list[i].value;
        if (dirRE.test(name)) {
          // mark element as dynamic
          el.hasBindings = true;
          // modifiers
          modifiers = parseModifiers(name.replace(dirRE, ''));
          // support .foo shorthand syntax for the .prop modifier
          if (modifiers) {
            name = name.replace(modifierRE, '');
          }
          if (bindRE.test(name)) { // v-bind
            name = name.replace(bindRE, '');
            value = parseFilters(value);
            isDynamic = dynamicArgRE.test(name);
            if (isDynamic) {
              name = name.slice(1, -1);
            }
            if (
              value.trim().length === 0
            ) {
              warn$2(
                ("The value for a v-bind expression cannot be empty. Found in \"v-bind:" + name + "\"")
              );
            }
            if (modifiers) {
              if (modifiers.prop && !isDynamic) {
                name = camelize(name);
                if (name === 'innerHtml') { name = 'innerHTML'; }
              }
              if (modifiers.camel && !isDynamic) {
                name = camelize(name);
              }
              if (modifiers.sync) {
                syncGen = genAssignmentCode(value, "$event");
                if (!isDynamic) {
                  addHandler(
                    el,
                    ("update:" + (camelize(name))),
                    syncGen,
                    null,
                    false,
                    warn$2,
                    list[i]
                  );
                  if (hyphenate(name) !== camelize(name)) {
                    addHandler(
                      el,
                      ("update:" + (hyphenate(name))),
                      syncGen,
                      null,
                      false,
                      warn$2,
                      list[i]
                    );
                  }
                } else {
                  // handler w/ dynamic event name
                  addHandler(
                    el,
                    ("\"update:\"+(" + name + ")"),
                    syncGen,
                    null,
                    false,
                    warn$2,
                    list[i],
                    true // dynamic
                  );
                }
              }
            }
            if ((modifiers && modifiers.prop) || (
              !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)
            )) {
              addProp(el, name, value, list[i], isDynamic);
            } else {
              addAttr(el, name, value, list[i], isDynamic);
            }
          } else if (onRE.test(name)) { // v-on
            name = name.replace(onRE, '');
            isDynamic = dynamicArgRE.test(name);
            if (isDynamic) {
              name = name.slice(1, -1);
            }
            addHandler(el, name, value, modifiers, false, warn$2, list[i], isDynamic);
          } else { // normal directives
            name = name.replace(dirRE, '');
            // parse arg
            var argMatch = name.match(argRE);
            var arg = argMatch && argMatch[1];
            isDynamic = false;
            if (arg) {
              name = name.slice(0, -(arg.length + 1));
              if (dynamicArgRE.test(arg)) {
                arg = arg.slice(1, -1);
                isDynamic = true;
              }
            }
            addDirective(el, name, rawName, value, arg, isDynamic, modifiers, list[i]);
            if (name === 'model') {
              checkForAliasModel(el, value);
            }
          }
        } else {
          // literal attribute
          {
            var res = parseText(value, delimiters);
            if (res) {
              warn$2(
                name + "=\"" + value + "\": " +
                'Interpolation inside attributes has been removed. ' +
                'Use v-bind or the colon shorthand instead. For example, ' +
                'instead of <div id="{{ val }}">, use <div :id="val">.',
                list[i]
              );
            }
          }
          addAttr(el, name, JSON.stringify(value), list[i]);
          // #6887 firefox doesn't update muted state if set via attribute
          // even immediately after element creation
          if (!el.component &&
              name === 'muted' &&
              platformMustUseProp(el.tag, el.attrsMap.type, name)) {
            addProp(el, name, 'true', list[i]);
          }
        }
      }
    }
  
    function checkInFor (el) {
      var parent = el;
      while (parent) {
        if (parent.for !== undefined) {
          return true
        }
        parent = parent.parent;
      }
      return false
    }
  
    function parseModifiers (name) {
      var match = name.match(modifierRE);
      if (match) {
        var ret = {};
        match.forEach(function (m) { ret[m.slice(1)] = true; });
        return ret
      }
    }
  
    function makeAttrsMap (attrs) {
      var map = {};
      for (var i = 0, l = attrs.length; i < l; i++) {
        if (
          map[attrs[i].name] && !isIE && !isEdge
        ) {
          warn$2('duplicate attribute: ' + attrs[i].name, attrs[i]);
        }
        map[attrs[i].name] = attrs[i].value;
      }
      return map
    }
  
    // for script (e.g. type="x/template") or style, do not decode content
    function isTextTag (el) {
      return el.tag === 'script' || el.tag === 'style'
    }
  
    function isForbiddenTag (el) {
      return (
        el.tag === 'style' ||
        (el.tag === 'script' && (
          !el.attrsMap.type ||
          el.attrsMap.type === 'text/javascript'
        ))
      )
    }
  
    var ieNSBug = /^xmlns:NS\d+/;
    var ieNSPrefix = /^NS\d+:/;
  
    /* istanbul ignore next */
    function guardIESVGBug (attrs) {
      var res = [];
      for (var i = 0; i < attrs.length; i++) {
        var attr = attrs[i];
        if (!ieNSBug.test(attr.name)) {
          attr.name = attr.name.replace(ieNSPrefix, '');
          res.push(attr);
        }
      }
      return res
    }
  
    function checkForAliasModel (el, value) {
      var _el = el;
      while (_el) {
        if (_el.for && _el.alias === value) {
          warn$2(
            "<" + (el.tag) + " v-model=\"" + value + "\">: " +
            "You are binding v-model directly to a v-for iteration alias. " +
            "This will not be able to modify the v-for source array because " +
            "writing to the alias is like modifying a function local variable. " +
            "Consider using an array of objects and use v-model on an object property instead.",
            el.rawAttrsMap['v-model']
          );
        }
        _el = _el.parent;
      }
    }
  
    /*  */
  
    function preTransformNode (el, options) {
      if (el.tag === 'input') {
        var map = el.attrsMap;
        if (!map['v-model']) {
          return
        }
  
        var typeBinding;
        if (map[':type'] || map['v-bind:type']) {
          typeBinding = getBindingAttr(el, 'type');
        }
        if (!map.type && !typeBinding && map['v-bind']) {
          typeBinding = "(" + (map['v-bind']) + ").type";
        }
  
        if (typeBinding) {
          var ifCondition = getAndRemoveAttr(el, 'v-if', true);
          var ifConditionExtra = ifCondition ? ("&&(" + ifCondition + ")") : "";
          var hasElse = getAndRemoveAttr(el, 'v-else', true) != null;
          var elseIfCondition = getAndRemoveAttr(el, 'v-else-if', true);
          // 1. checkbox
          var branch0 = cloneASTElement(el);
          // process for on the main node
          processFor(branch0);
          addRawAttr(branch0, 'type', 'checkbox');
          processElement(branch0, options);
          branch0.processed = true; // prevent it from double-processed
          branch0.if = "(" + typeBinding + ")==='checkbox'" + ifConditionExtra;
          addIfCondition(branch0, {
            exp: branch0.if,
            block: branch0
          });
          // 2. add radio else-if condition
          var branch1 = cloneASTElement(el);
          getAndRemoveAttr(branch1, 'v-for', true);
          addRawAttr(branch1, 'type', 'radio');
          processElement(branch1, options);
          addIfCondition(branch0, {
            exp: "(" + typeBinding + ")==='radio'" + ifConditionExtra,
            block: branch1
          });
          // 3. other
          var branch2 = cloneASTElement(el);
          getAndRemoveAttr(branch2, 'v-for', true);
          addRawAttr(branch2, ':type', typeBinding);
          processElement(branch2, options);
          addIfCondition(branch0, {
            exp: ifCondition,
            block: branch2
          });
  
          if (hasElse) {
            branch0.else = true;
          } else if (elseIfCondition) {
            branch0.elseif = elseIfCondition;
          }
  
          return branch0
        }
      }
    }
  
    function cloneASTElement (el) {
      return createASTElement(el.tag, el.attrsList.slice(), el.parent)
    }
  
    var model$1 = {
      preTransformNode: preTransformNode
    };
  
    var modules$1 = [
      klass$1,
      style$1,
      model$1
    ];
  
    /*  */
  
    function text (el, dir) {
      if (dir.value) {
        addProp(el, 'textContent', ("_s(" + (dir.value) + ")"), dir);
      }
    }
  
    /*  */
  
    function html (el, dir) {
      if (dir.value) {
        addProp(el, 'innerHTML', ("_s(" + (dir.value) + ")"), dir);
      }
    }
  
    var directives$1 = {
      model: model,
      text: text,
      html: html
    };
  
    /*  */
  
    var baseOptions = {
      expectHTML: true,
      modules: modules$1,
      directives: directives$1,
      isPreTag: isPreTag,
      isUnaryTag: isUnaryTag,
      mustUseProp: mustUseProp,
      canBeLeftOpenTag: canBeLeftOpenTag,
      isReservedTag: isReservedTag,
      getTagNamespace: getTagNamespace,
      staticKeys: genStaticKeys(modules$1)
    };
  
    /*  */
  
    var isStaticKey;
    var isPlatformReservedTag;
  
    var genStaticKeysCached = cached(genStaticKeys$1);
  
    /**
     * Goal of the optimizer: walk the generated template AST tree
     * and detect sub-trees that are purely static, i.e. parts of
     * the DOM that never needs to change.
     *
     * Once we detect these sub-trees, we can:
     *
     * 1. Hoist them into constants, so that we no longer need to
     *    create fresh nodes for them on each re-render;
     * 2. Completely skip them in the patching process.
     */
    function optimize (root, options) {
      if (!root) { return }
      isStaticKey = genStaticKeysCached(options.staticKeys || '');
      isPlatformReservedTag = options.isReservedTag || no;
      // first pass: mark all non-static nodes.
      markStatic$1(root);
      // second pass: mark static roots.
      markStaticRoots(root, false);
    }
  
    function genStaticKeys$1 (keys) {
      return makeMap(
        'type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap' +
        (keys ? ',' + keys : '')
      )
    }
  
    function markStatic$1 (node) {
      node.static = isStatic(node);
      if (node.type === 1) {
        // do not make component slot content static. this avoids
        // 1. components not able to mutate slot nodes
        // 2. static slot content fails for hot-reloading
        if (
          !isPlatformReservedTag(node.tag) &&
          node.tag !== 'slot' &&
          node.attrsMap['inline-template'] == null
        ) {
          return
        }
        for (var i = 0, l = node.children.length; i < l; i++) {
          var child = node.children[i];
          markStatic$1(child);
          if (!child.static) {
            node.static = false;
          }
        }
        if (node.ifConditions) {
          for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
            var block = node.ifConditions[i$1].block;
            markStatic$1(block);
            if (!block.static) {
              node.static = false;
            }
          }
        }
      }
    }
  
    function markStaticRoots (node, isInFor) {
      if (node.type === 1) {
        if (node.static || node.once) {
          node.staticInFor = isInFor;
        }
        // For a node to qualify as a static root, it should have children that
        // are not just static text. Otherwise the cost of hoisting out will
        // outweigh the benefits and it's better off to just always render it fresh.
        if (node.static && node.children.length && !(
          node.children.length === 1 &&
          node.children[0].type === 3
        )) {
          node.staticRoot = true;
          return
        } else {
          node.staticRoot = false;
        }
        if (node.children) {
          for (var i = 0, l = node.children.length; i < l; i++) {
            markStaticRoots(node.children[i], isInFor || !!node.for);
          }
        }
        if (node.ifConditions) {
          for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
            markStaticRoots(node.ifConditions[i$1].block, isInFor);
          }
        }
      }
    }
  
    function isStatic (node) {
      if (node.type === 2) { // expression
        return false
      }
      if (node.type === 3) { // text
        return true
      }
      return !!(node.pre || (
        !node.hasBindings && // no dynamic bindings
        !node.if && !node.for && // not v-if or v-for or v-else
        !isBuiltInTag(node.tag) && // not a built-in
        isPlatformReservedTag(node.tag) && // not a component
        !isDirectChildOfTemplateFor(node) &&
        Object.keys(node).every(isStaticKey)
      ))
    }
  
    function isDirectChildOfTemplateFor (node) {
      while (node.parent) {
        node = node.parent;
        if (node.tag !== 'template') {
          return false
        }
        if (node.for) {
          return true
        }
      }
      return false
    }
  
    /*  */
  
    var fnExpRE = /^([\w$_]+|\([^)]*?\))\s*=>|^function(?:\s+[\w$]+)?\s*\(/;
    var fnInvokeRE = /\([^)]*?\);*$/;
    var simplePathRE = /^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/;
  
    // KeyboardEvent.keyCode aliases
    var keyCodes = {
      esc: 27,
      tab: 9,
      enter: 13,
      space: 32,
      up: 38,
      left: 37,
      right: 39,
      down: 40,
      'delete': [8, 46]
    };
  
    // KeyboardEvent.key aliases
    var keyNames = {
      // #7880: IE11 and Edge use `Esc` for Escape key name.
      esc: ['Esc', 'Escape'],
      tab: 'Tab',
      enter: 'Enter',
      // #9112: IE11 uses `Spacebar` for Space key name.
      space: [' ', 'Spacebar'],
      // #7806: IE11 uses key names without `Arrow` prefix for arrow keys.
      up: ['Up', 'ArrowUp'],
      left: ['Left', 'ArrowLeft'],
      right: ['Right', 'ArrowRight'],
      down: ['Down', 'ArrowDown'],
      // #9112: IE11 uses `Del` for Delete key name.
      'delete': ['Backspace', 'Delete', 'Del']
    };
  
    // #4868: modifiers that prevent the execution of the listener
    // need to explicitly return null so that we can determine whether to remove
    // the listener for .once
    var genGuard = function (condition) { return ("if(" + condition + ")return null;"); };
  
    var modifierCode = {
      stop: '$event.stopPropagation();',
      prevent: '$event.preventDefault();',
      self: genGuard("$event.target !== $event.currentTarget"),
      ctrl: genGuard("!$event.ctrlKey"),
      shift: genGuard("!$event.shiftKey"),
      alt: genGuard("!$event.altKey"),
      meta: genGuard("!$event.metaKey"),
      left: genGuard("'button' in $event && $event.button !== 0"),
      middle: genGuard("'button' in $event && $event.button !== 1"),
      right: genGuard("'button' in $event && $event.button !== 2")
    };
  
    function genHandlers (
      events,
      isNative
    ) {
      var prefix = isNative ? 'nativeOn:' : 'on:';
      var staticHandlers = "";
      var dynamicHandlers = "";
      for (var name in events) {
        var handlerCode = genHandler(events[name]);
        if (events[name] && events[name].dynamic) {
          dynamicHandlers += name + "," + handlerCode + ",";
        } else {
          staticHandlers += "\"" + name + "\":" + handlerCode + ",";
        }
      }
      staticHandlers = "{" + (staticHandlers.slice(0, -1)) + "}";
      if (dynamicHandlers) {
        return prefix + "_d(" + staticHandlers + ",[" + (dynamicHandlers.slice(0, -1)) + "])"
      } else {
        return prefix + staticHandlers
      }
    }
  
    function genHandler (handler) {
      if (!handler) {
        return 'function(){}'
      }
  
      if (Array.isArray(handler)) {
        return ("[" + (handler.map(function (handler) { return genHandler(handler); }).join(',')) + "]")
      }
  
      var isMethodPath = simplePathRE.test(handler.value);
      var isFunctionExpression = fnExpRE.test(handler.value);
      var isFunctionInvocation = simplePathRE.test(handler.value.replace(fnInvokeRE, ''));
  
      if (!handler.modifiers) {
        if (isMethodPath || isFunctionExpression) {
          return handler.value
        }
        return ("function($event){" + (isFunctionInvocation ? ("return " + (handler.value)) : handler.value) + "}") // inline statement
      } else {
        var code = '';
        var genModifierCode = '';
        var keys = [];
        for (var key in handler.modifiers) {
          if (modifierCode[key]) {
            genModifierCode += modifierCode[key];
            // left/right
            if (keyCodes[key]) {
              keys.push(key);
            }
          } else if (key === 'exact') {
            var modifiers = (handler.modifiers);
            genModifierCode += genGuard(
              ['ctrl', 'shift', 'alt', 'meta']
                .filter(function (keyModifier) { return !modifiers[keyModifier]; })
                .map(function (keyModifier) { return ("$event." + keyModifier + "Key"); })
                .join('||')
            );
          } else {
            keys.push(key);
          }
        }
        if (keys.length) {
          code += genKeyFilter(keys);
        }
        // Make sure modifiers like prevent and stop get executed after key filtering
        if (genModifierCode) {
          code += genModifierCode;
        }
        var handlerCode = isMethodPath
          ? ("return " + (handler.value) + ".apply(null, arguments)")
          : isFunctionExpression
            ? ("return (" + (handler.value) + ").apply(null, arguments)")
            : isFunctionInvocation
              ? ("return " + (handler.value))
              : handler.value;
        return ("function($event){" + code + handlerCode + "}")
      }
    }
  
    function genKeyFilter (keys) {
      return (
        // make sure the key filters only apply to KeyboardEvents
        // #9441: can't use 'keyCode' in $event because Chrome autofill fires fake
        // key events that do not have keyCode property...
        "if(!$event.type.indexOf('key')&&" +
        (keys.map(genFilterCode).join('&&')) + ")return null;"
      )
    }
  
    function genFilterCode (key) {
      var keyVal = parseInt(key, 10);
      if (keyVal) {
        return ("$event.keyCode!==" + keyVal)
      }
      var keyCode = keyCodes[key];
      var keyName = keyNames[key];
      return (
        "_k($event.keyCode," +
        (JSON.stringify(key)) + "," +
        (JSON.stringify(keyCode)) + "," +
        "$event.key," +
        "" + (JSON.stringify(keyName)) +
        ")"
      )
    }
  
    /*  */
  
    function on (el, dir) {
      if (dir.modifiers) {
        warn("v-on without argument does not support modifiers.");
      }
      el.wrapListeners = function (code) { return ("_g(" + code + "," + (dir.value) + ")"); };
    }
  
    /*  */
  
    function bind$1 (el, dir) {
      el.wrapData = function (code) {
        return ("_b(" + code + ",'" + (el.tag) + "'," + (dir.value) + "," + (dir.modifiers && dir.modifiers.prop ? 'true' : 'false') + (dir.modifiers && dir.modifiers.sync ? ',true' : '') + ")")
      };
    }
  
    /*  */
  
    var baseDirectives = {
      on: on,
      bind: bind$1,
      cloak: noop
    };
  
    /*  */
  
  
  
  
  
    var CodegenState = function CodegenState (options) {
      this.options = options;
      this.warn = options.warn || baseWarn;
      this.transforms = pluckModuleFunction(options.modules, 'transformCode');
      this.dataGenFns = pluckModuleFunction(options.modules, 'genData');
      this.directives = extend(extend({}, baseDirectives), options.directives);
      var isReservedTag = options.isReservedTag || no;
      this.maybeComponent = function (el) { return !!el.component || !isReservedTag(el.tag); };
      this.onceId = 0;
      this.staticRenderFns = [];
      this.pre = false;
    };
  
  
  
    function generate (
      ast,
      options
    ) {
      var state = new CodegenState(options);
      // fix #11483, Root level <script> tags should not be rendered.
      var code = ast ? (ast.tag === 'script' ? 'null' : genElement(ast, state)) : '_c("div")';
      return {
        render: ("with(this){return " + code + "}"),
        staticRenderFns: state.staticRenderFns
      }
    }
  
    function genElement (el, state) {
      if (el.parent) {
        el.pre = el.pre || el.parent.pre;
      }
  
      if (el.staticRoot && !el.staticProcessed) {
        return genStatic(el, state)
      } else if (el.once && !el.onceProcessed) {
        return genOnce(el, state)
      } else if (el.for && !el.forProcessed) {
        return genFor(el, state)
      } else if (el.if && !el.ifProcessed) {
        return genIf(el, state)
      } else if (el.tag === 'template' && !el.slotTarget && !state.pre) {
        return genChildren(el, state) || 'void 0'
      } else if (el.tag === 'slot') {
        return genSlot(el, state)
      } else {
        // component or element
        var code;
        if (el.component) {
          code = genComponent(el.component, el, state);
        } else {
          var data;
          if (!el.plain || (el.pre && state.maybeComponent(el))) {
            data = genData$2(el, state);
          }
  
          var children = el.inlineTemplate ? null : genChildren(el, state, true);
          code = "_c('" + (el.tag) + "'" + (data ? ("," + data) : '') + (children ? ("," + children) : '') + ")";
        }
        // module transforms
        for (var i = 0; i < state.transforms.length; i++) {
          code = state.transforms[i](el, code);
        }
        return code
      }
    }
  
    // hoist static sub-trees out
    function genStatic (el, state) {
      el.staticProcessed = true;
      // Some elements (templates) need to behave differently inside of a v-pre
      // node.  All pre nodes are static roots, so we can use this as a location to
      // wrap a state change and reset it upon exiting the pre node.
      var originalPreState = state.pre;
      if (el.pre) {
        state.pre = el.pre;
      }
      state.staticRenderFns.push(("with(this){return " + (genElement(el, state)) + "}"));
      state.pre = originalPreState;
      return ("_m(" + (state.staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + ")")
    }
  
    // v-once
    function genOnce (el, state) {
      el.onceProcessed = true;
      if (el.if && !el.ifProcessed) {
        return genIf(el, state)
      } else if (el.staticInFor) {
        var key = '';
        var parent = el.parent;
        while (parent) {
          if (parent.for) {
            key = parent.key;
            break
          }
          parent = parent.parent;
        }
        if (!key) {
          state.warn(
            "v-once can only be used inside v-for that is keyed. ",
            el.rawAttrsMap['v-once']
          );
          return genElement(el, state)
        }
        return ("_o(" + (genElement(el, state)) + "," + (state.onceId++) + "," + key + ")")
      } else {
        return genStatic(el, state)
      }
    }
  
    function genIf (
      el,
      state,
      altGen,
      altEmpty
    ) {
      el.ifProcessed = true; // avoid recursion
      return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty)
    }
  
    function genIfConditions (
      conditions,
      state,
      altGen,
      altEmpty
    ) {
      if (!conditions.length) {
        return altEmpty || '_e()'
      }
  
      var condition = conditions.shift();
      if (condition.exp) {
        return ("(" + (condition.exp) + ")?" + (genTernaryExp(condition.block)) + ":" + (genIfConditions(conditions, state, altGen, altEmpty)))
      } else {
        return ("" + (genTernaryExp(condition.block)))
      }
  
      // v-if with v-once should generate code like (a)?_m(0):_m(1)
      function genTernaryExp (el) {
        return altGen
          ? altGen(el, state)
          : el.once
            ? genOnce(el, state)
            : genElement(el, state)
      }
    }
  
    function genFor (
      el,
      state,
      altGen,
      altHelper
    ) {
      var exp = el.for;
      var alias = el.alias;
      var iterator1 = el.iterator1 ? ("," + (el.iterator1)) : '';
      var iterator2 = el.iterator2 ? ("," + (el.iterator2)) : '';
  
      if (state.maybeComponent(el) &&
        el.tag !== 'slot' &&
        el.tag !== 'template' &&
        !el.key
      ) {
        state.warn(
          "<" + (el.tag) + " v-for=\"" + alias + " in " + exp + "\">: component lists rendered with " +
          "v-for should have explicit keys. " +
          "See https://vuejs.org/guide/list.html#key for more info.",
          el.rawAttrsMap['v-for'],
          true /* tip */
        );
      }
  
      el.forProcessed = true; // avoid recursion
      return (altHelper || '_l') + "((" + exp + ")," +
        "function(" + alias + iterator1 + iterator2 + "){" +
          "return " + ((altGen || genElement)(el, state)) +
        '})'
    }
  
    function genData$2 (el, state) {
      var data = '{';
  
      // directives first.
      // directives may mutate the el's other properties before they are generated.
      var dirs = genDirectives(el, state);
      if (dirs) { data += dirs + ','; }
  
      // key
      if (el.key) {
        data += "key:" + (el.key) + ",";
      }
      // ref
      if (el.ref) {
        data += "ref:" + (el.ref) + ",";
      }
      if (el.refInFor) {
        data += "refInFor:true,";
      }
      // pre
      if (el.pre) {
        data += "pre:true,";
      }
      // record original tag name for components using "is" attribute
      if (el.component) {
        data += "tag:\"" + (el.tag) + "\",";
      }
      // module data generation functions
      for (var i = 0; i < state.dataGenFns.length; i++) {
        data += state.dataGenFns[i](el);
      }
      // attributes
      if (el.attrs) {
        data += "attrs:" + (genProps(el.attrs)) + ",";
      }
      // DOM props
      if (el.props) {
        data += "domProps:" + (genProps(el.props)) + ",";
      }
      // event handlers
      if (el.events) {
        data += (genHandlers(el.events, false)) + ",";
      }
      if (el.nativeEvents) {
        data += (genHandlers(el.nativeEvents, true)) + ",";
      }
      // slot target
      // only for non-scoped slots
      if (el.slotTarget && !el.slotScope) {
        data += "slot:" + (el.slotTarget) + ",";
      }
      // scoped slots
      if (el.scopedSlots) {
        data += (genScopedSlots(el, el.scopedSlots, state)) + ",";
      }
      // component v-model
      if (el.model) {
        data += "model:{value:" + (el.model.value) + ",callback:" + (el.model.callback) + ",expression:" + (el.model.expression) + "},";
      }
      // inline-template
      if (el.inlineTemplate) {
        var inlineTemplate = genInlineTemplate(el, state);
        if (inlineTemplate) {
          data += inlineTemplate + ",";
        }
      }
      data = data.replace(/,$/, '') + '}';
      // v-bind dynamic argument wrap
      // v-bind with dynamic arguments must be applied using the same v-bind object
      // merge helper so that class/style/mustUseProp attrs are handled correctly.
      if (el.dynamicAttrs) {
        data = "_b(" + data + ",\"" + (el.tag) + "\"," + (genProps(el.dynamicAttrs)) + ")";
      }
      // v-bind data wrap
      if (el.wrapData) {
        data = el.wrapData(data);
      }
      // v-on data wrap
      if (el.wrapListeners) {
        data = el.wrapListeners(data);
      }
      return data
    }
  
    function genDirectives (el, state) {
      var dirs = el.directives;
      if (!dirs) { return }
      var res = 'directives:[';
      var hasRuntime = false;
      var i, l, dir, needRuntime;
      for (i = 0, l = dirs.length; i < l; i++) {
        dir = dirs[i];
        needRuntime = true;
        var gen = state.directives[dir.name];
        if (gen) {
          // compile-time directive that manipulates AST.
          // returns true if it also needs a runtime counterpart.
          needRuntime = !!gen(el, dir, state.warn);
        }
        if (needRuntime) {
          hasRuntime = true;
          res += "{name:\"" + (dir.name) + "\",rawName:\"" + (dir.rawName) + "\"" + (dir.value ? (",value:(" + (dir.value) + "),expression:" + (JSON.stringify(dir.value))) : '') + (dir.arg ? (",arg:" + (dir.isDynamicArg ? dir.arg : ("\"" + (dir.arg) + "\""))) : '') + (dir.modifiers ? (",modifiers:" + (JSON.stringify(dir.modifiers))) : '') + "},";
        }
      }
      if (hasRuntime) {
        return res.slice(0, -1) + ']'
      }
    }
  
    function genInlineTemplate (el, state) {
      var ast = el.children[0];
      if (el.children.length !== 1 || ast.type !== 1) {
        state.warn(
          'Inline-template components must have exactly one child element.',
          { start: el.start }
        );
      }
      if (ast && ast.type === 1) {
        var inlineRenderFns = generate(ast, state.options);
        return ("inlineTemplate:{render:function(){" + (inlineRenderFns.render) + "},staticRenderFns:[" + (inlineRenderFns.staticRenderFns.map(function (code) { return ("function(){" + code + "}"); }).join(',')) + "]}")
      }
    }
  
    function genScopedSlots (
      el,
      slots,
      state
    ) {
      // by default scoped slots are considered "stable", this allows child
      // components with only scoped slots to skip forced updates from parent.
      // but in some cases we have to bail-out of this optimization
      // for example if the slot contains dynamic names, has v-if or v-for on them...
      var needsForceUpdate = el.for || Object.keys(slots).some(function (key) {
        var slot = slots[key];
        return (
          slot.slotTargetDynamic ||
          slot.if ||
          slot.for ||
          containsSlotChild(slot) // is passing down slot from parent which may be dynamic
        )
      });
  
      // #9534: if a component with scoped slots is inside a conditional branch,
      // it's possible for the same component to be reused but with different
      // compiled slot content. To avoid that, we generate a unique key based on
      // the generated code of all the slot contents.
      var needsKey = !!el.if;
  
      // OR when it is inside another scoped slot or v-for (the reactivity may be
      // disconnected due to the intermediate scope variable)
      // #9438, #9506
      // TODO: this can be further optimized by properly analyzing in-scope bindings
      // and skip force updating ones that do not actually use scope variables.
      if (!needsForceUpdate) {
        var parent = el.parent;
        while (parent) {
          if (
            (parent.slotScope && parent.slotScope !== emptySlotScopeToken) ||
            parent.for
          ) {
            needsForceUpdate = true;
            break
          }
          if (parent.if) {
            needsKey = true;
          }
          parent = parent.parent;
        }
      }
  
      var generatedSlots = Object.keys(slots)
        .map(function (key) { return genScopedSlot(slots[key], state); })
        .join(',');
  
      return ("scopedSlots:_u([" + generatedSlots + "]" + (needsForceUpdate ? ",null,true" : "") + (!needsForceUpdate && needsKey ? (",null,false," + (hash(generatedSlots))) : "") + ")")
    }
  
    function hash(str) {
      var hash = 5381;
      var i = str.length;
      while(i) {
        hash = (hash * 33) ^ str.charCodeAt(--i);
      }
      return hash >>> 0
    }
  
    function containsSlotChild (el) {
      if (el.type === 1) {
        if (el.tag === 'slot') {
          return true
        }
        return el.children.some(containsSlotChild)
      }
      return false
    }
  
    function genScopedSlot (
      el,
      state
    ) {
      var isLegacySyntax = el.attrsMap['slot-scope'];
      if (el.if && !el.ifProcessed && !isLegacySyntax) {
        return genIf(el, state, genScopedSlot, "null")
      }
      if (el.for && !el.forProcessed) {
        return genFor(el, state, genScopedSlot)
      }
      var slotScope = el.slotScope === emptySlotScopeToken
        ? ""
        : String(el.slotScope);
      var fn = "function(" + slotScope + "){" +
        "return " + (el.tag === 'template'
          ? el.if && isLegacySyntax
            ? ("(" + (el.if) + ")?" + (genChildren(el, state) || 'undefined') + ":undefined")
            : genChildren(el, state) || 'undefined'
          : genElement(el, state)) + "}";
      // reverse proxy v-slot without scope on this.$slots
      var reverseProxy = slotScope ? "" : ",proxy:true";
      return ("{key:" + (el.slotTarget || "\"default\"") + ",fn:" + fn + reverseProxy + "}")
    }
  
    function genChildren (
      el,
      state,
      checkSkip,
      altGenElement,
      altGenNode
    ) {
      var children = el.children;
      if (children.length) {
        var el$1 = children[0];
        // optimize single v-for
        if (children.length === 1 &&
          el$1.for &&
          el$1.tag !== 'template' &&
          el$1.tag !== 'slot'
        ) {
          var normalizationType = checkSkip
            ? state.maybeComponent(el$1) ? ",1" : ",0"
            : "";
          return ("" + ((altGenElement || genElement)(el$1, state)) + normalizationType)
        }
        var normalizationType$1 = checkSkip
          ? getNormalizationType(children, state.maybeComponent)
          : 0;
        var gen = altGenNode || genNode;
        return ("[" + (children.map(function (c) { return gen(c, state); }).join(',')) + "]" + (normalizationType$1 ? ("," + normalizationType$1) : ''))
      }
    }
  
    // determine the normalization needed for the children array.
    // 0: no normalization needed
    // 1: simple normalization needed (possible 1-level deep nested array)
    // 2: full normalization needed
    function getNormalizationType (
      children,
      maybeComponent
    ) {
      var res = 0;
      for (var i = 0; i < children.length; i++) {
        var el = children[i];
        if (el.type !== 1) {
          continue
        }
        if (needsNormalization(el) ||
            (el.ifConditions && el.ifConditions.some(function (c) { return needsNormalization(c.block); }))) {
          res = 2;
          break
        }
        if (maybeComponent(el) ||
            (el.ifConditions && el.ifConditions.some(function (c) { return maybeComponent(c.block); }))) {
          res = 1;
        }
      }
      return res
    }
  
    function needsNormalization (el) {
      return el.for !== undefined || el.tag === 'template' || el.tag === 'slot'
    }
  
    function genNode (node, state) {
      if (node.type === 1) {
        return genElement(node, state)
      } else if (node.type === 3 && node.isComment) {
        return genComment(node)
      } else {
        return genText(node)
      }
    }
  
    function genText (text) {
      return ("_v(" + (text.type === 2
        ? text.expression // no need for () because already wrapped in _s()
        : transformSpecialNewlines(JSON.stringify(text.text))) + ")")
    }
  
    function genComment (comment) {
      return ("_e(" + (JSON.stringify(comment.text)) + ")")
    }
  
    function genSlot (el, state) {
      var slotName = el.slotName || '"default"';
      var children = genChildren(el, state);
      var res = "_t(" + slotName + (children ? (",function(){return " + children + "}") : '');
      var attrs = el.attrs || el.dynamicAttrs
        ? genProps((el.attrs || []).concat(el.dynamicAttrs || []).map(function (attr) { return ({
            // slot props are camelized
            name: camelize(attr.name),
            value: attr.value,
            dynamic: attr.dynamic
          }); }))
        : null;
      var bind$$1 = el.attrsMap['v-bind'];
      if ((attrs || bind$$1) && !children) {
        res += ",null";
      }
      if (attrs) {
        res += "," + attrs;
      }
      if (bind$$1) {
        res += (attrs ? '' : ',null') + "," + bind$$1;
      }
      return res + ')'
    }
  
    // componentName is el.component, take it as argument to shun flow's pessimistic refinement
    function genComponent (
      componentName,
      el,
      state
    ) {
      var children = el.inlineTemplate ? null : genChildren(el, state, true);
      return ("_c(" + componentName + "," + (genData$2(el, state)) + (children ? ("," + children) : '') + ")")
    }
  
    function genProps (props) {
      var staticProps = "";
      var dynamicProps = "";
      for (var i = 0; i < props.length; i++) {
        var prop = props[i];
        var value = transformSpecialNewlines(prop.value);
        if (prop.dynamic) {
          dynamicProps += (prop.name) + "," + value + ",";
        } else {
          staticProps += "\"" + (prop.name) + "\":" + value + ",";
        }
      }
      staticProps = "{" + (staticProps.slice(0, -1)) + "}";
      if (dynamicProps) {
        return ("_d(" + staticProps + ",[" + (dynamicProps.slice(0, -1)) + "])")
      } else {
        return staticProps
      }
    }
  
    // #3895, #4268
    function transformSpecialNewlines (text) {
      return text
        .replace(/\u2028/g, '\\u2028')
        .replace(/\u2029/g, '\\u2029')
    }
  
    /*  */
  
  
  
    // these keywords should not appear inside expressions, but operators like
    // typeof, instanceof and in are allowed
    var prohibitedKeywordRE = new RegExp('\\b' + (
      'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +
      'super,throw,while,yield,delete,export,import,return,switch,default,' +
      'extends,finally,continue,debugger,function,arguments'
    ).split(',').join('\\b|\\b') + '\\b');
  
    // these unary operators should not be used as property/method names
    var unaryOperatorsRE = new RegExp('\\b' + (
      'delete,typeof,void'
    ).split(',').join('\\s*\\([^\\)]*\\)|\\b') + '\\s*\\([^\\)]*\\)');
  
    // strip strings in expressions
    var stripStringRE = /'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g;
  
    // detect problematic expressions in a template
    function detectErrors (ast, warn) {
      if (ast) {
        checkNode(ast, warn);
      }
    }
  
    function checkNode (node, warn) {
      if (node.type === 1) {
        for (var name in node.attrsMap) {
          if (dirRE.test(name)) {
            var value = node.attrsMap[name];
            if (value) {
              var range = node.rawAttrsMap[name];
              if (name === 'v-for') {
                checkFor(node, ("v-for=\"" + value + "\""), warn, range);
              } else if (name === 'v-slot' || name[0] === '#') {
                checkFunctionParameterExpression(value, (name + "=\"" + value + "\""), warn, range);
              } else if (onRE.test(name)) {
                checkEvent(value, (name + "=\"" + value + "\""), warn, range);
              } else {
                checkExpression(value, (name + "=\"" + value + "\""), warn, range);
              }
            }
          }
        }
        if (node.children) {
          for (var i = 0; i < node.children.length; i++) {
            checkNode(node.children[i], warn);
          }
        }
      } else if (node.type === 2) {
        checkExpression(node.expression, node.text, warn, node);
      }
    }
  
    function checkEvent (exp, text, warn, range) {
      var stripped = exp.replace(stripStringRE, '');
      var keywordMatch = stripped.match(unaryOperatorsRE);
      if (keywordMatch && stripped.charAt(keywordMatch.index - 1) !== '$') {
        warn(
          "avoid using JavaScript unary operator as property name: " +
          "\"" + (keywordMatch[0]) + "\" in expression " + (text.trim()),
          range
        );
      }
      checkExpression(exp, text, warn, range);
    }
  
    function checkFor (node, text, warn, range) {
      checkExpression(node.for || '', text, warn, range);
      checkIdentifier(node.alias, 'v-for alias', text, warn, range);
      checkIdentifier(node.iterator1, 'v-for iterator', text, warn, range);
      checkIdentifier(node.iterator2, 'v-for iterator', text, warn, range);
    }
  
    function checkIdentifier (
      ident,
      type,
      text,
      warn,
      range
    ) {
      if (typeof ident === 'string') {
        try {
          new Function(("var " + ident + "=_"));
        } catch (e) {
          warn(("invalid " + type + " \"" + ident + "\" in expression: " + (text.trim())), range);
        }
      }
    }
  
    function checkExpression (exp, text, warn, range) {
      try {
        new Function(("return " + exp));
      } catch (e) {
        var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);
        if (keywordMatch) {
          warn(
            "avoid using JavaScript keyword as property name: " +
            "\"" + (keywordMatch[0]) + "\"\n  Raw expression: " + (text.trim()),
            range
          );
        } else {
          warn(
            "invalid expression: " + (e.message) + " in\n\n" +
            "    " + exp + "\n\n" +
            "  Raw expression: " + (text.trim()) + "\n",
            range
          );
        }
      }
    }
  
    function checkFunctionParameterExpression (exp, text, warn, range) {
      try {
        new Function(exp, '');
      } catch (e) {
        warn(
          "invalid function parameter expression: " + (e.message) + " in\n\n" +
          "    " + exp + "\n\n" +
          "  Raw expression: " + (text.trim()) + "\n",
          range
        );
      }
    }
  
    /*  */
  
    var range = 2;
  
    function generateCodeFrame (
      source,
      start,
      end
    ) {
      if ( start === void 0 ) start = 0;
      if ( end === void 0 ) end = source.length;
  
      var lines = source.split(/\r?\n/);
      var count = 0;
      var res = [];
      for (var i = 0; i < lines.length; i++) {
        count += lines[i].length + 1;
        if (count >= start) {
          for (var j = i - range; j <= i + range || end > count; j++) {
            if (j < 0 || j >= lines.length) { continue }
            res.push(("" + (j + 1) + (repeat$1(" ", 3 - String(j + 1).length)) + "|  " + (lines[j])));
            var lineLength = lines[j].length;
            if (j === i) {
              // push underline
              var pad = start - (count - lineLength) + 1;
              var length = end > count ? lineLength - pad : end - start;
              res.push("   |  " + repeat$1(" ", pad) + repeat$1("^", length));
            } else if (j > i) {
              if (end > count) {
                var length$1 = Math.min(end - count, lineLength);
                res.push("   |  " + repeat$1("^", length$1));
              }
              count += lineLength + 1;
            }
          }
          break
        }
      }
      return res.join('\n')
    }
  
    function repeat$1 (str, n) {
      var result = '';
      if (n > 0) {
        while (true) { // eslint-disable-line
          if (n & 1) { result += str; }
          n >>>= 1;
          if (n <= 0) { break }
          str += str;
        }
      }
      return result
    }
  
    /*  */
  
  
  
    function createFunction (code, errors) {
      try {
        return new Function(code)
      } catch (err) {
        errors.push({ err: err, code: code });
        return noop
      }
    }
  
    function createCompileToFunctionFn (compile) {
      var cache = Object.create(null);
  
      return function compileToFunctions (
        template,
        options,
        vm
      ) {
        options = extend({}, options);
        var warn$$1 = options.warn || warn;
        delete options.warn;
  
        /* istanbul ignore if */
        {
          // detect possible CSP restriction
          try {
            new Function('return 1');
          } catch (e) {
            if (e.toString().match(/unsafe-eval|CSP/)) {
              warn$$1(
                'It seems you are using the standalone build of Vue.js in an ' +
                'environment with Content Security Policy that prohibits unsafe-eval. ' +
                'The template compiler cannot work in this environment. Consider ' +
                'relaxing the policy to allow unsafe-eval or pre-compiling your ' +
                'templates into render functions.'
              );
            }
          }
        }
  
        // check cache
        var key = options.delimiters
          ? String(options.delimiters) + template
          : template;
        if (cache[key]) {
          return cache[key]
        }
  
        // compile
        var compiled = compile(template, options);
  
        // check compilation errors/tips
        {
          if (compiled.errors && compiled.errors.length) {
            if (options.outputSourceRange) {
              compiled.errors.forEach(function (e) {
                warn$$1(
                  "Error compiling template:\n\n" + (e.msg) + "\n\n" +
                  generateCodeFrame(template, e.start, e.end),
                  vm
                );
              });
            } else {
              warn$$1(
                "Error compiling template:\n\n" + template + "\n\n" +
                compiled.errors.map(function (e) { return ("- " + e); }).join('\n') + '\n',
                vm
              );
            }
          }
          if (compiled.tips && compiled.tips.length) {
            if (options.outputSourceRange) {
              compiled.tips.forEach(function (e) { return tip(e.msg, vm); });
            } else {
              compiled.tips.forEach(function (msg) { return tip(msg, vm); });
            }
          }
        }
  
        // turn code into functions
        var res = {};
        var fnGenErrors = [];
        res.render = createFunction(compiled.render, fnGenErrors);
        res.staticRenderFns = compiled.staticRenderFns.map(function (code) {
          return createFunction(code, fnGenErrors)
        });
  
        // check function generation errors.
        // this should only happen if there is a bug in the compiler itself.
        // mostly for codegen development use
        /* istanbul ignore if */
        {
          if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {
            warn$$1(
              "Failed to generate render function:\n\n" +
              fnGenErrors.map(function (ref) {
                var err = ref.err;
                var code = ref.code;
  
                return ((err.toString()) + " in\n\n" + code + "\n");
            }).join('\n'),
              vm
            );
          }
        }
  
        return (cache[key] = res)
      }
    }
  
    /*  */
  
    function createCompilerCreator (baseCompile) {
      return function createCompiler (baseOptions) {
        function compile (
          template,
          options
        ) {
          var finalOptions = Object.create(baseOptions);
          var errors = [];
          var tips = [];
  
          var warn = function (msg, range, tip) {
            (tip ? tips : errors).push(msg);
          };
  
          if (options) {
            if (options.outputSourceRange) {
              // $flow-disable-line
              var leadingSpaceLength = template.match(/^\s*/)[0].length;
  
              warn = function (msg, range, tip) {
                var data = { msg: msg };
                if (range) {
                  if (range.start != null) {
                    data.start = range.start + leadingSpaceLength;
                  }
                  if (range.end != null) {
                    data.end = range.end + leadingSpaceLength;
                  }
                }
                (tip ? tips : errors).push(data);
              };
            }
            // merge custom modules
            if (options.modules) {
              finalOptions.modules =
                (baseOptions.modules || []).concat(options.modules);
            }
            // merge custom directives
            if (options.directives) {
              finalOptions.directives = extend(
                Object.create(baseOptions.directives || null),
                options.directives
              );
            }
            // copy other options
            for (var key in options) {
              if (key !== 'modules' && key !== 'directives') {
                finalOptions[key] = options[key];
              }
            }
          }
  
          finalOptions.warn = warn;
  
          var compiled = baseCompile(template.trim(), finalOptions);
          {
            detectErrors(compiled.ast, warn);
          }
          compiled.errors = errors;
          compiled.tips = tips;
          return compiled
        }
  
        return {
          compile: compile,
          compileToFunctions: createCompileToFunctionFn(compile)
        }
      }
    }
  
    /*  */
  
    // `createCompilerCreator` allows creating compilers that use alternative
    // parser/optimizer/codegen, e.g the SSR optimizing compiler.
    // Here we just export a default compiler using the default parts.
    var createCompiler = createCompilerCreator(function baseCompile (
      template,
      options
    ) {
      var ast = parse(template.trim(), options);
      if (options.optimize !== false) {
        optimize(ast, options);
      }
      var code = generate(ast, options);
      return {
        ast: ast,
        render: code.render,
        staticRenderFns: code.staticRenderFns
      }
    });
  
    /*  */
  
    var ref$1 = createCompiler(baseOptions);
    var compile = ref$1.compile;
    var compileToFunctions = ref$1.compileToFunctions;
  
    /*  */
  
    // check whether current browser encodes a char inside attribute values
    var div;
    function getShouldDecode (href) {
      div = div || document.createElement('div');
      div.innerHTML = href ? "<a href=\"\n\"/>" : "<div a=\"\n\"/>";
      return div.innerHTML.indexOf('&#10;') > 0
    }
  
    // #3663: IE encodes newlines inside attribute values while other browsers don't
    var shouldDecodeNewlines = inBrowser ? getShouldDecode(false) : false;
    // #6828: chrome encodes content in a[href]
    var shouldDecodeNewlinesForHref = inBrowser ? getShouldDecode(true) : false;
  
    /*  */
  
    var idToTemplate = cached(function (id) {
      var el = query(id);
      return el && el.innerHTML
    });
  
    var mount = Vue.prototype.$mount;
    Vue.prototype.$mount = function (
      el,
      hydrating
    ) {
      el = el && query(el);
  
      /* istanbul ignore if */
      if (el === document.body || el === document.documentElement) {
        warn(
          "Do not mount Vue to <html> or <body> - mount to normal elements instead."
        );
        return this
      }
  
      var options = this.$options;
      // resolve template/el and convert to render function
      if (!options.render) {
        var template = options.template;
        if (template) {
          if (typeof template === 'string') {
            if (template.charAt(0) === '#') {
              template = idToTemplate(template);
              /* istanbul ignore if */
              if (!template) {
                warn(
                  ("Template element not found or is empty: " + (options.template)),
                  this
                );
              }
            }
          } else if (template.nodeType) {
            template = template.innerHTML;
          } else {
            {
              warn('invalid template option:' + template, this);
            }
            return this
          }
        } else if (el) {
          template = getOuterHTML(el);
        }
        if (template) {
          /* istanbul ignore if */
          if (config.performance && mark) {
            mark('compile');
          }
  
          var ref = compileToFunctions(template, {
            outputSourceRange: "development" !== 'production',
            shouldDecodeNewlines: shouldDecodeNewlines,
            shouldDecodeNewlinesForHref: shouldDecodeNewlinesForHref,
            delimiters: options.delimiters,
            comments: options.comments
          }, this);
          var render = ref.render;
          var staticRenderFns = ref.staticRenderFns;
          options.render = render;
          options.staticRenderFns = staticRenderFns;
  
          /* istanbul ignore if */
          if (config.performance && mark) {
            mark('compile end');
            measure(("vue " + (this._name) + " compile"), 'compile', 'compile end');
          }
        }
      }
      return mount.call(this, el, hydrating)
    };
  
    /**
     * Get outerHTML of elements, taking care
     * of SVG elements in IE as well.
     */
    function getOuterHTML (el) {
      if (el.outerHTML) {
        return el.outerHTML
      } else {
        var container = document.createElement('div');
        container.appendChild(el.cloneNode(true));
        return container.innerHTML
      }
    }
  
    Vue.compile = compileToFunctions;

    return Vue;
  
  });
  

//Included:lib/003.simplest-db-v1.0.3.part.js
/*lib:simplest-db@1.0.3 + modifications*/
(function (root, factory) {
    const scope = (typeof window === 'object') ? window : global;
    if(typeof scope === "undefined") return;
    if("SimplestDB" in scope) return scope.SimplestDB;
    const output = factory();
    if(typeof module === 'object' && typeof module.exports === 'object')
        module.exports = output;
    if(typeof define === 'function' && define.amd)
        define([], factory);
    if(typeof exports === 'object')
        exports["SimplestDB"] = output;
    scope["SimplestDB"] = output;
})(this, function() {

    class SimplestDB {

        static create(...args) {
            return new this(...args);
        }

        static getFS() {
            if(this.$fs) {
                return this.$fs;
            }
            this.$fs = new SimplestDB({
                schema: "system",
                tables: {
                    "fs": {
                        columns: {
                            "path": { is_type: "string" },
                            "contents": { is_type: "string" },
                            "metadata": { is_type: "object" },
                        }
                    }
                }
            });
            return this.$fs;
        }

        static getCache() {
            if(this.$cache) {
                return this.$cache;
            }
            this.$cache = new SimplestDB({
                schema: "system",
                tables: {
                    "cache": {
                        columns: {
                            "key": { is_type: "string" },
                            "value": { is_type: "string" },
                        }
                    }
                }
            });
            return this.$cache;
        }

        constructor(schema = {}, noValidate = false) {
            if(typeof schema !== "object") throw new Error("Required «schema» to be an object, found «" + typeof(schema) + "» [0301]");
            if(typeof schema.schema !== "string") schema.schema = "system";
            if(!("attributes" in schema)) {Object.assign(schema, {attributes:{}})}
            if(!("tables" in schema)) {Object.assign(schema, {tables:{}})}
            this.schema = this.validateSchema(schema);
            this.noValidate = noValidate;
            this.baseDir = (typeof schema.baseDir === "string" ? schema.baseDir.replace(/^\/+/g, "").replace(/\/+$/g, "") : "./sdb_modules") + "/";
            if(typeof global === "object") {
                const fs = require("fs");
                const hasBaseDir = fs.existsSync(this.baseDir) && fs.lstatSync(this.baseDir).isDirectory();
                if(!hasBaseDir) {
                    fs.mkdirSync(this.baseDir);
                }
            }
        }

        validateTable(tableId) {
            if(typeof tableId !== "string") throw new Error("Required parameter table «" + tableId + "» to be a string, found «" + typeof(tableId) + "» [0101]");
            if(this.noValidate) return this.schema.tables[tableId];
            if(!(tableId in this.schema.tables)) throw new Error("Required parameter table «" + tableId + "» to exist as table in schema, only accepted: «" + Object.keys(this.schema.tables).join("», «") + "» [0402]");
            return this.schema.tables[tableId];
        }
        
        validateRow(tableId, value) {
            if(typeof tableId !== "string") throw new Error("Required parameter table «" + tableId + "» to be a string, found «" + typeof(tableId) + "» [0801]");
            if(this.noValidate) return this.schema.tables[tableId];
            if(!(tableId in this.schema.tables)) throw new Error("Required parameter table «" + tableId + "» to exist as table in schema, only accepted: «" + Object.keys(this.schema.tables).join("», «") + "» [0802]");
            return true;
        }

        validateSchema(schema) {
            if(typeof schema !== "object") throw new Error("Required «schema» to be an object, found «" + typeof(schema) + "» [0301]");
            if(typeof schema.schema !== "string") throw new Error("Required «schema.schema» to be a string, found «" + typeof(schema) + "» [0302]");
            if(typeof schema.attributes === "undefined") schema.attributes = {};
            if(typeof schema.attributes !== "object") throw new Error("Required «schema.attributes» to be an object, found «" + typeof(attributes) + "» [0303]");
            if(typeof schema.tables === "undefined") schema.tables = {};
            if(typeof schema.tables !== "object") throw new Error("Required «schema.tables» to be an object, found «" + typeof(tables) + "» [0304]");
            const tableIds = Object.keys(schema.tables);
            for(let indexTable = 0; indexTable < tableIds.length; indexTable++) {
                const tableId = tableIds[indexTable];
                if(typeof schema.tables[tableId] !== "object") throw new Error("Required «schema.tables[" + JSON.stringify(tableId) + "]» to be an object, found «" + typeof(schema.tables[tableId]) + "» [0305]");
                if(typeof schema.tables[tableId].attributes === "undefined") schema.tables[tableId].attributes = {};
                if(typeof schema.tables[tableId].attributes !== "object") throw new Error("Required «schema.tables[" + JSON.stringify(tableId) + "].attributes» to be an object, found «" + typeof(attributes) + "» [0306]");
                if(typeof schema.tables[tableId].columns === "undefined") schema.tables[tableId].columns = {};
                if(typeof schema.tables[tableId].columns !== "object") throw new Error("Required «schema.tables[" + JSON.stringify(tableId) + "].columns» to be an object, found «" + typeof(columns) + "» [0307]");
                const tableData = schema.tables[tableId];
                const columnIds = Object.keys(tableData.columns);
                for(let indexColumn = 0; indexColumn < columnIds.length; indexColumn++) {
                    const columnId = columnIds[indexColumn];
                    const columnData = tableData.columns[columnId];
                    if(typeof columnData !== "object") throw new Error("Required «schema.tables[" + JSON.stringify(tableId) + "].columns[" + JSON.stringify(columnId) + "]»")
                    if(typeof columnData.attributes === "undefined") columnData.attributes = {};
                    if(typeof columnData.attributes !== "object") throw new Error("Required «schema.tables[" + JSON.stringify(tableId) + "].columns[" + JSON.stringify(columnId) + "].attributes»")
                    if(typeof columnData.is_type !== "string") throw new Error("Required «schema.tables[" + JSON.stringify(tableId) + "].columns[" + JSON.stringify(columnId) + "].is_type»")
                }
            }
            return schema;
        }

        setSchema(schema) {
            this.schema = this.validateSchema(schema);
        }

        consumeIdOf(tableId) {
            if(typeof tableId !== "string") throw new Error("Required «tableId» to be an object, found «" + typeof(tableId) + "» [0901]");
            this.validateTable(tableId);
            if(typeof window === "object") {
                const storageId = "SDB_STORAGE_FOR_" + this.schema.schema;
                if(!(storageId in localStorage)) {
                    localStorage[storageId] = JSON.stringify({$KEYS:{[tableId]:1},[tableId]:{}});
                    return 1;
                }
                const storageJson = localStorage[storageId];
                const storageData = JSON.parse(storageJson);
                const tableLastId = storageData.$KEYS[tableId]++;
                localStorage[storageId] = JSON.stringify(storageData);
                return tableLastId;
            } else if(typeof global === "object") {
                const storageId = this.baseDir + this.schema.schema + ".data.json";
                const fs = require("fs");
                if(!fs.existsSync(storageId)) {
                    fs.writeFileSync(storageId, JSON.stringify({$KEYS:{[tableId]:1},[tableId]:{}}));
                    return 1;
                }
                const storageJson = fs.readFileSync(storageId).toString();
                const storageData = JSON.parse(storageJson);
                const tableLastId = storageData.$KEYS[tableId]++;
                fs.writeFileSync(storageId, JSON.stringify(storageData), "utf8");
                return tableLastId;
            }
        }

        getData(tableId) {
            if(typeof tableId !== "string") throw new Error("Required «tableId» to be an object, found «" + typeof(tableId) + "» [0401]");
            this.validateTable(tableId);
            if(typeof window === "object") {
                const storageId = "SDB_STORAGE_FOR_" + this.schema.schema;
                if(!(storageId in localStorage)) {
                    localStorage[storageId] = JSON.stringify({$KEYS:{}});
                }
                const storageJson = localStorage[storageId];
                const storageData = JSON.parse(storageJson);
                if(!(tableId in storageData)) {
                    return {};
                    throw new Error("Required model «" + tableId + "» to exist in database and not only in schema «" + this.schema.schema + "» [0402]");
                }
                return storageData[tableId];
            } else if(typeof global === "object") {
                const storageId = this.baseDir + this.schema.schema + ".data.json";
                const fs = require("fs");
                if(!fs.existsSync(storageId)) {
                    fs.writeFileSync(storageId, JSON.stringify({$KEYS:{}}), "utf8");
                }
                const storageJson = fs.readFileSync(storageId).toString();
                const storageData = JSON.parse(storageJson);
                if(!(tableId in storageData)) {
                    return {};
                    throw new Error("Required model «" + tableId + "» to exist in database and not only in schema «" + this.schema.schema + "» [0403]");
                }
                return Object.assign({}, storageData[tableId]);
            }
        }
        
        setData(tableId, modelId, data) {
            if(typeof window === "object") {
                if(typeof tableId !== "string") throw new Error("Required «tableId» to be a string, found «" + typeof(tableId) + "» [0501]");
                if(typeof modelId !== "number") throw new Error("Required «modelId» to be an number, found «" + typeof(modelId) + "» [0502]");
                if(typeof data === "undefined") {}
                else if(typeof data !== "object") throw new Error("Required «data» to be an object, found «" + typeof(data) + "» [0503]");
                this.validateTable(tableId);
                const storageId = "SDB_STORAGE_FOR_" + this.schema.schema;
                if(!(storageId in localStorage)) {
                    localStorage[storageId] = JSON.stringify({$KEYS:{}});
                }
                const storageJson = localStorage[storageId];
                const storageData = JSON.parse(storageJson);
                if(!(tableId in storageData)) {
                    storageData[tableId] = {};
                    storageData.$KEYS[tableId] = 1;
                }
                let operation = "update";
                let selectedId = (modelId === 0) ? storageData.$KEYS[tableId]++ : modelId; 
                if(!(selectedId in storageData[tableId])) {
                    if(modelId !== 0) {
                        throw new Error("Required parameter modelId «" + modelId + "» to be 0 or to exist as id in table «" + storageId + ":" + tableId + "» [0504]")
                    } else operation = "insert";
                }
                if(typeof data === "undefined") {
                    delete storageData[tableId][selectedId];
                } else {
                    if(operation === "insert") {
                        data.id = selectedId;
                    }
                    storageData[tableId][selectedId] = Object.assign({}, storageData[tableId][selectedId] || {}, data);
                }
                const json = JSON.stringify(storageData);
                localStorage[storageId] = json;
                return selectedId;
            } else if(typeof global === "object") {
                if(typeof tableId !== "string") throw new Error("Required «tableId» to be a string, found «" + typeof(tableId) + "» [1101]");
                if(typeof modelId !== "number") throw new Error("Required «modelId» to be an number, found «" + typeof(modelId) + "» [1102]");
                if(typeof data === "undefined") {}
                else if(typeof data !== "object") throw new Error("Required «data» to be an object, found «" + typeof(data) + "» [1103]");
                this.validateTable(tableId);
                const fs = require("fs");
                const storageId = this.baseDir + this.schema.schema + ".data.json";
                if(!fs.existsSync(storageId)) {
                    fs.writeFileSync(storageId, JSON.stringify({[tableId]:{},$KEYS:{[tableId]:1}}), "utf8");
                }
                const storageJson0 = fs.readFileSync(storageId).toString();
                const storageData = JSON.parse(storageJson0);
                if(!(tableId in storageData)) {
                    storageData[tableId] = {};
                    storageData.$KEYS[tableId] = 1;
                }
                let operation = "update";
                let selectedId = modelId === 0 ? storageData.$KEYS[tableId]++ : modelId; 
                if(!(selectedId in storageData[tableId])) {
                    if(modelId !== 0) {
                        throw new Error("Required id «" + modelId + "» to be 0 (insert) or to exist as id in table «" + storageId + ":" + tableId + "#" + modelId + "» [1104]")
                    } else operation = "insert";
                }
                if(typeof data === "undefined") {
                    delete storageData[tableId][selectedId];
                } else {
                    if(operation === "insert") {
                        data.id = selectedId;
                    }
                    storageData[tableId][selectedId] = Object.assign({}, storageData[tableId][selectedId] || {}, data);
                }
                const json = JSON.stringify(storageData);
                fs.writeFileSync(storageId, json, "utf8");
                return selectedId;
            }
        }

        select(tableId, filter) {
            if(typeof tableId !== "string") throw new Error("Required «tableId» to be a string, found «" + typeof(tableId) + "» [0601]");
            this.validateTable(tableId);
            const data = this.getData(tableId);
            if(typeof filter === "function") {
                return Object.values(data).filter(filter).reduce((output, item) => {
                    try {
                        output[item.id] = item;
                        return output;
                    } catch (error) {
                        return false;
                    }
                }, {});
            } else if(typeof filter === "undefined") {
                return data;
            } else {
                throw new Error("Required «filter» to be a valid, found «" + typeof(filter) + "» type [0602]");
            }
        }

        insert(tableId, value) {
            if(typeof tableId !== "string") throw new Error("Required «tableId» to be a string, found «" + typeof(tableId) + "» [0701]");
            if(typeof value !== "object") throw new Error("Required «value» to be an object, found «" + typeof(value) + "» [0702]");
            this.validateRow(tableId, value);
            return this.setData(tableId, 0, value);
        }

        update(tableId, instanceId, value) {
            if(typeof tableId !== "string") throw new Error("Required «tableId» to be a string, found «" + typeof(tableId) + "» [1201]");
            if(typeof instanceId !== "number") throw new Error("Required «instanceId» to be an number, found «" + typeof(instanceId) + "» [1202]");
            if(typeof value !== "object") throw new Error("Required «value» to be an object, found «" + typeof(value) + "» [1203]");
            this.validateRow(tableId, value);
            return this.setData(tableId, instanceId, value);
        }

        delete(tableId, instanceId) {
            if(typeof tableId !== "string") throw new Error("Required «tableId» to be a string, found «" + typeof(tableId) + "» [1401]");
            if(typeof instanceId !== "number") throw new Error("Required «instanceId» to be an number, found «" + typeof(instanceId) + "» [1402]");
            this.validateTable(tableId);
            return this.setData(tableId, instanceId, undefined);
        }
    }
  
    SimplestDB.default = SimplestDB;

    return SimplestDB;

}, this);

//Included:lib/004.ejs.part.js
(function (f) {
  if (typeof define === "function" && define.amd) {
    define([], f)
  }
  const o = f();
  if (typeof exports === "object" && typeof module !== "undefined") {
    module.exports = o
  }
  var g;
  if (typeof window !== "undefined") {
    g = window
  } else if (typeof global !== "undefined") {
    g = global
  } else if (typeof self !== "undefined") {
    g = self
  } else {
    g = this
  }
  g.ejs = o;
})(function () {
  var define, module, exports; return (function () { function r(e, n, t) { function o(i, f) { if (!n[i]) { if (!e[i]) { var c = "function" == typeof require && require; if (!f && c) return c(i, !0); if (u) return u(i, !0); var a = new Error("Cannot find module '" + i + "'"); throw a.code = "MODULE_NOT_FOUND", a } var p = n[i] = { exports: {} }; e[i][0].call(p.exports, function (r) { var n = e[i][1][r]; return o(n || r) }, p, p.exports, r, e, n, t) } return n[i].exports } for (var u = "function" == typeof require && require, i = 0; i < t.length; i++)o(t[i]); return o } return r })()({
    1: [function (require, module, exports) {
      /*
       * EJS Embedded JavaScript templates (v3.1.6)
       * Copyright 2112 Matthew Eernisse (mde@fleegix.org)
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *         http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       *
      */

      'use strict';

      /**
       * @file Embedded JavaScript templating engine. {@link http://ejs.co}
       * @author Matthew Eernisse <mde@fleegix.org>
       * @author Tiancheng "Timothy" Gu <timothygu99@gmail.com>
       * @project EJS
       * @license {@link http://www.apache.org/licenses/LICENSE-2.0 Apache License, Version 2.0}
       */

      /**
       * EJS internal functions.
       *
       * Technically this "module" lies in the same file as {@link module:ejs}, for
       * the sake of organization all the private functions re grouped into this
       * module.
       *
       * @module ejs-internal
       * @private
       */

      /**
       * Embedded JavaScript templating engine.
       *
       * @module ejs
       * @public
       */

      var fs = require('fs');
      var path = require('path');
      var utils = require('./utils');

      var scopeOptionWarned = false;
      /** @type {string} */
      var _VERSION_STRING = require('../package.json').version;
      var _DEFAULT_OPEN_DELIMITER = '<';
      var _DEFAULT_CLOSE_DELIMITER = '>';
      var _DEFAULT_DELIMITER = '%';
      var _DEFAULT_LOCALS_NAME = 'locals';
      var _NAME = 'ejs';
      var _REGEX_STRING = '(<%%|%%>|<%=|<%-|<%_|<%#|<%|%>|-%>|_%>)';
      var _OPTS_PASSABLE_WITH_DATA = ['delimiter', 'scope', 'context', 'debug', 'compileDebug',
        'client', '_with', 'rmWhitespace', 'strict', 'filename', 'async'];
      // We don't allow 'cache' option to be passed in the data obj for
      // the normal `render` call, but this is where Express 2 & 3 put it
      // so we make an exception for `renderFile`
      var _OPTS_PASSABLE_WITH_DATA_EXPRESS = _OPTS_PASSABLE_WITH_DATA.concat('cache');
      var _BOM = /^\uFEFF/;

      /**
       * EJS template function cache. This can be a LRU object from lru-cache NPM
       * module. By default, it is {@link module:utils.cache}, a simple in-process
       * cache that grows continuously.
       *
       * @type {Cache}
       */

      exports.cache = utils.cache;

      /**
       * Custom file loader. Useful for template preprocessing or restricting access
       * to a certain part of the filesystem.
       *
       * @type {fileLoader}
       */

      exports.fileLoader = fs.readFileSync;

      /**
       * Name of the object containing the locals.
       *
       * This variable is overridden by {@link Options}`.localsName` if it is not
       * `undefined`.
       *
       * @type {String}
       * @public
       */

      exports.localsName = _DEFAULT_LOCALS_NAME;

      /**
       * Promise implementation -- defaults to the native implementation if available
       * This is mostly just for testability
       *
       * @type {PromiseConstructorLike}
       * @public
       */

      exports.promiseImpl = (new Function('return this;'))().Promise;

      /**
       * Get the path to the included file from the parent file path and the
       * specified path.
       *
       * @param {String}  name     specified path
       * @param {String}  filename parent file path
       * @param {Boolean} [isDir=false] whether the parent file path is a directory
       * @return {String}
       */
      exports.resolveInclude = function (name, filename, isDir) {
        var dirname = path.dirname;
        var extname = path.extname;
        var resolve = path.resolve;
        var includePath = resolve(isDir ? filename : dirname(filename), name);
        var ext = extname(name);
        if (!ext) {
          includePath += '.ejs';
        }
        return includePath;
      };

      /**
       * Try to resolve file path on multiple directories
       *
       * @param  {String}        name  specified path
       * @param  {Array<String>} paths list of possible parent directory paths
       * @return {String}
       */
      function resolvePaths(name, paths) {
        var filePath;
        if (paths.some(function (v) {
          filePath = exports.resolveInclude(name, v, true);
          return fs.existsSync(filePath);
        })) {
          return filePath;
        }
      }

      /**
       * Get the path to the included file by Options
       *
       * @param  {String}  path    specified path
       * @param  {Options} options compilation options
       * @return {String}
       */
      function getIncludePath(path, options) {
        var includePath;
        var filePath;
        var views = options.views;
        var match = /^[A-Za-z]+:\\|^\//.exec(path);

        // Abs path
        if (match && match.length) {
          path = path.replace(/^\/*/, '');
          if (Array.isArray(options.root)) {
            includePath = resolvePaths(path, options.root);
          } else {
            includePath = exports.resolveInclude(path, options.root || '/', true);
          }
        }
        // Relative paths
        else {
          // Look relative to a passed filename first
          if (options.filename) {
            filePath = exports.resolveInclude(path, options.filename);
            if (fs.existsSync(filePath)) {
              includePath = filePath;
            }
          }
          // Then look in any views directories
          if (!includePath && Array.isArray(views)) {
            includePath = resolvePaths(path, views);
          }
          if (!includePath && typeof options.includer !== 'function') {
            throw new Error('Could not find the include file "' +
              options.escapeFunction(path) + '"');
          }
        }
        return includePath;
      }

      /**
       * Get the template from a string or a file, either compiled on-the-fly or
       * read from cache (if enabled), and cache the template if needed.
       *
       * If `template` is not set, the file specified in `options.filename` will be
       * read.
       *
       * If `options.cache` is true, this function reads the file from
       * `options.filename` so it must be set prior to calling this function.
       *
       * @memberof module:ejs-internal
       * @param {Options} options   compilation options
       * @param {String} [template] template source
       * @return {(TemplateFunction|ClientFunction)}
       * Depending on the value of `options.client`, either type might be returned.
       * @static
       */

      function handleCache(options, template) {
        var func;
        var filename = options.filename;
        var hasTemplate = arguments.length > 1;

        if (options.cache) {
          if (!filename) {
            throw new Error('cache option requires a filename');
          }
          func = exports.cache.get(filename);
          if (func) {
            return func;
          }
          if (!hasTemplate) {
            template = fileLoader(filename).toString().replace(_BOM, '');
          }
        }
        else if (!hasTemplate) {
          // istanbul ignore if: should not happen at all
          if (!filename) {
            throw new Error('Internal EJS error: no file name or template '
              + 'provided');
          }
          template = fileLoader(filename).toString().replace(_BOM, '');
        }
        func = exports.compile(template, options);
        if (options.cache) {
          exports.cache.set(filename, func);
        }
        return func;
      }

      /**
       * Try calling handleCache with the given options and data and call the
       * callback with the result. If an error occurs, call the callback with
       * the error. Used by renderFile().
       *
       * @memberof module:ejs-internal
       * @param {Options} options    compilation options
       * @param {Object} data        template data
       * @param {RenderFileCallback} cb callback
       * @static
       */

      function tryHandleCache(options, data, cb) {
        var result;
        if (!cb) {
          if (typeof exports.promiseImpl == 'function') {
            return new exports.promiseImpl(function (resolve, reject) {
              try {
                result = handleCache(options)(data);
                resolve(result);
              }
              catch (err) {
                reject(err);
              }
            });
          }
          else {
            throw new Error('Please provide a callback function');
          }
        }
        else {
          try {
            result = handleCache(options)(data);
          }
          catch (err) {
            return cb(err);
          }

          cb(null, result);
        }
      }

      /**
       * fileLoader is independent
       *
       * @param {String} filePath ejs file path.
       * @return {String} The contents of the specified file.
       * @static
       */

      function fileLoader(filePath) {
        return exports.fileLoader(filePath);
      }

      /**
       * Get the template function.
       *
       * If `options.cache` is `true`, then the template is cached.
       *
       * @memberof module:ejs-internal
       * @param {String}  path    path for the specified file
       * @param {Options} options compilation options
       * @return {(TemplateFunction|ClientFunction)}
       * Depending on the value of `options.client`, either type might be returned
       * @static
       */

      function includeFile(path, options) {
        var opts = utils.shallowCopy({}, options);
        opts.filename = getIncludePath(path, opts);
        if (typeof options.includer === 'function') {
          var includerResult = options.includer(path, opts.filename);
          if (includerResult) {
            if (includerResult.filename) {
              opts.filename = includerResult.filename;
            }
            if (includerResult.template) {
              return handleCache(opts, includerResult.template);
            }
          }
        }
        return handleCache(opts);
      }

      /**
       * Re-throw the given `err` in context to the `str` of ejs, `filename`, and
       * `lineno`.
       *
       * @implements {RethrowCallback}
       * @memberof module:ejs-internal
       * @param {Error}  err      Error object
       * @param {String} str      EJS source
       * @param {String} flnm     file name of the EJS file
       * @param {Number} lineno   line number of the error
       * @param {EscapeCallback} esc
       * @static
       */

      function rethrow(err, str, flnm, lineno, esc) {
        var lines = str.split('\n');
        var start = Math.max(lineno - 3, 0);
        var end = Math.min(lines.length, lineno + 3);
        var filename = esc(flnm);
        // Error context
        var context = lines.slice(start, end).map(function (line, i) {
          var curr = i + start + 1;
          return (curr == lineno ? ' >> ' : '    ')
            + curr
            + '| '
            + line;
        }).join('\n');

        // Alter exception message
        err.path = filename;
        err.message = (filename || 'ejs') + ':'
          + lineno + '\n'
          + context + '\n\n'
          + err.message;

        throw err;
      }

      function stripSemi(str) {
        return str.replace(/;(\s*$)/, '$1');
      }

      /**
       * Compile the given `str` of ejs into a template function.
       *
       * @param {String}  template EJS template
       *
       * @param {Options} [opts] compilation options
       *
       * @return {(TemplateFunction|ClientFunction)}
       * Depending on the value of `opts.client`, either type might be returned.
       * Note that the return type of the function also depends on the value of `opts.async`.
       * @public
       */

      exports.compile = function compile(template, opts) {
        var templ;

        // v1 compat
        // 'scope' is 'context'
        // FIXME: Remove this in a future version
        if (opts && opts.scope) {
          if (!scopeOptionWarned) {
            console.warn('`scope` option is deprecated and will be removed in EJS 3');
            scopeOptionWarned = true;
          }
          if (!opts.context) {
            opts.context = opts.scope;
          }
          delete opts.scope;
        }
        templ = new Template(template, opts);
        return templ.compile();
      };

      /**
       * Render the given `template` of ejs.
       *
       * If you would like to include options but not data, you need to explicitly
       * call this function with `data` being an empty object or `null`.
       *
       * @param {String}   template EJS template
       * @param {Object}  [data={}] template data
       * @param {Options} [opts={}] compilation and rendering options
       * @return {(String|Promise<String>)}
       * Return value type depends on `opts.async`.
       * @public
       */

      exports.render = function (template, d, o) {
        var data = d || {};
        var opts = o || {};

        // No options object -- if there are optiony names
        // in the data, copy them to options
        if (arguments.length == 2) {
          utils.shallowCopyFromList(opts, data, _OPTS_PASSABLE_WITH_DATA);
        }

        return handleCache(opts, template)(data);
      };

      /**
       * Render an EJS file at the given `path` and callback `cb(err, str)`.
       *
       * If you would like to include options but not data, you need to explicitly
       * call this function with `data` being an empty object or `null`.
       *
       * @param {String}             path     path to the EJS file
       * @param {Object}            [data={}] template data
       * @param {Options}           [opts={}] compilation and rendering options
       * @param {RenderFileCallback} cb callback
       * @public
       */

      exports.renderFile = function () {
        var args = Array.prototype.slice.call(arguments);
        var filename = args.shift();
        var cb;
        var opts = { filename: filename };
        var data;
        var viewOpts;

        // Do we have a callback?
        if (typeof arguments[arguments.length - 1] == 'function') {
          cb = args.pop();
        }
        // Do we have data/opts?
        if (args.length) {
          // Should always have data obj
          data = args.shift();
          // Normal passed opts (data obj + opts obj)
          if (args.length) {
            // Use shallowCopy so we don't pollute passed in opts obj with new vals
            utils.shallowCopy(opts, args.pop());
          }
          // Special casing for Express (settings + opts-in-data)
          else {
            // Express 3 and 4
            if (data.settings) {
              // Pull a few things from known locations
              if (data.settings.views) {
                opts.views = data.settings.views;
              }
              if (data.settings['view cache']) {
                opts.cache = true;
              }
              // Undocumented after Express 2, but still usable, esp. for
              // items that are unsafe to be passed along with data, like `root`
              viewOpts = data.settings['view options'];
              if (viewOpts) {
                utils.shallowCopy(opts, viewOpts);
              }
            }
            // Express 2 and lower, values set in app.locals, or people who just
            // want to pass options in their data. NOTE: These values will override
            // anything previously set in settings  or settings['view options']
            utils.shallowCopyFromList(opts, data, _OPTS_PASSABLE_WITH_DATA_EXPRESS);
          }
          opts.filename = filename;
        }
        else {
          data = {};
        }

        return tryHandleCache(opts, data, cb);
      };

      /**
       * Clear intermediate JavaScript cache. Calls {@link Cache#reset}.
       * @public
       */

      /**
       * EJS template class
       * @public
       */
      exports.Template = Template;

      exports.clearCache = function () {
        exports.cache.reset();
      };

      function Template(text, opts) {
        opts = opts || {};
        var options = {};
        this.templateText = text;
        /** @type {string | null} */
        this.mode = null;
        this.truncate = false;
        this.currentLine = 1;
        this.source = '';
        options.client = opts.client || false;
        options.escapeFunction = opts.escape || opts.escapeFunction || utils.escapeXML;
        options.compileDebug = opts.compileDebug !== false;
        options.debug = !!opts.debug;
        options.filename = opts.filename;
        options.openDelimiter = opts.openDelimiter || exports.openDelimiter || _DEFAULT_OPEN_DELIMITER;
        options.closeDelimiter = opts.closeDelimiter || exports.closeDelimiter || _DEFAULT_CLOSE_DELIMITER;
        options.delimiter = opts.delimiter || exports.delimiter || _DEFAULT_DELIMITER;
        options.strict = opts.strict || false;
        options.context = opts.context;
        options.cache = opts.cache || false;
        options.rmWhitespace = opts.rmWhitespace;
        options.root = opts.root;
        options.includer = opts.includer;
        options.outputFunctionName = opts.outputFunctionName;
        options.localsName = opts.localsName || exports.localsName || _DEFAULT_LOCALS_NAME;
        options.views = opts.views;
        options.async = opts.async;
        options.destructuredLocals = opts.destructuredLocals;
        options.legacyInclude = typeof opts.legacyInclude != 'undefined' ? !!opts.legacyInclude : true;

        if (options.strict) {
          options._with = false;
        }
        else {
          options._with = typeof opts._with != 'undefined' ? opts._with : true;
        }

        this.opts = options;

        this.regex = this.createRegex();
      }

      Template.modes = {
        EVAL: 'eval',
        ESCAPED: 'escaped',
        RAW: 'raw',
        COMMENT: 'comment',
        LITERAL: 'literal'
      };

      Template.prototype = {
        createRegex: function () {
          var str = _REGEX_STRING;
          var delim = utils.escapeRegExpChars(this.opts.delimiter);
          var open = utils.escapeRegExpChars(this.opts.openDelimiter);
          var close = utils.escapeRegExpChars(this.opts.closeDelimiter);
          str = str.replace(/%/g, delim)
            .replace(/</g, open)
            .replace(/>/g, close);
          return new RegExp(str);
        },

        compile: function () {
          /** @type {string} */
          var src;
          /** @type {ClientFunction} */
          var fn;
          var opts = this.opts;
          var prepended = '';
          var appended = '';
          /** @type {EscapeCallback} */
          var escapeFn = opts.escapeFunction;
          /** @type {FunctionConstructor} */
          var ctor;
          /** @type {string} */
          var sanitizedFilename = opts.filename ? JSON.stringify(opts.filename) : 'undefined';

          if (!this.source) {
            this.generateSource();
            prepended +=
              '  var __output = "";\n' +
              '  function __append(s) { if (s !== undefined && s !== null) __output += s }\n';
            if (opts.outputFunctionName) {
              prepended += '  var ' + opts.outputFunctionName + ' = __append;' + '\n';
            }
            if (opts.destructuredLocals && opts.destructuredLocals.length) {
              var destructuring = '  var __locals = (' + opts.localsName + ' || {}),\n';
              for (var i = 0; i < opts.destructuredLocals.length; i++) {
                var name = opts.destructuredLocals[i];
                if (i > 0) {
                  destructuring += ',\n  ';
                }
                destructuring += name + ' = __locals.' + name;
              }
              prepended += destructuring + ';\n';
            }
            if (opts._with !== false) {
              prepended += '  with (' + opts.localsName + ' || {}) {' + '\n';
              appended += '  }' + '\n';
            }
            appended += '  return __output;' + '\n';
            this.source = prepended + this.source + appended;
          }

          if (opts.compileDebug) {
            src = 'var __line = 1' + '\n'
              + '  , __lines = ' + JSON.stringify(this.templateText) + '\n'
              + '  , __filename = ' + sanitizedFilename + ';' + '\n'
              + 'try {' + '\n'
              + this.source
              + '} catch (e) {' + '\n'
              + '  rethrow(e, __lines, __filename, __line, escapeFn);' + '\n'
              + '}' + '\n';
          }
          else {
            src = this.source;
          }

          if (opts.client) {
            src = 'escapeFn = escapeFn || ' + escapeFn.toString() + ';' + '\n' + src;
            if (opts.compileDebug) {
              src = 'rethrow = rethrow || ' + rethrow.toString() + ';' + '\n' + src;
            }
          }

          if (opts.strict) {
            src = '"use strict";\n' + src;
          }
          if (opts.debug) {
            console.log(src);
          }
          if (opts.compileDebug && opts.filename) {
            src = src + '\n'
              + '//# sourceURL=' + sanitizedFilename + '\n';
          }

          try {
            if (opts.async) {
              // Have to use generated function for this, since in envs without support,
              // it breaks in parsing
              try {
                ctor = (new Function('return (async function(){}).constructor;'))();
              }
              catch (e) {
                if (e instanceof SyntaxError) {
                  throw new Error('This environment does not support async/await');
                }
                else {
                  throw e;
                }
              }
            }
            else {
              ctor = Function;
            }
            fn = new ctor(opts.localsName + ', escapeFn, include, rethrow', src);
          }
          catch (e) {
            // istanbul ignore else
            if (e instanceof SyntaxError) {
              if (opts.filename) {
                e.message += ' in ' + opts.filename;
              }
              e.message += ' while compiling ejs\n\n';
              e.message += 'If the above error is not helpful, you may want to try EJS-Lint:\n';
              e.message += 'https://github.com/RyanZim/EJS-Lint';
              if (!opts.async) {
                e.message += '\n';
                e.message += 'Or, if you meant to create an async function, pass `async: true` as an option.';
              }
            }
            throw e;
          }

          // Return a callable function which will execute the function
          // created by the source-code, with the passed data as locals
          // Adds a local `include` function which allows full recursive include
          var returnedFn = opts.client ? fn : function anonymous(data) {
            var include = function (path, includeData) {
              var d = utils.shallowCopy({}, data);
              if (includeData) {
                d = utils.shallowCopy(d, includeData);
              }
              return includeFile(path, opts)(d);
            };
            return fn.apply(opts.context, [data || {}, escapeFn, include, rethrow]);
          };
          if (opts.filename && typeof Object.defineProperty === 'function') {
            var filename = opts.filename;
            var basename = path.basename(filename, path.extname(filename));
            try {
              Object.defineProperty(returnedFn, 'name', {
                value: basename,
                writable: false,
                enumerable: false,
                configurable: true
              });
            } catch (e) {/* ignore */ }
          }
          return returnedFn;
        },

        generateSource: function () {
          var opts = this.opts;

          if (opts.rmWhitespace) {
            // Have to use two separate replace here as `^` and `$` operators don't
            // work well with `\r` and empty lines don't work well with the `m` flag.
            this.templateText =
              this.templateText.replace(/[\r\n]+/g, '\n').replace(/^\s+|\s+$/gm, '');
          }

          // Slurp spaces and tabs before <%_ and after _%>
          this.templateText =
            this.templateText.replace(/[ \t]*<%_/gm, '<%_').replace(/_%>[ \t]*/gm, '_%>');

          var self = this;
          var matches = this.parseTemplateText();
          var d = this.opts.delimiter;
          var o = this.opts.openDelimiter;
          var c = this.opts.closeDelimiter;

          if (matches && matches.length) {
            matches.forEach(function (line, index) {
              var closing;
              // If this is an opening tag, check for closing tags
              // FIXME: May end up with some false positives here
              // Better to store modes as k/v with openDelimiter + delimiter as key
              // Then this can simply check against the map
              if (line.indexOf(o + d) === 0        // If it is a tag
                && line.indexOf(o + d + d) !== 0) { // and is not escaped
                closing = matches[index + 2];
                if (!(closing == d + c || closing == '-' + d + c || closing == '_' + d + c)) {
                  throw new Error('Could not find matching close tag for "' + line + '".');
                }
              }
              self.scanLine(line);
            });
          }

        },

        parseTemplateText: function () {
          var str = this.templateText;
          var pat = this.regex;
          var result = pat.exec(str);
          var arr = [];
          var firstPos;

          while (result) {
            firstPos = result.index;

            if (firstPos !== 0) {
              arr.push(str.substring(0, firstPos));
              str = str.slice(firstPos);
            }

            arr.push(result[0]);
            str = str.slice(result[0].length);
            result = pat.exec(str);
          }

          if (str) {
            arr.push(str);
          }

          return arr;
        },

        _addOutput: function (line) {
          if (this.truncate) {
            // Only replace single leading linebreak in the line after
            // -%> tag -- this is the single, trailing linebreak
            // after the tag that the truncation mode replaces
            // Handle Win / Unix / old Mac linebreaks -- do the \r\n
            // combo first in the regex-or
            line = line.replace(/^(?:\r\n|\r|\n)/, '');
            this.truncate = false;
          }
          if (!line) {
            return line;
          }

          // Preserve literal slashes
          line = line.replace(/\\/g, '\\\\');

          // Convert linebreaks
          line = line.replace(/\n/g, '\\n');
          line = line.replace(/\r/g, '\\r');

          // Escape double-quotes
          // - this will be the delimiter during execution
          line = line.replace(/"/g, '\\"');
          this.source += '    ; __append("' + line + '")' + '\n';
        },

        scanLine: function (line) {
          var self = this;
          var d = this.opts.delimiter;
          var o = this.opts.openDelimiter;
          var c = this.opts.closeDelimiter;
          var newLineCount = 0;

          newLineCount = (line.split('\n').length - 1);

          switch (line) {
            case o + d:
            case o + d + '_':
              this.mode = Template.modes.EVAL;
              break;
            case o + d + '=':
              this.mode = Template.modes.ESCAPED;
              break;
            case o + d + '-':
              this.mode = Template.modes.RAW;
              break;
            case o + d + '#':
              this.mode = Template.modes.COMMENT;
              break;
            case o + d + d:
              this.mode = Template.modes.LITERAL;
              this.source += '    ; __append("' + line.replace(o + d + d, o + d) + '")' + '\n';
              break;
            case d + d + c:
              this.mode = Template.modes.LITERAL;
              this.source += '    ; __append("' + line.replace(d + d + c, d + c) + '")' + '\n';
              break;
            case d + c:
            case '-' + d + c:
            case '_' + d + c:
              if (this.mode == Template.modes.LITERAL) {
                this._addOutput(line);
              }

              this.mode = null;
              this.truncate = line.indexOf('-') === 0 || line.indexOf('_') === 0;
              break;
            default:
              // In script mode, depends on type of tag
              if (this.mode) {
                // If '//' is found without a line break, add a line break.
                switch (this.mode) {
                  case Template.modes.EVAL:
                  case Template.modes.ESCAPED:
                  case Template.modes.RAW:
                    if (line.lastIndexOf('//') > line.lastIndexOf('\n')) {
                      line += '\n';
                    }
                }
                switch (this.mode) {
                  // Just executing code
                  case Template.modes.EVAL:
                    this.source += '    ; ' + line + '\n';
                    break;
                  // Exec, esc, and output
                  case Template.modes.ESCAPED:
                    this.source += '    ; __append(escapeFn(' + stripSemi(line) + '))' + '\n';
                    break;
                  // Exec and output
                  case Template.modes.RAW:
                    this.source += '    ; __append(' + stripSemi(line) + ')' + '\n';
                    break;
                  case Template.modes.COMMENT:
                    // Do nothing
                    break;
                  // Literal <%% mode, append as raw output
                  case Template.modes.LITERAL:
                    this._addOutput(line);
                    break;
                }
              }
              // In string mode, just add the output
              else {
                this._addOutput(line);
              }
          }

          if (self.opts.compileDebug && newLineCount) {
            this.currentLine += newLineCount;
            this.source += '    ; __line = ' + this.currentLine + '\n';
          }
        }
      };

      /**
       * Escape characters reserved in XML.
       *
       * This is simply an export of {@link module:utils.escapeXML}.
       *
       * If `markup` is `undefined` or `null`, the empty string is returned.
       *
       * @param {String} markup Input string
       * @return {String} Escaped string
       * @public
       * @func
       * */
      exports.escapeXML = utils.escapeXML;

      /**
       * Express.js support.
       *
       * This is an alias for {@link module:ejs.renderFile}, in order to support
       * Express.js out-of-the-box.
       *
       * @func
       */

      exports.__express = exports.renderFile;

      /**
       * Version of EJS.
       *
       * @readonly
       * @type {String}
       * @public
       */

      exports.VERSION = _VERSION_STRING;

      /**
       * Name for detection of EJS.
       *
       * @readonly
       * @type {String}
       * @public
       */

      exports.name = _NAME;

      /* istanbul ignore if */
      if (typeof window != 'undefined') {
        window.ejs = exports;
      }

    }, { "../package.json": 6, "./utils": 2, "fs": 3, "path": 4 }], 2: [function (require, module, exports) {
      /*
       * EJS Embedded JavaScript templates
       * Copyright 2112 Matthew Eernisse (mde@fleegix.org)
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *         http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       *
      */

      /**
       * Private utility functions
       * @module utils
       * @private
       */

      'use strict';

      var regExpChars = /[|\\{}()[\]^$+*?.]/g;

      /**
       * Escape characters reserved in regular expressions.
       *
       * If `string` is `undefined` or `null`, the empty string is returned.
       *
       * @param {String} string Input string
       * @return {String} Escaped string
       * @static
       * @private
       */
      exports.escapeRegExpChars = function (string) {
        // istanbul ignore if
        if (!string) {
          return '';
        }
        return String(string).replace(regExpChars, '\\$&');
      };

      var _ENCODE_HTML_RULES = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&#34;',
        "'": '&#39;'
      };
      var _MATCH_HTML = /[&<>'"]/g;

      function encode_char(c) {
        return _ENCODE_HTML_RULES[c] || c;
      }

      /**
       * Stringified version of constants used by {@link module:utils.escapeXML}.
       *
       * It is used in the process of generating {@link ClientFunction}s.
       *
       * @readonly
       * @type {String}
       */

      var escapeFuncStr =
        'var _ENCODE_HTML_RULES = {\n'
        + '      "&": "&amp;"\n'
        + '    , "<": "&lt;"\n'
        + '    , ">": "&gt;"\n'
        + '    , \'"\': "&#34;"\n'
        + '    , "\'": "&#39;"\n'
        + '    }\n'
        + '  , _MATCH_HTML = /[&<>\'"]/g;\n'
        + 'function encode_char(c) {\n'
        + '  return _ENCODE_HTML_RULES[c] || c;\n'
        + '};\n';

      /**
       * Escape characters reserved in XML.
       *
       * If `markup` is `undefined` or `null`, the empty string is returned.
       *
       * @implements {EscapeCallback}
       * @param {String} markup Input string
       * @return {String} Escaped string
       * @static
       * @private
       */

      exports.escapeXML = function (markup) {
        return markup == undefined
          ? ''
          : String(markup)
            .replace(_MATCH_HTML, encode_char);
      };
      exports.escapeXML.toString = function () {
        return Function.prototype.toString.call(this) + ';\n' + escapeFuncStr;
      };

      /**
       * Naive copy of properties from one object to another.
       * Does not recurse into non-scalar properties
       * Does not check to see if the property has a value before copying
       *
       * @param  {Object} to   Destination object
       * @param  {Object} from Source object
       * @return {Object}      Destination object
       * @static
       * @private
       */
      exports.shallowCopy = function (to, from) {
        from = from || {};
        for (var p in from) {
          to[p] = from[p];
        }
        return to;
      };

      /**
       * Naive copy of a list of key names, from one object to another.
       * Only copies property if it is actually defined
       * Does not recurse into non-scalar properties
       *
       * @param  {Object} to   Destination object
       * @param  {Object} from Source object
       * @param  {Array} list List of properties to copy
       * @return {Object}      Destination object
       * @static
       * @private
       */
      exports.shallowCopyFromList = function (to, from, list) {
        for (var i = 0; i < list.length; i++) {
          var p = list[i];
          if (typeof from[p] != 'undefined') {
            to[p] = from[p];
          }
        }
        return to;
      };

      /**
       * Simple in-process cache implementation. Does not implement limits of any
       * sort.
       *
       * @implements {Cache}
       * @static
       * @private
       */
      exports.cache = {
        _data: {},
        set: function (key, val) {
          this._data[key] = val;
        },
        get: function (key) {
          return this._data[key];
        },
        remove: function (key) {
          delete this._data[key];
        },
        reset: function () {
          this._data = {};
        }
      };

      /**
       * Transforms hyphen case variable into camel case.
       *
       * @param {String} string Hyphen case string
       * @return {String} Camel case string
       * @static
       * @private
       */
      exports.hyphenToCamel = function (str) {
        return str.replace(/-[a-z]/g, function (match) { return match[1].toUpperCase(); });
      };

    }, {}], 3: [function (require, module, exports) {

    }, {}], 4: [function (require, module, exports) {
      (function (process) {
        // .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,
        // backported and transplited with Babel, with backwards-compat fixes

        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.

        // resolves . and .. elements in a path array with directory names there
        // must be no slashes, empty elements, or device names (c:\) in the array
        // (so also no leading and trailing slashes - it does not distinguish
        // relative and absolute paths)
        function normalizeArray(parts, allowAboveRoot) {
          // if the path tries to go above the root, `up` ends up > 0
          var up = 0;
          for (var i = parts.length - 1; i >= 0; i--) {
            var last = parts[i];
            if (last === '.') {
              parts.splice(i, 1);
            } else if (last === '..') {
              parts.splice(i, 1);
              up++;
            } else if (up) {
              parts.splice(i, 1);
              up--;
            }
          }

          // if the path is allowed to go above the root, restore leading ..s
          if (allowAboveRoot) {
            for (; up--; up) {
              parts.unshift('..');
            }
          }

          return parts;
        }

        // path.resolve([from ...], to)
        // posix version
        exports.resolve = function () {
          var resolvedPath = '',
            resolvedAbsolute = false;

          for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
            var path = (i >= 0) ? arguments[i] : process.cwd();

            // Skip empty and invalid entries
            if (typeof path !== 'string') {
              throw new TypeError('Arguments to path.resolve must be strings');
            } else if (!path) {
              continue;
            }

            resolvedPath = path + '/' + resolvedPath;
            resolvedAbsolute = path.charAt(0) === '/';
          }

          // At this point the path should be resolved to a full absolute path, but
          // handle relative paths to be safe (might happen when process.cwd() fails)

          // Normalize the path
          resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function (p) {
            return !!p;
          }), !resolvedAbsolute).join('/');

          return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
        };

        // path.normalize(path)
        // posix version
        exports.normalize = function (path) {
          var isAbsolute = exports.isAbsolute(path),
            trailingSlash = substr(path, -1) === '/';

          // Normalize the path
          path = normalizeArray(filter(path.split('/'), function (p) {
            return !!p;
          }), !isAbsolute).join('/');

          if (!path && !isAbsolute) {
            path = '.';
          }
          if (path && trailingSlash) {
            path += '/';
          }

          return (isAbsolute ? '/' : '') + path;
        };

        // posix version
        exports.isAbsolute = function (path) {
          return path.charAt(0) === '/';
        };

        // posix version
        exports.join = function () {
          var paths = Array.prototype.slice.call(arguments, 0);
          return exports.normalize(filter(paths, function (p, index) {
            if (typeof p !== 'string') {
              throw new TypeError('Arguments to path.join must be strings');
            }
            return p;
          }).join('/'));
        };


        // path.relative(from, to)
        // posix version
        exports.relative = function (from, to) {
          from = exports.resolve(from).substr(1);
          to = exports.resolve(to).substr(1);

          function trim(arr) {
            var start = 0;
            for (; start < arr.length; start++) {
              if (arr[start] !== '') break;
            }

            var end = arr.length - 1;
            for (; end >= 0; end--) {
              if (arr[end] !== '') break;
            }

            if (start > end) return [];
            return arr.slice(start, end - start + 1);
          }

          var fromParts = trim(from.split('/'));
          var toParts = trim(to.split('/'));

          var length = Math.min(fromParts.length, toParts.length);
          var samePartsLength = length;
          for (var i = 0; i < length; i++) {
            if (fromParts[i] !== toParts[i]) {
              samePartsLength = i;
              break;
            }
          }

          var outputParts = [];
          for (var i = samePartsLength; i < fromParts.length; i++) {
            outputParts.push('..');
          }

          outputParts = outputParts.concat(toParts.slice(samePartsLength));

          return outputParts.join('/');
        };

        exports.sep = '/';
        exports.delimiter = ':';

        exports.dirname = function (path) {
          if (typeof path !== 'string') path = path + '';
          if (path.length === 0) return '.';
          var code = path.charCodeAt(0);
          var hasRoot = code === 47 /*/*/;
          var end = -1;
          var matchedSlash = true;
          for (var i = path.length - 1; i >= 1; --i) {
            code = path.charCodeAt(i);
            if (code === 47 /*/*/) {
              if (!matchedSlash) {
                end = i;
                break;
              }
            } else {
              // We saw the first non-path separator
              matchedSlash = false;
            }
          }

          if (end === -1) return hasRoot ? '/' : '.';
          if (hasRoot && end === 1) {
            // return '//';
            // Backwards-compat fix:
            return '/';
          }
          return path.slice(0, end);
        };

        function basename(path) {
          if (typeof path !== 'string') path = path + '';

          var start = 0;
          var end = -1;
          var matchedSlash = true;
          var i;

          for (i = path.length - 1; i >= 0; --i) {
            if (path.charCodeAt(i) === 47 /*/*/) {
              // If we reached a path separator that was not part of a set of path
              // separators at the end of the string, stop now
              if (!matchedSlash) {
                start = i + 1;
                break;
              }
            } else if (end === -1) {
              // We saw the first non-path separator, mark this as the end of our
              // path component
              matchedSlash = false;
              end = i + 1;
            }
          }

          if (end === -1) return '';
          return path.slice(start, end);
        }

        // Uses a mixed approach for backwards-compatibility, as ext behavior changed
        // in new Node.js versions, so only basename() above is backported here
        exports.basename = function (path, ext) {
          var f = basename(path);
          if (ext && f.substr(-1 * ext.length) === ext) {
            f = f.substr(0, f.length - ext.length);
          }
          return f;
        };

        exports.extname = function (path) {
          if (typeof path !== 'string') path = path + '';
          var startDot = -1;
          var startPart = 0;
          var end = -1;
          var matchedSlash = true;
          // Track the state of characters (if any) we see before our first dot and
          // after any path separator we find
          var preDotState = 0;
          for (var i = path.length - 1; i >= 0; --i) {
            var code = path.charCodeAt(i);
            if (code === 47 /*/*/) {
              // If we reached a path separator that was not part of a set of path
              // separators at the end of the string, stop now
              if (!matchedSlash) {
                startPart = i + 1;
                break;
              }
              continue;
            }
            if (end === -1) {
              // We saw the first non-path separator, mark this as the end of our
              // extension
              matchedSlash = false;
              end = i + 1;
            }
            if (code === 46 /*.*/) {
              // If this is our first dot, mark it as the start of our extension
              if (startDot === -1)
                startDot = i;
              else if (preDotState !== 1)
                preDotState = 1;
            } else if (startDot !== -1) {
              // We saw a non-dot and non-path separator before our dot, so we should
              // have a good chance at having a non-empty extension
              preDotState = -1;
            }
          }

          if (startDot === -1 || end === -1 ||
            // We saw a non-dot character immediately before the dot
            preDotState === 0 ||
            // The (right-most) trimmed path component is exactly '..'
            preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
            return '';
          }
          return path.slice(startDot, end);
        };

        function filter(xs, f) {
          if (xs.filter) return xs.filter(f);
          var res = [];
          for (var i = 0; i < xs.length; i++) {
            if (f(xs[i], i, xs)) res.push(xs[i]);
          }
          return res;
        }

        // String.prototype.substr - negative index don't work in IE8
        var substr = 'ab'.substr(-1) === 'b'
          ? function (str, start, len) { return str.substr(start, len) }
          : function (str, start, len) {
            if (start < 0) start = str.length + start;
            return str.substr(start, len);
          }
          ;

      }).call(this, require('_process'))
    }, { "_process": 5 }], 5: [function (require, module, exports) {
      // shim for using process in browser
      var process = module.exports = {};

      // cached from whatever global is present so that test runners that stub it
      // don't break things.  But we need to wrap it in a try catch in case it is
      // wrapped in strict mode code which doesn't define any globals.  It's inside a
      // function because try/catches deoptimize in certain engines.

      var cachedSetTimeout;
      var cachedClearTimeout;

      function defaultSetTimout() {
        throw new Error('setTimeout has not been defined');
      }
      function defaultClearTimeout() {
        throw new Error('clearTimeout has not been defined');
      }
      (function () {
        try {
          if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
          } else {
            cachedSetTimeout = defaultSetTimout;
          }
        } catch (e) {
          cachedSetTimeout = defaultSetTimout;
        }
        try {
          if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
          } else {
            cachedClearTimeout = defaultClearTimeout;
          }
        } catch (e) {
          cachedClearTimeout = defaultClearTimeout;
        }
      }())
      function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
          //normal enviroments in sane situations
          return setTimeout(fun, 0);
        }
        // if setTimeout wasn't available but was latter defined
        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
        }
        try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedSetTimeout(fun, 0);
        } catch (e) {
          try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
          } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
          }
        }


      }
      function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
          //normal enviroments in sane situations
          return clearTimeout(marker);
        }
        // if clearTimeout wasn't available but was latter defined
        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
        }
        try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedClearTimeout(marker);
        } catch (e) {
          try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
          } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
          }
        }



      }
      var queue = [];
      var draining = false;
      var currentQueue;
      var queueIndex = -1;

      function cleanUpNextTick() {
        if (!draining || !currentQueue) {
          return;
        }
        draining = false;
        if (currentQueue.length) {
          queue = currentQueue.concat(queue);
        } else {
          queueIndex = -1;
        }
        if (queue.length) {
          drainQueue();
        }
      }

      function drainQueue() {
        if (draining) {
          return;
        }
        var timeout = runTimeout(cleanUpNextTick);
        draining = true;

        var len = queue.length;
        while (len) {
          currentQueue = queue;
          queue = [];
          while (++queueIndex < len) {
            if (currentQueue) {
              currentQueue[queueIndex].run();
            }
          }
          queueIndex = -1;
          len = queue.length;
        }
        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
      }

      process.nextTick = function (fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
          }
        }
        queue.push(new Item(fun, args));
        if (queue.length === 1 && !draining) {
          runTimeout(drainQueue);
        }
      };

      // v8 likes predictible objects
      function Item(fun, array) {
        this.fun = fun;
        this.array = array;
      }
      Item.prototype.run = function () {
        this.fun.apply(null, this.array);
      };
      process.title = 'browser';
      process.browser = true;
      process.env = {};
      process.argv = [];
      process.version = ''; // empty string to avoid regexp issues
      process.versions = {};

      function noop() { }

      process.on = noop;
      process.addListener = noop;
      process.once = noop;
      process.off = noop;
      process.removeListener = noop;
      process.removeAllListeners = noop;
      process.emit = noop;
      process.prependListener = noop;
      process.prependOnceListener = noop;

      process.listeners = function (name) { return [] }

      process.binding = function (name) {
        throw new Error('process.binding is not supported');
      };

      process.cwd = function () { return '/' };
      process.chdir = function (dir) {
        throw new Error('process.chdir is not supported');
      };
      process.umask = function () { return 0; };

    }, {}], 6: [function (require, module, exports) {
      module.exports = {
        "name": "ejs",
        "description": "Embedded JavaScript templates",
        "keywords": [
          "template",
          "engine",
          "ejs"
        ],
        "version": "3.1.6",
        "author": "Matthew Eernisse <mde@fleegix.org> (http://fleegix.org)",
        "license": "Apache-2.0",
        "bin": {
          "ejs": "./bin/cli.js"
        },
        "main": "./lib/ejs.js",
        "jsdelivr": "ejs.min.js",
        "unpkg": "ejs.min.js",
        "repository": {
          "type": "git",
          "url": "git://github.com/mde/ejs.git"
        },
        "bugs": "https://github.com/mde/ejs/issues",
        "homepage": "https://github.com/mde/ejs",
        "dependencies": {
          "jake": "^10.6.1"
        },
        "devDependencies": {
          "browserify": "^16.5.1",
          "eslint": "^6.8.0",
          "git-directory-deploy": "^1.5.1",
          "jsdoc": "^3.6.4",
          "lru-cache": "^4.0.1",
          "mocha": "^7.1.1",
          "uglify-js": "^3.3.16"
        },
        "engines": {
          "node": ">=0.10.0"
        },
        "scripts": {
          "test": "mocha"
        }
      }

    }, {}]
  }, {}, [1])(1)
});


//Included:lib/006.castelog.part.js


//Included:lib/009.vue-router-v3.5.1.part.js
/*!
  * vue-router v3.5.1
  * (c) 2021 Evan You
  * @license MIT
  */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
        typeof define === 'function' && define.amd ? define(factory) :
            (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.VueRouter = factory());
}(this, (function () {
    'use strict';

    /*  */

    function assert(condition, message) {
        if (!condition) {
            throw new Error(("[vue-router] " + message))
        }
    }

    function warn(condition, message) {
        if (!condition) {
            typeof console !== 'undefined' && console.warn(("[vue-router] " + message));
        }
    }

    function extend(a, b) {
        for (var key in b) {
            a[key] = b[key];
        }
        return a
    }

    /*  */

    var encodeReserveRE = /[!'()*]/g;
    var encodeReserveReplacer = function (c) { return '%' + c.charCodeAt(0).toString(16); };
    var commaRE = /%2C/g;

    // fixed encodeURIComponent which is more conformant to RFC3986:
    // - escapes [!'()*]
    // - preserve commas
    var encode = function (str) {
        return encodeURIComponent(str)
            .replace(encodeReserveRE, encodeReserveReplacer)
            .replace(commaRE, ',');
    };

    function decode(str) {
        try {
            return decodeURIComponent(str)
        } catch (err) {
            {
                warn(false, ("Error decoding \"" + str + "\". Leaving it intact."));
            }
        }
        return str
    }

    function resolveQuery(
        query,
        extraQuery,
        _parseQuery
    ) {
        if (extraQuery === void 0) extraQuery = {};

        var parse = _parseQuery || parseQuery;
        var parsedQuery;
        try {
            parsedQuery = parse(query || '');
        } catch (e) {
            warn(false, e.message);
            parsedQuery = {};
        }
        for (var key in extraQuery) {
            var value = extraQuery[key];
            parsedQuery[key] = Array.isArray(value)
                ? value.map(castQueryParamValue)
                : castQueryParamValue(value);
        }
        return parsedQuery
    }

    var castQueryParamValue = function (value) { return (value == null || typeof value === 'object' ? value : String(value)); };

    function parseQuery(query) {
        var res = {};

        query = query.trim().replace(/^(\?|#|&)/, '');

        if (!query) {
            return res
        }

        query.split('&').forEach(function (param) {
            var parts = param.replace(/\+/g, ' ').split('=');
            var key = decode(parts.shift());
            var val = parts.length > 0 ? decode(parts.join('=')) : null;

            if (res[key] === undefined) {
                res[key] = val;
            } else if (Array.isArray(res[key])) {
                res[key].push(val);
            } else {
                res[key] = [res[key], val];
            }
        });

        return res
    }

    function stringifyQuery(obj) {
        var res = obj
            ? Object.keys(obj)
                .map(function (key) {
                    var val = obj[key];

                    if (val === undefined) {
                        return ''
                    }

                    if (val === null) {
                        return encode(key)
                    }

                    if (Array.isArray(val)) {
                        var result = [];
                        val.forEach(function (val2) {
                            if (val2 === undefined) {
                                return
                            }
                            if (val2 === null) {
                                result.push(encode(key));
                            } else {
                                result.push(encode(key) + '=' + encode(val2));
                            }
                        });
                        return result.join('&')
                    }

                    return encode(key) + '=' + encode(val)
                })
                .filter(function (x) { return x.length > 0; })
                .join('&')
            : null;
        return res ? ("?" + res) : ''
    }

    /*  */

    var trailingSlashRE = /\/?$/;

    function createRoute(
        record,
        location,
        redirectedFrom,
        router
    ) {
        var stringifyQuery = router && router.options.stringifyQuery;

        var query = location.query || {};
        try {
            query = clone(query);
        } catch (e) { }

        var route = {
            name: location.name || (record && record.name),
            meta: (record && record.meta) || {},
            path: location.path || '/',
            hash: location.hash || '',
            query: query,
            params: location.params || {},
            fullPath: getFullPath(location, stringifyQuery),
            matched: record ? formatMatch(record) : []
        };
        if (redirectedFrom) {
            route.redirectedFrom = getFullPath(redirectedFrom, stringifyQuery);
        }
        return Object.freeze(route)
    }

    function clone(value) {
        if (Array.isArray(value)) {
            return value.map(clone)
        } else if (value && typeof value === 'object') {
            var res = {};
            for (var key in value) {
                res[key] = clone(value[key]);
            }
            return res
        } else {
            return value
        }
    }

    // the starting route that represents the initial state
    var START = createRoute(null, {
        path: '/'
    });

    function formatMatch(record) {
        var res = [];
        while (record) {
            res.unshift(record);
            record = record.parent;
        }
        return res
    }

    function getFullPath(
        ref,
        _stringifyQuery
    ) {
        var path = ref.path;
        var query = ref.query; if (query === void 0) query = {};
        var hash = ref.hash; if (hash === void 0) hash = '';

        var stringify = _stringifyQuery || stringifyQuery;
        return (path || '/') + stringify(query) + hash
    }

    function isSameRoute(a, b, onlyPath) {
        if (b === START) {
            return a === b
        } else if (!b) {
            return false
        } else if (a.path && b.path) {
            return a.path.replace(trailingSlashRE, '') === b.path.replace(trailingSlashRE, '') && (onlyPath ||
                a.hash === b.hash &&
                isObjectEqual(a.query, b.query))
        } else if (a.name && b.name) {
            return (
                a.name === b.name &&
                (onlyPath || (
                    a.hash === b.hash &&
                    isObjectEqual(a.query, b.query) &&
                    isObjectEqual(a.params, b.params))
                )
            )
        } else {
            return false
        }
    }

    function isObjectEqual(a, b) {
        if (a === void 0) a = {};
        if (b === void 0) b = {};

        // handle null value #1566
        if (!a || !b) { return a === b }
        var aKeys = Object.keys(a).sort();
        var bKeys = Object.keys(b).sort();
        if (aKeys.length !== bKeys.length) {
            return false
        }
        return aKeys.every(function (key, i) {
            var aVal = a[key];
            var bKey = bKeys[i];
            if (bKey !== key) { return false }
            var bVal = b[key];
            // query values can be null and undefined
            if (aVal == null || bVal == null) { return aVal === bVal }
            // check nested equality
            if (typeof aVal === 'object' && typeof bVal === 'object') {
                return isObjectEqual(aVal, bVal)
            }
            return String(aVal) === String(bVal)
        })
    }

    function isIncludedRoute(current, target) {
        return (
            current.path.replace(trailingSlashRE, '/').indexOf(
                target.path.replace(trailingSlashRE, '/')
            ) === 0 &&
            (!target.hash || current.hash === target.hash) &&
            queryIncludes(current.query, target.query)
        )
    }

    function queryIncludes(current, target) {
        for (var key in target) {
            if (!(key in current)) {
                return false
            }
        }
        return true
    }

    function handleRouteEntered(route) {
        for (var i = 0; i < route.matched.length; i++) {
            var record = route.matched[i];
            for (var name in record.instances) {
                var instance = record.instances[name];
                var cbs = record.enteredCbs[name];
                if (!instance || !cbs) { continue }
                delete record.enteredCbs[name];
                for (var i$1 = 0; i$1 < cbs.length; i$1++) {
                    if (!instance._isBeingDestroyed) { cbs[i$1](instance); }
                }
            }
        }
    }

    var View = {
        name: 'RouterView',
        functional: true,
        props: {
            name: {
                type: String,
                default: 'default'
            }
        },
        render: function render(_, ref) {
            var props = ref.props;
            var children = ref.children;
            var parent = ref.parent;
            var data = ref.data;

            // used by devtools to display a router-view badge
            data.routerView = true;

            // directly use parent context's createElement() function
            // so that components rendered by router-view can resolve named slots
            var h = parent.$createElement;
            var name = props.name;
            var route = parent.$route;
            var cache = parent._routerViewCache || (parent._routerViewCache = {});

            // determine current view depth, also check to see if the tree
            // has been toggled inactive but kept-alive.
            var depth = 0;
            var inactive = false;
            while (parent && parent._routerRoot !== parent) {
                var vnodeData = parent.$vnode ? parent.$vnode.data : {};
                if (vnodeData.routerView) {
                    depth++;
                }
                if (vnodeData.keepAlive && parent._directInactive && parent._inactive) {
                    inactive = true;
                }
                parent = parent.$parent;
            }
            data.routerViewDepth = depth;

            // render previous view if the tree is inactive and kept-alive
            if (inactive) {
                var cachedData = cache[name];
                var cachedComponent = cachedData && cachedData.component;
                if (cachedComponent) {
                    // #2301
                    // pass props
                    if (cachedData.configProps) {
                        fillPropsinData(cachedComponent, data, cachedData.route, cachedData.configProps);
                    }
                    return h(cachedComponent, data, children)
                } else {
                    // render previous empty view
                    return h()
                }
            }

            var matched = route.matched[depth];
            var component = matched && matched.components[name];

            // render empty node if no matched route or no config component
            if (!matched || !component) {
                cache[name] = null;
                return h()
            }

            // cache component
            cache[name] = { component: component };

            // attach instance registration hook
            // this will be called in the instance's injected lifecycle hooks
            data.registerRouteInstance = function (vm, val) {
                // val could be undefined for unregistration
                var current = matched.instances[name];
                if (
                    (val && current !== vm) ||
                    (!val && current === vm)
                ) {
                    matched.instances[name] = val;
                }
            }

                // also register instance in prepatch hook
                // in case the same component instance is reused across different routes
                ; (data.hook || (data.hook = {})).prepatch = function (_, vnode) {
                    matched.instances[name] = vnode.componentInstance;
                };

            // register instance in init hook
            // in case kept-alive component be actived when routes changed
            data.hook.init = function (vnode) {
                if (vnode.data.keepAlive &&
                    vnode.componentInstance &&
                    vnode.componentInstance !== matched.instances[name]
                ) {
                    matched.instances[name] = vnode.componentInstance;
                }

                // if the route transition has already been confirmed then we weren't
                // able to call the cbs during confirmation as the component was not
                // registered yet, so we call it here.
                handleRouteEntered(route);
            };

            var configProps = matched.props && matched.props[name];
            // save route and configProps in cache
            if (configProps) {
                extend(cache[name], {
                    route: route,
                    configProps: configProps
                });
                fillPropsinData(component, data, route, configProps);
            }

            return h(component, data, children)
        }
    };

    function fillPropsinData(component, data, route, configProps) {
        // resolve props
        var propsToPass = data.props = resolveProps(route, configProps);
        if (propsToPass) {
            // clone to prevent mutation
            propsToPass = data.props = extend({}, propsToPass);
            // pass non-declared props as attrs
            var attrs = data.attrs = data.attrs || {};
            for (var key in propsToPass) {
                if (!component.props || !(key in component.props)) {
                    attrs[key] = propsToPass[key];
                    delete propsToPass[key];
                }
            }
        }
    }

    function resolveProps(route, config) {
        switch (typeof config) {
            case 'undefined':
                return
            case 'object':
                return config
            case 'function':
                return config(route)
            case 'boolean':
                return config ? route.params : undefined
            default:
                {
                    warn(
                        false,
                        "props in \"" + (route.path) + "\" is a " + (typeof config) + ", " +
                        "expecting an object, function or boolean."
                    );
                }
        }
    }

    /*  */

    function resolvePath(
        relative,
        base,
        append
    ) {
        var firstChar = relative.charAt(0);
        if (firstChar === '/') {
            return relative
        }

        if (firstChar === '?' || firstChar === '#') {
            return base + relative
        }

        var stack = base.split('/');

        // remove trailing segment if:
        // - not appending
        // - appending to trailing slash (last segment is empty)
        if (!append || !stack[stack.length - 1]) {
            stack.pop();
        }

        // resolve relative path
        var segments = relative.replace(/^\//, '').split('/');
        for (var i = 0; i < segments.length; i++) {
            var segment = segments[i];
            if (segment === '..') {
                stack.pop();
            } else if (segment !== '.') {
                stack.push(segment);
            }
        }

        // ensure leading slash
        if (stack[0] !== '') {
            stack.unshift('');
        }

        return stack.join('/')
    }

    function parsePath(path) {
        var hash = '';
        var query = '';

        var hashIndex = path.indexOf('#');
        if (hashIndex >= 0) {
            hash = path.slice(hashIndex);
            path = path.slice(0, hashIndex);
        }

        var queryIndex = path.indexOf('?');
        if (queryIndex >= 0) {
            query = path.slice(queryIndex + 1);
            path = path.slice(0, queryIndex);
        }

        return {
            path: path,
            query: query,
            hash: hash
        }
    }

    function cleanPath(path) {
        return path.replace(/\/\//g, '/')
    }

    var isarray = Array.isArray || function (arr) {
        return Object.prototype.toString.call(arr) == '[object Array]';
    };

    /**
     * Expose `pathToRegexp`.
     */
    var pathToRegexp_1 = pathToRegexp;
    var parse_1 = parse;
    var compile_1 = compile;
    var tokensToFunction_1 = tokensToFunction;
    var tokensToRegExp_1 = tokensToRegExp;

    /**
     * The main path matching regexp utility.
     *
     * @type {RegExp}
     */
    var PATH_REGEXP = new RegExp([
        // Match escaped characters that would otherwise appear in future matches.
        // This allows the user to escape special characters that won't transform.
        '(\\\\.)',
        // Match Express-style parameters and un-named parameters with a prefix
        // and optional suffixes. Matches appear as:
        //
        // "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
        // "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
        // "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
        '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'
    ].join('|'), 'g');

    /**
     * Parse a string for the raw tokens.
     *
     * @param  {string}  str
     * @param  {Object=} options
     * @return {!Array}
     */
    function parse(str, options) {
        var tokens = [];
        var key = 0;
        var index = 0;
        var path = '';
        var defaultDelimiter = options && options.delimiter || '/';
        var res;

        while ((res = PATH_REGEXP.exec(str)) != null) {
            var m = res[0];
            var escaped = res[1];
            var offset = res.index;
            path += str.slice(index, offset);
            index = offset + m.length;

            // Ignore already escaped sequences.
            if (escaped) {
                path += escaped[1];
                continue
            }

            var next = str[index];
            var prefix = res[2];
            var name = res[3];
            var capture = res[4];
            var group = res[5];
            var modifier = res[6];
            var asterisk = res[7];

            // Push the current path onto the tokens.
            if (path) {
                tokens.push(path);
                path = '';
            }

            var partial = prefix != null && next != null && next !== prefix;
            var repeat = modifier === '+' || modifier === '*';
            var optional = modifier === '?' || modifier === '*';
            var delimiter = res[2] || defaultDelimiter;
            var pattern = capture || group;

            tokens.push({
                name: name || key++,
                prefix: prefix || '',
                delimiter: delimiter,
                optional: optional,
                repeat: repeat,
                partial: partial,
                asterisk: !!asterisk,
                pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')
            });
        }

        // Match any characters still remaining.
        if (index < str.length) {
            path += str.substr(index);
        }

        // If the path exists, push it onto the end.
        if (path) {
            tokens.push(path);
        }

        return tokens
    }

    /**
     * Compile a string to a template function for the path.
     *
     * @param  {string}             str
     * @param  {Object=}            options
     * @return {!function(Object=, Object=)}
     */
    function compile(str, options) {
        return tokensToFunction(parse(str, options), options)
    }

    /**
     * Prettier encoding of URI path segments.
     *
     * @param  {string}
     * @return {string}
     */
    function encodeURIComponentPretty(str) {
        return encodeURI(str).replace(/[\/?#]/g, function (c) {
            return '%' + c.charCodeAt(0).toString(16).toUpperCase()
        })
    }

    /**
     * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
     *
     * @param  {string}
     * @return {string}
     */
    function encodeAsterisk(str) {
        return encodeURI(str).replace(/[?#]/g, function (c) {
            return '%' + c.charCodeAt(0).toString(16).toUpperCase()
        })
    }

    /**
     * Expose a method for transforming tokens into the path function.
     */
    function tokensToFunction(tokens, options) {
        // Compile all the tokens into regexps.
        var matches = new Array(tokens.length);

        // Compile all the patterns before compilation.
        for (var i = 0; i < tokens.length; i++) {
            if (typeof tokens[i] === 'object') {
                matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$', flags(options));
            }
        }

        return function (obj, opts) {
            var path = '';
            var data = obj || {};
            var options = opts || {};
            var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;

            for (var i = 0; i < tokens.length; i++) {
                var token = tokens[i];

                if (typeof token === 'string') {
                    path += token;

                    continue
                }

                var value = data[token.name];
                var segment;

                if (value == null) {
                    if (token.optional) {
                        // Prepend partial segment prefixes.
                        if (token.partial) {
                            path += token.prefix;
                        }

                        continue
                    } else {
                        throw new TypeError('Expected "' + token.name + '" to be defined')
                    }
                }

                if (isarray(value)) {
                    if (!token.repeat) {
                        throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`')
                    }

                    if (value.length === 0) {
                        if (token.optional) {
                            continue
                        } else {
                            throw new TypeError('Expected "' + token.name + '" to not be empty')
                        }
                    }

                    for (var j = 0; j < value.length; j++) {
                        segment = encode(value[j]);

                        if (!matches[i].test(segment)) {
                            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`')
                        }

                        path += (j === 0 ? token.prefix : token.delimiter) + segment;
                    }

                    continue
                }

                segment = token.asterisk ? encodeAsterisk(value) : encode(value);

                if (!matches[i].test(segment)) {
                    throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"')
                }

                path += token.prefix + segment;
            }

            return path
        }
    }

    /**
     * Escape a regular expression string.
     *
     * @param  {string} str
     * @return {string}
     */
    function escapeString(str) {
        return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1')
    }

    /**
     * Escape the capturing group by escaping special characters and meaning.
     *
     * @param  {string} group
     * @return {string}
     */
    function escapeGroup(group) {
        return group.replace(/([=!:$\/()])/g, '\\$1')
    }

    /**
     * Attach the keys as a property of the regexp.
     *
     * @param  {!RegExp} re
     * @param  {Array}   keys
     * @return {!RegExp}
     */
    function attachKeys(re, keys) {
        re.keys = keys;
        return re
    }

    /**
     * Get the flags for a regexp from the options.
     *
     * @param  {Object} options
     * @return {string}
     */
    function flags(options) {
        return options && options.sensitive ? '' : 'i'
    }

    /**
     * Pull out keys from a regexp.
     *
     * @param  {!RegExp} path
     * @param  {!Array}  keys
     * @return {!RegExp}
     */
    function regexpToRegexp(path, keys) {
        // Use a negative lookahead to match only capturing groups.
        var groups = path.source.match(/\((?!\?)/g);

        if (groups) {
            for (var i = 0; i < groups.length; i++) {
                keys.push({
                    name: i,
                    prefix: null,
                    delimiter: null,
                    optional: false,
                    repeat: false,
                    partial: false,
                    asterisk: false,
                    pattern: null
                });
            }
        }

        return attachKeys(path, keys)
    }

    /**
     * Transform an array into a regexp.
     *
     * @param  {!Array}  path
     * @param  {Array}   keys
     * @param  {!Object} options
     * @return {!RegExp}
     */
    function arrayToRegexp(path, keys, options) {
        var parts = [];

        for (var i = 0; i < path.length; i++) {
            parts.push(pathToRegexp(path[i], keys, options).source);
        }

        var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));

        return attachKeys(regexp, keys)
    }

    /**
     * Create a path regexp from string input.
     *
     * @param  {string}  path
     * @param  {!Array}  keys
     * @param  {!Object} options
     * @return {!RegExp}
     */
    function stringToRegexp(path, keys, options) {
        return tokensToRegExp(parse(path, options), keys, options)
    }

    /**
     * Expose a function for taking tokens and returning a RegExp.
     *
     * @param  {!Array}          tokens
     * @param  {(Array|Object)=} keys
     * @param  {Object=}         options
     * @return {!RegExp}
     */
    function tokensToRegExp(tokens, keys, options) {
        if (!isarray(keys)) {
            options = /** @type {!Object} */ (keys || options);
            keys = [];
        }

        options = options || {};

        var strict = options.strict;
        var end = options.end !== false;
        var route = '';

        // Iterate over the tokens and create our regexp string.
        for (var i = 0; i < tokens.length; i++) {
            var token = tokens[i];

            if (typeof token === 'string') {
                route += escapeString(token);
            } else {
                var prefix = escapeString(token.prefix);
                var capture = '(?:' + token.pattern + ')';

                keys.push(token);

                if (token.repeat) {
                    capture += '(?:' + prefix + capture + ')*';
                }

                if (token.optional) {
                    if (!token.partial) {
                        capture = '(?:' + prefix + '(' + capture + '))?';
                    } else {
                        capture = prefix + '(' + capture + ')?';
                    }
                } else {
                    capture = prefix + '(' + capture + ')';
                }

                route += capture;
            }
        }

        var delimiter = escapeString(options.delimiter || '/');
        var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;

        // In non-strict mode we allow a slash at the end of match. If the path to
        // match already ends with a slash, we remove it for consistency. The slash
        // is valid at the end of a path match, not in the middle. This is important
        // in non-ending mode, where "/test/" shouldn't match "/test//route".
        if (!strict) {
            route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';
        }

        if (end) {
            route += '$';
        } else {
            // In non-ending mode, we need the capturing groups to match as much as
            // possible by using a positive lookahead to the end or next path segment.
            route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';
        }

        return attachKeys(new RegExp('^' + route, flags(options)), keys)
    }

    /**
     * Normalize the given path string, returning a regular expression.
     *
     * An empty array can be passed in for the keys, which will hold the
     * placeholder key descriptions. For example, using `/user/:id`, `keys` will
     * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
     *
     * @param  {(string|RegExp|Array)} path
     * @param  {(Array|Object)=}       keys
     * @param  {Object=}               options
     * @return {!RegExp}
     */
    function pathToRegexp(path, keys, options) {
        if (!isarray(keys)) {
            options = /** @type {!Object} */ (keys || options);
            keys = [];
        }

        options = options || {};

        if (path instanceof RegExp) {
            return regexpToRegexp(path, /** @type {!Array} */(keys))
        }

        if (isarray(path)) {
            return arrayToRegexp(/** @type {!Array} */(path), /** @type {!Array} */(keys), options)
        }

        return stringToRegexp(/** @type {string} */(path), /** @type {!Array} */(keys), options)
    }
    pathToRegexp_1.parse = parse_1;
    pathToRegexp_1.compile = compile_1;
    pathToRegexp_1.tokensToFunction = tokensToFunction_1;
    pathToRegexp_1.tokensToRegExp = tokensToRegExp_1;

    /*  */

    // $flow-disable-line
    var regexpCompileCache = Object.create(null);

    function fillParams(
        path,
        params,
        routeMsg
    ) {
        params = params || {};
        try {
            var filler =
                regexpCompileCache[path] ||
                (regexpCompileCache[path] = pathToRegexp_1.compile(path));

            // Fix #2505 resolving asterisk routes { name: 'not-found', params: { pathMatch: '/not-found' }}
            // and fix #3106 so that you can work with location descriptor object having params.pathMatch equal to empty string
            if (typeof params.pathMatch === 'string') { params[0] = params.pathMatch; }

            return filler(params, { pretty: true })
        } catch (e) {
            {
                // Fix #3072 no warn if `pathMatch` is string
                warn(typeof params.pathMatch === 'string', ("missing param for " + routeMsg + ": " + (e.message)));
            }
            return ''
        } finally {
            // delete the 0 if it was added
            delete params[0];
        }
    }

    /*  */

    function normalizeLocation(
        raw,
        current,
        append,
        router
    ) {
        var next = typeof raw === 'string' ? { path: raw } : raw;
        // named target
        if (next._normalized) {
            return next
        } else if (next.name) {
            next = extend({}, raw);
            var params = next.params;
            if (params && typeof params === 'object') {
                next.params = extend({}, params);
            }
            return next
        }

        // relative params
        if (!next.path && next.params && current) {
            next = extend({}, next);
            next._normalized = true;
            var params$1 = extend(extend({}, current.params), next.params);
            if (current.name) {
                next.name = current.name;
                next.params = params$1;
            } else if (current.matched.length) {
                var rawPath = current.matched[current.matched.length - 1].path;
                next.path = fillParams(rawPath, params$1, ("path " + (current.path)));
            } else {
                warn(false, "relative params navigation requires a current route.");
            }
            return next
        }

        var parsedPath = parsePath(next.path || '');
        var basePath = (current && current.path) || '/';
        var path = parsedPath.path
            ? resolvePath(parsedPath.path, basePath, append || next.append)
            : basePath;

        var query = resolveQuery(
            parsedPath.query,
            next.query,
            router && router.options.parseQuery
        );

        var hash = next.hash || parsedPath.hash;
        if (hash && hash.charAt(0) !== '#') {
            hash = "#" + hash;
        }

        return {
            _normalized: true,
            path: path,
            query: query,
            hash: hash
        }
    }

    /*  */

    // work around weird flow bug
    var toTypes = [String, Object];
    var eventTypes = [String, Array];

    var noop = function () { };

    var warnedCustomSlot;
    var warnedTagProp;
    var warnedEventProp;

    var Link = {
        name: 'RouterLink',
        props: {
            to: {
                type: toTypes,
                required: true
            },
            tag: {
                type: String,
                default: 'a'
            },
            custom: Boolean,
            exact: Boolean,
            exactPath: Boolean,
            append: Boolean,
            replace: Boolean,
            activeClass: String,
            exactActiveClass: String,
            ariaCurrentValue: {
                type: String,
                default: 'page'
            },
            event: {
                type: eventTypes,
                default: 'click'
            }
        },
        render: function render(h) {
            var this$1 = this;

            var router = this.$router;
            var current = this.$route;
            var ref = router.resolve(
                this.to,
                current,
                this.append
            );
            var location = ref.location;
            var route = ref.route;
            var href = ref.href;

            var classes = {};
            var globalActiveClass = router.options.linkActiveClass;
            var globalExactActiveClass = router.options.linkExactActiveClass;
            // Support global empty active class
            var activeClassFallback =
                globalActiveClass == null ? 'router-link-active' : globalActiveClass;
            var exactActiveClassFallback =
                globalExactActiveClass == null
                    ? 'router-link-exact-active'
                    : globalExactActiveClass;
            var activeClass =
                this.activeClass == null ? activeClassFallback : this.activeClass;
            var exactActiveClass =
                this.exactActiveClass == null
                    ? exactActiveClassFallback
                    : this.exactActiveClass;

            var compareTarget = route.redirectedFrom
                ? createRoute(null, normalizeLocation(route.redirectedFrom), null, router)
                : route;

            classes[exactActiveClass] = isSameRoute(current, compareTarget, this.exactPath);
            classes[activeClass] = this.exact || this.exactPath
                ? classes[exactActiveClass]
                : isIncludedRoute(current, compareTarget);

            var ariaCurrentValue = classes[exactActiveClass] ? this.ariaCurrentValue : null;

            var handler = function (e) {
                if (guardEvent(e)) {
                    if (this$1.replace) {
                        router.replace(location, noop);
                    } else {
                        router.push(location, noop);
                    }
                }
            };

            var on = { click: guardEvent };
            if (Array.isArray(this.event)) {
                this.event.forEach(function (e) {
                    on[e] = handler;
                });
            } else {
                on[this.event] = handler;
            }

            var data = { class: classes };

            var scopedSlot =
                !this.$scopedSlots.$hasNormal &&
                this.$scopedSlots.default &&
                this.$scopedSlots.default({
                    href: href,
                    route: route,
                    navigate: handler,
                    isActive: classes[activeClass],
                    isExactActive: classes[exactActiveClass]
                });

            if (scopedSlot) {
                if (!this.custom) {
                    !warnedCustomSlot && warn(false, 'In Vue Router 4, the v-slot API will by default wrap its content with an <a> element. Use the custom prop to remove this warning:\n<router-link v-slot="{ navigate, href }" custom></router-link>\n');
                    warnedCustomSlot = true;
                }
                if (scopedSlot.length === 1) {
                    return scopedSlot[0]
                } else if (scopedSlot.length > 1 || !scopedSlot.length) {
                    {
                        warn(
                            false,
                            ("<router-link> with to=\"" + (this.to) + "\" is trying to use a scoped slot but it didn't provide exactly one child. Wrapping the content with a span element.")
                        );
                    }
                    return scopedSlot.length === 0 ? h() : h('span', {}, scopedSlot)
                }
            }

            {
                if ('tag' in this.$options.propsData && !warnedTagProp) {
                    warn(
                        false,
                        "<router-link>'s tag prop is deprecated and has been removed in Vue Router 4. Use the v-slot API to remove this warning: https://next.router.vuejs.org/guide/migration/#removal-of-event-and-tag-props-in-router-link."
                    );
                    warnedTagProp = true;
                }
                if ('event' in this.$options.propsData && !warnedEventProp) {
                    warn(
                        false,
                        "<router-link>'s event prop is deprecated and has been removed in Vue Router 4. Use the v-slot API to remove this warning: https://next.router.vuejs.org/guide/migration/#removal-of-event-and-tag-props-in-router-link."
                    );
                    warnedEventProp = true;
                }
            }

            if (this.tag === 'a') {
                data.on = on;
                data.attrs = { href: href, 'aria-current': ariaCurrentValue };
            } else {
                // find the first <a> child and apply listener and href
                var a = findAnchor(this.$slots.default);
                if (a) {
                    // in case the <a> is a static node
                    a.isStatic = false;
                    var aData = (a.data = extend({}, a.data));
                    aData.on = aData.on || {};
                    // transform existing events in both objects into arrays so we can push later
                    for (var event in aData.on) {
                        var handler$1 = aData.on[event];
                        if (event in on) {
                            aData.on[event] = Array.isArray(handler$1) ? handler$1 : [handler$1];
                        }
                    }
                    // append new listeners for router-link
                    for (var event$1 in on) {
                        if (event$1 in aData.on) {
                            // on[event] is always a function
                            aData.on[event$1].push(on[event$1]);
                        } else {
                            aData.on[event$1] = handler;
                        }
                    }

                    var aAttrs = (a.data.attrs = extend({}, a.data.attrs));
                    aAttrs.href = href;
                    aAttrs['aria-current'] = ariaCurrentValue;
                } else {
                    // doesn't have <a> child, apply listener to self
                    data.on = on;
                }
            }

            return h(this.tag, data, this.$slots.default)
        }
    };

    function guardEvent(e) {
        // don't redirect with control keys
        if (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) { return }
        // don't redirect when preventDefault called
        if (e.defaultPrevented) { return }
        // don't redirect on right click
        if (e.button !== undefined && e.button !== 0) { return }
        // don't redirect if `target="_blank"`
        if (e.currentTarget && e.currentTarget.getAttribute) {
            var target = e.currentTarget.getAttribute('target');
            if (/\b_blank\b/i.test(target)) { return }
        }
        // this may be a Weex event which doesn't have this method
        if (e.preventDefault) {
            e.preventDefault();
        }
        return true
    }

    function findAnchor(children) {
        if (children) {
            var child;
            for (var i = 0; i < children.length; i++) {
                child = children[i];
                if (child.tag === 'a') {
                    return child
                }
                if (child.children && (child = findAnchor(child.children))) {
                    return child
                }
            }
        }
    }

    var _Vue;

    function install(Vue) {
        if (install.installed && _Vue === Vue) { return }
        install.installed = true;

        _Vue = Vue;

        var isDef = function (v) { return v !== undefined; };

        var registerInstance = function (vm, callVal) {
            var i = vm.$options._parentVnode;
            if (isDef(i) && isDef(i = i.data) && isDef(i = i.registerRouteInstance)) {
                i(vm, callVal);
            }
        };

        Vue.mixin({
            beforeCreate: function beforeCreate() {
                if (isDef(this.$options.router)) {
                    this._routerRoot = this;
                    this._router = this.$options.router;
                    this._router.init(this);
                    Vue.util.defineReactive(this, '_route', this._router.history.current);
                } else {
                    this._routerRoot = (this.$parent && this.$parent._routerRoot) || this;
                }
                registerInstance(this, this);
            },
            destroyed: function destroyed() {
                registerInstance(this);
            }
        });

        Object.defineProperty(Vue.prototype, '$router', {
            get: function get() { return this._routerRoot._router }
        });

        Object.defineProperty(Vue.prototype, '$route', {
            get: function get() { return this._routerRoot._route }
        });

        Vue.component('RouterView', View);
        Vue.component('RouterLink', Link);

        var strats = Vue.config.optionMergeStrategies;
        // use the same hook merging strategy for route hooks
        strats.beforeRouteEnter = strats.beforeRouteLeave = strats.beforeRouteUpdate = strats.created;
    }

    /*  */

    var inBrowser = typeof window !== 'undefined';

    /*  */

    function createRouteMap(
        routes,
        oldPathList,
        oldPathMap,
        oldNameMap,
        parentRoute
    ) {
        // the path list is used to control path matching priority
        var pathList = oldPathList || [];
        // $flow-disable-line
        var pathMap = oldPathMap || Object.create(null);
        // $flow-disable-line
        var nameMap = oldNameMap || Object.create(null);

        routes.forEach(function (route) {
            addRouteRecord(pathList, pathMap, nameMap, route, parentRoute);
        });

        // ensure wildcard routes are always at the end
        for (var i = 0, l = pathList.length; i < l; i++) {
            if (pathList[i] === '*') {
                pathList.push(pathList.splice(i, 1)[0]);
                l--;
                i--;
            }
        }

        {
            // warn if routes do not include leading slashes
            var found = pathList
                // check for missing leading slash
                .filter(function (path) { return path && path.charAt(0) !== '*' && path.charAt(0) !== '/'; });

            if (found.length > 0) {
                var pathNames = found.map(function (path) { return ("- " + path); }).join('\n');
                warn(false, ("Non-nested routes must include a leading slash character. Fix the following routes: \n" + pathNames));
            }
        }

        return {
            pathList: pathList,
            pathMap: pathMap,
            nameMap: nameMap
        }
    }

    function addRouteRecord(
        pathList,
        pathMap,
        nameMap,
        route,
        parent,
        matchAs
    ) {
        var path = route.path;
        var name = route.name;
        {
            assert(path != null, "\"path\" is required in a route configuration.");
            assert(
                typeof route.component !== 'string',
                "route config \"component\" for path: " + (String(
                    path || name
                )) + " cannot be a " + "string id. Use an actual component instead."
            );

            warn(
                // eslint-disable-next-line no-control-regex
                !/[^\u0000-\u007F]+/.test(path),
                "Route with path \"" + path + "\" contains unencoded characters, make sure " +
                "your path is correctly encoded before passing it to the router. Use " +
                "encodeURI to encode static segments of your path."
            );
        }

        var pathToRegexpOptions =
            route.pathToRegexpOptions || {};
        var normalizedPath = normalizePath(path, parent, pathToRegexpOptions.strict);

        if (typeof route.caseSensitive === 'boolean') {
            pathToRegexpOptions.sensitive = route.caseSensitive;
        }

        var record = {
            path: normalizedPath,
            regex: compileRouteRegex(normalizedPath, pathToRegexpOptions),
            components: route.components || { default: route.component },
            alias: route.alias
                ? typeof route.alias === 'string'
                    ? [route.alias]
                    : route.alias
                : [],
            instances: {},
            enteredCbs: {},
            name: name,
            parent: parent,
            matchAs: matchAs,
            redirect: route.redirect,
            beforeEnter: route.beforeEnter,
            meta: route.meta || {},
            props:
                route.props == null
                    ? {}
                    : route.components
                        ? route.props
                        : { default: route.props }
        };

        if (route.children) {
            // Warn if route is named, does not redirect and has a default child route.
            // If users navigate to this route by name, the default child will
            // not be rendered (GH Issue #629)
            {
                if (
                    route.name &&
                    !route.redirect &&
                    route.children.some(function (child) { return /^\/?$/.test(child.path); })
                ) {
                    warn(
                        false,
                        "Named Route '" + (route.name) + "' has a default child route. " +
                        "When navigating to this named route (:to=\"{name: '" + (route.name) + "'\"), " +
                        "the default child route will not be rendered. Remove the name from " +
                        "this route and use the name of the default child route for named " +
                        "links instead."
                    );
                }
            }
            route.children.forEach(function (child) {
                var childMatchAs = matchAs
                    ? cleanPath((matchAs + "/" + (child.path)))
                    : undefined;
                addRouteRecord(pathList, pathMap, nameMap, child, record, childMatchAs);
            });
        }

        if (!pathMap[record.path]) {
            pathList.push(record.path);
            pathMap[record.path] = record;
        }

        if (route.alias !== undefined) {
            var aliases = Array.isArray(route.alias) ? route.alias : [route.alias];
            for (var i = 0; i < aliases.length; ++i) {
                var alias = aliases[i];
                if (alias === path) {
                    warn(
                        false,
                        ("Found an alias with the same value as the path: \"" + path + "\". You have to remove that alias. It will be ignored in development.")
                    );
                    // skip in dev to make it work
                    continue
                }

                var aliasRoute = {
                    path: alias,
                    children: route.children
                };
                addRouteRecord(
                    pathList,
                    pathMap,
                    nameMap,
                    aliasRoute,
                    parent,
                    record.path || '/' // matchAs
                );
            }
        }

        if (name) {
            if (!nameMap[name]) {
                nameMap[name] = record;
            } else if (!matchAs) {
                warn(
                    false,
                    "Duplicate named routes definition: " +
                    "{ name: \"" + name + "\", path: \"" + (record.path) + "\" }"
                );
            }
        }
    }

    function compileRouteRegex(
        path,
        pathToRegexpOptions
    ) {
        var regex = pathToRegexp_1(path, [], pathToRegexpOptions);
        {
            var keys = Object.create(null);
            regex.keys.forEach(function (key) {
                warn(
                    !keys[key.name],
                    ("Duplicate param keys in route with path: \"" + path + "\"")
                );
                keys[key.name] = true;
            });
        }
        return regex
    }

    function normalizePath(
        path,
        parent,
        strict
    ) {
        if (!strict) { path = path.replace(/\/$/, ''); }
        if (path[0] === '/') { return path }
        if (parent == null) { return path }
        return cleanPath(((parent.path) + "/" + path))
    }

    /*  */



    function createMatcher(
        routes,
        router
    ) {
        var ref = createRouteMap(routes);
        var pathList = ref.pathList;
        var pathMap = ref.pathMap;
        var nameMap = ref.nameMap;

        function addRoutes(routes) {
            createRouteMap(routes, pathList, pathMap, nameMap);
        }

        function addRoute(parentOrRoute, route) {
            var parent = (typeof parentOrRoute !== 'object') ? nameMap[parentOrRoute] : undefined;
            // $flow-disable-line
            createRouteMap([route || parentOrRoute], pathList, pathMap, nameMap, parent);

            // add aliases of parent
            if (parent) {
                createRouteMap(
                    // $flow-disable-line route is defined if parent is
                    parent.alias.map(function (alias) { return ({ path: alias, children: [route] }); }),
                    pathList,
                    pathMap,
                    nameMap,
                    parent
                );
            }
        }

        function getRoutes() {
            return pathList.map(function (path) { return pathMap[path]; })
        }

        function match(
            raw,
            currentRoute,
            redirectedFrom
        ) {
            var location = normalizeLocation(raw, currentRoute, false, router);
            var name = location.name;

            if (name) {
                var record = nameMap[name];
                {
                    warn(record, ("Route with name '" + name + "' does not exist"));
                }
                if (!record) { return _createRoute(null, location) }
                var paramNames = record.regex.keys
                    .filter(function (key) { return !key.optional; })
                    .map(function (key) { return key.name; });

                if (typeof location.params !== 'object') {
                    location.params = {};
                }

                if (currentRoute && typeof currentRoute.params === 'object') {
                    for (var key in currentRoute.params) {
                        if (!(key in location.params) && paramNames.indexOf(key) > -1) {
                            location.params[key] = currentRoute.params[key];
                        }
                    }
                }

                location.path = fillParams(record.path, location.params, ("named route \"" + name + "\""));
                return _createRoute(record, location, redirectedFrom)
            } else if (location.path) {
                location.params = {};
                for (var i = 0; i < pathList.length; i++) {
                    var path = pathList[i];
                    var record$1 = pathMap[path];
                    if (matchRoute(record$1.regex, location.path, location.params)) {
                        return _createRoute(record$1, location, redirectedFrom)
                    }
                }
            }
            // no match
            return _createRoute(null, location)
        }

        function redirect(
            record,
            location
        ) {
            var originalRedirect = record.redirect;
            var redirect = typeof originalRedirect === 'function'
                ? originalRedirect(createRoute(record, location, null, router))
                : originalRedirect;

            if (typeof redirect === 'string') {
                redirect = { path: redirect };
            }

            if (!redirect || typeof redirect !== 'object') {
                {
                    warn(
                        false, ("invalid redirect option: " + (JSON.stringify(redirect)))
                    );
                }
                return _createRoute(null, location)
            }

            var re = redirect;
            var name = re.name;
            var path = re.path;
            var query = location.query;
            var hash = location.hash;
            var params = location.params;
            query = re.hasOwnProperty('query') ? re.query : query;
            hash = re.hasOwnProperty('hash') ? re.hash : hash;
            params = re.hasOwnProperty('params') ? re.params : params;

            if (name) {
                // resolved named direct
                var targetRecord = nameMap[name];
                {
                    assert(targetRecord, ("redirect failed: named route \"" + name + "\" not found."));
                }
                return match({
                    _normalized: true,
                    name: name,
                    query: query,
                    hash: hash,
                    params: params
                }, undefined, location)
            } else if (path) {
                // 1. resolve relative redirect
                var rawPath = resolveRecordPath(path, record);
                // 2. resolve params
                var resolvedPath = fillParams(rawPath, params, ("redirect route with path \"" + rawPath + "\""));
                // 3. rematch with existing query and hash
                return match({
                    _normalized: true,
                    path: resolvedPath,
                    query: query,
                    hash: hash
                }, undefined, location)
            } else {
                {
                    warn(false, ("invalid redirect option: " + (JSON.stringify(redirect))));
                }
                return _createRoute(null, location)
            }
        }

        function alias(
            record,
            location,
            matchAs
        ) {
            var aliasedPath = fillParams(matchAs, location.params, ("aliased route with path \"" + matchAs + "\""));
            var aliasedMatch = match({
                _normalized: true,
                path: aliasedPath
            });
            if (aliasedMatch) {
                var matched = aliasedMatch.matched;
                var aliasedRecord = matched[matched.length - 1];
                location.params = aliasedMatch.params;
                return _createRoute(aliasedRecord, location)
            }
            return _createRoute(null, location)
        }

        function _createRoute(
            record,
            location,
            redirectedFrom
        ) {
            if (record && record.redirect) {
                return redirect(record, redirectedFrom || location)
            }
            if (record && record.matchAs) {
                return alias(record, location, record.matchAs)
            }
            return createRoute(record, location, redirectedFrom, router)
        }

        return {
            match: match,
            addRoute: addRoute,
            getRoutes: getRoutes,
            addRoutes: addRoutes
        }
    }

    function matchRoute(
        regex,
        path,
        params
    ) {
        var m = path.match(regex);

        if (!m) {
            return false
        } else if (!params) {
            return true
        }

        for (var i = 1, len = m.length; i < len; ++i) {
            var key = regex.keys[i - 1];
            if (key) {
                // Fix #1994: using * with props: true generates a param named 0
                params[key.name || 'pathMatch'] = typeof m[i] === 'string' ? decode(m[i]) : m[i];
            }
        }

        return true
    }

    function resolveRecordPath(path, record) {
        return resolvePath(path, record.parent ? record.parent.path : '/', true)
    }

    /*  */

    // use User Timing api (if present) for more accurate key precision
    var Time =
        inBrowser && window.performance && window.performance.now
            ? window.performance
            : Date;

    function genStateKey() {
        return Time.now().toFixed(3)
    }

    var _key = genStateKey();

    function getStateKey() {
        return _key
    }

    function setStateKey(key) {
        return (_key = key)
    }

    /*  */

    var positionStore = Object.create(null);

    function setupScroll() {
        // Prevent browser scroll behavior on History popstate
        if ('scrollRestoration' in window.history) {
            window.history.scrollRestoration = 'manual';
        }
        // Fix for #1585 for Firefox
        // Fix for #2195 Add optional third attribute to workaround a bug in safari https://bugs.webkit.org/show_bug.cgi?id=182678
        // Fix for #2774 Support for apps loaded from Windows file shares not mapped to network drives: replaced location.origin with
        // window.location.protocol + '//' + window.location.host
        // location.host contains the port and location.hostname doesn't
        var protocolAndPath = window.location.protocol + '//' + window.location.host;
        var absolutePath = window.location.href.replace(protocolAndPath, '');
        // preserve existing history state as it could be overriden by the user
        var stateCopy = extend({}, window.history.state);
        stateCopy.key = getStateKey();
        window.history.replaceState(stateCopy, '', absolutePath);
        window.addEventListener('popstate', handlePopState);
        return function () {
            window.removeEventListener('popstate', handlePopState);
        }
    }

    function handleScroll(
        router,
        to,
        from,
        isPop
    ) {
        if (!router.app) {
            return
        }

        var behavior = router.options.scrollBehavior;
        if (!behavior) {
            return
        }

        {
            assert(typeof behavior === 'function', "scrollBehavior must be a function");
        }

        // wait until re-render finishes before scrolling
        router.app.$nextTick(function () {
            var position = getScrollPosition();
            var shouldScroll = behavior.call(
                router,
                to,
                from,
                isPop ? position : null
            );

            if (!shouldScroll) {
                return
            }

            if (typeof shouldScroll.then === 'function') {
                shouldScroll
                    .then(function (shouldScroll) {
                        scrollToPosition((shouldScroll), position);
                    })
                    .catch(function (err) {
                        {
                            assert(false, err.toString());
                        }
                    });
            } else {
                scrollToPosition(shouldScroll, position);
            }
        });
    }

    function saveScrollPosition() {
        var key = getStateKey();
        if (key) {
            positionStore[key] = {
                x: window.pageXOffset,
                y: window.pageYOffset
            };
        }
    }

    function handlePopState(e) {
        saveScrollPosition();
        if (e.state && e.state.key) {
            setStateKey(e.state.key);
        }
    }

    function getScrollPosition() {
        var key = getStateKey();
        if (key) {
            return positionStore[key]
        }
    }

    function getElementPosition(el, offset) {
        var docEl = document.documentElement;
        var docRect = docEl.getBoundingClientRect();
        var elRect = el.getBoundingClientRect();
        return {
            x: elRect.left - docRect.left - offset.x,
            y: elRect.top - docRect.top - offset.y
        }
    }

    function isValidPosition(obj) {
        return isNumber(obj.x) || isNumber(obj.y)
    }

    function normalizePosition(obj) {
        return {
            x: isNumber(obj.x) ? obj.x : window.pageXOffset,
            y: isNumber(obj.y) ? obj.y : window.pageYOffset
        }
    }

    function normalizeOffset(obj) {
        return {
            x: isNumber(obj.x) ? obj.x : 0,
            y: isNumber(obj.y) ? obj.y : 0
        }
    }

    function isNumber(v) {
        return typeof v === 'number'
    }

    var hashStartsWithNumberRE = /^#\d/;

    function scrollToPosition(shouldScroll, position) {
        var isObject = typeof shouldScroll === 'object';
        if (isObject && typeof shouldScroll.selector === 'string') {
            // getElementById would still fail if the selector contains a more complicated query like #main[data-attr]
            // but at the same time, it doesn't make much sense to select an element with an id and an extra selector
            var el = hashStartsWithNumberRE.test(shouldScroll.selector) // $flow-disable-line
                ? document.getElementById(shouldScroll.selector.slice(1)) // $flow-disable-line
                : document.querySelector(shouldScroll.selector);

            if (el) {
                var offset =
                    shouldScroll.offset && typeof shouldScroll.offset === 'object'
                        ? shouldScroll.offset
                        : {};
                offset = normalizeOffset(offset);
                position = getElementPosition(el, offset);
            } else if (isValidPosition(shouldScroll)) {
                position = normalizePosition(shouldScroll);
            }
        } else if (isObject && isValidPosition(shouldScroll)) {
            position = normalizePosition(shouldScroll);
        }

        if (position) {
            // $flow-disable-line
            if ('scrollBehavior' in document.documentElement.style) {
                window.scrollTo({
                    left: position.x,
                    top: position.y,
                    // $flow-disable-line
                    behavior: shouldScroll.behavior
                });
            } else {
                window.scrollTo(position.x, position.y);
            }
        }
    }

    /*  */

    var supportsPushState =
        inBrowser &&
        (function () {
            var ua = window.navigator.userAgent;

            if (
                (ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) &&
                ua.indexOf('Mobile Safari') !== -1 &&
                ua.indexOf('Chrome') === -1 &&
                ua.indexOf('Windows Phone') === -1
            ) {
                return false
            }

            return window.history && typeof window.history.pushState === 'function'
        })();

    function pushState(url, replace) {
        saveScrollPosition();
        // try...catch the pushState call to get around Safari
        // DOM Exception 18 where it limits to 100 pushState calls
        var history = window.history;
        try {
            if (replace) {
                // preserve existing history state as it could be overriden by the user
                var stateCopy = extend({}, history.state);
                stateCopy.key = getStateKey();
                history.replaceState(stateCopy, '', url);
            } else {
                history.pushState({ key: setStateKey(genStateKey()) }, '', url);
            }
        } catch (e) {
            window.location[replace ? 'replace' : 'assign'](url);
        }
    }

    function replaceState(url) {
        pushState(url, true);
    }

    /*  */

    function runQueue(queue, fn, cb) {
        var step = function (index) {
            if (index >= queue.length) {
                cb();
            } else {
                if (queue[index]) {
                    fn(queue[index], function () {
                        step(index + 1);
                    });
                } else {
                    step(index + 1);
                }
            }
        };
        step(0);
    }

    // When changing thing, also edit router.d.ts
    var NavigationFailureType = {
        redirected: 2,
        aborted: 4,
        cancelled: 8,
        duplicated: 16
    };

    function createNavigationRedirectedError(from, to) {
        return createRouterError(
            from,
            to,
            NavigationFailureType.redirected,
            ("Redirected when going from \"" + (from.fullPath) + "\" to \"" + (stringifyRoute(
                to
            )) + "\" via a navigation guard.")
        )
    }

    function createNavigationDuplicatedError(from, to) {
        var error = createRouterError(
            from,
            to,
            NavigationFailureType.duplicated,
            ("Avoided redundant navigation to current location: \"" + (from.fullPath) + "\".")
        );
        // backwards compatible with the first introduction of Errors
        error.name = 'NavigationDuplicated';
        return error
    }

    function createNavigationCancelledError(from, to) {
        return createRouterError(
            from,
            to,
            NavigationFailureType.cancelled,
            ("Navigation cancelled from \"" + (from.fullPath) + "\" to \"" + (to.fullPath) + "\" with a new navigation.")
        )
    }

    function createNavigationAbortedError(from, to) {
        return createRouterError(
            from,
            to,
            NavigationFailureType.aborted,
            ("Navigation aborted from \"" + (from.fullPath) + "\" to \"" + (to.fullPath) + "\" via a navigation guard.")
        )
    }

    function createRouterError(from, to, type, message) {
        var error = new Error(message);
        error._isRouter = true;
        error.from = from;
        error.to = to;
        error.type = type;

        return error
    }

    var propertiesToLog = ['params', 'query', 'hash'];

    function stringifyRoute(to) {
        if (typeof to === 'string') { return to }
        if ('path' in to) { return to.path }
        var location = {};
        propertiesToLog.forEach(function (key) {
            if (key in to) { location[key] = to[key]; }
        });
        return JSON.stringify(location, null, 2)
    }

    function isError(err) {
        return Object.prototype.toString.call(err).indexOf('Error') > -1
    }

    function isNavigationFailure(err, errorType) {
        return (
            isError(err) &&
            err._isRouter &&
            (errorType == null || err.type === errorType)
        )
    }

    /*  */

    function resolveAsyncComponents(matched) {
        return function (to, from, next) {
            var hasAsync = false;
            var pending = 0;
            var error = null;

            flatMapComponents(matched, function (def, _, match, key) {
                // if it's a function and doesn't have cid attached,
                // assume it's an async component resolve function.
                // we are not using Vue's default async resolving mechanism because
                // we want to halt the navigation until the incoming component has been
                // resolved.
                if (typeof def === 'function' && def.cid === undefined) {
                    hasAsync = true;
                    pending++;

                    var resolve = once(function (resolvedDef) {
                        if (isESModule(resolvedDef)) {
                            resolvedDef = resolvedDef.default;
                        }
                        // save resolved on async factory in case it's used elsewhere
                        def.resolved = typeof resolvedDef === 'function'
                            ? resolvedDef
                            : _Vue.extend(resolvedDef);
                        match.components[key] = resolvedDef;
                        pending--;
                        if (pending <= 0) {
                            next();
                        }
                    });

                    var reject = once(function (reason) {
                        var msg = "Failed to resolve async component " + key + ": " + reason;
                        warn(false, msg);
                        if (!error) {
                            error = isError(reason)
                                ? reason
                                : new Error(msg);
                            next(error);
                        }
                    });

                    var res;
                    try {
                        res = def(resolve, reject);
                    } catch (e) {
                        reject(e);
                    }
                    if (res) {
                        if (typeof res.then === 'function') {
                            res.then(resolve, reject);
                        } else {
                            // new syntax in Vue 2.3
                            var comp = res.component;
                            if (comp && typeof comp.then === 'function') {
                                comp.then(resolve, reject);
                            }
                        }
                    }
                }
            });

            if (!hasAsync) { next(); }
        }
    }

    function flatMapComponents(
        matched,
        fn
    ) {
        return flatten(matched.map(function (m) {
            return Object.keys(m.components).map(function (key) {
                return fn(
                    m.components[key],
                    m.instances[key],
                    m, key
                );
            })
        }))
    }

    function flatten(arr) {
        return Array.prototype.concat.apply([], arr)
    }

    var hasSymbol =
        typeof Symbol === 'function' &&
        typeof Symbol.toStringTag === 'symbol';

    function isESModule(obj) {
        return obj.__esModule || (hasSymbol && obj[Symbol.toStringTag] === 'Module')
    }

    // in Webpack 2, require.ensure now also returns a Promise
    // so the resolve/reject functions may get called an extra time
    // if the user uses an arrow function shorthand that happens to
    // return that Promise.
    function once(fn) {
        var called = false;
        return function () {
            var args = [], len = arguments.length;
            while (len--) args[len] = arguments[len];

            if (called) { return }
            called = true;
            return fn.apply(this, args)
        }
    }

    /*  */

    var History = function History(router, base) {
        this.router = router;
        this.base = normalizeBase(base);
        // start with a route object that stands for "nowhere"
        this.current = START;
        this.pending = null;
        this.ready = false;
        this.readyCbs = [];
        this.readyErrorCbs = [];
        this.errorCbs = [];
        this.listeners = [];
    };

    History.prototype.listen = function listen(cb) {
        this.cb = cb;
    };

    History.prototype.onReady = function onReady(cb, errorCb) {
        if (this.ready) {
            cb();
        } else {
            this.readyCbs.push(cb);
            if (errorCb) {
                this.readyErrorCbs.push(errorCb);
            }
        }
    };

    History.prototype.onError = function onError(errorCb) {
        this.errorCbs.push(errorCb);
    };

    History.prototype.transitionTo = function transitionTo(
        location,
        onComplete,
        onAbort
    ) {
        var this$1 = this;

        var route;
        // catch redirect option https://github.com/vuejs/vue-router/issues/3201
        try {
            route = this.router.match(location, this.current);
        } catch (e) {
            this.errorCbs.forEach(function (cb) {
                cb(e);
            });
            // Exception should still be thrown
            throw e
        }
        var prev = this.current;
        this.confirmTransition(
            route,
            function () {
                this$1.updateRoute(route);
                onComplete && onComplete(route);
                this$1.ensureURL();
                this$1.router.afterHooks.forEach(function (hook) {
                    hook && hook(route, prev);
                });

                // fire ready cbs once
                if (!this$1.ready) {
                    this$1.ready = true;
                    this$1.readyCbs.forEach(function (cb) {
                        cb(route);
                    });
                }
            },
            function (err) {
                if (onAbort) {
                    onAbort(err);
                }
                if (err && !this$1.ready) {
                    // Initial redirection should not mark the history as ready yet
                    // because it's triggered by the redirection instead
                    // https://github.com/vuejs/vue-router/issues/3225
                    // https://github.com/vuejs/vue-router/issues/3331
                    if (!isNavigationFailure(err, NavigationFailureType.redirected) || prev !== START) {
                        this$1.ready = true;
                        this$1.readyErrorCbs.forEach(function (cb) {
                            cb(err);
                        });
                    }
                }
            }
        );
    };

    History.prototype.confirmTransition = function confirmTransition(route, onComplete, onAbort) {
        var this$1 = this;

        var current = this.current;
        this.pending = route;
        var abort = function (err) {
            // changed after adding errors with
            // https://github.com/vuejs/vue-router/pull/3047 before that change,
            // redirect and aborted navigation would produce an err == null
            if (!isNavigationFailure(err) && isError(err)) {
                if (this$1.errorCbs.length) {
                    this$1.errorCbs.forEach(function (cb) {
                        cb(err);
                    });
                } else {
                    warn(false, 'uncaught error during route navigation:');
                    console.error(err);
                }
            }
            onAbort && onAbort(err);
        };
        var lastRouteIndex = route.matched.length - 1;
        var lastCurrentIndex = current.matched.length - 1;
        if (
            isSameRoute(route, current) &&
            // in the case the route map has been dynamically appended to
            lastRouteIndex === lastCurrentIndex &&
            route.matched[lastRouteIndex] === current.matched[lastCurrentIndex]
        ) {
            this.ensureURL();
            return abort(createNavigationDuplicatedError(current, route))
        }

        var ref = resolveQueue(
            this.current.matched,
            route.matched
        );
        var updated = ref.updated;
        var deactivated = ref.deactivated;
        var activated = ref.activated;

        var queue = [].concat(
            // in-component leave guards
            extractLeaveGuards(deactivated),
            // global before hooks
            this.router.beforeHooks,
            // in-component update hooks
            extractUpdateHooks(updated),
            // in-config enter guards
            activated.map(function (m) { return m.beforeEnter; }),
            // async components
            resolveAsyncComponents(activated)
        );

        var iterator = function (hook, next) {
            if (this$1.pending !== route) {
                return abort(createNavigationCancelledError(current, route))
            }
            try {
                hook(route, current, function (to) {
                    if (to === false) {
                        // next(false) -> abort navigation, ensure current URL
                        this$1.ensureURL(true);
                        abort(createNavigationAbortedError(current, route));
                    } else if (isError(to)) {
                        this$1.ensureURL(true);
                        abort(to);
                    } else if (
                        typeof to === 'string' ||
                        (typeof to === 'object' &&
                            (typeof to.path === 'string' || typeof to.name === 'string'))
                    ) {
                        // next('/') or next({ path: '/' }) -> redirect
                        abort(createNavigationRedirectedError(current, route));
                        if (typeof to === 'object' && to.replace) {
                            this$1.replace(to);
                        } else {
                            this$1.push(to);
                        }
                    } else {
                        // confirm transition and pass on the value
                        next(to);
                    }
                });
            } catch (e) {
                abort(e);
            }
        };

        runQueue(queue, iterator, function () {
            // wait until async components are resolved before
            // extracting in-component enter guards
            var enterGuards = extractEnterGuards(activated);
            var queue = enterGuards.concat(this$1.router.resolveHooks);
            runQueue(queue, iterator, function () {
                if (this$1.pending !== route) {
                    return abort(createNavigationCancelledError(current, route))
                }
                this$1.pending = null;
                onComplete(route);
                if (this$1.router.app) {
                    this$1.router.app.$nextTick(function () {
                        handleRouteEntered(route);
                    });
                }
            });
        });
    };

    History.prototype.updateRoute = function updateRoute(route) {
        this.current = route;
        this.cb && this.cb(route);
    };

    History.prototype.setupListeners = function setupListeners() {
        // Default implementation is empty
    };

    History.prototype.teardown = function teardown() {
        // clean up event listeners
        // https://github.com/vuejs/vue-router/issues/2341
        this.listeners.forEach(function (cleanupListener) {
            cleanupListener();
        });
        this.listeners = [];

        // reset current history route
        // https://github.com/vuejs/vue-router/issues/3294
        this.current = START;
        this.pending = null;
    };

    function normalizeBase(base) {
        if (!base) {
            if (inBrowser) {
                // respect <base> tag
                var baseEl = document.querySelector('base');
                base = (baseEl && baseEl.getAttribute('href')) || '/';
                // strip full URL origin
                base = base.replace(/^https?:\/\/[^\/]+/, '');
            } else {
                base = '/';
            }
        }
        // make sure there's the starting slash
        if (base.charAt(0) !== '/') {
            base = '/' + base;
        }
        // remove trailing slash
        return base.replace(/\/$/, '')
    }

    function resolveQueue(
        current,
        next
    ) {
        var i;
        var max = Math.max(current.length, next.length);
        for (i = 0; i < max; i++) {
            if (current[i] !== next[i]) {
                break
            }
        }
        return {
            updated: next.slice(0, i),
            activated: next.slice(i),
            deactivated: current.slice(i)
        }
    }

    function extractGuards(
        records,
        name,
        bind,
        reverse
    ) {
        var guards = flatMapComponents(records, function (def, instance, match, key) {
            var guard = extractGuard(def, name);
            if (guard) {
                return Array.isArray(guard)
                    ? guard.map(function (guard) { return bind(guard, instance, match, key); })
                    : bind(guard, instance, match, key)
            }
        });
        return flatten(reverse ? guards.reverse() : guards)
    }

    function extractGuard(
        def,
        key
    ) {
        if (typeof def !== 'function') {
            // extend now so that global mixins are applied.
            def = _Vue.extend(def);
        }
        return def.options[key]
    }

    function extractLeaveGuards(deactivated) {
        return extractGuards(deactivated, 'beforeRouteLeave', bindGuard, true)
    }

    function extractUpdateHooks(updated) {
        return extractGuards(updated, 'beforeRouteUpdate', bindGuard)
    }

    function bindGuard(guard, instance) {
        if (instance) {
            return function boundRouteGuard() {
                return guard.apply(instance, arguments)
            }
        }
    }

    function extractEnterGuards(
        activated
    ) {
        return extractGuards(
            activated,
            'beforeRouteEnter',
            function (guard, _, match, key) {
                return bindEnterGuard(guard, match, key)
            }
        )
    }

    function bindEnterGuard(
        guard,
        match,
        key
    ) {
        return function routeEnterGuard(to, from, next) {
            return guard(to, from, function (cb) {
                if (typeof cb === 'function') {
                    if (!match.enteredCbs[key]) {
                        match.enteredCbs[key] = [];
                    }
                    match.enteredCbs[key].push(cb);
                }
                next(cb);
            })
        }
    }

    /*  */

    var HTML5History = /*@__PURE__*/(function (History) {
        function HTML5History(router, base) {
            History.call(this, router, base);

            this._startLocation = getLocation(this.base);
        }

        if (History) HTML5History.__proto__ = History;
        HTML5History.prototype = Object.create(History && History.prototype);
        HTML5History.prototype.constructor = HTML5History;

        HTML5History.prototype.setupListeners = function setupListeners() {
            var this$1 = this;

            if (this.listeners.length > 0) {
                return
            }

            var router = this.router;
            var expectScroll = router.options.scrollBehavior;
            var supportsScroll = supportsPushState && expectScroll;

            if (supportsScroll) {
                this.listeners.push(setupScroll());
            }

            var handleRoutingEvent = function () {
                var current = this$1.current;

                // Avoiding first `popstate` event dispatched in some browsers but first
                // history route not updated since async guard at the same time.
                var location = getLocation(this$1.base);
                if (this$1.current === START && location === this$1._startLocation) {
                    return
                }

                this$1.transitionTo(location, function (route) {
                    if (supportsScroll) {
                        handleScroll(router, route, current, true);
                    }
                });
            };
            window.addEventListener('popstate', handleRoutingEvent);
            this.listeners.push(function () {
                window.removeEventListener('popstate', handleRoutingEvent);
            });
        };

        HTML5History.prototype.go = function go(n) {
            window.history.go(n);
        };

        HTML5History.prototype.push = function push(location, onComplete, onAbort) {
            var this$1 = this;

            var ref = this;
            var fromRoute = ref.current;
            this.transitionTo(location, function (route) {
                pushState(cleanPath(this$1.base + route.fullPath));
                handleScroll(this$1.router, route, fromRoute, false);
                onComplete && onComplete(route);
            }, onAbort);
        };

        HTML5History.prototype.replace = function replace(location, onComplete, onAbort) {
            var this$1 = this;

            var ref = this;
            var fromRoute = ref.current;
            this.transitionTo(location, function (route) {
                replaceState(cleanPath(this$1.base + route.fullPath));
                handleScroll(this$1.router, route, fromRoute, false);
                onComplete && onComplete(route);
            }, onAbort);
        };

        HTML5History.prototype.ensureURL = function ensureURL(push) {
            if (getLocation(this.base) !== this.current.fullPath) {
                var current = cleanPath(this.base + this.current.fullPath);
                push ? pushState(current) : replaceState(current);
            }
        };

        HTML5History.prototype.getCurrentLocation = function getCurrentLocation() {
            return getLocation(this.base)
        };

        return HTML5History;
    }(History));

    function getLocation(base) {
        var path = window.location.pathname;
        if (base && path.toLowerCase().indexOf(base.toLowerCase()) === 0) {
            path = path.slice(base.length);
        }
        return (path || '/') + window.location.search + window.location.hash
    }

    /*  */

    var HashHistory = /*@__PURE__*/(function (History) {
        function HashHistory(router, base, fallback) {
            History.call(this, router, base);
            // check history fallback deeplinking
            if (fallback && checkFallback(this.base)) {
                return
            }
            ensureSlash();
        }

        if (History) HashHistory.__proto__ = History;
        HashHistory.prototype = Object.create(History && History.prototype);
        HashHistory.prototype.constructor = HashHistory;

        // this is delayed until the app mounts
        // to avoid the hashchange listener being fired too early
        HashHistory.prototype.setupListeners = function setupListeners() {
            var this$1 = this;

            if (this.listeners.length > 0) {
                return
            }

            var router = this.router;
            var expectScroll = router.options.scrollBehavior;
            var supportsScroll = supportsPushState && expectScroll;

            if (supportsScroll) {
                this.listeners.push(setupScroll());
            }

            var handleRoutingEvent = function () {
                var current = this$1.current;
                if (!ensureSlash()) {
                    return
                }
                this$1.transitionTo(getHash(), function (route) {
                    if (supportsScroll) {
                        handleScroll(this$1.router, route, current, true);
                    }
                    if (!supportsPushState) {
                        replaceHash(route.fullPath);
                    }
                });
            };
            var eventType = supportsPushState ? 'popstate' : 'hashchange';
            window.addEventListener(
                eventType,
                handleRoutingEvent
            );
            this.listeners.push(function () {
                window.removeEventListener(eventType, handleRoutingEvent);
            });
        };

        HashHistory.prototype.push = function push(location, onComplete, onAbort) {
            var this$1 = this;

            var ref = this;
            var fromRoute = ref.current;
            this.transitionTo(
                location,
                function (route) {
                    pushHash(route.fullPath);
                    handleScroll(this$1.router, route, fromRoute, false);
                    onComplete && onComplete(route);
                },
                onAbort
            );
        };

        HashHistory.prototype.replace = function replace(location, onComplete, onAbort) {
            var this$1 = this;

            var ref = this;
            var fromRoute = ref.current;
            this.transitionTo(
                location,
                function (route) {
                    replaceHash(route.fullPath);
                    handleScroll(this$1.router, route, fromRoute, false);
                    onComplete && onComplete(route);
                },
                onAbort
            );
        };

        HashHistory.prototype.go = function go(n) {
            window.history.go(n);
        };

        HashHistory.prototype.ensureURL = function ensureURL(push) {
            var current = this.current.fullPath;
            if (getHash() !== current) {
                push ? pushHash(current) : replaceHash(current);
            }
        };

        HashHistory.prototype.getCurrentLocation = function getCurrentLocation() {
            return getHash()
        };

        return HashHistory;
    }(History));

    function checkFallback(base) {
        var location = getLocation(base);
        if (!/^\/#/.test(location)) {
            window.location.replace(cleanPath(base + '/#' + location));
            return true
        }
    }

    function ensureSlash() {
        var path = getHash();
        if (path.charAt(0) === '/') {
            return true
        }
        replaceHash('/' + path);
        return false
    }

    function getHash() {
        // We can't use window.location.hash here because it's not
        // consistent across browsers - Firefox will pre-decode it!
        var href = window.location.href;
        var index = href.indexOf('#');
        // empty path
        if (index < 0) { return '' }

        href = href.slice(index + 1);

        return href
    }

    function getUrl(path) {
        var href = window.location.href;
        var i = href.indexOf('#');
        var base = i >= 0 ? href.slice(0, i) : href;
        return (base + "#" + path)
    }

    function pushHash(path) {
        if (supportsPushState) {
            pushState(getUrl(path));
        } else {
            window.location.hash = path;
        }
    }

    function replaceHash(path) {
        if (supportsPushState) {
            replaceState(getUrl(path));
        } else {
            window.location.replace(getUrl(path));
        }
    }

    /*  */

    var AbstractHistory = /*@__PURE__*/(function (History) {
        function AbstractHistory(router, base) {
            History.call(this, router, base);
            this.stack = [];
            this.index = -1;
        }

        if (History) AbstractHistory.__proto__ = History;
        AbstractHistory.prototype = Object.create(History && History.prototype);
        AbstractHistory.prototype.constructor = AbstractHistory;

        AbstractHistory.prototype.push = function push(location, onComplete, onAbort) {
            var this$1 = this;

            this.transitionTo(
                location,
                function (route) {
                    this$1.stack = this$1.stack.slice(0, this$1.index + 1).concat(route);
                    this$1.index++;
                    onComplete && onComplete(route);
                },
                onAbort
            );
        };

        AbstractHistory.prototype.replace = function replace(location, onComplete, onAbort) {
            var this$1 = this;

            this.transitionTo(
                location,
                function (route) {
                    this$1.stack = this$1.stack.slice(0, this$1.index).concat(route);
                    onComplete && onComplete(route);
                },
                onAbort
            );
        };

        AbstractHistory.prototype.go = function go(n) {
            var this$1 = this;

            var targetIndex = this.index + n;
            if (targetIndex < 0 || targetIndex >= this.stack.length) {
                return
            }
            var route = this.stack[targetIndex];
            this.confirmTransition(
                route,
                function () {
                    var prev = this$1.current;
                    this$1.index = targetIndex;
                    this$1.updateRoute(route);
                    this$1.router.afterHooks.forEach(function (hook) {
                        hook && hook(route, prev);
                    });
                },
                function (err) {
                    if (isNavigationFailure(err, NavigationFailureType.duplicated)) {
                        this$1.index = targetIndex;
                    }
                }
            );
        };

        AbstractHistory.prototype.getCurrentLocation = function getCurrentLocation() {
            var current = this.stack[this.stack.length - 1];
            return current ? current.fullPath : '/'
        };

        AbstractHistory.prototype.ensureURL = function ensureURL() {
            // noop
        };

        return AbstractHistory;
    }(History));

    /*  */

    var VueRouter = function VueRouter(options) {
        if (options === void 0) options = {};

        this.app = null;
        this.apps = [];
        this.options = options;
        this.beforeHooks = [];
        this.resolveHooks = [];
        this.afterHooks = [];
        this.matcher = createMatcher(options.routes || [], this);

        var mode = options.mode || 'hash';
        this.fallback =
            mode === 'history' && !supportsPushState && options.fallback !== false;
        if (this.fallback) {
            mode = 'hash';
        }
        if (!inBrowser) {
            mode = 'abstract';
        }
        this.mode = mode;

        switch (mode) {
            case 'history':
                this.history = new HTML5History(this, options.base);
                break
            case 'hash':
                this.history = new HashHistory(this, options.base, this.fallback);
                break
            case 'abstract':
                this.history = new AbstractHistory(this, options.base);
                break
            default:
                {
                    assert(false, ("invalid mode: " + mode));
                }
        }
    };

    var prototypeAccessors = { currentRoute: { configurable: true } };

    VueRouter.prototype.match = function match(raw, current, redirectedFrom) {
        return this.matcher.match(raw, current, redirectedFrom)
    };

    prototypeAccessors.currentRoute.get = function () {
        return this.history && this.history.current
    };

    VueRouter.prototype.init = function init(app /* Vue component instance */) {
        var this$1 = this;


        assert(
            install.installed,
            "not installed. Make sure to call `Vue.use(VueRouter)` " +
            "before creating root instance."
        );

        this.apps.push(app);

        // set up app destroyed handler
        // https://github.com/vuejs/vue-router/issues/2639
        app.$once('hook:destroyed', function () {
            // clean out app from this.apps array once destroyed
            var index = this$1.apps.indexOf(app);
            if (index > -1) { this$1.apps.splice(index, 1); }
            // ensure we still have a main app or null if no apps
            // we do not release the router so it can be reused
            if (this$1.app === app) { this$1.app = this$1.apps[0] || null; }

            if (!this$1.app) { this$1.history.teardown(); }
        });

        // main app previously initialized
        // return as we don't need to set up new history listener
        if (this.app) {
            return
        }

        this.app = app;

        var history = this.history;

        if (history instanceof HTML5History || history instanceof HashHistory) {
            var handleInitialScroll = function (routeOrError) {
                var from = history.current;
                var expectScroll = this$1.options.scrollBehavior;
                var supportsScroll = supportsPushState && expectScroll;

                if (supportsScroll && 'fullPath' in routeOrError) {
                    handleScroll(this$1, routeOrError, from, false);
                }
            };
            var setupListeners = function (routeOrError) {
                history.setupListeners();
                handleInitialScroll(routeOrError);
            };
            history.transitionTo(
                history.getCurrentLocation(),
                setupListeners,
                setupListeners
            );
        }

        history.listen(function (route) {
            this$1.apps.forEach(function (app) {
                app._route = route;
            });
        });
    };

    VueRouter.prototype.beforeEach = function beforeEach(fn) {
        return registerHook(this.beforeHooks, fn)
    };

    VueRouter.prototype.beforeResolve = function beforeResolve(fn) {
        return registerHook(this.resolveHooks, fn)
    };

    VueRouter.prototype.afterEach = function afterEach(fn) {
        return registerHook(this.afterHooks, fn)
    };

    VueRouter.prototype.onReady = function onReady(cb, errorCb) {
        this.history.onReady(cb, errorCb);
    };

    VueRouter.prototype.onError = function onError(errorCb) {
        this.history.onError(errorCb);
    };

    VueRouter.prototype.push = function push(location, onComplete, onAbort) {
        var this$1 = this;

        // $flow-disable-line
        if (!onComplete && !onAbort && typeof Promise !== 'undefined') {
            return new Promise(function (resolve, reject) {
                this$1.history.push(location, resolve, reject);
            })
        } else {
            this.history.push(location, onComplete, onAbort);
        }
    };

    VueRouter.prototype.replace = function replace(location, onComplete, onAbort) {
        var this$1 = this;

        // $flow-disable-line
        if (!onComplete && !onAbort && typeof Promise !== 'undefined') {
            return new Promise(function (resolve, reject) {
                this$1.history.replace(location, resolve, reject);
            })
        } else {
            this.history.replace(location, onComplete, onAbort);
        }
    };

    VueRouter.prototype.go = function go(n) {
        this.history.go(n);
    };

    VueRouter.prototype.back = function back() {
        this.go(-1);
    };

    VueRouter.prototype.forward = function forward() {
        this.go(1);
    };

    VueRouter.prototype.getMatchedComponents = function getMatchedComponents(to) {
        var route = to
            ? to.matched
                ? to
                : this.resolve(to).route
            : this.currentRoute;
        if (!route) {
            return []
        }
        return [].concat.apply(
            [],
            route.matched.map(function (m) {
                return Object.keys(m.components).map(function (key) {
                    return m.components[key]
                })
            })
        )
    };

    VueRouter.prototype.resolve = function resolve(
        to,
        current,
        append
    ) {
        current = current || this.history.current;
        var location = normalizeLocation(to, current, append, this);
        var route = this.match(location, current);
        var fullPath = route.redirectedFrom || route.fullPath;
        var base = this.history.base;
        var href = createHref(base, fullPath, this.mode);
        return {
            location: location,
            route: route,
            href: href,
            // for backwards compat
            normalizedTo: location,
            resolved: route
        }
    };

    VueRouter.prototype.getRoutes = function getRoutes() {
        return this.matcher.getRoutes()
    };

    VueRouter.prototype.addRoute = function addRoute(parentOrRoute, route) {
        this.matcher.addRoute(parentOrRoute, route);
        if (this.history.current !== START) {
            this.history.transitionTo(this.history.getCurrentLocation());
        }
    };

    VueRouter.prototype.addRoutes = function addRoutes(routes) {
        {
            warn(false, 'router.addRoutes() is deprecated and has been removed in Vue Router 4. Use router.addRoute() instead.');
        }
        this.matcher.addRoutes(routes);
        if (this.history.current !== START) {
            this.history.transitionTo(this.history.getCurrentLocation());
        }
    };

    Object.defineProperties(VueRouter.prototype, prototypeAccessors);

    function registerHook(list, fn) {
        list.push(fn);
        return function () {
            var i = list.indexOf(fn);
            if (i > -1) { list.splice(i, 1); }
        }
    }

    function createHref(base, fullPath, mode) {
        var path = mode === 'hash' ? '#' + fullPath : fullPath;
        return base ? cleanPath(base + '/' + path) : path
    }

    VueRouter.install = install;
    VueRouter.version = '3.5.1';
    VueRouter.isNavigationFailure = isNavigationFailure;
    VueRouter.NavigationFailureType = NavigationFailureType;
    VueRouter.START_LOCATION = START;

    if (inBrowser && window.Vue) {
        window.Vue.use(VueRouter);
    }

    return VueRouter;

})));


//Included:lib/010.i18next-v21.8.0.js
!function (e, t) { "object" == typeof exports && "undefined" != typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define(t) : (e = "undefined" != typeof globalThis ? globalThis : e || self).i18next = t() }(this, function () { "use strict"; function e(t) { return (e = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) { return typeof e } : function (e) { return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e })(t) } function t(e, t) { if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function") } function n(e, t) { for (var n = 0; n < t.length; n++) { var r = t[n]; r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r) } } function r(e, t, r) { return t && n(e.prototype, t), r && n(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e } function o(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e } function i(e, t) { return (i = Object.setPrototypeOf || function (e, t) { return e.__proto__ = t, e })(e, t) } function a(e, t) { if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function"); e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && i(e, t) } function s(t, n) { if (n && ("object" === e(n) || "function" == typeof n)) return n; if (void 0 !== n) throw new TypeError("Derived constructors may only return object or undefined"); return o(t) } function u(e) { return (u = Object.setPrototypeOf ? Object.getPrototypeOf : function (e) { return e.__proto__ || Object.getPrototypeOf(e) })(e) } function c(e, t, n) { return t in e ? Object.defineProperty(e, t, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = n, e } function l(e, t) { var n = Object.keys(e); if (Object.getOwnPropertySymbols) { var r = Object.getOwnPropertySymbols(e); t && (r = r.filter(function (t) { return Object.getOwnPropertyDescriptor(e, t).enumerable })), n.push.apply(n, r) } return n } function f(e) { for (var t = 1; t < arguments.length; t++) { var n = null != arguments[t] ? arguments[t] : {}; t % 2 ? l(Object(n), !0).forEach(function (t) { c(e, t, n[t]) }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(n)) : l(Object(n)).forEach(function (t) { Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(n, t)) }) } return e } var p = { type: "logger", log: function (e) { this.output("log", e) }, warn: function (e) { this.output("warn", e) }, error: function (e) { this.output("error", e) }, output: function (e, t) { console && console[e] && console[e].apply(console, t) } }, g = new (function () { function e(n) { var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}; t(this, e), this.init(n, r) } return r(e, [{ key: "init", value: function (e) { var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}; this.prefix = t.prefix || "i18next:", this.logger = e || p, this.options = t, this.debug = t.debug } }, { key: "setDebug", value: function (e) { this.debug = e } }, { key: "log", value: function () { for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++)t[n] = arguments[n]; return this.forward(t, "log", "", !0) } }, { key: "warn", value: function () { for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++)t[n] = arguments[n]; return this.forward(t, "warn", "", !0) } }, { key: "error", value: function () { for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++)t[n] = arguments[n]; return this.forward(t, "error", "") } }, { key: "deprecate", value: function () { for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++)t[n] = arguments[n]; return this.forward(t, "warn", "WARNING DEPRECATED: ", !0) } }, { key: "forward", value: function (e, t, n, r) { return r && !this.debug ? null : ("string" == typeof e[0] && (e[0] = "".concat(n).concat(this.prefix, " ").concat(e[0])), this.logger[t](e)) } }, { key: "create", value: function (t) { return new e(this.logger, f(f({}, { prefix: "".concat(this.prefix, ":").concat(t, ":") }), this.options)) } }]), e }()), h = function () { function e() { t(this, e), this.observers = {} } return r(e, [{ key: "on", value: function (e, t) { var n = this; return e.split(" ").forEach(function (e) { n.observers[e] = n.observers[e] || [], n.observers[e].push(t) }), this } }, { key: "off", value: function (e, t) { this.observers[e] && (t ? this.observers[e] = this.observers[e].filter(function (e) { return e !== t }) : delete this.observers[e]) } }, { key: "emit", value: function (e) { for (var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++)n[r - 1] = arguments[r]; this.observers[e] && [].concat(this.observers[e]).forEach(function (e) { e.apply(void 0, n) }); this.observers["*"] && [].concat(this.observers["*"]).forEach(function (t) { t.apply(t, [e].concat(n)) }) } }]), e }(); function d() { var e, t, n = new Promise(function (n, r) { e = n, t = r }); return n.resolve = e, n.reject = t, n } function v(e) { return null == e ? "" : "" + e } function y(e, t, n) { function r(e) { return e && e.indexOf("###") > -1 ? e.replace(/###/g, ".") : e } function o() { return !e || "string" == typeof e } for (var i = "string" != typeof t ? [].concat(t) : t.split("."); i.length > 1;) { if (o()) return {}; var a = r(i.shift()); !e[a] && n && (e[a] = new n), e = Object.prototype.hasOwnProperty.call(e, a) ? e[a] : {} } return o() ? {} : { obj: e, k: r(i.shift()) } } function m(e, t, n) { var r = y(e, t, Object); r.obj[r.k] = n } function b(e, t) { var n = y(e, t), r = n.obj, o = n.k; if (r) return r[o] } function O(e, t, n) { var r = b(e, n); return void 0 !== r ? r : b(t, n) } function k(e) { return e.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&") } var w = { "&": "&amp;", "<": "&lt;", ">": "&gt;", '"': "&quot;", "'": "&#39;", "/": "&#x2F;" }; function x(e) { return "string" == typeof e ? e.replace(/[&<>"'\/]/g, function (e) { return w[e] }) : e } var S = "undefined" != typeof window && window.navigator && window.navigator.userAgent && window.navigator.userAgent.indexOf("MSIE") > -1, j = [" ", ",", "?", "!", ";"]; function P(e, t) { var n = Object.keys(e); if (Object.getOwnPropertySymbols) { var r = Object.getOwnPropertySymbols(e); t && (r = r.filter(function (t) { return Object.getOwnPropertyDescriptor(e, t).enumerable })), n.push.apply(n, r) } return n } function L(e) { for (var t = 1; t < arguments.length; t++) { var n = null != arguments[t] ? arguments[t] : {}; t % 2 ? P(Object(n), !0).forEach(function (t) { c(e, t, n[t]) }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(n)) : P(Object(n)).forEach(function (t) { Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(n, t)) }) } return e } function R(e) { var t = function () { if ("undefined" == typeof Reflect || !Reflect.construct) return !1; if (Reflect.construct.sham) return !1; if ("function" == typeof Proxy) return !0; try { return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () { })), !0 } catch (e) { return !1 } }(); return function () { var n, r = u(e); if (t) { var o = u(this).constructor; n = Reflect.construct(r, arguments, o) } else n = r.apply(this, arguments); return s(this, n) } } var N = function (e) { a(i, h); var n = R(i); function i(e) { var r, a = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : { ns: ["translation"], defaultNS: "translation" }; return t(this, i), r = n.call(this), S && h.call(o(r)), r.data = e || {}, r.options = a, void 0 === r.options.keySeparator && (r.options.keySeparator = "."), void 0 === r.options.ignoreJSONStructure && (r.options.ignoreJSONStructure = !0), r } return r(i, [{ key: "addNamespaces", value: function (e) { this.options.ns.indexOf(e) < 0 && this.options.ns.push(e) } }, { key: "removeNamespaces", value: function (e) { var t = this.options.ns.indexOf(e); t > -1 && this.options.ns.splice(t, 1) } }, { key: "getResource", value: function (e, t, n) { var r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {}, o = void 0 !== r.keySeparator ? r.keySeparator : this.options.keySeparator, i = void 0 !== r.ignoreJSONStructure ? r.ignoreJSONStructure : this.options.ignoreJSONStructure, a = [e, t]; n && "string" != typeof n && (a = a.concat(n)), n && "string" == typeof n && (a = a.concat(o ? n.split(o) : n)), e.indexOf(".") > -1 && (a = e.split(".")); var s = b(this.data, a); return s || !i || "string" != typeof n ? s : function e(t, n) { var r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "."; if (t) { if (t[n]) return t[n]; for (var o = n.split(r), i = t, a = 0; a < o.length; ++a) { if (!i) return; if ("string" == typeof i[o[a]] && a + 1 < o.length) return; if (void 0 === i[o[a]]) { for (var s = 2, u = o.slice(a, a + s).join(r), c = i[u]; void 0 === c && o.length > a + s;)s++, c = i[u = o.slice(a, a + s).join(r)]; if (void 0 === c) return; if (n.endsWith(u)) { if ("string" == typeof c) return c; if (u && "string" == typeof c[u]) return c[u] } var l = o.slice(a + s).join(r); return l ? e(c, l, r) : void 0 } i = i[o[a]] } return i } }(this.data && this.data[e] && this.data[e][t], n, o) } }, { key: "addResource", value: function (e, t, n, r) { var o = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : { silent: !1 }, i = this.options.keySeparator; void 0 === i && (i = "."); var a = [e, t]; n && (a = a.concat(i ? n.split(i) : n)), e.indexOf(".") > -1 && (r = t, t = (a = e.split("."))[1]), this.addNamespaces(t), m(this.data, a, r), o.silent || this.emit("added", e, t, n, r) } }, { key: "addResources", value: function (e, t, n) { var r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : { silent: !1 }; for (var o in n) "string" != typeof n[o] && "[object Array]" !== Object.prototype.toString.apply(n[o]) || this.addResource(e, t, o, n[o], { silent: !0 }); r.silent || this.emit("added", e, t, n) } }, { key: "addResourceBundle", value: function (e, t, n, r, o) { var i = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : { silent: !1 }, a = [e, t]; e.indexOf(".") > -1 && (r = n, n = t, t = (a = e.split("."))[1]), this.addNamespaces(t); var s = b(this.data, a) || {}; r ? function e(t, n, r) { for (var o in n) "__proto__" !== o && "constructor" !== o && (o in t ? "string" == typeof t[o] || t[o] instanceof String || "string" == typeof n[o] || n[o] instanceof String ? r && (t[o] = n[o]) : e(t[o], n[o], r) : t[o] = n[o]); return t }(s, n, o) : s = L(L({}, s), n), m(this.data, a, s), i.silent || this.emit("added", e, t, n) } }, { key: "removeResourceBundle", value: function (e, t) { this.hasResourceBundle(e, t) && delete this.data[e][t], this.removeNamespaces(t), this.emit("removed", e, t) } }, { key: "hasResourceBundle", value: function (e, t) { return void 0 !== this.getResource(e, t) } }, { key: "getResourceBundle", value: function (e, t) { return t || (t = this.options.defaultNS), "v1" === this.options.compatibilityAPI ? L(L({}, {}), this.getResource(e, t)) : this.getResource(e, t) } }, { key: "getDataByLanguage", value: function (e) { return this.data[e] } }, { key: "hasLanguageSomeTranslations", value: function (e) { var t = this.getDataByLanguage(e); return !!(t && Object.keys(t) || []).find(function (e) { return t[e] && Object.keys(t[e]).length > 0 }) } }, { key: "toJSON", value: function () { return this.data } }]), i }(), C = { processors: {}, addPostProcessor: function (e) { this.processors[e.name] = e }, handle: function (e, t, n, r, o) { var i = this; return e.forEach(function (e) { i.processors[e] && (t = i.processors[e].process(t, n, r, o)) }), t } }; function E(e, t) { var n = Object.keys(e); if (Object.getOwnPropertySymbols) { var r = Object.getOwnPropertySymbols(e); t && (r = r.filter(function (t) { return Object.getOwnPropertyDescriptor(e, t).enumerable })), n.push.apply(n, r) } return n } function D(e) { for (var t = 1; t < arguments.length; t++) { var n = null != arguments[t] ? arguments[t] : {}; t % 2 ? E(Object(n), !0).forEach(function (t) { c(e, t, n[t]) }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(n)) : E(Object(n)).forEach(function (t) { Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(n, t)) }) } return e } function F(e) { var t = function () { if ("undefined" == typeof Reflect || !Reflect.construct) return !1; if (Reflect.construct.sham) return !1; if ("function" == typeof Proxy) return !0; try { return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () { })), !0 } catch (e) { return !1 } }(); return function () { var n, r = u(e); if (t) { var o = u(this).constructor; n = Reflect.construct(r, arguments, o) } else n = r.apply(this, arguments); return s(this, n) } } var I = {}, A = function (n) { a(s, h); var i = F(s); function s(e) { var n, r, a, u, c = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}; return t(this, s), n = i.call(this), S && h.call(o(n)), r = ["resourceStore", "languageUtils", "pluralResolver", "interpolator", "backendConnector", "i18nFormat", "utils"], a = e, u = o(n), r.forEach(function (e) { a[e] && (u[e] = a[e]) }), n.options = c, void 0 === n.options.keySeparator && (n.options.keySeparator = "."), n.logger = g.create("translator"), n } return r(s, [{ key: "changeLanguage", value: function (e) { e && (this.language = e) } }, { key: "exists", value: function (e) { var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : { interpolation: {} }; if (null == e) return !1; var n = this.resolve(e, t); return n && void 0 !== n.res } }, { key: "extractFromKey", value: function (e, t) { var n = void 0 !== t.nsSeparator ? t.nsSeparator : this.options.nsSeparator; void 0 === n && (n = ":"); var r = void 0 !== t.keySeparator ? t.keySeparator : this.options.keySeparator, o = t.ns || this.options.defaultNS || [], i = n && e.indexOf(n) > -1, a = !(this.options.userDefinedKeySeparator || t.keySeparator || this.options.userDefinedNsSeparator || t.nsSeparator || function (e, t, n) { t = t || "", n = n || ""; var r = j.filter(function (e) { return t.indexOf(e) < 0 && n.indexOf(e) < 0 }); if (0 === r.length) return !0; var o = new RegExp("(".concat(r.map(function (e) { return "?" === e ? "\\?" : e }).join("|"), ")")), i = !o.test(e); if (!i) { var a = e.indexOf(n); a > 0 && !o.test(e.substring(0, a)) && (i = !0) } return i }(e, n, r)); if (i && !a) { var s = e.match(this.interpolator.nestingRegexp); if (s && s.length > 0) return { key: e, namespaces: o }; var u = e.split(n); (n !== r || n === r && this.options.ns.indexOf(u[0]) > -1) && (o = u.shift()), e = u.join(r) } return "string" == typeof o && (o = [o]), { key: e, namespaces: o } } }, { key: "translate", value: function (t, n, r) { var o = this; if ("object" !== e(n) && this.options.overloadTranslationOptionHandler && (n = this.options.overloadTranslationOptionHandler(arguments)), n || (n = {}), null == t) return ""; Array.isArray(t) || (t = [String(t)]); var i = void 0 !== n.returnDetails ? n.returnDetails : this.options.returnDetails, a = void 0 !== n.keySeparator ? n.keySeparator : this.options.keySeparator, u = this.extractFromKey(t[t.length - 1], n), c = u.key, l = u.namespaces, f = l[l.length - 1], p = n.lng || this.language, g = n.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode; if (p && "cimode" === p.toLowerCase()) { if (g) { var h = n.nsSeparator || this.options.nsSeparator; return i ? (d.res = "".concat(f).concat(h).concat(c), d) : "".concat(f).concat(h).concat(c) } return i ? (d.res = c, d) : c } var d = this.resolve(t, n), v = d && d.res, y = d && d.usedKey || c, m = d && d.exactUsedKey || c, b = Object.prototype.toString.apply(v), O = void 0 !== n.joinArrays ? n.joinArrays : this.options.joinArrays, k = !this.i18nFormat || this.i18nFormat.handleAsObject; if (k && v && ("string" != typeof v && "boolean" != typeof v && "number" != typeof v) && ["[object Number]", "[object Function]", "[object RegExp]"].indexOf(b) < 0 && ("string" != typeof O || "[object Array]" !== b)) { if (!n.returnObjects && !this.options.returnObjects) { this.options.returnedObjectHandler || this.logger.warn("accessing an object - but returnObjects options is not enabled!"); var w = this.options.returnedObjectHandler ? this.options.returnedObjectHandler(y, v, D(D({}, n), {}, { ns: l })) : "key '".concat(c, " (").concat(this.language, ")' returned an object instead of string."); return i ? (d.res = w, d) : w } if (a) { var x = "[object Array]" === b, S = x ? [] : {}, j = x ? m : y; for (var P in v) if (Object.prototype.hasOwnProperty.call(v, P)) { var L = "".concat(j).concat(a).concat(P); S[P] = this.translate(L, D(D({}, n), { joinArrays: !1, ns: l })), S[P] === L && (S[P] = v[P]) } v = S } } else if (k && "string" == typeof O && "[object Array]" === b) (v = v.join(O)) && (v = this.extendTranslation(v, t, n, r)); else { var R = !1, N = !1, C = void 0 !== n.count && "string" != typeof n.count, E = s.hasDefaultValue(n), F = C ? this.pluralResolver.getSuffix(p, n.count, n) : "", I = n["defaultValue".concat(F)] || n.defaultValue; !this.isValidLookup(v) && E && (R = !0, v = I), this.isValidLookup(v) || (N = !0, v = c); var A = (n.missingKeyNoValueFallbackToKey || this.options.missingKeyNoValueFallbackToKey) && N ? void 0 : v, V = E && I !== v && this.options.updateMissing; if (N || R || V) { if (this.logger.log(V ? "updateKey" : "missingKey", p, f, c, V ? I : v), a) { var T = this.resolve(c, D(D({}, n), {}, { keySeparator: !1 })); T && T.res && this.logger.warn("Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.") } var U = [], B = this.languageUtils.getFallbackCodes(this.options.fallbackLng, n.lng || this.language); if ("fallback" === this.options.saveMissingTo && B && B[0]) for (var K = 0; K < B.length; K++)U.push(B[K]); else "all" === this.options.saveMissingTo ? U = this.languageUtils.toResolveHierarchy(n.lng || this.language) : U.push(n.lng || this.language); var M = function (e, t, r) { var i = E && r !== v ? r : A; o.options.missingKeyHandler ? o.options.missingKeyHandler(e, f, t, i, V, n) : o.backendConnector && o.backendConnector.saveMissing && o.backendConnector.saveMissing(e, f, t, i, V, n), o.emit("missingKey", e, f, t, v) }; this.options.saveMissing && (this.options.saveMissingPlurals && C ? U.forEach(function (e) { o.pluralResolver.getSuffixes(e, n).forEach(function (t) { M([e], c + t, n["defaultValue".concat(t)] || I) }) }) : M(U, c, I)) } v = this.extendTranslation(v, t, n, d, r), N && v === c && this.options.appendNamespaceToMissingKey && (v = "".concat(f, ":").concat(c)), (N || R) && this.options.parseMissingKeyHandler && (v = "v1" !== this.options.compatibilityAPI ? this.options.parseMissingKeyHandler(c, R ? v : void 0) : this.options.parseMissingKeyHandler(v)) } return i ? (d.res = v, d) : v } }, { key: "extendTranslation", value: function (e, t, n, r, o) { var i = this; if (this.i18nFormat && this.i18nFormat.parse) e = this.i18nFormat.parse(e, D(D({}, this.options.interpolation.defaultVariables), n), r.usedLng, r.usedNS, r.usedKey, { resolved: r }); else if (!n.skipInterpolation) { n.interpolation && this.interpolator.init(D(D({}, n), { interpolation: D(D({}, this.options.interpolation), n.interpolation) })); var a, s = "string" == typeof e && (n && n.interpolation && void 0 !== n.interpolation.skipOnVariables ? n.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables); if (s) { var u = e.match(this.interpolator.nestingRegexp); a = u && u.length } var c = n.replace && "string" != typeof n.replace ? n.replace : n; if (this.options.interpolation.defaultVariables && (c = D(D({}, this.options.interpolation.defaultVariables), c)), e = this.interpolator.interpolate(e, c, n.lng || this.language, n), s) { var l = e.match(this.interpolator.nestingRegexp); a < (l && l.length) && (n.nest = !1) } !1 !== n.nest && (e = this.interpolator.nest(e, function () { for (var e = arguments.length, r = new Array(e), a = 0; a < e; a++)r[a] = arguments[a]; return o && o[0] === r[0] && !n.context ? (i.logger.warn("It seems you are nesting recursively key: ".concat(r[0], " in key: ").concat(t[0])), null) : i.translate.apply(i, r.concat([t])) }, n)), n.interpolation && this.interpolator.reset() } var f = n.postProcess || this.options.postProcess, p = "string" == typeof f ? [f] : f; return null != e && p && p.length && !1 !== n.applyPostProcessor && (e = C.handle(p, e, t, this.options && this.options.postProcessPassResolved ? D({ i18nResolved: r }, n) : n, this)), e } }, { key: "resolve", value: function (e) { var t, n, r, o, i, a = this, s = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}; return "string" == typeof e && (e = [e]), e.forEach(function (e) { if (!a.isValidLookup(t)) { var u = a.extractFromKey(e, s), c = u.key; n = c; var l = u.namespaces; a.options.fallbackNS && (l = l.concat(a.options.fallbackNS)); var f = void 0 !== s.count && "string" != typeof s.count, p = f && !s.ordinal && 0 === s.count && a.pluralResolver.shouldUseIntlApi(), g = void 0 !== s.context && ("string" == typeof s.context || "number" == typeof s.context) && "" !== s.context, h = s.lngs ? s.lngs : a.languageUtils.toResolveHierarchy(s.lng || a.language, s.fallbackLng); l.forEach(function (e) { a.isValidLookup(t) || (i = e, !I["".concat(h[0], "-").concat(e)] && a.utils && a.utils.hasLoadedNamespace && !a.utils.hasLoadedNamespace(i) && (I["".concat(h[0], "-").concat(e)] = !0, a.logger.warn('key "'.concat(n, '" for languages "').concat(h.join(", "), '" won\'t get resolved as namespace "').concat(i, '" was not yet loaded'), "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!")), h.forEach(function (n) { if (!a.isValidLookup(t)) { o = n; var i, u = [c]; if (a.i18nFormat && a.i18nFormat.addLookupKeys) a.i18nFormat.addLookupKeys(u, c, n, e, s); else { var l; f && (l = a.pluralResolver.getSuffix(n, s.count, s)); if (f && (u.push(c + l), p && u.push(c + "_zero")), g) { var h = "".concat(c).concat(a.options.contextSeparator).concat(s.context); u.push(h), f && (u.push(h + l), p && u.push(h + "_zero")) } } for (; i = u.pop();)a.isValidLookup(t) || (r = i, t = a.getResource(n, e, i, s)) } })) }) } }), { res: t, usedKey: n, exactUsedKey: r, usedLng: o, usedNS: i } } }, { key: "isValidLookup", value: function (e) { return !(void 0 === e || !this.options.returnNull && null === e || !this.options.returnEmptyString && "" === e) } }, { key: "getResource", value: function (e, t, n) { var r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {}; return this.i18nFormat && this.i18nFormat.getResource ? this.i18nFormat.getResource(e, t, n, r) : this.resourceStore.getResource(e, t, n, r) } }], [{ key: "hasDefaultValue", value: function (e) { for (var t in e) if (Object.prototype.hasOwnProperty.call(e, t) && "defaultValue" === t.substring(0, "defaultValue".length) && void 0 !== e[t]) return !0; return !1 } }]), s }(); function V(e) { return e.charAt(0).toUpperCase() + e.slice(1) } var T = function () { function e(n) { t(this, e), this.options = n, this.supportedLngs = this.options.supportedLngs || !1, this.logger = g.create("languageUtils") } return r(e, [{ key: "getScriptPartFromCode", value: function (e) { if (!e || e.indexOf("-") < 0) return null; var t = e.split("-"); return 2 === t.length ? null : (t.pop(), "x" === t[t.length - 1].toLowerCase() ? null : this.formatLanguageCode(t.join("-"))) } }, { key: "getLanguagePartFromCode", value: function (e) { if (!e || e.indexOf("-") < 0) return e; var t = e.split("-"); return this.formatLanguageCode(t[0]) } }, { key: "formatLanguageCode", value: function (e) { if ("string" == typeof e && e.indexOf("-") > -1) { var t = ["hans", "hant", "latn", "cyrl", "cans", "mong", "arab"], n = e.split("-"); return this.options.lowerCaseLng ? n = n.map(function (e) { return e.toLowerCase() }) : 2 === n.length ? (n[0] = n[0].toLowerCase(), n[1] = n[1].toUpperCase(), t.indexOf(n[1].toLowerCase()) > -1 && (n[1] = V(n[1].toLowerCase()))) : 3 === n.length && (n[0] = n[0].toLowerCase(), 2 === n[1].length && (n[1] = n[1].toUpperCase()), "sgn" !== n[0] && 2 === n[2].length && (n[2] = n[2].toUpperCase()), t.indexOf(n[1].toLowerCase()) > -1 && (n[1] = V(n[1].toLowerCase())), t.indexOf(n[2].toLowerCase()) > -1 && (n[2] = V(n[2].toLowerCase()))), n.join("-") } return this.options.cleanCode || this.options.lowerCaseLng ? e.toLowerCase() : e } }, { key: "isSupportedCode", value: function (e) { return ("languageOnly" === this.options.load || this.options.nonExplicitSupportedLngs) && (e = this.getLanguagePartFromCode(e)), !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(e) > -1 } }, { key: "getBestMatchFromCodes", value: function (e) { var t, n = this; return e ? (e.forEach(function (e) { if (!t) { var r = n.formatLanguageCode(e); n.options.supportedLngs && !n.isSupportedCode(r) || (t = r) } }), !t && this.options.supportedLngs && e.forEach(function (e) { if (!t) { var r = n.getLanguagePartFromCode(e); if (n.isSupportedCode(r)) return t = r; t = n.options.supportedLngs.find(function (e) { if (0 === e.indexOf(r)) return e }) } }), t || (t = this.getFallbackCodes(this.options.fallbackLng)[0]), t) : null } }, { key: "getFallbackCodes", value: function (e, t) { if (!e) return []; if ("function" == typeof e && (e = e(t)), "string" == typeof e && (e = [e]), "[object Array]" === Object.prototype.toString.apply(e)) return e; if (!t) return e.default || []; var n = e[t]; return n || (n = e[this.getScriptPartFromCode(t)]), n || (n = e[this.formatLanguageCode(t)]), n || (n = e[this.getLanguagePartFromCode(t)]), n || (n = e.default), n || [] } }, { key: "toResolveHierarchy", value: function (e, t) { var n = this, r = this.getFallbackCodes(t || this.options.fallbackLng || [], e), o = [], i = function (e) { e && (n.isSupportedCode(e) ? o.push(e) : n.logger.warn("rejecting language code not found in supportedLngs: ".concat(e))) }; return "string" == typeof e && e.indexOf("-") > -1 ? ("languageOnly" !== this.options.load && i(this.formatLanguageCode(e)), "languageOnly" !== this.options.load && "currentOnly" !== this.options.load && i(this.getScriptPartFromCode(e)), "currentOnly" !== this.options.load && i(this.getLanguagePartFromCode(e))) : "string" == typeof e && i(this.formatLanguageCode(e)), r.forEach(function (e) { o.indexOf(e) < 0 && i(n.formatLanguageCode(e)) }), o } }]), e }(), U = [{ lngs: ["ach", "ak", "am", "arn", "br", "fil", "gun", "ln", "mfe", "mg", "mi", "oc", "pt", "pt-BR", "tg", "tl", "ti", "tr", "uz", "wa"], nr: [1, 2], fc: 1 }, { lngs: ["af", "an", "ast", "az", "bg", "bn", "ca", "da", "de", "dev", "el", "en", "eo", "es", "et", "eu", "fi", "fo", "fur", "fy", "gl", "gu", "ha", "hi", "hu", "hy", "ia", "it", "kk", "kn", "ku", "lb", "mai", "ml", "mn", "mr", "nah", "nap", "nb", "ne", "nl", "nn", "no", "nso", "pa", "pap", "pms", "ps", "pt-PT", "rm", "sco", "se", "si", "so", "son", "sq", "sv", "sw", "ta", "te", "tk", "ur", "yo"], nr: [1, 2], fc: 2 }, { lngs: ["ay", "bo", "cgg", "fa", "ht", "id", "ja", "jbo", "ka", "km", "ko", "ky", "lo", "ms", "sah", "su", "th", "tt", "ug", "vi", "wo", "zh"], nr: [1], fc: 3 }, { lngs: ["be", "bs", "cnr", "dz", "hr", "ru", "sr", "uk"], nr: [1, 2, 5], fc: 4 }, { lngs: ["ar"], nr: [0, 1, 2, 3, 11, 100], fc: 5 }, { lngs: ["cs", "sk"], nr: [1, 2, 5], fc: 6 }, { lngs: ["csb", "pl"], nr: [1, 2, 5], fc: 7 }, { lngs: ["cy"], nr: [1, 2, 3, 8], fc: 8 }, { lngs: ["fr"], nr: [1, 2], fc: 9 }, { lngs: ["ga"], nr: [1, 2, 3, 7, 11], fc: 10 }, { lngs: ["gd"], nr: [1, 2, 3, 20], fc: 11 }, { lngs: ["is"], nr: [1, 2], fc: 12 }, { lngs: ["jv"], nr: [0, 1], fc: 13 }, { lngs: ["kw"], nr: [1, 2, 3, 4], fc: 14 }, { lngs: ["lt"], nr: [1, 2, 10], fc: 15 }, { lngs: ["lv"], nr: [1, 2, 0], fc: 16 }, { lngs: ["mk"], nr: [1, 2], fc: 17 }, { lngs: ["mnk"], nr: [0, 1, 2], fc: 18 }, { lngs: ["mt"], nr: [1, 2, 11, 20], fc: 19 }, { lngs: ["or"], nr: [2, 1], fc: 2 }, { lngs: ["ro"], nr: [1, 2, 20], fc: 20 }, { lngs: ["sl"], nr: [5, 1, 2, 3], fc: 21 }, { lngs: ["he", "iw"], nr: [1, 2, 20, 21], fc: 22 }], B = { 1: function (e) { return Number(e > 1) }, 2: function (e) { return Number(1 != e) }, 3: function (e) { return 0 }, 4: function (e) { return Number(e % 10 == 1 && e % 100 != 11 ? 0 : e % 10 >= 2 && e % 10 <= 4 && (e % 100 < 10 || e % 100 >= 20) ? 1 : 2) }, 5: function (e) { return Number(0 == e ? 0 : 1 == e ? 1 : 2 == e ? 2 : e % 100 >= 3 && e % 100 <= 10 ? 3 : e % 100 >= 11 ? 4 : 5) }, 6: function (e) { return Number(1 == e ? 0 : e >= 2 && e <= 4 ? 1 : 2) }, 7: function (e) { return Number(1 == e ? 0 : e % 10 >= 2 && e % 10 <= 4 && (e % 100 < 10 || e % 100 >= 20) ? 1 : 2) }, 8: function (e) { return Number(1 == e ? 0 : 2 == e ? 1 : 8 != e && 11 != e ? 2 : 3) }, 9: function (e) { return Number(e >= 2) }, 10: function (e) { return Number(1 == e ? 0 : 2 == e ? 1 : e < 7 ? 2 : e < 11 ? 3 : 4) }, 11: function (e) { return Number(1 == e || 11 == e ? 0 : 2 == e || 12 == e ? 1 : e > 2 && e < 20 ? 2 : 3) }, 12: function (e) { return Number(e % 10 != 1 || e % 100 == 11) }, 13: function (e) { return Number(0 !== e) }, 14: function (e) { return Number(1 == e ? 0 : 2 == e ? 1 : 3 == e ? 2 : 3) }, 15: function (e) { return Number(e % 10 == 1 && e % 100 != 11 ? 0 : e % 10 >= 2 && (e % 100 < 10 || e % 100 >= 20) ? 1 : 2) }, 16: function (e) { return Number(e % 10 == 1 && e % 100 != 11 ? 0 : 0 !== e ? 1 : 2) }, 17: function (e) { return Number(1 == e || e % 10 == 1 && e % 100 != 11 ? 0 : 1) }, 18: function (e) { return Number(0 == e ? 0 : 1 == e ? 1 : 2) }, 19: function (e) { return Number(1 == e ? 0 : 0 == e || e % 100 > 1 && e % 100 < 11 ? 1 : e % 100 > 10 && e % 100 < 20 ? 2 : 3) }, 20: function (e) { return Number(1 == e ? 0 : 0 == e || e % 100 > 0 && e % 100 < 20 ? 1 : 2) }, 21: function (e) { return Number(e % 100 == 1 ? 1 : e % 100 == 2 ? 2 : e % 100 == 3 || e % 100 == 4 ? 3 : 0) }, 22: function (e) { return Number(1 == e ? 0 : 2 == e ? 1 : (e < 0 || e > 10) && e % 10 == 0 ? 2 : 3) } }, K = ["v1", "v2", "v3"], M = { zero: 0, one: 1, two: 2, few: 3, many: 4, other: 5 }; var H = function () { function e(n) { var r, o = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}; t(this, e), this.languageUtils = n, this.options = o, this.logger = g.create("pluralResolver"), this.options.compatibilityJSON && "v4" !== this.options.compatibilityJSON || "undefined" != typeof Intl && Intl.PluralRules || (this.options.compatibilityJSON = "v3", this.logger.error("Your environment seems not to be Intl API compatible, use an Intl.PluralRules polyfill. Will fallback to the compatibilityJSON v3 format handling.")), this.rules = (r = {}, U.forEach(function (e) { e.lngs.forEach(function (t) { r[t] = { numbers: e.nr, plurals: B[e.fc] } }) }), r) } return r(e, [{ key: "addRule", value: function (e, t) { this.rules[e] = t } }, { key: "getRule", value: function (e) { var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}; if (this.shouldUseIntlApi()) try { return new Intl.PluralRules(e, { type: t.ordinal ? "ordinal" : "cardinal" }) } catch (e) { return } return this.rules[e] || this.rules[this.languageUtils.getLanguagePartFromCode(e)] } }, { key: "needsPlural", value: function (e) { var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, n = this.getRule(e, t); return this.shouldUseIntlApi() ? n && n.resolvedOptions().pluralCategories.length > 1 : n && n.numbers.length > 1 } }, { key: "getPluralFormsOfKey", value: function (e, t) { var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}; return this.getSuffixes(e, n).map(function (e) { return "".concat(t).concat(e) }) } }, { key: "getSuffixes", value: function (e) { var t = this, n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r = this.getRule(e, n); return r ? this.shouldUseIntlApi() ? r.resolvedOptions().pluralCategories.sort(function (e, t) { return M[e] - M[t] }).map(function (e) { return "".concat(t.options.prepend).concat(e) }) : r.numbers.map(function (r) { return t.getSuffix(e, r, n) }) : [] } }, { key: "getSuffix", value: function (e, t) { var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, r = this.getRule(e, n); return r ? this.shouldUseIntlApi() ? "".concat(this.options.prepend).concat(r.select(t)) : this.getSuffixRetroCompatible(r, t) : (this.logger.warn("no plural rule found for: ".concat(e)), "") } }, { key: "getSuffixRetroCompatible", value: function (e, t) { var n = this, r = e.noAbs ? e.plurals(t) : e.plurals(Math.abs(t)), o = e.numbers[r]; this.options.simplifyPluralSuffix && 2 === e.numbers.length && 1 === e.numbers[0] && (2 === o ? o = "plural" : 1 === o && (o = "")); var i = function () { return n.options.prepend && o.toString() ? n.options.prepend + o.toString() : o.toString() }; return "v1" === this.options.compatibilityJSON ? 1 === o ? "" : "number" == typeof o ? "_plural_".concat(o.toString()) : i() : "v2" === this.options.compatibilityJSON ? i() : this.options.simplifyPluralSuffix && 2 === e.numbers.length && 1 === e.numbers[0] ? i() : this.options.prepend && r.toString() ? this.options.prepend + r.toString() : r.toString() } }, { key: "shouldUseIntlApi", value: function () { return !K.includes(this.options.compatibilityJSON) } }]), e }(); function z(e, t) { var n = Object.keys(e); if (Object.getOwnPropertySymbols) { var r = Object.getOwnPropertySymbols(e); t && (r = r.filter(function (t) { return Object.getOwnPropertyDescriptor(e, t).enumerable })), n.push.apply(n, r) } return n } function J(e) { for (var t = 1; t < arguments.length; t++) { var n = null != arguments[t] ? arguments[t] : {}; t % 2 ? z(Object(n), !0).forEach(function (t) { c(e, t, n[t]) }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(n)) : z(Object(n)).forEach(function (t) { Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(n, t)) }) } return e } var _ = function () { function e() { var n = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}; t(this, e), this.logger = g.create("interpolator"), this.options = n, this.format = n.interpolation && n.interpolation.format || function (e) { return e }, this.init(n) } return r(e, [{ key: "init", value: function () { var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}; e.interpolation || (e.interpolation = { escapeValue: !0 }); var t = e.interpolation; this.escape = void 0 !== t.escape ? t.escape : x, this.escapeValue = void 0 === t.escapeValue || t.escapeValue, this.useRawValueToEscape = void 0 !== t.useRawValueToEscape && t.useRawValueToEscape, this.prefix = t.prefix ? k(t.prefix) : t.prefixEscaped || "{{", this.suffix = t.suffix ? k(t.suffix) : t.suffixEscaped || "}}", this.formatSeparator = t.formatSeparator ? t.formatSeparator : t.formatSeparator || ",", this.unescapePrefix = t.unescapeSuffix ? "" : t.unescapePrefix || "-", this.unescapeSuffix = this.unescapePrefix ? "" : t.unescapeSuffix || "", this.nestingPrefix = t.nestingPrefix ? k(t.nestingPrefix) : t.nestingPrefixEscaped || k("$t("), this.nestingSuffix = t.nestingSuffix ? k(t.nestingSuffix) : t.nestingSuffixEscaped || k(")"), this.nestingOptionsSeparator = t.nestingOptionsSeparator ? t.nestingOptionsSeparator : t.nestingOptionsSeparator || ",", this.maxReplaces = t.maxReplaces ? t.maxReplaces : 1e3, this.alwaysFormat = void 0 !== t.alwaysFormat && t.alwaysFormat, this.resetRegExp() } }, { key: "reset", value: function () { this.options && this.init(this.options) } }, { key: "resetRegExp", value: function () { var e = "".concat(this.prefix, "(.+?)").concat(this.suffix); this.regexp = new RegExp(e, "g"); var t = "".concat(this.prefix).concat(this.unescapePrefix, "(.+?)").concat(this.unescapeSuffix).concat(this.suffix); this.regexpUnescape = new RegExp(t, "g"); var n = "".concat(this.nestingPrefix, "(.+?)").concat(this.nestingSuffix); this.nestingRegexp = new RegExp(n, "g") } }, { key: "interpolate", value: function (e, t, n, r) { var o, i, a, s = this, u = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {}; function c(e) { return e.replace(/\$/g, "$$$$") } var l = function (e) { if (e.indexOf(s.formatSeparator) < 0) { var o = O(t, u, e); return s.alwaysFormat ? s.format(o, void 0, n, J(J(J({}, r), t), {}, { interpolationkey: e })) : o } var i = e.split(s.formatSeparator), a = i.shift().trim(), c = i.join(s.formatSeparator).trim(); return s.format(O(t, u, a), c, n, J(J(J({}, r), t), {}, { interpolationkey: a })) }; this.resetRegExp(); var f = r && r.missingInterpolationHandler || this.options.missingInterpolationHandler, p = r && r.interpolation && void 0 !== r.interpolation.skipOnVariables ? r.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables; return [{ regex: this.regexpUnescape, safeValue: function (e) { return c(e) } }, { regex: this.regexp, safeValue: function (e) { return s.escapeValue ? c(s.escape(e)) : c(e) } }].forEach(function (t) { for (a = 0; o = t.regex.exec(e);) { var n = o[1].trim(); if (void 0 === (i = l(n))) if ("function" == typeof f) { var u = f(e, o, r); i = "string" == typeof u ? u : "" } else if (r && r.hasOwnProperty(n)) i = ""; else { if (p) { i = o[0]; continue } s.logger.warn("missed to pass in variable ".concat(n, " for interpolating ").concat(e)), i = "" } else "string" == typeof i || s.useRawValueToEscape || (i = v(i)); var c = t.safeValue(i); if (e = e.replace(o[0], c), p ? (t.regex.lastIndex += c.length, t.regex.lastIndex -= o[0].length) : t.regex.lastIndex = 0, ++a >= s.maxReplaces) break } }), e } }, { key: "nest", value: function (e, t) { var n, r, o = this, i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, a = J({}, i); function s(e, t) { var n = this.nestingOptionsSeparator; if (e.indexOf(n) < 0) return e; var r = e.split(new RegExp("".concat(n, "[ ]*{"))), o = "{".concat(r[1]); e = r[0], o = (o = this.interpolate(o, a)).replace(/'/g, '"'); try { a = JSON.parse(o), t && (a = J(J({}, t), a)) } catch (t) { return this.logger.warn("failed parsing options string in nesting for key ".concat(e), t), "".concat(e).concat(n).concat(o) } return delete a.defaultValue, e } for (a.applyPostProcessor = !1, delete a.defaultValue; n = this.nestingRegexp.exec(e);) { var u = [], c = !1; if (-1 !== n[0].indexOf(this.formatSeparator) && !/{.*}/.test(n[1])) { var l = n[1].split(this.formatSeparator).map(function (e) { return e.trim() }); n[1] = l.shift(), u = l, c = !0 } if ((r = t(s.call(this, n[1].trim(), a), a)) && n[0] === e && "string" != typeof r) return r; "string" != typeof r && (r = v(r)), r || (this.logger.warn("missed to resolve ".concat(n[1], " for nesting ").concat(e)), r = ""), c && (r = u.reduce(function (e, t) { return o.format(e, t, i.lng, J(J({}, i), {}, { interpolationkey: n[1].trim() })) }, r.trim())), e = e.replace(n[0], r), this.regexp.lastIndex = 0 } return e } }]), e }(); function q(e, t) { (null == t || t > e.length) && (t = e.length); for (var n = 0, r = new Array(t); n < t; n++)r[n] = e[n]; return r } function $(e) { return function (e) { if (Array.isArray(e)) return e }(e) || function (e) { if ("undefined" != typeof Symbol && null != e[Symbol.iterator] || null != e["@@iterator"]) return Array.from(e) }(e) || function (e, t) { if (e) { if ("string" == typeof e) return q(e, t); var n = Object.prototype.toString.call(e).slice(8, -1); return "Object" === n && e.constructor && (n = e.constructor.name), "Map" === n || "Set" === n ? Array.from(e) : "Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n) ? q(e, t) : void 0 } }(e) || function () { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.") }() } function W(e, t) { var n = Object.keys(e); if (Object.getOwnPropertySymbols) { var r = Object.getOwnPropertySymbols(e); t && (r = r.filter(function (t) { return Object.getOwnPropertyDescriptor(e, t).enumerable })), n.push.apply(n, r) } return n } function Y(e) { for (var t = 1; t < arguments.length; t++) { var n = null != arguments[t] ? arguments[t] : {}; t % 2 ? W(Object(n), !0).forEach(function (t) { c(e, t, n[t]) }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(n)) : W(Object(n)).forEach(function (t) { Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(n, t)) }) } return e } var G = function () { function e() { var n = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}; t(this, e), this.logger = g.create("formatter"), this.options = n, this.formats = { number: function (e, t, n) { return new Intl.NumberFormat(t, n).format(e) }, currency: function (e, t, n) { return new Intl.NumberFormat(t, Y(Y({}, n), {}, { style: "currency" })).format(e) }, datetime: function (e, t, n) { return new Intl.DateTimeFormat(t, Y({}, n)).format(e) }, relativetime: function (e, t, n) { return new Intl.RelativeTimeFormat(t, Y({}, n)).format(e, n.range || "day") }, list: function (e, t, n) { return new Intl.ListFormat(t, Y({}, n)).format(e) } }, this.init(n) } return r(e, [{ key: "init", value: function (e) { var t = (arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : { interpolation: {} }).interpolation; this.formatSeparator = t.formatSeparator ? t.formatSeparator : t.formatSeparator || "," } }, { key: "add", value: function (e, t) { this.formats[e.toLowerCase().trim()] = t } }, { key: "format", value: function (e, t, n, r) { var o = this; return t.split(this.formatSeparator).reduce(function (e, t) { var i = function (e) { var t = e.toLowerCase().trim(), n = {}; if (e.indexOf("(") > -1) { var r = e.split("("); t = r[0].toLowerCase().trim(); var o = r[1].substring(0, r[1].length - 1); "currency" === t && o.indexOf(":") < 0 ? n.currency || (n.currency = o.trim()) : "relativetime" === t && o.indexOf(":") < 0 ? n.range || (n.range = o.trim()) : o.split(";").forEach(function (e) { if (e) { var t = $(e.split(":")), r = t[0], o = t.slice(1).join(":"); n[r.trim()] || (n[r.trim()] = o.trim()), "false" === o.trim() && (n[r.trim()] = !1), "true" === o.trim() && (n[r.trim()] = !0), isNaN(o.trim()) || (n[r.trim()] = parseInt(o.trim(), 10)) } }) } return { formatName: t, formatOptions: n } }(t), a = i.formatName, s = i.formatOptions; if (o.formats[a]) { var u = e; try { var c = r && r.formatParams && r.formatParams[r.interpolationkey] || {}, l = c.locale || c.lng || r.locale || r.lng || n; u = o.formats[a](e, l, Y(Y(Y({}, s), r), c)) } catch (e) { o.logger.warn(e) } return u } return o.logger.warn("there was no format function for ".concat(a)), e }, e) } }]), e }(); function Q(e, t) { var n = Object.keys(e); if (Object.getOwnPropertySymbols) { var r = Object.getOwnPropertySymbols(e); t && (r = r.filter(function (t) { return Object.getOwnPropertyDescriptor(e, t).enumerable })), n.push.apply(n, r) } return n } function X(e) { for (var t = 1; t < arguments.length; t++) { var n = null != arguments[t] ? arguments[t] : {}; t % 2 ? Q(Object(n), !0).forEach(function (t) { c(e, t, n[t]) }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(n)) : Q(Object(n)).forEach(function (t) { Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(n, t)) }) } return e } function Z(e) { var t = function () { if ("undefined" == typeof Reflect || !Reflect.construct) return !1; if (Reflect.construct.sham) return !1; if ("function" == typeof Proxy) return !0; try { return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () { })), !0 } catch (e) { return !1 } }(); return function () { var n, r = u(e); if (t) { var o = u(this).constructor; n = Reflect.construct(r, arguments, o) } else n = r.apply(this, arguments); return s(this, n) } } var ee = function (e) { a(i, h); var n = Z(i); function i(e, r, a) { var s, u = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {}; return t(this, i), s = n.call(this), S && h.call(o(s)), s.backend = e, s.store = r, s.services = a, s.languageUtils = a.languageUtils, s.options = u, s.logger = g.create("backendConnector"), s.waitingReads = [], s.maxParallelReads = u.maxParallelReads || 10, s.readingCalls = 0, s.state = {}, s.queue = [], s.backend && s.backend.init && s.backend.init(a, u.backend, u), s } return r(i, [{ key: "queueLoad", value: function (e, t, n, r) { var o = this, i = {}, a = {}, s = {}, u = {}; return e.forEach(function (e) { var r = !0; t.forEach(function (t) { var s = "".concat(e, "|").concat(t); !n.reload && o.store.hasResourceBundle(e, t) ? o.state[s] = 2 : o.state[s] < 0 || (1 === o.state[s] ? void 0 !== a[s] && (a[s] = !0) : (o.state[s] = 1, r = !1, a[s] = !0, i[s] = !0, u[t] = !0)) }), r || (s[e] = !0) }), (Object.keys(i).length || Object.keys(a).length) && this.queue.push({ pending: a, pendingCount: Object.keys(a).length, loaded: {}, errors: [], callback: r }), { toLoad: Object.keys(i), pending: Object.keys(a), toLoadLanguages: Object.keys(s), toLoadNamespaces: Object.keys(u) } } }, { key: "loaded", value: function (e, t, n) { var r = e.split("|"), o = r[0], i = r[1]; t && this.emit("failedLoading", o, i, t), n && this.store.addResourceBundle(o, i, n), this.state[e] = t ? -1 : 2; var a = {}; this.queue.forEach(function (n) { var r, s, u, c, l, f; r = n.loaded, s = i, c = y(r, [o], Object), l = c.obj, f = c.k, l[f] = l[f] || [], u && (l[f] = l[f].concat(s)), u || l[f].push(s), function (e, t) { delete e.pending[t], e.pendingCount-- }(n, e), t && n.errors.push(t), 0 !== n.pendingCount || n.done || (Object.keys(n.loaded).forEach(function (e) { a[e] || (a[e] = {}); var t = Object.keys(a[e]); t.length && t.forEach(function (n) { void 0 !== t[n] && (a[e][n] = !0) }) }), n.done = !0, n.errors.length ? n.callback(n.errors) : n.callback()) }), this.emit("loaded", a), this.queue = this.queue.filter(function (e) { return !e.done }) } }, { key: "read", value: function (e, t, n) { var r = this, o = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0, i = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 350, a = arguments.length > 5 ? arguments[5] : void 0; return e.length ? this.readingCalls >= this.maxParallelReads ? void this.waitingReads.push({ lng: e, ns: t, fcName: n, tried: o, wait: i, callback: a }) : (this.readingCalls++, this.backend[n](e, t, function (s, u) { if (s && u && o < 5) setTimeout(function () { r.read.call(r, e, t, n, o + 1, 2 * i, a) }, i); else { if (r.readingCalls--, r.waitingReads.length > 0) { var c = r.waitingReads.shift(); r.read(c.lng, c.ns, c.fcName, c.tried, c.wait, c.callback) } a(s, u) } })) : a(null, {}) } }, { key: "prepareLoading", value: function (e, t) { var n = this, r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, o = arguments.length > 3 ? arguments[3] : void 0; if (!this.backend) return this.logger.warn("No backend was added via i18next.use. Will not load resources."), o && o(); "string" == typeof e && (e = this.languageUtils.toResolveHierarchy(e)), "string" == typeof t && (t = [t]); var i = this.queueLoad(e, t, r, o); if (!i.toLoad.length) return i.pending.length || o(), null; i.toLoad.forEach(function (e) { n.loadOne(e) }) } }, { key: "load", value: function (e, t, n) { this.prepareLoading(e, t, {}, n) } }, { key: "reload", value: function (e, t, n) { this.prepareLoading(e, t, { reload: !0 }, n) } }, { key: "loadOne", value: function (e) { var t = this, n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "", r = e.split("|"), o = r[0], i = r[1]; this.read(o, i, "read", void 0, void 0, function (r, a) { r && t.logger.warn("".concat(n, "loading namespace ").concat(i, " for language ").concat(o, " failed"), r), !r && a && t.logger.log("".concat(n, "loaded namespace ").concat(i, " for language ").concat(o), a), t.loaded(e, r, a) }) } }, { key: "saveMissing", value: function (e, t, n, r, o) { var i = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : {}; this.services.utils && this.services.utils.hasLoadedNamespace && !this.services.utils.hasLoadedNamespace(t) ? this.logger.warn('did not save key "'.concat(n, '" as the namespace "').concat(t, '" was not yet loaded'), "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!") : null != n && "" !== n && (this.backend && this.backend.create && this.backend.create(e, t, n, r, null, X(X({}, i), {}, { isUpdate: o })), e && e[0] && this.store.addResource(e[0], t, n, r)) } }]), i }(); function te(e) { return "string" == typeof e.ns && (e.ns = [e.ns]), "string" == typeof e.fallbackLng && (e.fallbackLng = [e.fallbackLng]), "string" == typeof e.fallbackNS && (e.fallbackNS = [e.fallbackNS]), e.supportedLngs && e.supportedLngs.indexOf("cimode") < 0 && (e.supportedLngs = e.supportedLngs.concat(["cimode"])), e } function ne(e, t) { var n = Object.keys(e); if (Object.getOwnPropertySymbols) { var r = Object.getOwnPropertySymbols(e); t && (r = r.filter(function (t) { return Object.getOwnPropertyDescriptor(e, t).enumerable })), n.push.apply(n, r) } return n } function re(e) { for (var t = 1; t < arguments.length; t++) { var n = null != arguments[t] ? arguments[t] : {}; t % 2 ? ne(Object(n), !0).forEach(function (t) { c(e, t, n[t]) }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(n)) : ne(Object(n)).forEach(function (t) { Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(n, t)) }) } return e } function oe(e) { var t = function () { if ("undefined" == typeof Reflect || !Reflect.construct) return !1; if (Reflect.construct.sham) return !1; if ("function" == typeof Proxy) return !0; try { return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () { })), !0 } catch (e) { return !1 } }(); return function () { var n, r = u(e); if (t) { var o = u(this).constructor; n = Reflect.construct(r, arguments, o) } else n = r.apply(this, arguments); return s(this, n) } } function ie() { } var ae = function (n) { a(u, h); var i = oe(u); function u() { var e, n, r = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, a = arguments.length > 1 ? arguments[1] : void 0; if (t(this, u), e = i.call(this), S && h.call(o(e)), e.options = te(r), e.services = {}, e.logger = g, e.modules = { external: [] }, n = o(e), Object.getOwnPropertyNames(Object.getPrototypeOf(n)).forEach(function (e) { "function" == typeof n[e] && (n[e] = n[e].bind(n)) }), a && !e.isInitialized && !r.isClone) { if (!e.options.initImmediate) return e.init(r, a), s(e, o(e)); setTimeout(function () { e.init(r, a) }, 0) } return e } return r(u, [{ key: "init", value: function () { var t = this, n = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, r = arguments.length > 1 ? arguments[1] : void 0; "function" == typeof n && (r = n, n = {}), !n.defaultNS && n.ns && ("string" == typeof n.ns ? n.defaultNS = n.ns : n.ns.indexOf("translation") < 0 && (n.defaultNS = n.ns[0])); var o = { debug: !1, initImmediate: !0, ns: ["translation"], defaultNS: ["translation"], fallbackLng: ["dev"], fallbackNS: !1, supportedLngs: !1, nonExplicitSupportedLngs: !1, load: "all", preload: !1, simplifyPluralSuffix: !0, keySeparator: ".", nsSeparator: ":", pluralSeparator: "_", contextSeparator: "_", partialBundledLanguages: !1, saveMissing: !1, updateMissing: !1, saveMissingTo: "fallback", saveMissingPlurals: !0, missingKeyHandler: !1, missingInterpolationHandler: !1, postProcess: !1, postProcessPassResolved: !1, returnNull: !0, returnEmptyString: !0, returnObjects: !1, joinArrays: !1, returnedObjectHandler: !1, parseMissingKeyHandler: !1, appendNamespaceToMissingKey: !1, appendNamespaceToCIMode: !1, overloadTranslationOptionHandler: function (t) { var n = {}; if ("object" === e(t[1]) && (n = t[1]), "string" == typeof t[1] && (n.defaultValue = t[1]), "string" == typeof t[2] && (n.tDescription = t[2]), "object" === e(t[2]) || "object" === e(t[3])) { var r = t[3] || t[2]; Object.keys(r).forEach(function (e) { n[e] = r[e] }) } return n }, interpolation: { escapeValue: !0, format: function (e, t, n, r) { return e }, prefix: "{{", suffix: "}}", formatSeparator: ",", unescapePrefix: "-", nestingPrefix: "$t(", nestingSuffix: ")", nestingOptionsSeparator: ",", maxReplaces: 1e3, skipOnVariables: !0 } }; function i(e) { return e ? "function" == typeof e ? new e : e : null } if (this.options = re(re(re({}, o), this.options), te(n)), "v1" !== this.options.compatibilityAPI && (this.options.interpolation = re(re({}, o.interpolation), this.options.interpolation)), void 0 !== n.keySeparator && (this.options.userDefinedKeySeparator = n.keySeparator), void 0 !== n.nsSeparator && (this.options.userDefinedNsSeparator = n.nsSeparator), !this.options.isClone) { var a; this.modules.logger ? g.init(i(this.modules.logger), this.options) : g.init(null, this.options), this.modules.formatter ? a = this.modules.formatter : "undefined" != typeof Intl && (a = G); var s = new T(this.options); this.store = new N(this.options.resources, this.options); var u = this.services; u.logger = g, u.resourceStore = this.store, u.languageUtils = s, u.pluralResolver = new H(s, { prepend: this.options.pluralSeparator, compatibilityJSON: this.options.compatibilityJSON, simplifyPluralSuffix: this.options.simplifyPluralSuffix }), !a || this.options.interpolation.format && this.options.interpolation.format !== o.interpolation.format || (u.formatter = i(a), u.formatter.init(u, this.options), this.options.interpolation.format = u.formatter.format.bind(u.formatter)), u.interpolator = new _(this.options), u.utils = { hasLoadedNamespace: this.hasLoadedNamespace.bind(this) }, u.backendConnector = new ee(i(this.modules.backend), u.resourceStore, u, this.options), u.backendConnector.on("*", function (e) { for (var n = arguments.length, r = new Array(n > 1 ? n - 1 : 0), o = 1; o < n; o++)r[o - 1] = arguments[o]; t.emit.apply(t, [e].concat(r)) }), this.modules.languageDetector && (u.languageDetector = i(this.modules.languageDetector), u.languageDetector.init(u, this.options.detection, this.options)), this.modules.i18nFormat && (u.i18nFormat = i(this.modules.i18nFormat), u.i18nFormat.init && u.i18nFormat.init(this)), this.translator = new A(this.services, this.options), this.translator.on("*", function (e) { for (var n = arguments.length, r = new Array(n > 1 ? n - 1 : 0), o = 1; o < n; o++)r[o - 1] = arguments[o]; t.emit.apply(t, [e].concat(r)) }), this.modules.external.forEach(function (e) { e.init && e.init(t) }) } if (this.format = this.options.interpolation.format, r || (r = ie), this.options.fallbackLng && !this.services.languageDetector && !this.options.lng) { var c = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng); c.length > 0 && "dev" !== c[0] && (this.options.lng = c[0]) } this.services.languageDetector || this.options.lng || this.logger.warn("init: no languageDetector is used and no lng is defined");["getResource", "hasResourceBundle", "getResourceBundle", "getDataByLanguage"].forEach(function (e) { t[e] = function () { var n; return (n = t.store)[e].apply(n, arguments) } });["addResource", "addResources", "addResourceBundle", "removeResourceBundle"].forEach(function (e) { t[e] = function () { var n; return (n = t.store)[e].apply(n, arguments), t } }); var l = d(), f = function () { var e = function (e, n) { t.isInitialized && !t.initializedStoreOnce && t.logger.warn("init: i18next is already initialized. You should call init just once!"), t.isInitialized = !0, t.options.isClone || t.logger.log("initialized", t.options), t.emit("initialized", t.options), l.resolve(n), r(e, n) }; if (t.languages && "v1" !== t.options.compatibilityAPI && !t.isInitialized) return e(null, t.t.bind(t)); t.changeLanguage(t.options.lng, e) }; return this.options.resources || !this.options.initImmediate ? f() : setTimeout(f, 0), l } }, { key: "loadResources", value: function (e) { var t = this, n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : ie, r = "string" == typeof e ? e : this.language; if ("function" == typeof e && (n = e), !this.options.resources || this.options.partialBundledLanguages) { if (r && "cimode" === r.toLowerCase()) return n(); var o = [], i = function (e) { e && t.services.languageUtils.toResolveHierarchy(e).forEach(function (e) { o.indexOf(e) < 0 && o.push(e) }) }; if (r) i(r); else this.services.languageUtils.getFallbackCodes(this.options.fallbackLng).forEach(function (e) { return i(e) }); this.options.preload && this.options.preload.forEach(function (e) { return i(e) }), this.services.backendConnector.load(o, this.options.ns, function (e) { e || t.resolvedLanguage || !t.language || t.setResolvedLanguage(t.language), n(e) }) } else n(null) } }, { key: "reloadResources", value: function (e, t, n) { var r = d(); return e || (e = this.languages), t || (t = this.options.ns), n || (n = ie), this.services.backendConnector.reload(e, t, function (e) { r.resolve(), n(e) }), r } }, { key: "use", value: function (e) { if (!e) throw new Error("You are passing an undefined module! Please check the object you are passing to i18next.use()"); if (!e.type) throw new Error("You are passing a wrong module! Please check the object you are passing to i18next.use()"); return "backend" === e.type && (this.modules.backend = e), ("logger" === e.type || e.log && e.warn && e.error) && (this.modules.logger = e), "languageDetector" === e.type && (this.modules.languageDetector = e), "i18nFormat" === e.type && (this.modules.i18nFormat = e), "postProcessor" === e.type && C.addPostProcessor(e), "formatter" === e.type && (this.modules.formatter = e), "3rdParty" === e.type && this.modules.external.push(e), this } }, { key: "setResolvedLanguage", value: function (e) { if (e && this.languages && !(["cimode", "dev"].indexOf(e) > -1)) for (var t = 0; t < this.languages.length; t++) { var n = this.languages[t]; if (!(["cimode", "dev"].indexOf(n) > -1) && this.store.hasLanguageSomeTranslations(n)) { this.resolvedLanguage = n; break } } } }, { key: "changeLanguage", value: function (e, t) { var n = this; this.isLanguageChangingTo = e; var r = d(); this.emit("languageChanging", e); var o = function (e) { n.language = e, n.languages = n.services.languageUtils.toResolveHierarchy(e), n.resolvedLanguage = void 0, n.setResolvedLanguage(e) }, i = function (i) { e || i || !n.services.languageDetector || (i = []); var a = "string" == typeof i ? i : n.services.languageUtils.getBestMatchFromCodes(i); a && (n.language || o(a), n.translator.language || n.translator.changeLanguage(a), n.services.languageDetector && n.services.languageDetector.cacheUserLanguage(a)), n.loadResources(a, function (e) { !function (e, i) { i ? (o(i), n.translator.changeLanguage(i), n.isLanguageChangingTo = void 0, n.emit("languageChanged", i), n.logger.log("languageChanged", i)) : n.isLanguageChangingTo = void 0, r.resolve(function () { return n.t.apply(n, arguments) }), t && t(e, function () { return n.t.apply(n, arguments) }) }(e, a) }) }; return e || !this.services.languageDetector || this.services.languageDetector.async ? !e && this.services.languageDetector && this.services.languageDetector.async ? this.services.languageDetector.detect(i) : i(e) : i(this.services.languageDetector.detect()), r } }, { key: "getFixedT", value: function (t, n, r) { var o = this, i = function t(n, i) { var a; if ("object" !== e(i)) { for (var s = arguments.length, u = new Array(s > 2 ? s - 2 : 0), c = 2; c < s; c++)u[c - 2] = arguments[c]; a = o.options.overloadTranslationOptionHandler([n, i].concat(u)) } else a = re({}, i); a.lng = a.lng || t.lng, a.lngs = a.lngs || t.lngs, a.ns = a.ns || t.ns; var l = o.options.keySeparator || ".", f = r ? "".concat(r).concat(l).concat(n) : n; return o.t(f, a) }; return "string" == typeof t ? i.lng = t : i.lngs = t, i.ns = n, i.keyPrefix = r, i } }, { key: "t", value: function () { var e; return this.translator && (e = this.translator).translate.apply(e, arguments) } }, { key: "exists", value: function () { var e; return this.translator && (e = this.translator).exists.apply(e, arguments) } }, { key: "setDefaultNamespace", value: function (e) { this.options.defaultNS = e } }, { key: "hasLoadedNamespace", value: function (e) { var t = this, n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}; if (!this.isInitialized) return this.logger.warn("hasLoadedNamespace: i18next was not initialized", this.languages), !1; if (!this.languages || !this.languages.length) return this.logger.warn("hasLoadedNamespace: i18n.languages were undefined or empty", this.languages), !1; var r = this.resolvedLanguage || this.languages[0], o = !!this.options && this.options.fallbackLng, i = this.languages[this.languages.length - 1]; if ("cimode" === r.toLowerCase()) return !0; var a = function (e, n) { var r = t.services.backendConnector.state["".concat(e, "|").concat(n)]; return -1 === r || 2 === r }; if (n.precheck) { var s = n.precheck(this, a); if (void 0 !== s) return s } return !!this.hasResourceBundle(r, e) || (!(this.services.backendConnector.backend && (!this.options.resources || this.options.partialBundledLanguages)) || !(!a(r, e) || o && !a(i, e))) } }, { key: "loadNamespaces", value: function (e, t) { var n = this, r = d(); return this.options.ns ? ("string" == typeof e && (e = [e]), e.forEach(function (e) { n.options.ns.indexOf(e) < 0 && n.options.ns.push(e) }), this.loadResources(function (e) { r.resolve(), t && t(e) }), r) : (t && t(), Promise.resolve()) } }, { key: "loadLanguages", value: function (e, t) { var n = d(); "string" == typeof e && (e = [e]); var r = this.options.preload || [], o = e.filter(function (e) { return r.indexOf(e) < 0 }); return o.length ? (this.options.preload = r.concat(o), this.loadResources(function (e) { n.resolve(), t && t(e) }), n) : (t && t(), Promise.resolve()) } }, { key: "dir", value: function (e) { if (e || (e = this.resolvedLanguage || (this.languages && this.languages.length > 0 ? this.languages[0] : this.language)), !e) return "rtl"; return ["ar", "shu", "sqr", "ssh", "xaa", "yhd", "yud", "aao", "abh", "abv", "acm", "acq", "acw", "acx", "acy", "adf", "ads", "aeb", "aec", "afb", "ajp", "apc", "apd", "arb", "arq", "ars", "ary", "arz", "auz", "avl", "ayh", "ayl", "ayn", "ayp", "bbz", "pga", "he", "iw", "ps", "pbt", "pbu", "pst", "prp", "prd", "ug", "ur", "ydd", "yds", "yih", "ji", "yi", "hbo", "men", "xmn", "fa", "jpr", "peo", "pes", "prs", "dv", "sam", "ckb"].indexOf(this.services.languageUtils.getLanguagePartFromCode(e)) > -1 || e.toLowerCase().indexOf("-arab") > 1 ? "rtl" : "ltr" } }, { key: "cloneInstance", value: function () { var e = this, t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : ie, r = re(re(re({}, this.options), t), { isClone: !0 }), o = new u(r); return ["store", "services", "language"].forEach(function (t) { o[t] = e[t] }), o.services = re({}, this.services), o.services.utils = { hasLoadedNamespace: o.hasLoadedNamespace.bind(o) }, o.translator = new A(o.services, o.options), o.translator.on("*", function (e) { for (var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++)n[r - 1] = arguments[r]; o.emit.apply(o, [e].concat(n)) }), o.init(r, n), o.translator.options = o.options, o.translator.backendConnector.services.utils = { hasLoadedNamespace: o.hasLoadedNamespace.bind(o) }, o } }, { key: "toJSON", value: function () { return { options: this.options, store: this.store, language: this.language, languages: this.languages, resolvedLanguage: this.resolvedLanguage } } }]), u }(); c(ae, "createInstance", function () { var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, t = arguments.length > 1 ? arguments[1] : void 0; return new ae(e, t) }); var se = ae.createInstance(); return se.createInstance = ae.createInstance, se });


//Included:lib/011.vue-i18next-v0.15.2.js
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
        typeof define === 'function' && define.amd ? define(factory) :
            (global.VueI18next = factory());
}(this, (function () {
    'use strict';

    var isMergeableObject = function isMergeableObject(value) {
        return isNonNullObject(value)
            && !isSpecial(value)
    };

    function isNonNullObject(value) {
        return !!value && typeof value === 'object'
    }

    function isSpecial(value) {
        var stringValue = Object.prototype.toString.call(value);

        return stringValue === '[object RegExp]'
            || stringValue === '[object Date]'
            || isReactElement(value)
    }

    // see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
    var canUseSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;

    function isReactElement(value) {
        return value.$$typeof === REACT_ELEMENT_TYPE
    }

    function emptyTarget(val) {
        return Array.isArray(val) ? [] : {}
    }

    function cloneUnlessOtherwiseSpecified(value, options) {
        return (options.clone !== false && options.isMergeableObject(value))
            ? deepmerge(emptyTarget(value), value, options)
            : value
    }

    function defaultArrayMerge(target, source, options) {
        return target.concat(source).map(function (element) {
            return cloneUnlessOtherwiseSpecified(element, options)
        })
    }

    function mergeObject(target, source, options) {
        var destination = {};
        if (options.isMergeableObject(target)) {
            Object.keys(target).forEach(function (key) {
                destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
            });
        }
        Object.keys(source).forEach(function (key) {
            if (!options.isMergeableObject(source[key]) || !target[key]) {
                destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
            } else {
                destination[key] = deepmerge(target[key], source[key], options);
            }
        });
        return destination
    }

    function deepmerge(target, source, options) {
        options = options || {};
        options.arrayMerge = options.arrayMerge || defaultArrayMerge;
        options.isMergeableObject = options.isMergeableObject || isMergeableObject;

        var sourceIsArray = Array.isArray(source);
        var targetIsArray = Array.isArray(target);
        var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;

        if (!sourceAndTargetTypesMatch) {
            return cloneUnlessOtherwiseSpecified(source, options)
        } else if (sourceIsArray) {
            return options.arrayMerge(target, source, options)
        } else {
            return mergeObject(target, source, options)
        }
    }

    deepmerge.all = function deepmergeAll(array, options) {
        if (!Array.isArray(array)) {
            throw new Error('first argument should be an array')
        }

        return array.reduce(function (prev, next) {
            return deepmerge(prev, next, options)
        }, {})
    };

    var deepmerge_1 = deepmerge;

    var component = {
        name: 'i18next',
        functional: true,
        props: {
            tag: {
                type: String,
                default: 'span'
            },
            path: {
                type: String,
                required: true
            },
            options: {
                type: Object
            }
        },
        render: function render(h, ref) {
            var props = ref.props;
            var data = ref.data;
            var children = ref.children;
            var parent = ref.parent;

            var i18next = parent.$i18n;
            var $t = parent.$t.bind(parent);
            if (!i18next || !$t) {
                return h(props.tag, data, children);
            }

            var path = props.path;
            var options = props.options || {};

            var REGEXP = i18next.i18next.services.interpolator.regexp;
            var i18nextOptions = Object.assign({}, options,
                { interpolation: { prefix: '#$?', suffix: '?$#' } });
            var format = $t(path, i18nextOptions);
            var tchildren = [];

            format.split(REGEXP).reduce(function (memo, match, index) {
                var child;
                if (index % 2 === 0) {
                    if (match.length === 0) { return memo; }

                    child = match;
                } else {
                    var place = match.trim();
                    // eslint-disable-next-line no-restricted-globals
                    if (isNaN(parseFloat(place)) || !isFinite(place)) {
                        children.forEach(function (e) {
                            if (
                                !child &&
                                e.data.attrs &&
                                e.data.attrs.place &&
                                e.data.attrs.place === place
                            ) {
                                child = e;
                            }
                        });
                    } else {
                        child = children[parseInt(match, 10)];
                    }
                }

                memo.push(child);
                return memo;
            }, tchildren);

            return h(props.tag, data, tchildren);
        }
    };

    /* eslint-disable import/prefer-default-export */

    function log(message) {
        if (typeof console !== 'undefined') {
            console.warn(message); // eslint-disable-line no-console
        }
    }

    function warn(message) {
        log(("[vue-i18next warn]: " + message));
    }

    function deprecate(message) {
        log(("[vue-i18next deprecated]: " + message));
    }

    /* eslint-disable no-param-reassign, no-unused-vars */

    function equalLanguage(el, vnode) {
        var vm = vnode.context;
        return el._i18nLanguage === vm.$i18n.i18next.language;
    }

    function equalValue(value, oldValue) {
        if (value === oldValue) {
            return true;
        }
        if (value && oldValue) {
            return (
                value.path === oldValue.path &&
                value.language === oldValue.language &&
                value.args === oldValue.args
            );
        }
    }

    function assert(vnode) {
        var vm = vnode.context;

        if (!vm.$i18n) {
            warn('No VueI18Next instance found in the Vue instance');
            return false;
        }

        return true;
    }

    function parseValue(value) {
        var assign;

        var path;
        var language;
        var args;

        if (typeof value === 'string') {
            path = value;
        } else if (toString.call(value) === '[object Object]') {
            ((assign = value, path = assign.path, language = assign.language, args = assign.args));
        }

        return { path: path, language: language, args: args };
    }

    function t(el, binding, vnode) {
        var value = binding.value;

        var ref = parseValue(value);
        var path = ref.path;
        var language = ref.language;
        var args = ref.args;
        if (!path && !language && !args) {
            warn('v-t: invalid value');
            return;
        }

        if (!path) {
            warn('v-t: "path" is required');
            return;
        }

        if (language) {
            deprecate("v-t: \"language\" is deprecated.Use the \"lng\" property in args.\n      https://www.i18next.com/overview/configuration-options#configuration-options");
        }

        var vm = vnode.context;
        el.textContent = vm.$i18n.i18next.t(path, Object.assign({}, (language ? { lng: language } : {}),
            args));

        el._i18nLanguage = vm.$i18n.i18next.language;
    }

    function bind(el, binding, vnode) {
        if (!assert(vnode)) {
            return;
        }

        t(el, binding, vnode);
    }

    function update(el, binding, vnode, oldVNode) {
        if (equalLanguage(el, vnode) && equalValue(binding.value, binding.oldValue)) {
            return;
        }

        t(el, binding, vnode);
    }

    var directive = {
        bind: bind,
        update: update
    };

    /* eslint-disable no-param-reassign, no-unused-vars */

    function assert$1(vnode) {
        var vm = vnode.context;

        if (!vm.$i18n) {
            warn('No VueI18Next instance found in the Vue instance');
            return false;
        }

        return true;
    }

    function waitForIt(el, vnode) {
        if (vnode.context.$i18n.i18next.isInitialized) {
            el.hidden = false;
        } else {
            el.hidden = true;
            var initialized = function () {
                vnode.context.$forceUpdate();
                // due to emitter removing issue in i18next we need to delay remove
                setTimeout(function () {
                    if (vnode.context && vnode.context.$i18n) {
                        vnode.context.$i18n.i18next.off('initialized', initialized);
                    }
                }, 1000);
            };
            vnode.context.$i18n.i18next.on('initialized', initialized);
        }
    }

    function bind$1(el, binding, vnode) {
        if (!assert$1(vnode)) {
            return;
        }

        waitForIt(el, vnode);
    }

    function update$1(el, binding, vnode, oldVNode) {
        if (vnode.context.$i18n.i18next.isInitialized) {
            el.hidden = false;
        }
    }

    var waitDirective = {
        bind: bind$1,
        update: update$1
    };

    /* eslint-disable import/no-mutable-exports */

    var Vue;

    function install(_Vue) {
        if (install.installed) {
            return;
        }
        install.installed = true;

        Vue = _Vue;

        var getByKey = function (i18nOptions, i18nextOptions) {
            return function (key) {
                if (
                    i18nOptions &&
                    i18nOptions.keyPrefix &&
                    !key.includes(i18nextOptions.nsSeparator)
                ) {
                    return ((i18nOptions.keyPrefix) + "." + key);
                }
                return key;
            };
        };

        var getComponentNamespace = function (vm) {
            var namespace = vm.$options.name || vm.$options._componentTag;
            if (namespace) {
                return {
                    namespace: namespace,
                    loadNamespace: true
                };
            }

            return {
                namespace: ("" + (Math.random()))
            };
        };

        Vue.mixin({
            beforeCreate: function beforeCreate() {
                var this$1 = this;

                var options = this.$options;
                if (options.i18n) {
                    this._i18n = options.i18n;
                } else if (options.parent && options.parent.$i18n) {
                    this._i18n = options.parent.$i18n;
                }
                var inlineTranslations = {};

                if (this._i18n) {
                    var getNamespace =
                        this._i18n.options.getComponentNamespace || getComponentNamespace;
                    var ref = getNamespace(this);
                    var namespace = ref.namespace;
                    var loadNamespace = ref.loadNamespace;

                    if (options.__i18n) {
                        options.__i18n.forEach(function (resource) {
                            inlineTranslations = deepmerge_1(
                                inlineTranslations,
                                JSON.parse(resource)
                            );
                        });
                    }

                    if (options.i18nOptions) {
                        var ref$1 = this.$options.i18nOptions;
                        var lng = ref$1.lng; if (lng === void 0) lng = null;
                        var keyPrefix = ref$1.keyPrefix; if (keyPrefix === void 0) keyPrefix = null;
                        var messages = ref$1.messages;
                        var ref$2 = this.$options.i18nOptions;
                        var namespaces = ref$2.namespaces;
                        namespaces = namespaces || this._i18n.i18next.options.defaultNS;

                        if (typeof namespaces === 'string') { namespaces = [namespaces]; }
                        var namespacesToLoad = namespaces.concat([namespace]);

                        if (messages) {
                            inlineTranslations = deepmerge_1(inlineTranslations, messages);
                        }

                        this._i18nOptions = { lng: lng, namespaces: namespacesToLoad, keyPrefix: keyPrefix };
                        this._i18n.i18next.loadNamespaces(namespaces);
                    } else if (options.parent && options.parent._i18nOptions) {
                        this._i18nOptions = Object.assign({}, options.parent._i18nOptions);
                        this._i18nOptions.namespaces = [
                            namespace].concat(this._i18nOptions.namespaces
                            );
                    } else if (options.__i18n) {
                        this._i18nOptions = { namespaces: [namespace] };
                    }

                    if (loadNamespace && this._i18n.options.loadComponentNamespace) {
                        this._i18n.i18next.loadNamespaces([namespace]);
                    }

                    var languages = Object.keys(inlineTranslations);
                    languages.forEach(function (lang) {
                        this$1._i18n.i18next.addResourceBundle(
                            lang,
                            namespace,
                            Object.assign({}, inlineTranslations[lang]),
                            true,
                            false
                        );
                    });
                }

                var getKey = getByKey(
                    this._i18nOptions,
                    this._i18n ? this._i18n.i18next.options : {}
                );

                if (this._i18nOptions && this._i18nOptions.namespaces) {
                    var ref$3 = this._i18nOptions;
                    var lng$1 = ref$3.lng;
                    var namespaces$1 = ref$3.namespaces;

                    var fixedT = this._i18n.i18next.getFixedT(lng$1, namespaces$1);
                    this._getI18nKey = function (key, i18nextOptions) { return fixedT(getKey(key), i18nextOptions, this$1._i18n.i18nLoadedAt); };
                } else {
                    this._getI18nKey = function (key, i18nextOptions) { return this$1._i18n.t(getKey(key), i18nextOptions, this$1._i18n.i18nLoadedAt); };
                }
            }
        });

        // extend Vue.js
        if (!Object.prototype.hasOwnProperty.call(Vue.prototype, '$i18n')) {
            Object.defineProperty(Vue.prototype, '$i18n', {
                get: function get() {
                    return this._i18n;
                }
            });
        }

        Vue.prototype.$t = function t(key, options) {
            return this._getI18nKey(key, options);
        };

        Vue.component(component.name, component);
        Vue.directive('t', directive);
        Vue.directive('waitForT', waitDirective);
    }

    var VueI18n = function VueI18n(i18next, opts) {
        if (opts === void 0) opts = {};

        var options = Object.assign({}, {
            bindI18n: 'languageChanged loaded',
            bindStore: 'added removed',
            loadComponentNamespace: false
        },
            opts);

        this._vm = null;
        this.i18next = i18next;
        this.options = options;

        this.onI18nChanged = this.onI18nChanged.bind(this);

        if (options.bindI18n) {
            this.i18next.on(options.bindI18n, this.onI18nChanged);
        }
        if (options.bindStore && this.i18next.store) {
            this.i18next.store.on(options.bindStore, this.onI18nChanged);
        }

        this.resetVM({ i18nLoadedAt: new Date() });
    };

    var prototypeAccessors = { i18nLoadedAt: { configurable: true } };

    VueI18n.prototype.resetVM = function resetVM(data) {
        var oldVM = this._vm;
        var ref = Vue.config;
        var silent = ref.silent;
        Vue.config.silent = true;
        this._vm = new Vue({ data: data });
        Vue.config.silent = silent;
        if (oldVM) {
            Vue.nextTick(function () { return oldVM.$destroy(); });
        }
    };

    prototypeAccessors.i18nLoadedAt.get = function () {
        return this._vm.$data.i18nLoadedAt;
    };

    prototypeAccessors.i18nLoadedAt.set = function (date) {
        this._vm.$set(this._vm, 'i18nLoadedAt', date);
    };

    VueI18n.prototype.t = function t(key, options) {
        return this.i18next.t(key, options);
    };

    VueI18n.prototype.onI18nChanged = function onI18nChanged() {
        this.i18nLoadedAt = new Date();
    };

    Object.defineProperties(VueI18n.prototype, prototypeAccessors);

    VueI18n.install = install;
    VueI18n.version = "0.15.2";

    /* istanbul ignore if */
    if (typeof window !== 'undefined' && window.Vue) {
        window.Vue.use(VueI18n);
    }

    return VueI18n;

})));


//Included:lib/012.ranas-db-v0.0.1.part.js
(() => { var t = { 363: function (t) { t.exports = function () { class t { static that(...t) { return new this(...t) } constructor(t, n = "?", e = "xxxxx") { this.target = t, this.targetID = n, this.errorID = e, this.and = this } equals(t, n) { if (this.target === t) return this; throw new Error("Expected <" + this.targetID + "> to equal <" + (n || t) + "> [ERROR:" + this.errorID + "]") } isUndefined() { if (void 0 === this.target) return this; throw new Error("Expected <" + this.targetID + "> to be undefined [ERROR:" + this.errorID + "]") } isNotUndefined() { if (void 0 !== this.target) return this; throw new Error("Expected <" + this.targetID + "> to not be undefined [ERROR:" + this.errorID + "]") } isNumber() { if ("number" == typeof this.target) return this; throw new Error("Expected <" + this.targetID + "> to be a number [ERROR:" + this.errorID + "]") } isString() { if ("string" == typeof this.target) return this; throw new Error("Expected <" + this.targetID + "> to be a string [ERROR:" + this.errorID + "]") } isObject() { if ("object" == typeof this.target) return this; throw new Error("Expected <" + this.targetID + "> to be an object [ERROR:" + this.errorID + "]") } isFunction() { if ("function" == typeof this.target) return this; throw new Error("Expected <" + this.targetID + "> to be a function [ERROR:" + this.errorID + "]") } isArray() { if (Array.isArray(this.target)) return this; throw new Error("Expected <" + this.targetID + "> to be an array [ERROR:" + this.errorID + "]") } isGreaterThan(t, n) { try { if (this.target > t) return this } catch (e) { throw new Error("Expected <" + this.targetID + "> to be -comparable as- greater than <" + (n || t) + "> [ERROR:" + this.errorID + "]") } throw new Error("Expected <" + this.targetID + "> to be greater than <" + (n || t) + "> [ERROR:" + this.errorID + "]") } isLowerThan(t, n) { try { if (this.target < t) return this } catch (e) { throw new Error("Expected <" + this.targetID + "> to be -comparable as- lower than <" + (n || t) + "> [ERROR:" + this.errorID + "]") } throw new Error("Expected <" + this.targetID + "> to be lower than <" + (n || t) + "> [ERROR:" + this.errorID + "]") } isInstanceOf(t, n = !1) { try { if (this.target instanceof t) return this } catch (e) { throw new Error("Expected <" + this.targetID + "> to be -comparable as- instance of <" + (n || t) + "> [ERROR:" + this.errorID + "]") } throw new Error("Expected <" + this.targetID + "> to be an instance of <" + (n || t) + "> [ERROR:" + this.errorID + "]") } isDate() { try { if (this.target instanceof Date) return this } catch (t) { throw new Error("Expected <" + this.targetID + "> to be -comparable as- a date [ERROR:" + this.errorID + "]") } throw new Error("Expected <" + this.targetID + "> to be a date [ERROR:" + this.errorID + "]") } hasLengthGreaterThan(t, n) { try { if (this.target.length > t) return this } catch (e) { throw new Error("Expected <" + this.targetID + "> to have a length -comparable as- greater than <" + (n || t) + "> [ERROR:" + this.errorID + "]") } throw new Error("Expected <" + this.targetID + "> to have a length greater than <" + (n || t) + "> [ERROR:" + this.errorID + "]") } hasLengthLowerThan(t, n) { try { if (this.target.length < t) return this } catch (e) { throw new Error("Expected <" + this.targetID + "> to have a length -comparable as- lower than <" + (n || t) + "> [ERROR:" + this.errorID + "]") } throw new Error("Expected <" + this.targetID + "> to have a length lower than <" + (n || t) + "> [ERROR:" + this.errorID + "]") } can(t, n = "?") { try { if ("function" == typeof t && !0 === t(this.target, this)) return this } catch (t) { throw new Error("Expected <" + this.targetID + "> to -be called and to- be able to <" + n + "> [ERROR:" + this.errorID + "]") } throw new Error("Expected <" + this.targetID + "> to be able to <" + n + "> [ERROR:" + this.errorID + "]") } cannot(t, n = "?") { try { if ("function" == typeof t && !1 === t(this.target, this)) return this } catch (t) { throw new Error("Expected <" + this.targetID + "> to -be called and to- not be able to <" + n + "> [ERROR:" + this.errorID + "]") } throw new Error("Expected <" + this.targetID + "> to not be able to <" + n + "> [ERROR:" + this.errorID + "]") } throwsOn(t, n = "?") { if ("function" == typeof t) { try { t(this.target, this) } catch (t) { return this } throw new Error("Expected <" + this.targetID + "> to throw errors on <" + n + "> [ERROR:" + this.errorID + "]") } throw new Error("Expected <" + this.targetID + "> to -be called and to- throw errors on <" + n + "> [ERROR:" + this.errorID + "]") } doesNotThrowOn(t, n = "?") { try { if ("function" == typeof t) return t(this.target, this), this } catch (t) { throw new Error("Expected <" + this.targetID + "> to not throw errors on <" + n + "> [ERROR:" + this.errorID + "]") } throw new Error("Expected <" + this.targetID + "> to -be called and to- not throw errors on <" + n + "> [ERROR:" + this.errorID + "]") } } return t.default = t, t }() }, 534: function (t, n, e) { t.exports = function (t) { "use strict"; t = "default" in t ? t.default : t; var n = function (t) { this.schema = t }; function e(t) { return null != t && ("string" == typeof t || "number" == typeof t || t instanceof Date || Array.isArray(t) && t.every(e)) } n.prototype.getForeignKeys = function () { var t = this, n = {}; return Object.keys(this.schema).forEach((function (e) { var r = t.schema[e].split(","); n[e] = r.filter((function (t) { return -1 !== t.indexOf("->") })).map((function (t) { var n = t.split("->").map((function (t) { return t.trim() })), e = n[0], r = n[1]; return { index: e, targetTable: r.split(".")[0], targetIndex: r.split(".")[1] } })) })), n }, n.prototype.getCleanedSchema = function () { var t = this, n = {}; return Object.keys(this.schema).forEach((function (e) { var r = t.schema[e].split(","); n[e] = r.map((function (t) { return t.split("->")[0].trim() })).join(",") })), n }; var r = function (r) { var i = t.Promise; r.Table.prototype.with = function (t) { return this.toCollection().with(t) }, r.Collection.prototype.with = function (t) { var n = this, o = this._ctx.table.name, a = r._allTables, u = []; return Object.keys(t).forEach((function (e) { var r = t[e], i = n._ctx.table.schema.idxByName[r]; if (i && i.hasOwnProperty("foreignKey")) { var s = i; u.push({ column: e, index: s.foreignKey.targetIndex, tableName: s.foreignKey.targetTable, targetIndex: s.foreignKey.index, oneToOne: !0 }) } else { var c = r; if (!a.hasOwnProperty(c)) throw new Error("Relationship table " + c + " doesn't exist."); if (!a[c].schema.hasOwnProperty("foreignKeys")) throw new Error("Relationship table " + c + " doesn't have foreign keys set."); var f = a[c].schema.foreignKeys.filter((function (t) { return t.targetTable === o })); f.length > 0 && u.push({ column: e, index: f[0].index, tableName: c, targetIndex: f[0].targetIndex }) } })), this.toArray().then((function (t) { var n = u.map((function (n) { var r = n.tableName, i = t.map((function (t) { return t[n.targetIndex] })).filter(e); return a[r].where(n.index).anyOf(i) })).map((function (t) { return t.toArray() })); return i.all(n).then((function (n) { u.forEach((function (e, r) { var i = e.tableName, a = n[r], u = e.targetIndex, s = e.index, c = e.column, f = {}; a.forEach((function (t) { var n = t[s]; e.oneToOne ? f[n] = t : (f[n] = f[n] || []).push(t) })), t.forEach((function (t) { var n = t[u], e = f[n] || []; if (null != n && !e) throw new Error("Could not lookup foreign key where " + i + "." + s + " == " + o + "." + c + ". The content of the failing key was: " + JSON.stringify(n) + "."); Object.defineProperty(t, c, { value: e, enumerable: !1, configurable: !0, writable: !0 }) })) })) })).then((function () { return t })) })) }, r.Version.prototype._parseStoresSpec = t.override(r.Version.prototype._parseStoresSpec, (function (t) { return function (e, r) { var i = new n(e), o = i.getForeignKeys(), a = t.call(this, i.getCleanedSchema(), r); return Object.keys(r).forEach((function (t) { o.hasOwnProperty(t) && (r[t].foreignKeys = o[t], o[t].forEach((function (n) { r[t].idxByName[n.index].foreignKey = n }))) })), a } })) }; return r.default = r, r }(e(128)) }, 128: (t, n, e) => { "use strict"; e.r(n), e.d(n, { default: () => Mn }); var r = Object.keys, i = Array.isArray, o = "undefined" != typeof self ? self : "undefined" != typeof window ? window : e.g; function a(t, n) { return "object" != typeof n || r(n).forEach((function (e) { t[e] = n[e] })), t } var u = Object.getPrototypeOf, s = {}.hasOwnProperty; function c(t, n) { return s.call(t, n) } function f(t, n) { "function" == typeof n && (n = n(u(t))), r(n).forEach((function (e) { l(t, e, n[e]) })) } var h = Object.defineProperty; function l(t, n, e, r) { h(t, n, a(e && c(e, "get") && "function" == typeof e.get ? { get: e.get, set: e.set, configurable: !0 } : { value: e, configurable: !0, writable: !0 }, r)) } function d(t) { return { from: function (n) { return t.prototype = Object.create(n.prototype), l(t.prototype, "constructor", t), { extend: f.bind(null, t.prototype) } } } } var p = Object.getOwnPropertyDescriptor; function v(t, n) { var e; return p(t, n) || (e = u(t)) && v(e, n) } var g = [].slice; function y(t, n, e) { return g.call(t, n, e) } function m(t, n) { return n(t) } function b(t) { if (!t) throw new Error("Assertion Failed") } function w(t) { o.setImmediate ? setImmediate(t) : setTimeout(t, 0) } function _(t, n) { return t.reduce((function (t, e, r) { var i = n(e, r); return i && (t[i[0]] = i[1]), t }), {}) } function x(t, n, e) { try { t.apply(null, e) } catch (t) { n && n(t) } } function E(t, n) { if (c(t, n)) return t[n]; if (!n) return t; if ("string" != typeof n) { for (var e = [], r = 0, i = n.length; r < i; ++r) { var o = E(t, n[r]); e.push(o) } return e } var a = n.indexOf("."); if (-1 !== a) { var u = t[n.substr(0, a)]; return void 0 === u ? void 0 : E(u, n.substr(a + 1)) } } function k(t, n, e) { if (t && void 0 !== n && (!("isFrozen" in Object) || !Object.isFrozen(t))) if ("string" != typeof n && "length" in n) { b("string" != typeof e && "length" in e); for (var r = 0, i = n.length; r < i; ++r)k(t, n[r], e[r]) } else { var o = n.indexOf("."); if (-1 !== o) { var a = n.substr(0, o), u = n.substr(o + 1); if ("" === u) void 0 === e ? delete t[a] : t[a] = e; else { var s = t[a]; s || (s = t[a] = {}), k(s, u, e) } } else void 0 === e ? delete t[n] : t[n] = e } } function D(t) { var n = {}; for (var e in t) c(t, e) && (n[e] = t[e]); return n } var I = [].concat; function O(t) { return I.apply([], t) } var R = "Boolean,String,Date,RegExp,Blob,File,FileList,ArrayBuffer,DataView,Uint8ClampedArray,ImageData,Map,Set".split(",").concat(O([8, 16, 32, 64].map((function (t) { return ["Int", "Uint", "Float"].map((function (n) { return n + t + "Array" })) })))).filter((function (t) { return o[t] })).map((function (t) { return o[t] })); function j(t) { if (!t || "object" != typeof t) return t; var n; if (i(t)) { n = []; for (var e = 0, r = t.length; e < r; ++e)n.push(j(t[e])) } else if (R.indexOf(t.constructor) >= 0) n = t; else for (var o in n = t.constructor ? Object.create(t.constructor.prototype) : {}, t) c(t, o) && (n[o] = j(t[o])); return n } function P(t, n, e, i) { return e = e || {}, i = i || "", r(t).forEach((function (r) { if (c(n, r)) { var o = t[r], a = n[r]; "object" == typeof o && "object" == typeof a && o && a && "" + o.constructor == "" + a.constructor ? P(o, a, e, i + r + ".") : o !== a && (e[i + r] = n[r]) } else e[i + r] = void 0 })), r(n).forEach((function (r) { c(t, r) || (e[i + r] = n[r]) })), e } var S = "undefined" != typeof Symbol && Symbol.iterator, A = S ? function (t) { var n; return null != t && (n = t[S]) && n.apply(t) } : function () { return null }, T = {}; function C(t) { var n, e, r, o; if (1 === arguments.length) { if (i(t)) return t.slice(); if (this === T && "string" == typeof t) return [t]; if (o = A(t)) { for (e = []; !(r = o.next()).done;)e.push(r.value); return e } if (null == t) return [t]; if ("number" == typeof (n = t.length)) { for (e = new Array(n); n--;)e[n] = t[n]; return e } return [t] } for (n = arguments.length, e = new Array(n); n--;)e[n] = arguments[n]; return e } var K = "undefined" != typeof location && /^(http|https):\/\/(localhost|127\.0\.0\.1)/.test(location.href); function B(t, n) { K = t, F = n } var F = function () { return !0 }, N = !new Error("").stack; function M() { if (N) try { throw M.arguments, new Error } catch (t) { return t } return new Error } function q(t, n) { var e = t.stack; return e ? (n = n || 0, 0 === e.indexOf(t.name) && (n += (t.name + t.message).split("\n").length), e.split("\n").slice(n).filter(F).map((function (t) { return "\n" + t })).join("")) : "" } var U = ["Unknown", "Constraint", "Data", "TransactionInactive", "ReadOnly", "Version", "NotFound", "InvalidState", "InvalidAccess", "Abort", "Timeout", "QuotaExceeded", "Syntax", "DataClone"], L = ["Modify", "Bulk", "OpenFailed", "VersionChange", "Schema", "Upgrade", "InvalidTable", "MissingAPI", "NoSuchDatabase", "InvalidArgument", "SubTransaction", "Unsupported", "Internal", "DatabaseClosed", "PrematureCommit", "ForeignAwait"].concat(U), V = { VersionChanged: "Database version changed by other database connection", DatabaseClosed: "Database has been closed", Abort: "Transaction aborted", TransactionInactive: "Transaction has already completed or failed" }; function z(t, n) { this._e = M(), this.name = t, this.message = n } function W(t, n, e, r) { this._e = M(), this.failures = n, this.failedKeys = r, this.successCount = e } function $(t, n) { this._e = M(), this.name = "BulkError", this.failures = n, this.message = function (t, n) { return t + ". Errors: " + n.map((function (t) { return t.toString() })).filter((function (t, n, e) { return e.indexOf(t) === n })).join("\n") }(t, n) } d(z).from(Error).extend({ stack: { get: function () { return this._stack || (this._stack = this.name + ": " + this.message + q(this._e, 2)) } }, toString: function () { return this.name + ": " + this.message } }), d(W).from(z), d($).from(z); var G = L.reduce((function (t, n) { return t[n] = n + "Error", t }), {}), Q = z, H = L.reduce((function (t, n) { var e = n + "Error"; function r(t, r) { this._e = M(), this.name = e, t ? "string" == typeof t ? (this.message = t, this.inner = r || null) : "object" == typeof t && (this.message = t.name + " " + t.message, this.inner = t) : (this.message = V[n] || e, this.inner = null) } return d(r).from(Q), t[n] = r, t }), {}); H.Syntax = SyntaxError, H.Type = TypeError, H.Range = RangeError; var J = U.reduce((function (t, n) { return t[n + "Error"] = H[n], t }), {}), Y = L.reduce((function (t, n) { return -1 === ["Syntax", "Type", "Range"].indexOf(n) && (t[n + "Error"] = H[n]), t }), {}); function X() { } function Z(t) { return t } function tt(t, n) { return null == t || t === Z ? n : function (e) { return n(t(e)) } } function nt(t, n) { return function () { t.apply(this, arguments), n.apply(this, arguments) } } function et(t, n) { return t === X ? n : function () { var e = t.apply(this, arguments); void 0 !== e && (arguments[0] = e); var r = this.onsuccess, i = this.onerror; this.onsuccess = null, this.onerror = null; var o = n.apply(this, arguments); return r && (this.onsuccess = this.onsuccess ? nt(r, this.onsuccess) : r), i && (this.onerror = this.onerror ? nt(i, this.onerror) : i), void 0 !== o ? o : e } } function rt(t, n) { return t === X ? n : function () { t.apply(this, arguments); var e = this.onsuccess, r = this.onerror; this.onsuccess = this.onerror = null, n.apply(this, arguments), e && (this.onsuccess = this.onsuccess ? nt(e, this.onsuccess) : e), r && (this.onerror = this.onerror ? nt(r, this.onerror) : r) } } function it(t, n) { return t === X ? n : function (e) { var r = t.apply(this, arguments); a(e, r); var i = this.onsuccess, o = this.onerror; this.onsuccess = null, this.onerror = null; var u = n.apply(this, arguments); return i && (this.onsuccess = this.onsuccess ? nt(i, this.onsuccess) : i), o && (this.onerror = this.onerror ? nt(o, this.onerror) : o), void 0 === r ? void 0 === u ? void 0 : u : a(r, u) } } function ot(t, n) { return t === X ? n : function () { return !1 !== n.apply(this, arguments) && t.apply(this, arguments) } } function at(t, n) { return t === X ? n : function () { var e = t.apply(this, arguments); if (e && "function" == typeof e.then) { for (var r = this, i = arguments.length, o = new Array(i); i--;)o[i] = arguments[i]; return e.then((function () { return n.apply(r, o) })) } return n.apply(this, arguments) } } Y.ModifyError = W, Y.DexieError = z, Y.BulkError = $; var ut = {}, st = function () { try { return new Function("let F=async ()=>{},p=F();return [p,Object.getPrototypeOf(p),Promise.resolve(),F.constructor];")() } catch (n) { var t = o.Promise; return t ? [t.resolve(), t.prototype, t.resolve()] : [] } }(), ct = st[0], ft = st[1], ht = st[2], lt = ft && ft.then, dt = ct && ct.constructor, pt = st[3], vt = !!ht, gt = !1, yt = ht ? function () { ht.then(qt) } : o.setImmediate ? setImmediate.bind(null, qt) : o.MutationObserver ? function () { var t = document.createElement("div"); new MutationObserver((function () { qt(), t = null })).observe(t, { attributes: !0 }), t.setAttribute("i", "1") } : function () { setTimeout(qt, 0) }, mt = function (t, n) { Ot.push([t, n]), wt && (yt(), wt = !1) }, bt = !0, wt = !0, _t = [], xt = [], Et = null, kt = Z, Dt = { id: "global", global: !0, ref: 0, unhandleds: [], onunhandled: hn, pgp: !1, env: {}, finalize: function () { this.unhandleds.forEach((function (t) { try { hn(t[0], t[1]) } catch (t) { } })) } }, It = Dt, Ot = [], Rt = 0, jt = []; function Pt(t) { if ("object" != typeof this) throw new TypeError("Promises must be constructed via new"); this._listeners = [], this.onuncatched = X, this._lib = !1; var n = this._PSD = It; if (K && (this._stackHolder = M(), this._prev = null, this._numPrev = 0), "function" != typeof t) { if (t !== ut) throw new TypeError("Not a function"); return this._state = arguments[1], this._value = arguments[2], void (!1 === this._state && Ct(this, this._value)) } this._state = null, this._value = null, ++n.ref, Tt(this, t) } var St = { get: function () { var t = It, n = Jt; function e(e, r) { var i = this, o = !t.global && (t !== It || n !== Jt); o && tn(); var a = new Pt((function (n, a) { Bt(i, new At(sn(e, t, o), sn(r, t, o), n, a, t)) })); return K && Mt(a, this), a } return e.prototype = ut, e }, set: function (t) { l(this, "then", t && t.prototype === ut ? St : { get: function () { return t }, set: St.set }) } }; function At(t, n, e, r, i) { this.onFulfilled = "function" == typeof t ? t : null, this.onRejected = "function" == typeof n ? n : null, this.resolve = e, this.reject = r, this.psd = i } function Tt(t, n) { try { n((function (n) { if (null === t._state) { if (n === t) throw new TypeError("A promise cannot be resolved with itself."); var e = t._lib && Ut(); n && "function" == typeof n.then ? Tt(t, (function (t, e) { n instanceof Pt ? n._then(t, e) : n.then(t, e) })) : (t._state = !0, t._value = n, Kt(t)), e && Lt() } }), Ct.bind(null, t)) } catch (n) { Ct(t, n) } } function Ct(t, n) { if (xt.push(n), null === t._state) { var e = t._lib && Ut(); n = kt(n), t._state = !1, t._value = n, K && null !== n && "object" == typeof n && !n._promise && x((function () { var e = v(n, "stack"); n._promise = t, l(n, "stack", { get: function () { return gt ? e && (e.get ? e.get.apply(n) : e.value) : t.stack } }) })), function (t) { _t.some((function (n) { return n._value === t._value })) || _t.push(t) }(t), Kt(t), e && Lt() } } function Kt(t) { var n = t._listeners; t._listeners = []; for (var e = 0, r = n.length; e < r; ++e)Bt(t, n[e]); var i = t._PSD; --i.ref || i.finalize(), 0 === Rt && (++Rt, mt((function () { 0 == --Rt && Vt() }), [])) } function Bt(t, n) { if (null !== t._state) { var e = t._state ? n.onFulfilled : n.onRejected; if (null === e) return (t._state ? n.resolve : n.reject)(t._value); ++n.psd.ref, ++Rt, mt(Ft, [e, t, n]) } else t._listeners.push(n) } function Ft(t, n, e) { try { Et = n; var r, i = n._value; n._state ? r = t(i) : (xt.length && (xt = []), r = t(i), -1 === xt.indexOf(i) && function (t) { for (var n = _t.length; n;)if (_t[--n]._value === t._value) return void _t.splice(n, 1) }(n)), e.resolve(r) } catch (t) { e.reject(t) } finally { Et = null, 0 == --Rt && Vt(), --e.psd.ref || e.psd.finalize() } } function Nt(t, n, e) { if (n.length === e) return n; var r = ""; if (!1 === t._state) { var i, o, a = t._value; null != a ? (i = a.name || "Error", o = a.message || a, r = q(a, 0)) : (i = a, o = ""), n.push(i + (o ? ": " + o : "") + r) } return K && ((r = q(t._stackHolder, 2)) && -1 === n.indexOf(r) && n.push(r), t._prev && Nt(t._prev, n, e)), n } function Mt(t, n) { var e = n ? n._numPrev + 1 : 0; e < 100 && (t._prev = n, t._numPrev = e) } function qt() { Ut() && Lt() } function Ut() { var t = bt; return bt = !1, wt = !1, t } function Lt() { var t, n, e; do { for (; Ot.length > 0;)for (t = Ot, Ot = [], e = t.length, n = 0; n < e; ++n) { var r = t[n]; r[0].apply(null, r[1]) } } while (Ot.length > 0); bt = !0, wt = !0 } function Vt() { var t = _t; _t = [], t.forEach((function (t) { t._PSD.onunhandled.call(null, t._value, t) })); for (var n = jt.slice(0), e = n.length; e;)n[--e]() } function zt(t) { return new Pt(ut, !1, t) } function Wt(t, n) { var e = It; return function () { var r = Ut(), i = It; try { return on(e, !0), t.apply(this, arguments) } catch (t) { n && n(t) } finally { on(i, !1), r && Lt() } } } f(Pt.prototype, { then: St, _then: function (t, n) { Bt(this, new At(null, null, t, n, It)) }, catch: function (t) { if (1 === arguments.length) return this.then(null, t); var n = arguments[0], e = arguments[1]; return "function" == typeof n ? this.then(null, (function (t) { return t instanceof n ? e(t) : zt(t) })) : this.then(null, (function (t) { return t && t.name === n ? e(t) : zt(t) })) }, finally: function (t) { return this.then((function (n) { return t(), n }), (function (n) { return t(), zt(n) })) }, stack: { get: function () { if (this._stack) return this._stack; try { gt = !0; var t = Nt(this, [], 20).join("\nFrom previous: "); return null !== this._state && (this._stack = t), t } finally { gt = !1 } } }, timeout: function (t, n) { var e = this; return t < 1 / 0 ? new Pt((function (r, i) { var o = setTimeout((function () { return i(new H.Timeout(n)) }), t); e.then(r, i).finally(clearTimeout.bind(null, o)) })) : this } }), "undefined" != typeof Symbol && Symbol.toStringTag && l(Pt.prototype, Symbol.toStringTag, "Promise"), Dt.env = an(), f(Pt, { all: function () { var t = C.apply(null, arguments).map(nn); return new Pt((function (n, e) { 0 === t.length && n([]); var r = t.length; t.forEach((function (i, o) { return Pt.resolve(i).then((function (e) { t[o] = e, --r || n(t) }), e) })) })) }, resolve: function (t) { if (t instanceof Pt) return t; if (t && "function" == typeof t.then) return new Pt((function (n, e) { t.then(n, e) })); var n = new Pt(ut, !0, t); return Mt(n, Et), n }, reject: zt, race: function () { var t = C.apply(null, arguments).map(nn); return new Pt((function (n, e) { t.map((function (t) { return Pt.resolve(t).then(n, e) })) })) }, PSD: { get: function () { return It }, set: function (t) { return It = t } }, newPSD: Xt, usePSD: un, scheduler: { get: function () { return mt }, set: function (t) { mt = t } }, rejectionMapper: { get: function () { return kt }, set: function (t) { kt = t } }, follow: function (t, n) { return new Pt((function (e, r) { return Xt((function (n, e) { var r = It; r.unhandleds = [], r.onunhandled = e, r.finalize = nt((function () { var t = this; jt.push((function r() { 0 === t.unhandleds.length ? n() : e(t.unhandleds[0]), jt.splice(jt.indexOf(r), 1) })), ++Rt, mt((function () { 0 == --Rt && Vt() }), []) }), r.finalize), t() }), n, e, r) })) } }); var $t = { awaits: 0, echoes: 0, id: 0 }, Gt = 0, Qt = [], Ht = 0, Jt = 0, Yt = 0; function Xt(t, n, e, r) { var i = It, o = Object.create(i); o.parent = i, o.ref = 0, o.global = !1, o.id = ++Yt; var u = Dt.env; o.env = vt ? { Promise: Pt, PromiseProp: { value: Pt, configurable: !0, writable: !0 }, all: Pt.all, race: Pt.race, resolve: Pt.resolve, reject: Pt.reject, nthen: cn(u.nthen, o), gthen: cn(u.gthen, o) } : {}, n && a(o, n), ++i.ref, o.finalize = function () { --this.parent.ref || this.parent.finalize() }; var s = un(o, t, e, r); return 0 === o.ref && o.finalize(), s } function Zt() { return $t.id || ($t.id = ++Gt), ++$t.awaits, $t.echoes += 7, $t.id } function tn(t) { !$t.awaits || t && t !== $t.id || (0 == --$t.awaits && ($t.id = 0), $t.echoes = 7 * $t.awaits) } function nn(t) { return $t.echoes && t && t.constructor === dt ? (Zt(), t.then((function (t) { return tn(), t }), (function (t) { return tn(), ln(t) }))) : t } function en(t) { ++Jt, $t.echoes && 0 != --$t.echoes || ($t.echoes = $t.id = 0), Qt.push(It), on(t, !0) } function rn() { var t = Qt[Qt.length - 1]; Qt.pop(), on(t, !1) } function on(t, n) { var e, r = It; if ((n ? !$t.echoes || Ht++ && t === It : !Ht || --Ht && t === It) || (e = n ? en.bind(null, t) : rn, lt.call(ct, e)), t !== It && (It = t, r === Dt && (Dt.env = an()), vt)) { var i = Dt.env.Promise, a = t.env; ft.then = a.nthen, i.prototype.then = a.gthen, (r.global || t.global) && (Object.defineProperty(o, "Promise", a.PromiseProp), i.all = a.all, i.race = a.race, i.resolve = a.resolve, i.reject = a.reject) } } function an() { var t = o.Promise; return vt ? { Promise: t, PromiseProp: Object.getOwnPropertyDescriptor(o, "Promise"), all: t.all, race: t.race, resolve: t.resolve, reject: t.reject, nthen: ft.then, gthen: t.prototype.then } : {} } function un(t, n, e, r, i) { var o = It; try { return on(t, !0), n(e, r, i) } finally { on(o, !1) } } function sn(t, n, e) { return "function" != typeof t ? t : function () { var r = It; e && Zt(), on(n, !0); try { return t.apply(this, arguments) } finally { on(r, !1) } } } function cn(t, n) { return function (e, r) { return t.call(this, sn(e, n, !1), sn(r, n, !1)) } } var fn = "unhandledrejection"; function hn(t, n) { var e; try { e = n.onuncatched(t) } catch (t) { } if (!1 !== e) try { var r, i = { promise: n, reason: t }; if (o.document && document.createEvent ? ((r = document.createEvent("Event")).initEvent(fn, !0, !0), a(r, i)) : o.CustomEvent && a(r = new CustomEvent(fn, { detail: i }), i), r && o.dispatchEvent && (dispatchEvent(r), !o.PromiseRejectionEvent && o.onunhandledrejection)) try { o.onunhandledrejection(r) } catch (t) { } r.defaultPrevented || console.warn("Unhandled rejection: " + (t.stack || t)) } catch (t) { } } var ln = Pt.reject; function dn(t) { var n = {}, e = function (e, r) { if (r) { for (var i = arguments.length, o = new Array(i - 1); --i;)o[i - 1] = arguments[i]; return n[e].subscribe.apply(null, o), t } if ("string" == typeof e) return n[e] }; e.addEventType = u; for (var o = 1, a = arguments.length; o < a; ++o)u(arguments[o]); return e; function u(t, r, i) { if ("object" == typeof t) return s(t); r || (r = ot), i || (i = X); var o = { subscribers: [], fire: i, subscribe: function (t) { -1 === o.subscribers.indexOf(t) && (o.subscribers.push(t), o.fire = r(o.fire, t)) }, unsubscribe: function (t) { o.subscribers = o.subscribers.filter((function (n) { return n !== t })), o.fire = o.subscribers.reduce(r, i) } }; return n[t] = e[t] = o, o } function s(t) { r(t).forEach((function (n) { var e = t[n]; if (i(e)) u(n, t[n][0], t[n][1]); else { if ("asap" !== e) throw new H.InvalidArgument("Invalid event config"); var r = u(n, Z, (function () { for (var t = arguments.length, n = new Array(t); t--;)n[t] = arguments[t]; r.subscribers.forEach((function (t) { w((function () { t.apply(null, n) })) })) })) } })) } } var pn, vn = "{version}", gn = String.fromCharCode(65535), yn = function () { try { return IDBKeyRange.only([[]]), [[]] } catch (t) { return gn } }(), mn = -1 / 0, bn = "Invalid key provided. Keys must be of type string, number, Date or Array<string | number | Date>.", wn = "String expected.", _n = [], xn = "undefined" != typeof navigator && /(MSIE|Trident|Edge)/.test(navigator.userAgent), En = xn, kn = xn, Dn = function (t) { return !/(dexie\.js|dexie\.min\.js)/.test(t) }; function In(t, n) { var e, u, s, h, d, p = In.dependencies, v = a({ addons: In.addons, autoOpen: !0, indexedDB: p.indexedDB, IDBKeyRange: p.IDBKeyRange }, n), g = v.addons, w = v.autoOpen, I = v.indexedDB, R = v.IDBKeyRange, S = this._dbSchema = {}, A = [], B = [], F = {}, N = null, U = null, L = !1, V = null, z = !1, G = "readonly", Q = "readwrite", J = this, Y = new Pt((function (t) { e = t })), nt = new Pt((function (t, n) { u = n })), ot = !0, ut = !!Nn(I); function st(t) { this._cfg = { version: t, storesSource: null, dbschema: {}, tables: {}, contentUpgrade: null }, this.stores({}) } function ct(t, n, e, r) { var i = t.db.createObjectStore(n, e.keyPath ? { keyPath: e.keyPath, autoIncrement: e.auto } : { autoIncrement: e.auto }); return r.forEach((function (t) { ft(i, t) })), i } function ft(t, n) { t.createIndex(n.name, n.keyPath, { unique: n.unique, multiEntry: n.multi }) } function ht(t, n, e) { if (z || It.letThrough) { var r = J._createTransaction(t, n, S); try { r.create() } catch (t) { return ln(t) } return r._promise(t, (function (t, n) { return Xt((function () { return It.trans = r, e(t, n, r) })) })).then((function (t) { return r._completion.then((function () { return t })) })) } if (!L) { if (!w) return ln(new H.DatabaseClosed); J.open().catch(X) } return Y.then((function () { return ht(t, n, e) })) } function lt(t, n, e) { var r = arguments.length; if (r < 2) throw new H.InvalidArgument("Too few arguments"); for (var i = new Array(r - 1); --r;)i[r - 1] = arguments[r]; e = i.pop(); var o = O(i); return [t, o, e] } function vt(t, n, e) { this.name = t, this.schema = n, this._tx = e, this.hook = F[t] ? F[t].hook : dn(null, { creating: [et, X], reading: [tt, Z], updating: [it, X], deleting: [rt, X] }) } function gt(t, n, e) { return (e ? An : Pn)((function (e) { t.push(e), n && n() })) } function yt(t, n, e, r, i) { return new Pt((function (o, a) { var u = e.length, s = u - 1; if (0 === u) return o(); if (r) { var c, f = An(a), h = jn(null); x((function () { for (var r = 0; r < u; ++r) { c = { onsuccess: null, onerror: null }; var a = e[r]; i.call(c, a[0], a[1], n); var l = t.delete(a[0]); l._hookCtx = c, l.onerror = f, l.onsuccess = r === s ? jn(o) : h } }), (function (t) { throw c.onerror && c.onerror(t), t })) } else for (var l = 0; l < u; ++l) { var d = t.delete(e[l]); d.onerror = Pn(a), l === s && (d.onsuccess = Wt((function () { return o() }))) } })) } function mt(t, n, e, r) { var i = this; this.db = J, this.mode = t, this.storeNames = n, this.idbtrans = null, this.on = dn(this, "complete", "error", "abort"), this.parent = r || null, this.active = !0, this._reculock = 0, this._blockedFuncs = [], this._resolve = null, this._reject = null, this._waitingFor = null, this._waitingQueue = null, this._spinCount = 0, this._completion = new Pt((function (t, n) { i._resolve = t, i._reject = n })), this._completion.then((function () { i.active = !1, i.on.complete.fire() }), (function (t) { var n = i.active; return i.active = !1, i.on.error.fire(t), i.parent ? i.parent._reject(t) : n && i.idbtrans && i.idbtrans.abort(), ln(t) })) } function bt(t, n, e) { this._ctx = { table: t, index: ":id" === n ? null : n, or: e } } function wt(t, n) { var e = null, r = null; if (n) try { e = n() } catch (t) { r = t } var i = t._ctx, o = i.table; this._ctx = { table: o, index: i.index, isPrimKey: !i.index || o.schema.primKey.keyPath && i.index === o.schema.primKey.name, range: e, keysOnly: !1, dir: "next", unique: "", algorithm: null, filter: null, replayFilter: null, justLimit: !0, isMatch: null, offset: 0, limit: 1 / 0, error: r, or: i.or, valueMapper: o.hook.reading.fire } } function _t(t, n) { return !(t.filter || t.algorithm || t.or) && (n ? t.justLimit : !t.replayFilter) } function xt(t, n) { return t._cfg.version - n._cfg.version } function Et(t, n, e) { n.forEach((function (n) { var r = e[n]; t.forEach((function (t) { n in t || (t === mt.prototype || t instanceof mt ? l(t, n, { get: function () { return this.table(n) } }) : t[n] = new vt(n, r)) })) })) } function kt(t, n, e, r, i, o) { var a = Wt(o ? function (t, n, r) { return e(o(t), n, r) } : e, i); t.onerror || (t.onerror = Pn(i)), t.onsuccess = function (t, n) { return function () { try { t.apply(this, arguments) } catch (t) { n(t) } } }(n ? function () { var e = t.result; if (e) { var o = function () { e.continue() }; n(e, (function (t) { o = t }), r, i) && a(e.value, e, (function (t) { o = t })), o() } else r() } : function () { var n = t.result; if (n) { var e = function () { n.continue() }; a(n.value, n, (function (t) { e = t })), e() } else r() }, i) } function Dt(t, n) { return I.cmp(t, n) } function Ot(t, n) { return Dt(t, n) > 0 ? t : n } function Rt(t, n) { return I.cmp(t, n) } function jt(t, n) { return I.cmp(n, t) } function St(t, n) { return t < n ? -1 : t === n ? 0 : 1 } function At(t, n) { return t > n ? -1 : t === n ? 0 : 1 } function Tt(t, n) { return t ? n ? function () { return t.apply(this, arguments) && n.apply(this, arguments) } : t : n } function Ct(t, n) { for (var e = n.db.objectStoreNames, r = 0; r < e.length; ++r) { var i = e[r], a = n.objectStore(i); s = "getAll" in a; for (var u = 0; u < a.indexNames.length; ++u) { var c = a.indexNames[u], f = a.index(c).keyPath, h = "string" == typeof f ? f : "[" + y(f).join("+") + "]"; if (t[i]) { var l = t[i].idxByName[h]; l && (l.name = c) } } } /Safari/.test(navigator.userAgent) && !/(Chrome\/|Edge\/)/.test(navigator.userAgent) && o.WorkerGlobalScope && o instanceof o.WorkerGlobalScope && [].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1] < 604 && (s = !1) } function Kt(t) { J.on("blocked").fire(t), _n.filter((function (t) { return t.name === J.name && t !== J && !t._vcFired })).map((function (n) { return n.on("versionchange").fire(t) })) } this.version = function (t) { if (N || L) throw new H.Schema("Cannot add version when database is open"); this.verno = Math.max(this.verno, t); var n = A.filter((function (n) { return n._cfg.version === t }))[0]; return n || (n = new st(t), A.push(n), A.sort(xt), ot = !1, n) }, a(st.prototype, { stores: function (t) { this._cfg.storesSource = this._cfg.storesSource ? a(this._cfg.storesSource, t) : t; var n = {}; A.forEach((function (t) { a(n, t._cfg.storesSource) })); var e = this._cfg.dbschema = {}; return this._parseStoresSpec(n, e), S = J._dbSchema = e, [F, J, mt.prototype].forEach((function (t) { for (var n in t) t[n] instanceof vt && delete t[n] })), Et([F, J, mt.prototype, this._cfg.tables], r(e), e), B = r(e), this }, upgrade: function (t) { return this._cfg.contentUpgrade = t, this }, _parseStoresSpec: function (t, n) { r(t).forEach((function (e) { if (null !== t[e]) { var r = {}, o = function (t) { var n = []; return t.split(",").forEach((function (t) { var e = (t = t.trim()).replace(/([&*]|\+\+)/g, ""), r = /^\[/.test(e) ? e.match(/^\[(.*)\]$/)[1].split("+") : e; n.push(new Kn(e, r || null, /\&/.test(t), /\*/.test(t), /\+\+/.test(t), i(r), /\./.test(t))) })), n }(t[e]), a = o.shift(); if (a.multi) throw new H.Schema("Primary key cannot be multi-valued"); a.keyPath && k(r, a.keyPath, a.auto ? 0 : a.keyPath), o.forEach((function (t) { if (t.auto) throw new H.Schema("Only primary key can be marked as autoIncrement (++)"); if (!t.keyPath) throw new H.Schema("Index must have a name and cannot be an empty string"); k(r, t.keyPath, t.compound ? t.keyPath.map((function () { return "" })) : "") })), n[e] = new Bn(e, a, o, r) } })) } }), this._allTables = F, this._createTransaction = function (t, n, e, r) { return new mt(t, n, e, r) }, this._whenReady = function (t) { return z || It.letThrough ? t() : new Pt((function (t, n) { if (!L) { if (!w) return void n(new H.DatabaseClosed); J.open().catch(X) } Y.then(t, n) })).then(t) }, this.verno = 0, this.open = function () { if (L || N) return Y.then((function () { return U ? ln(U) : J })); K && (nt._stackHolder = M()), L = !0, U = null, z = !1; var n = e, i = null; return Pt.race([nt, new Pt((function (n, e) { if (!I) throw new H.MissingAPI("indexedDB API not found. If using IE10+, make sure to run your code on a server URL (not locally). If using old Safari versions, make sure to include indexedDB polyfill."); var o = ot ? I.open(t) : I.open(t, Math.round(10 * J.verno)); if (!o) throw new H.MissingAPI("IndexedDB API not available"); o.onerror = Pn(e), o.onblocked = Wt(Kt), o.onupgradeneeded = Wt((function (n) { if (i = o.transaction, ot && !J._allowEmptyDB) { o.onerror = Tn, i.abort(), o.result.close(); var a = I.deleteDatabase(t); a.onsuccess = a.onerror = Wt((function () { e(new H.NoSuchDatabase("Database " + t + " doesnt exist")) })) } else i.onerror = Pn(e), function (t, n, e) { var i = J._createTransaction(Q, B, S); i.create(n), i._completion.catch(e); var o = i._reject.bind(i); Xt((function () { It.trans = i, 0 === t ? (r(S).forEach((function (t) { ct(n, t, S[t].primKey, S[t].indexes) })), Pt.follow((function () { return J.on.populate.fire(i) })).catch(o)) : function (t, n, e) { var i = [], o = A.filter((function (n) { return n._cfg.version === t }))[0]; if (!o) throw new H.Upgrade("Dexie specification of currently installed DB version is missing"); S = J._dbSchema = o._cfg.dbschema; var a = !1; return A.filter((function (n) { return n._cfg.version > t })).forEach((function (t) { i.push((function () { var r = S, i = t._cfg.dbschema; Ct(r, e), Ct(i, e), S = J._dbSchema = i; var o = function (t, n) { var e = { del: [], add: [], change: [] }; for (var r in t) n[r] || e.del.push(r); for (r in n) { var i = t[r], o = n[r]; if (i) { var a = { name: r, def: o, recreate: !1, del: [], add: [], change: [] }; if (i.primKey.src !== o.primKey.src) a.recreate = !0, e.change.push(a); else { var u = i.idxByName, s = o.idxByName; for (var c in u) s[c] || a.del.push(c); for (c in s) { var f = u[c], h = s[c]; f ? f.src !== h.src && a.change.push(h) : a.add.push(h) } (a.del.length > 0 || a.add.length > 0 || a.change.length > 0) && e.change.push(a) } } else e.add.push([r, o]) } return e }(r, i); if (o.add.forEach((function (t) { ct(e, t[0], t[1].primKey, t[1].indexes) })), o.change.forEach((function (t) { if (t.recreate) throw new H.Upgrade("Not yet support for changing primary key"); var n = e.objectStore(t.name); t.add.forEach((function (t) { ft(n, t) })), t.change.forEach((function (t) { n.deleteIndex(t.name), ft(n, t) })), t.del.forEach((function (t) { n.deleteIndex(t) })) })), t._cfg.contentUpgrade) return a = !0, Pt.follow((function () { t._cfg.contentUpgrade(n) })) })), i.push((function (n) { a && En || function (t, n) { for (var e = 0; e < n.db.objectStoreNames.length; ++e) { var r = n.db.objectStoreNames[e]; null == t[r] && n.db.deleteObjectStore(r) } }(t._cfg.dbschema, n) })) })), function t() { return i.length ? Pt.resolve(i.shift()(n.idbtrans)).then(t) : Pt.resolve() }().then((function () { !function (t, n) { r(t).forEach((function (e) { n.db.objectStoreNames.contains(e) || ct(n, e, t[e].primKey, t[e].indexes) })) }(S, e) })) }(t, i, n).catch(o) })) }((n.oldVersion > Math.pow(2, 62) ? 0 : n.oldVersion) / 10, i, e) }), e), o.onsuccess = Wt((function () { if (i = null, N = o.result, _n.push(J), ot) !function () { if (J.verno = N.version / 10, J._dbSchema = S = {}, 0 !== (B = y(N.objectStoreNames, 0)).length) { var t = N.transaction(Fn(B), "readonly"); B.forEach((function (n) { for (var e = t.objectStore(n), r = e.keyPath, i = r && "string" == typeof r && -1 !== r.indexOf("."), o = new Kn(r, r || "", !1, !1, !!e.autoIncrement, r && "string" != typeof r, i), a = [], u = 0; u < e.indexNames.length; ++u) { var s = e.index(e.indexNames[u]); i = (r = s.keyPath) && "string" == typeof r && -1 !== r.indexOf("."); var c = new Kn(s.name, r, !!s.unique, !!s.multiEntry, !1, r && "string" != typeof r, i); a.push(c) } S[n] = new Bn(n, o, a, {}) })), Et([F], r(S), S) } }(); else if (N.objectStoreNames.length > 0) try { Ct(S, N.transaction(Fn(N.objectStoreNames), G)) } catch (t) { } N.onversionchange = Wt((function (t) { J._vcFired = !0, J.on("versionchange").fire(t) })), ut || "__dbnames" === t || pn.dbnames.put({ name: t }).catch(X), n() }), e) }))]).then((function () { return V = [], Pt.resolve(In.vip(J.on.ready.fire)).then((function t() { if (V.length > 0) { var n = V.reduce(at, X); return V = [], Pt.resolve(In.vip(n)).then(t) } })) })).finally((function () { V = null })).then((function () { return L = !1, J })).catch((function (t) { try { i && i.abort() } catch (t) { } return L = !1, J.close(), ln(U = t) })).finally((function () { z = !0, n() })) }, this.close = function () { var t = _n.indexOf(J); if (t >= 0 && _n.splice(t, 1), N) { try { N.close() } catch (t) { } N = null } w = !1, U = new H.DatabaseClosed, L && u(U), Y = new Pt((function (t) { e = t })), nt = new Pt((function (t, n) { u = n })) }, this.delete = function () { var n = arguments.length > 0; return new Pt((function (e, r) { if (n) throw new H.InvalidArgument("Arguments not allowed in db.delete()"); function i() { J.close(); var n = I.deleteDatabase(t); n.onsuccess = Wt((function () { ut || pn.dbnames.delete(t).catch(X), e() })), n.onerror = Pn(r), n.onblocked = Kt } L ? Y.then(i) : i() })) }, this.backendDB = function () { return N }, this.isOpen = function () { return null !== N }, this.hasBeenClosed = function () { return U && U instanceof H.DatabaseClosed }, this.hasFailed = function () { return null !== U }, this.dynamicallyOpened = function () { return ot }, this.name = t, f(this, { tables: { get: function () { return r(F).map((function (t) { return F[t] })) } } }), this.on = dn(this, "populate", "blocked", "versionchange", { ready: [at, X] }), this.on.ready.subscribe = m(this.on.ready.subscribe, (function (t) { return function (n, e) { In.vip((function () { z ? (U || Pt.resolve().then(n), e && t(n)) : V ? (V.push(n), e && t(n)) : (t(n), e || t((function t() { J.on.ready.unsubscribe(n), J.on.ready.unsubscribe(t) }))) })) } })), this.transaction = function () { var t = lt.apply(this, arguments); return this._transaction.apply(this, t) }, this._transaction = function (t, n, e) { var r = It.trans; r && r.db === J && -1 === t.indexOf("!") || (r = null); var i = -1 !== t.indexOf("?"); t = t.replace("!", "").replace("?", ""); try { var o = n.map((function (t) { var n = t instanceof vt ? t.name : t; if ("string" != typeof n) throw new TypeError("Invalid table argument to Dexie.transaction(). Only Table or String are allowed"); return n })); if ("r" == t || t == G) t = G; else { if ("rw" != t && t != Q) throw new H.InvalidArgument("Invalid transaction mode: " + t); t = Q } if (r) { if (r.mode === G && t === Q) { if (!i) throw new H.SubTransaction("Cannot enter a sub-transaction with READWRITE mode when parent transaction is READONLY"); r = null } r && o.forEach((function (t) { if (r && -1 === r.storeNames.indexOf(t)) { if (!i) throw new H.SubTransaction("Table " + t + " not included in parent transaction."); r = null } })), i && r && !r.active && (r = null) } } catch (t) { return r ? r._promise(null, (function (n, e) { e(t) })) : ln(t) } return r ? r._promise(t, a, "lock") : It.trans ? un(It.transless, (function () { return J._whenReady(a) })) : J._whenReady(a); function a() { return Pt.resolve().then((function () { var n, i = It.transless || It, a = J._createTransaction(t, o, S, r), u = { trans: a, transless: i }; r ? a.idbtrans = r.idbtrans : a.create(), e.constructor === pt && Zt(); var s = Pt.follow((function () { if (n = e.call(a, a)) if (n.constructor === dt) { var t = tn.bind(null, null); n.then(t, t) } else "function" == typeof n.next && "function" == typeof n.throw && (n = Cn(n)) }), u); return (n && "function" == typeof n.then ? Pt.resolve(n).then((function (t) { return a.active ? t : ln(new H.PrematureCommit("Transaction committed too early. See http://bit.ly/2kdckMn")) })) : s.then((function () { return n }))).then((function (t) { return r && a._resolve(), a._completion.then((function () { return t })) })).catch((function (t) { return a._reject(t), ln(t) })) })) } }, this.table = function (t) { if (!c(F, t)) throw new H.InvalidTable("Table " + t + " does not exist"); return F[t] }, f(vt.prototype, { _trans: function (t, n, e) { var r = this._tx || It.trans; return r && r.db === J ? r === It.trans ? r._promise(t, n, e) : Xt((function () { return r._promise(t, n, e) }), { trans: r, transless: It.transless || It }) : ht(t, [this.name], n) }, _idbstore: function (t, n, e) { var r = this.name; return this._trans(t, (function (t, e, i) { if (-1 === i.storeNames.indexOf(r)) throw new H.NotFound("Table" + r + " not part of transaction"); return n(t, e, i.idbtrans.objectStore(r), i) }), e) }, get: function (t, n) { if (t && t.constructor === Object) return this.where(t).first(n); var e = this; return this._idbstore(G, (function (n, r, i) { var o = i.get(t); o.onerror = Pn(r), o.onsuccess = Wt((function () { n(e.hook.reading.fire(o.result)) }), r) })).then(n) }, where: function (t) { if ("string" == typeof t) return new bt(this, t); if (i(t)) return new bt(this, "[" + t.join("+") + "]"); var n = r(t); if (1 === n.length) return this.where(n[0]).equals(t[n[0]]); var e = this.schema.indexes.concat(this.schema.primKey).filter((function (t) { return t.compound && n.every((function (n) { return t.keyPath.indexOf(n) >= 0 })) && t.keyPath.every((function (t) { return n.indexOf(t) >= 0 })) }))[0]; if (e && yn !== gn) return this.where(e.name).equals(e.keyPath.map((function (n) { return t[n] }))); e || console.warn("The query " + JSON.stringify(t) + " on " + this.name + " would benefit of a compound index [" + n.join("+") + "]"); var o = this.schema.idxByName, a = n.reduce((function (n, e) { return [n[0] || o[e], n[0] || !o[e] ? Tt(n[1], (function (n) { return "" + E(n, e) == "" + t[e] })) : n[1]] }), [null, null]), u = a[0]; return u ? this.where(u.name).equals(t[u.keyPath]).filter(a[1]) : e ? this.filter(a[1]) : this.where(n).equals("") }, count: function (t) { return this.toCollection().count(t) }, offset: function (t) { return this.toCollection().offset(t) }, limit: function (t) { return this.toCollection().limit(t) }, reverse: function () { return this.toCollection().reverse() }, filter: function (t) { return this.toCollection().and(t) }, each: function (t) { return this.toCollection().each(t) }, toArray: function (t) { return this.toCollection().toArray(t) }, orderBy: function (t) { return new wt(new bt(this, i(t) ? "[" + t.join("+") + "]" : t)) }, toCollection: function () { return new wt(new bt(this)) }, mapToClass: function (t, n) { this.schema.mappedClass = t; var e = Object.create(t.prototype); n && Rn(e, n), this.schema.instanceTemplate = e; var r = function (n) { if (!n) return n; var e = Object.create(t.prototype); for (var r in n) if (c(n, r)) try { e[r] = n[r] } catch (t) { } return e }; return this.schema.readHook && this.hook.reading.unsubscribe(this.schema.readHook), this.schema.readHook = r, this.hook("reading", r), t }, defineClass: function (t) { return this.mapToClass(In.defineClass(t), t) }, bulkDelete: function (t) { return this.hook.deleting.fire === X ? this._idbstore(Q, (function (n, e, r, i) { n(yt(r, i, t, !1, X)) })) : this.where(":id").anyOf(t).delete().then((function () { })) }, bulkPut: function (t, n) { var e = this; return this._idbstore(Q, (function (r, i, o) { if (!o.keyPath && !e.schema.primKey.auto && !n) throw new H.InvalidArgument("bulkPut() with non-inbound keys requires keys array in second argument"); if (o.keyPath && n) throw new H.InvalidArgument("bulkPut(): keys argument invalid on tables with inbound keys"); if (n && n.length !== t.length) throw new H.InvalidArgument("Arguments objects and keys must have the same length"); if (0 === t.length) return r(); var a, u, s = function (t) { 0 === c.length ? r(t) : i(new $(e.name + ".bulkPut(): " + c.length + " of " + f + " operations failed", c)) }, c = [], f = t.length, h = e; if (e.hook.creating.fire === X && e.hook.updating.fire === X) { u = gt(c); for (var l = 0, d = t.length; l < d; ++l)(a = n ? o.put(t[l], n[l]) : o.put(t[l])).onerror = u; a.onerror = gt(c, s), a.onsuccess = Sn(s) } else { var p = n || o.keyPath && t.map((function (t) { return E(t, o.keyPath) })), v = p && _(p, (function (n, e) { return null != n && [n, t[e]] })), g = p ? h.where(":id").anyOf(p.filter((function (t) { return null != t }))).modify((function () { this.value = v[this.primKey], v[this.primKey] = null })).catch(W, (function (t) { c = t.failures })).then((function () { for (var e = [], r = n && [], i = p.length - 1; i >= 0; --i) { var o = p[i]; (null == o || v[o]) && (e.push(t[i]), n && r.push(o), null != o && (v[o] = null)) } return e.reverse(), n && r.reverse(), h.bulkAdd(e, r) })).then((function (t) { var n = p[p.length - 1]; return null != n ? n : t })) : h.bulkAdd(t); g.then(s).catch($, (function (t) { c = c.concat(t.failures), s() })).catch(i) } }), "locked") }, bulkAdd: function (t, n) { var e = this, r = this.hook.creating.fire; return this._idbstore(Q, (function (i, o, a, u) { if (!a.keyPath && !e.schema.primKey.auto && !n) throw new H.InvalidArgument("bulkAdd() with non-inbound keys requires keys array in second argument"); if (a.keyPath && n) throw new H.InvalidArgument("bulkAdd(): keys argument invalid on tables with inbound keys"); if (n && n.length !== t.length) throw new H.InvalidArgument("Arguments objects and keys must have the same length"); if (0 === t.length) return i(); function s(t) { 0 === l.length ? i(t) : o(new $(e.name + ".bulkAdd(): " + l.length + " of " + d + " operations failed", l)) } var c, f, h, l = [], d = t.length; if (r !== X) { var p, v = a.keyPath; f = gt(l, null, !0), h = jn(null), x((function () { for (var e = 0, i = t.length; e < i; ++e) { p = { onerror: null, onsuccess: null }; var o = n && n[e], s = t[e], l = n ? o : v ? E(s, v) : void 0, d = r.call(p, l, s, u); null == l && null != d && (v ? k(s = j(s), v, d) : o = d), (c = null != o ? a.add(s, o) : a.add(s))._hookCtx = p, e < i - 1 && (c.onerror = f, p.onsuccess && (c.onsuccess = h)) } }), (function (t) { throw p.onerror && p.onerror(t), t })), c.onerror = gt(l, s, !0), c.onsuccess = jn(s) } else { f = gt(l); for (var g = 0, y = t.length; g < y; ++g)(c = n ? a.add(t[g], n[g]) : a.add(t[g])).onerror = f; c.onerror = gt(l, s), c.onsuccess = Sn(s) } })) }, add: function (t, n) { var e = this.hook.creating.fire; return this._idbstore(Q, (function (r, i, o, a) { var u = { onsuccess: null, onerror: null }; if (e !== X) { var s = null != n ? n : o.keyPath ? E(t, o.keyPath) : void 0, c = e.call(u, s, t, a); null == s && null != c && (o.keyPath ? k(t, o.keyPath, c) : n = c) } try { var f = null != n ? o.add(t, n) : o.add(t); f._hookCtx = u, f.onerror = An(i), f.onsuccess = jn((function (n) { var e = o.keyPath; e && k(t, e, n), r(n) })) } catch (t) { throw u.onerror && u.onerror(t), t } })) }, put: function (t, n) { var e = this, r = this.hook.creating.fire, i = this.hook.updating.fire; if (r !== X || i !== X) { var o = this.schema.primKey.keyPath, a = void 0 !== n ? n : o && E(t, o); return null == a ? this.add(t) : (t = j(t), this._trans(Q, (function () { return e.where(":id").equals(a).modify((function () { this.value = t })).then((function (r) { return 0 === r ? e.add(t, n) : a })) }), "locked")) } return this._idbstore(Q, (function (e, r, i) { var o = void 0 !== n ? i.put(t, n) : i.put(t); o.onerror = Pn(r), o.onsuccess = Wt((function (n) { var r = i.keyPath; r && k(t, r, n.target.result), e(o.result) })) })) }, delete: function (t) { return this.hook.deleting.subscribers.length ? this.where(":id").equals(t).delete() : this._idbstore(Q, (function (n, e, r) { var i = r.delete(t); i.onerror = Pn(e), i.onsuccess = Wt((function () { n(i.result) })) })) }, clear: function () { return this.hook.deleting.subscribers.length ? this.toCollection().delete() : this._idbstore(Q, (function (t, n, e) { var r = e.clear(); r.onerror = Pn(n), r.onsuccess = Wt((function () { t(r.result) })) })) }, update: function (t, n) { if ("object" != typeof n || i(n)) throw new H.InvalidArgument("Modifications must be an object."); if ("object" != typeof t || i(t)) return this.where(":id").equals(t).modify(n); r(n).forEach((function (e) { k(t, e, n[e]) })); var e = E(t, this.schema.primKey.keyPath); return void 0 === e ? ln(new H.InvalidArgument("Given object does not contain its primary key")) : this.where(":id").equals(e).modify(n) } }), f(mt.prototype, { _lock: function () { return b(!It.global), ++this._reculock, 1 !== this._reculock || It.global || (It.lockOwnerFor = this), this }, _unlock: function () { if (b(!It.global), 0 == --this._reculock) for (It.global || (It.lockOwnerFor = null); this._blockedFuncs.length > 0 && !this._locked();) { var t = this._blockedFuncs.shift(); try { un(t[1], t[0]) } catch (t) { } } return this }, _locked: function () { return this._reculock && It.lockOwnerFor !== this }, create: function (t) { var n = this; if (!this.mode) return this; if (b(!this.idbtrans), !t && !N) switch (U && U.name) { case "DatabaseClosedError": throw new H.DatabaseClosed(U); case "MissingAPIError": throw new H.MissingAPI(U.message, U); default: throw new H.OpenFailed(U) }if (!this.active) throw new H.TransactionInactive; return b(null === this._completion._state), (t = this.idbtrans = t || N.transaction(Fn(this.storeNames), this.mode)).onerror = Wt((function (e) { Tn(e), n._reject(t.error) })), t.onabort = Wt((function (e) { Tn(e), n.active && n._reject(new H.Abort(t.error)), n.active = !1, n.on("abort").fire(e) })), t.oncomplete = Wt((function () { n.active = !1, n._resolve() })), this }, _promise: function (t, n, e) { var r = this; if (t === Q && this.mode !== Q) return ln(new H.ReadOnly("Transaction is readonly")); if (!this.active) return ln(new H.TransactionInactive); if (this._locked()) return new Pt((function (i, o) { r._blockedFuncs.push([function () { r._promise(t, n, e).then(i, o) }, It]) })); if (e) return Xt((function () { var t = new Pt((function (t, e) { r._lock(); var i = n(t, e, r); i && i.then && i.then(t, e) })); return t.finally((function () { return r._unlock() })), t._lib = !0, t })); var i = new Pt((function (t, e) { var i = n(t, e, r); i && i.then && i.then(t, e) })); return i._lib = !0, i }, _root: function () { return this.parent ? this.parent._root() : this }, waitFor: function (t) { var n = this._root(); if (t = Pt.resolve(t), n._waitingFor) n._waitingFor = n._waitingFor.then((function () { return t })); else { n._waitingFor = t, n._waitingQueue = []; var e = n.idbtrans.objectStore(n.storeNames[0]); !function t() { for (++n._spinCount; n._waitingQueue.length;)n._waitingQueue.shift()(); n._waitingFor && (e.get(-1 / 0).onsuccess = t) }() } var r = n._waitingFor; return new Pt((function (e, i) { t.then((function (t) { return n._waitingQueue.push(Wt(e.bind(null, t))) }), (function (t) { return n._waitingQueue.push(Wt(i.bind(null, t))) })).finally((function () { n._waitingFor === r && (n._waitingFor = null) })) })) }, abort: function () { this.active && this._reject(new H.Abort), this.active = !1 }, tables: { get: (h = "Transaction.tables", d = function () { return F }, function () { return console.warn(h + " is deprecated. See https://github.com/dfahlander/Dexie.js/wiki/Deprecations. " + q(M(), 1)), d.apply(this, arguments) }) }, table: function (t) { return new vt(t, J.table(t).schema, this) } }), f(bt.prototype, (function () { function t(t, n, e) { var r = t instanceof bt ? new wt(t) : t; return r._ctx.error = e ? new e(n) : new TypeError(n), r } function n(t) { return new wt(t, (function () { return R.only("") })).limit(0) } function e(t, n, e, r, i, o) { for (var a = Math.min(t.length, r.length), u = -1, s = 0; s < a; ++s) { var c = n[s]; if (c !== r[s]) return i(t[s], e[s]) < 0 ? t.substr(0, s) + e[s] + e.substr(s + 1) : i(t[s], r[s]) < 0 ? t.substr(0, s) + r[s] + e.substr(s + 1) : u >= 0 ? t.substr(0, u) + n[u] + e.substr(u + 1) : null; i(t[s], c) < 0 && (u = s) } return a < r.length && "next" === o ? t + e.substr(t.length) : a < t.length && "prev" === o ? t.substr(0, e.length) : u < 0 ? null : t.substr(0, u) + r[u] + e.substr(u + 1) } function r(n, r, i, o) { var a, u, s, c, f, h, l, d = i.length; if (!i.every((function (t) { return "string" == typeof t }))) return t(n, wn); function p(t) { a = function (t) { return "next" === t ? function (t) { return t.toUpperCase() } : function (t) { return t.toLowerCase() } }(t), u = function (t) { return "next" === t ? function (t) { return t.toLowerCase() } : function (t) { return t.toUpperCase() } }(t), s = "next" === t ? St : At; var n = i.map((function (t) { return { lower: u(t), upper: a(t) } })).sort((function (t, n) { return s(t.lower, n.lower) })); c = n.map((function (t) { return t.upper })), f = n.map((function (t) { return t.lower })), h = t, l = "next" === t ? "" : o } p("next"); var v = new wt(n, (function () { return R.bound(c[0], f[d - 1] + o) })); v._ondirectionchange = function (t) { p(t) }; var g = 0; return v._addAlgorithm((function (t, n, i) { var o = t.key; if ("string" != typeof o) return !1; var a = u(o); if (r(a, f, g)) return !0; for (var p = null, v = g; v < d; ++v) { var y = e(o, a, c[v], f[v], s, h); null === y && null === p ? g = v + 1 : (null === p || s(p, y) > 0) && (p = y) } return n(null !== p ? function () { t.continue(p + l) } : i), !1 })), v } return { between: function (e, r, i, o) { i = !1 !== i, o = !0 === o; try { return Dt(e, r) > 0 || 0 === Dt(e, r) && (i || o) && (!i || !o) ? n(this) : new wt(this, (function () { return R.bound(e, r, !i, !o) })) } catch (n) { return t(this, bn) } }, equals: function (t) { return new wt(this, (function () { return R.only(t) })) }, above: function (t) { return new wt(this, (function () { return R.lowerBound(t, !0) })) }, aboveOrEqual: function (t) { return new wt(this, (function () { return R.lowerBound(t) })) }, below: function (t) { return new wt(this, (function () { return R.upperBound(t, !0) })) }, belowOrEqual: function (t) { return new wt(this, (function () { return R.upperBound(t) })) }, startsWith: function (n) { return "string" != typeof n ? t(this, wn) : this.between(n, n + gn, !0, !0) }, startsWithIgnoreCase: function (t) { return "" === t ? this.startsWith(t) : r(this, (function (t, n) { return 0 === t.indexOf(n[0]) }), [t], gn) }, equalsIgnoreCase: function (t) { return r(this, (function (t, n) { return t === n[0] }), [t], "") }, anyOfIgnoreCase: function () { var t = C.apply(T, arguments); return 0 === t.length ? n(this) : r(this, (function (t, n) { return -1 !== n.indexOf(t) }), t, "") }, startsWithAnyOfIgnoreCase: function () { var t = C.apply(T, arguments); return 0 === t.length ? n(this) : r(this, (function (t, n) { return n.some((function (n) { return 0 === t.indexOf(n) })) }), t, gn) }, anyOf: function () { var e = C.apply(T, arguments), r = Rt; try { e.sort(r) } catch (n) { return t(this, bn) } if (0 === e.length) return n(this); var i = new wt(this, (function () { return R.bound(e[0], e[e.length - 1]) })); i._ondirectionchange = function (t) { r = "next" === t ? Rt : jt, e.sort(r) }; var o = 0; return i._addAlgorithm((function (t, n, i) { for (var a = t.key; r(a, e[o]) > 0;)if (++o === e.length) return n(i), !1; return 0 === r(a, e[o]) || (n((function () { t.continue(e[o]) })), !1) })), i }, notEqual: function (t) { return this.inAnyRange([[mn, t], [t, yn]], { includeLowers: !1, includeUppers: !1 }) }, noneOf: function () { var n = C.apply(T, arguments); if (0 === n.length) return new wt(this); try { n.sort(Rt) } catch (n) { return t(this, bn) } var e = n.reduce((function (t, n) { return t ? t.concat([[t[t.length - 1][1], n]]) : [[mn, n]] }), null); return e.push([n[n.length - 1], yn]), this.inAnyRange(e, { includeLowers: !1, includeUppers: !1 }) }, inAnyRange: function (e, r) { if (0 === e.length) return n(this); if (!e.every((function (t) { return void 0 !== t[0] && void 0 !== t[1] && Rt(t[0], t[1]) <= 0 }))) return t(this, "First argument to inAnyRange() must be an Array of two-value Arrays [lower,upper] where upper must not be lower than lower", H.InvalidArgument); var i, o = !r || !1 !== r.includeLowers, a = r && !0 === r.includeUppers, u = Rt; function s(t, n) { return u(t[0], n[0]) } try { i = e.reduce((function (t, n) { for (var e = 0, r = t.length; e < r; ++e) { var i = t[e]; if (Dt(n[0], i[1]) < 0 && Dt(n[1], i[0]) > 0) { i[0] = Dt(o = i[0], a = n[0]) < 0 ? o : a, i[1] = Ot(i[1], n[1]); break } } var o, a; return e === r && t.push(n), t }), []), i.sort(s) } catch (n) { return t(this, bn) } var c = 0, f = a ? function (t) { return Rt(t, i[c][1]) > 0 } : function (t) { return Rt(t, i[c][1]) >= 0 }, h = o ? function (t) { return jt(t, i[c][0]) > 0 } : function (t) { return jt(t, i[c][0]) >= 0 }, l = f, d = new wt(this, (function () { return R.bound(i[0][0], i[i.length - 1][1], !o, !a) })); return d._ondirectionchange = function (t) { "next" === t ? (l = f, u = Rt) : (l = h, u = jt), i.sort(s) }, d._addAlgorithm((function (t, n, e) { for (var r = t.key; l(r);)if (++c === i.length) return n(e), !1; return !!function (t) { return !f(t) && !h(t) }(r) || (0 === Dt(r, i[c][1]) || 0 === Dt(r, i[c][0]) || n((function () { u === Rt ? t.continue(i[c][0]) : t.continue(i[c][1]) })), !1) })), d }, startsWithAnyOf: function () { var e = C.apply(T, arguments); return e.every((function (t) { return "string" == typeof t })) ? 0 === e.length ? n(this) : this.inAnyRange(e.map((function (t) { return [t, t + gn] }))) : t(this, "startsWithAnyOf() only works with strings") } } })), f(wt.prototype, (function () { function t(t, n) { t.filter = Tt(t.filter, n) } function n(t, n, e) { var r = t.replayFilter; t.replayFilter = r ? function () { return Tt(r(), n()) } : n, t.justLimit = e && !r } function e(t, n) { if (t.isPrimKey) return n; var e = t.table.schema.idxByName[t.index]; if (!e) throw new H.Schema("KeyPath " + t.index + " on object store " + n.name + " is not indexed"); return n.index(e.name) } function i(t, n) { var r = e(t, n); return t.keysOnly && "openKeyCursor" in r ? r.openKeyCursor(t.range || null, t.dir + t.unique) : r.openCursor(t.range || null, t.dir + t.unique) } function o(t, n, e, r, o) { var a = t.replayFilter ? Tt(t.filter, t.replayFilter()) : t.filter; t.or ? function () { var u = {}, s = 0; function f() { 2 == ++s && e() } function h(t, e, i) { if (!a || a(e, i, f, r)) { var o = e.primaryKey, s = "" + o; "[object ArrayBuffer]" === s && (s = "" + new Uint8Array(o)), c(u, s) || (u[s] = !0, n(t, e, i)) } } t.or._iterate(h, f, r, o), kt(i(t, o), t.algorithm, h, f, r, !t.keysOnly && t.valueMapper) }() : kt(i(t, o), Tt(t.algorithm, a), n, e, r, !t.keysOnly && t.valueMapper) } return { _read: function (t, n) { var e = this._ctx; return e.error ? e.table._trans(null, ln.bind(null, e.error)) : e.table._idbstore(G, t).then(n) }, _write: function (t) { var n = this._ctx; return n.error ? n.table._trans(null, ln.bind(null, n.error)) : n.table._idbstore(Q, t, "locked") }, _addAlgorithm: function (t) { var n = this._ctx; n.algorithm = Tt(n.algorithm, t) }, _iterate: function (t, n, e, r) { return o(this._ctx, t, n, e, r) }, clone: function (t) { var n = Object.create(this.constructor.prototype), e = Object.create(this._ctx); return t && a(e, t), n._ctx = e, n }, raw: function () { return this._ctx.valueMapper = null, this }, each: function (t) { var n = this._ctx; return this._read((function (e, r, i) { o(n, t, e, r, i) })) }, count: function (t) { var n = this._ctx; if (_t(n, !0)) return this._read((function (t, r, i) { var o = e(n, i), a = n.range ? o.count(n.range) : o.count(); a.onerror = Pn(r), a.onsuccess = function (e) { t(Math.min(e.target.result, n.limit)) } }), t); var r = 0; return this._read((function (t, e, i) { o(n, (function () { return ++r, !1 }), (function () { t(r) }), e, i) }), t) }, sortBy: function (t, n) { var e = t.split(".").reverse(), r = e[0], i = e.length - 1; function o(t, n) { return n ? o(t[e[n]], n - 1) : t[r] } var a = "next" === this._ctx.dir ? 1 : -1; function u(t, n) { var e = o(t, i), r = o(n, i); return e < r ? -a : e > r ? a : 0 } return this.toArray((function (t) { return t.sort(u) })).then(n) }, toArray: function (t) { var n = this._ctx; return this._read((function (t, r, i) { if (s && "next" === n.dir && _t(n, !0) && n.limit > 0) { var a = n.table.hook.reading.fire, u = e(n, i), c = n.limit < 1 / 0 ? u.getAll(n.range, n.limit) : u.getAll(n.range); c.onerror = Pn(r), c.onsuccess = Sn(a === Z ? t : function (n) { try { t(n.map(a)) } catch (t) { r(t) } }) } else { var f = []; o(n, (function (t) { f.push(t) }), (function () { t(f) }), r, i) } }), t) }, offset: function (t) { var e = this._ctx; return t <= 0 || (e.offset += t, _t(e) ? n(e, (function () { var n = t; return function (t, e) { return 0 === n || (1 === n ? (--n, !1) : (e((function () { t.advance(n), n = 0 })), !1)) } })) : n(e, (function () { var n = t; return function () { return --n < 0 } }))), this }, limit: function (t) { return this._ctx.limit = Math.min(this._ctx.limit, t), n(this._ctx, (function () { var n = t; return function (t, e, r) { return --n <= 0 && e(r), n >= 0 } }), !0), this }, until: function (n, e) { return t(this._ctx, (function (t, r, i) { return !n(t.value) || (r(i), e) })), this }, first: function (t) { return this.limit(1).toArray((function (t) { return t[0] })).then(t) }, last: function (t) { return this.reverse().first(t) }, filter: function (n) { return t(this._ctx, (function (t) { return n(t.value) })), function (t, n) { t.isMatch = Tt(t.isMatch, n) }(this._ctx, n), this }, and: function (t) { return this.filter(t) }, or: function (t) { return new bt(this._ctx.table, t, this) }, reverse: function () { return this._ctx.dir = "prev" === this._ctx.dir ? "next" : "prev", this._ondirectionchange && this._ondirectionchange(this._ctx.dir), this }, desc: function () { return this.reverse() }, eachKey: function (t) { var n = this._ctx; return n.keysOnly = !n.isMatch, this.each((function (n, e) { t(e.key, e) })) }, eachUniqueKey: function (t) { return this._ctx.unique = "unique", this.eachKey(t) }, eachPrimaryKey: function (t) { var n = this._ctx; return n.keysOnly = !n.isMatch, this.each((function (n, e) { t(e.primaryKey, e) })) }, keys: function (t) { var n = this._ctx; n.keysOnly = !n.isMatch; var e = []; return this.each((function (t, n) { e.push(n.key) })).then((function () { return e })).then(t) }, primaryKeys: function (t) { var n = this._ctx; if (s && "next" === n.dir && _t(n, !0) && n.limit > 0) return this._read((function (t, r, i) { var o = e(n, i), a = n.limit < 1 / 0 ? o.getAllKeys(n.range, n.limit) : o.getAllKeys(n.range); a.onerror = Pn(r), a.onsuccess = Sn(t) })).then(t); n.keysOnly = !n.isMatch; var r = []; return this.each((function (t, n) { r.push(n.primaryKey) })).then((function () { return r })).then(t) }, uniqueKeys: function (t) { return this._ctx.unique = "unique", this.keys(t) }, firstKey: function (t) { return this.limit(1).keys((function (t) { return t[0] })).then(t) }, lastKey: function (t) { return this.reverse().firstKey(t) }, distinct: function () { var n = this._ctx, e = n.index && n.table.schema.idxByName[n.index]; if (!e || !e.multi) return this; var r = {}; return t(this._ctx, (function (t) { var n = t.primaryKey.toString(), e = c(r, n); return r[n] = !0, !e })), this }, modify: function (t) { var n = this, e = this._ctx.table.hook, i = e.updating.fire, o = e.deleting.fire; return this._write((function (e, u, s, f) { var h; if ("function" == typeof t) h = i === X && o === X ? t : function (n) { var e = j(n); if (!1 === t.call(this, n, this)) return !1; if (c(this, "value")) { var a = P(e, this.value), u = i.call(this, a, this.primKey, e, f); u && (n = this.value, r(u).forEach((function (t) { k(n, t, u[t]) }))) } else o.call(this, this.primKey, n, f) }; else if (i === X) { var l = r(t), d = l.length; h = function (n) { for (var e = !1, r = 0; r < d; ++r) { var i = l[r], o = t[i]; E(n, i) !== o && (k(n, i, o), e = !0) } return e } } else { var p = t; t = D(p), h = function (n) { var e = !1, o = i.call(this, t, this.primKey, j(n), f); return o && a(t, o), r(t).forEach((function (r) { var i = t[r]; E(n, r) !== i && (k(n, r, i), e = !0) })), o && (t = D(p)), e } } var v = 0, g = 0, y = !1, m = [], b = [], w = null; function _(t) { return t && (m.push(t), b.push(w)), u(new W("Error modifying one or more objects", m, g, b)) } function I() { y && g + m.length === v && (m.length > 0 ? _() : e(g)) } n.clone().raw()._iterate((function (t, n) { w = n.primaryKey; var e = { primKey: n.primaryKey, value: t, onsuccess: null, onerror: null }; function r(t) { return m.push(t), b.push(e.primKey), I(), !0 } if (!1 !== h.call(e, t, e)) { var i = !c(e, "value"); ++v, x((function () { var t = i ? n.delete() : n.update(e.value); t._hookCtx = e, t.onerror = An(r), t.onsuccess = jn((function () { ++g, I() })) }), r) } else e.onsuccess && e.onsuccess(e.value) }), (function () { y = !0, I() }), _, s) })) }, delete: function () { var t = this, n = this._ctx, e = n.range, r = n.table.hook.deleting.fire, i = r !== X; if (!i && _t(n) && (n.isPrimKey && !kn || !e)) return this._write((function (t, n, r) { var i = Pn(n), o = e ? r.count(e) : r.count(); o.onerror = i, o.onsuccess = function () { var a = o.result; x((function () { var n = e ? r.delete(e) : r.clear(); n.onerror = i, n.onsuccess = function () { return t(a) } }), (function (t) { return n(t) })) } })); var o = i ? 2e3 : 1e4; return this._write((function (e, a, u, s) { var c = 0, f = t.clone({ keysOnly: !n.isMatch && !i }).distinct().limit(o).raw(), h = [], l = function () { return f.each(i ? function (t, n) { h.push([n.primaryKey, n.value]) } : function (t, n) { h.push(n.primaryKey) }).then((function () { return i ? h.sort((function (t, n) { return Rt(t[0], n[0]) })) : h.sort(Rt), yt(u, s, h, i, r) })).then((function () { var t = h.length; return c += t, h = [], t < o ? c : l() })) }; e(l()) })) } } })), a(this, { Collection: wt, Table: vt, Transaction: mt, Version: st, WhereClause: bt }), J.on("versionchange", (function (t) { t.newVersion > 0 ? console.warn("Another connection wants to upgrade database '" + J.name + "'. Closing db now to resume the upgrade.") : console.warn("Another connection wants to delete database '" + J.name + "'. Closing db now to resume the delete request."), J.close() })), J.on("blocked", (function (t) { !t.newVersion || t.newVersion < t.oldVersion ? console.warn("Dexie.delete('" + J.name + "') was blocked") : console.warn("Upgrade '" + J.name + "' blocked by other connection holding version " + t.oldVersion / 10) })), g.forEach((function (t) { t(J) })) } function On(t) { if ("function" == typeof t) return new t; if (i(t)) return [On(t[0])]; if (t && "object" == typeof t) { var n = {}; return Rn(n, t), n } return t } function Rn(t, n) { return r(n).forEach((function (e) { var r = On(n[e]); t[e] = r })), t } function jn(t) { return Wt((function (n) { var e = n.target, r = e._hookCtx, i = r.value || e.result, o = r && r.onsuccess; o && o(i), t && t(i) }), t) } function Pn(t) { return Wt((function (n) { return Tn(n), t(n.target.error), !1 })) } function Sn(t) { return Wt((function (n) { t(n.target.result) })) } function An(t) { return Wt((function (n) { var e = n.target, r = e.error, i = e._hookCtx, o = i && i.onerror; return o && o(r), Tn(n), t(r), !1 })) } function Tn(t) { t.stopPropagation && t.stopPropagation(), t.preventDefault && t.preventDefault() } function Cn(t) { var n = function (n) { return t.next(n) }, e = o(n), r = o((function (n) { return t.throw(n) })); function o(t) { return function (n) { var o = t(n), a = o.value; return o.done ? a : a && "function" == typeof a.then ? a.then(e, r) : i(a) ? Pt.all(a).then(e, r) : e(a) } } return o(n)() } function Kn(t, n, e, r, i, o, a) { this.name = t, this.keyPath = n, this.unique = e, this.multi = r, this.auto = i, this.compound = o, this.dotted = a; var u = "string" == typeof n ? n : n && "[" + [].join.call(n, "+") + "]"; this.src = (e ? "&" : "") + (r ? "*" : "") + (i ? "++" : "") + u } function Bn(t, n, e, r) { this.name = t, this.primKey = n || new Kn, this.indexes = e || [new Kn], this.instanceTemplate = r, this.mappedClass = null, this.idxByName = _(e, (function (t) { return [t.name, t] })) } function Fn(t) { return 1 === t.length ? t[0] : t } function Nn(t) { var n = t && (t.getDatabaseNames || t.webkitGetDatabaseNames); return n && n.bind(t) } B(K, Dn), f(In, Y), f(In, { delete: function (t) { var n = new In(t), e = n.delete(); return e.onblocked = function (t) { return n.on("blocked", t), this }, e }, exists: function (t) { return new In(t).open().then((function (t) { return t.close(), !0 })).catch(In.NoSuchDatabaseError, (function () { return !1 })) }, getDatabaseNames: function (t) { var n = Nn(In.dependencies.indexedDB); return n ? new Pt((function (t, e) { var r = n(); r.onsuccess = function (n) { t(y(n.target.result, 0)) }, r.onerror = Pn(e) })).then(t) : pn.dbnames.toCollection().primaryKeys(t) }, defineClass: function () { return function (t) { t && a(this, t) } }, applyStructure: Rn, ignoreTransaction: function (t) { return It.trans ? un(It.transless, t) : t() }, vip: function (t) { return Xt((function () { return It.letThrough = !0, t() })) }, async: function (t) { return function () { try { var n = Cn(t.apply(this, arguments)); return n && "function" == typeof n.then ? n : Pt.resolve(n) } catch (t) { return ln(t) } } }, spawn: function (t, n, e) { try { var r = Cn(t.apply(e, n || [])); return r && "function" == typeof r.then ? r : Pt.resolve(r) } catch (t) { return ln(t) } }, currentTransaction: { get: function () { return It.trans || null } }, waitFor: function (t, n) { var e = Pt.resolve("function" == typeof t ? In.ignoreTransaction(t) : t).timeout(n || 6e4); return It.trans ? It.trans.waitFor(e) : e }, Promise: Pt, debug: { get: function () { return K }, set: function (t) { B(t, "dexie" === t ? function () { return !0 } : Dn) } }, derive: d, extend: a, props: f, override: m, Events: dn, getByKeyPath: E, setByKeyPath: k, delByKeyPath: function (t, n) { "string" == typeof n ? k(t, n, void 0) : "length" in n && [].map.call(n, (function (n) { k(t, n, void 0) })) }, shallowClone: D, deepClone: j, getObjectDiff: P, asap: w, maxKey: yn, minKey: mn, addons: [], connections: _n, MultiModifyError: H.Modify, errnames: G, IndexSpec: Kn, TableSchema: Bn, dependencies: function () { try { return { indexedDB: o.indexedDB || o.mozIndexedDB || o.webkitIndexedDB || o.msIndexedDB, IDBKeyRange: o.IDBKeyRange || o.webkitIDBKeyRange } } catch (t) { return { indexedDB: null, IDBKeyRange: null } } }(), semVer: vn, version: vn.split(".").map((function (t) { return parseInt(t) })).reduce((function (t, n, e) { return t + n / Math.pow(10, 2 * e) })), default: In, Dexie: In }), Pt.rejectionMapper = function (t, n) { if (!t || t instanceof z || t instanceof TypeError || t instanceof SyntaxError || !t.name || !J[t.name]) return t; var e = new J[t.name](n || t.message, t); return "stack" in t && l(e, "stack", { get: function () { return this.inner.stack } }), e }, (pn = new In("__dbnames")).version(1).stores({ dbnames: "name" }), function () { var t = "Dexie.DatabaseNames"; try { void 0 !== typeof localStorage && void 0 !== o.document && (JSON.parse(localStorage.getItem(t) || "[]").forEach((function (t) { return pn.dbnames.put({ name: t }).catch(X) })), localStorage.removeItem(t)) } catch (t) { } }(); const Mn = In } }, n = {}; function e(r) { var i = n[r]; if (void 0 !== i) return i.exports; var o = n[r] = { exports: {} }; return t[r].call(o.exports, o, o.exports, e), o.exports } e.n = t => { var n = t && t.__esModule ? () => t.default : () => t; return e.d(n, { a: n }), n }, e.d = (t, n) => { for (var r in n) e.o(n, r) && !e.o(t, r) && Object.defineProperty(t, r, { enumerable: !0, get: n[r] }) }, e.g = function () { if ("object" == typeof globalThis) return globalThis; try { return this || new Function("return this")() } catch (t) { if ("object" == typeof window) return window } }(), e.o = (t, n) => Object.prototype.hasOwnProperty.call(t, n), e.r = t => { "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t, "__esModule", { value: !0 }) }, (() => { "use strict"; var t = e(128), n = e(534), r = e.n(n), i = e(363), o = e.n(i); const a = { debug: !1 }; /* console.log("[*] Cargando RanasDB..."); */ class u { static get Dexie() { return t.default } static get DexieRelationships() { return r() } static get Check() { return o() } static create(t, n, e, r) { return new u(t, n, e, r) } static connect(t, n, e, r) { return new u(t, n, e, r).initialize() } static dropDatabase(t) { return u.Dexie.delete(t) } static dropDatabaseIfExists(t) { try { return u.Dexie.delete(t) } catch (t) { } } static get defaultOptions() { return a } constructor(n = "Base_de_datos_por_defecto_de_ranas_db", e = [], i = this.constructor.defaultOptions, a = {}) { o().that(n).isString(), o().that(e).isArray(); for (let t = 0; t < e.length; t++) { const n = e[t]; o().that(n).isArray().hasLengthGreaterThan(1), o().that(n[0]).isObject(), o().that(n[1]).isFunction() } this.options = i, this.databaseID = n, this.versionation = e, this.dexieDB = new t.default(this.databaseID, { addons: [r()] }) } debug(...t) { "function" == typeof this.options.debug && this.options.debug(...t) } initialize() { if (this.debug(`Initializing: #${this.databaseID}`), !this.dexieDB.isOpen()) for (let t = 0; t < this.versionation.length; t++) { const [n, e] = this.versionation[t], r = this.dexieDB.version(t + 1).stores(n); e && r.upgrade(e) } return this } select(t, n = (() => !0), e = []) { this.debug(`Selecting on: #${this.databaseID} » ${t}`, { table: t, filter: n, joins: e }), o().that(t).isString(), o().that(n).isFunction(); let r = this.dexieDB.table(t).filter(n); for (let t = 0; t < e.length; t++) { let n = e[t]; r = r.with({ [n]: n }) } return r.toArray() } insert(t, n) { return this.debug(`Inserting on: #${this.databaseID} » ${t}`, { table: t, item: n }), o().that(t).isString(), o().that(n).isObject(), this.dexieDB.table(t).add(n) } update(t, n, e) { return this.debug(`Updating on: #${this.databaseID} » ${t}`, { table: t, id: n, value: e }), o().that(t).isString(), o().that(n).isNumber(), o().that(e).isObject(), this.dexieDB.table(t).update(n, e) } delete(t, n) { return this.debug(`Deleting on: #${this.databaseID} » ${t}`, { table: t, id: n }), o().that(t).isString(), o().that(n).isNumber(), this.dexieDB.table(t).delete(n) } } "undefined" != typeof window && (window.RanasDB = u), void 0 !== e.g && (e.g.RanasDB = u) })() })();

//Included:lib/300.castelog.v1.inicializacion.part.js
/*lib:castelog@0.0.1*/
Castelog = (function(factory, scope) {
    const output = factory.call(scope);
    if(typeof window === "object") {
        window["Castelog"] = output;
    }
    if(typeof global === "object") {
        global["Castelog"] = output;
    }
    if(typeof module === "object") {
        module.exports = output;
    }
    return output;
})(function() {
    if((typeof(window) !== "undefined") && (typeof(window.Castelog) !== "undefined")) {
        return window.Castelog;
    }
    if((typeof(global) !== "undefined") && (typeof(global.Castelog) !== "undefined")) {
        return global.Castelog;
    }
    
    const globalmente = (typeof(window) !== "undefined") ? window : (typeof(global) !== "undefined") ? global : this;
    const Castelog = {
        globalmente,
        metodos: {},
        modulos: {},
        variables: {
            noop: function() {},
            SimplestDB: globalmente.SimplestDB,
            axios: globalmente.axios,
            ejs: globalmente.ejs,
            globales: {
                entorno: "development"
            }
        },
        compilacion: {
  "ruta_del_sistema": "/home/carlos/Escritorio/Castelog/official",
  "sistema_operativo": "",
  "fecha": "2022/80/50 19:26.34.301"
}
    };

    return Castelog;
}, this);

//Included:lib/401.castelog.v1.variables.generador_de_proyecto_rest.part.js
Castelog.variables.generador_de_proyector_rest = function(baseDirectoryArg) {

const fs = require("fs");
const path = require("path");
const baseDirectory = path.resolve(baseDirectoryArg);
if(typeof baseDirectory === "undefined") throw new Error("Required argument to know the destination of the project");
if(path.resolve(baseDirectory) === path.resolve(__dirname)) throw new Error("Required argument to not be the same directory of the generator file");

const node_0 = path.resolve(baseDirectory, ".");
fs.mkdirSync(node_0);

const node_1 = path.resolve(baseDirectory, ".", "README.md");
const node_contents_1 = "# RESTOLOGIA\n\n";
fs.writeFileSync(node_1, node_contents_1, "utf8");

const node_2 = path.resolve(baseDirectory, ".", "TODO.md");
const node_contents_2 = "TODO inmediato:\n\n[ ] Sobre queries:\n    [ ] Gramática de transacción de query por peticiones http\n    [ ] Gramática de query sobre ¿...?\n    [ ] Gramática de \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTODO SEMIPENDIENTE:\n\n[x] Set file\n[x] Get file\n\n\n[ ] Añadir 1 componente en el DataTableComponent al abrir una ROW (se despliega una subrow donde):\n    [x] Con un selector para escoger la vista que se quiere ver\n    [x] Crear un componente de DataRowExplorerComponent:\n        [x] Que permita explorar recursivamente ROWs, Objetos y Listas.\n        [x] Con un botón para \"Ir a dato\" que abra una pestaña.\n        [x] Con un botón para \"Nuevo dato\" que abra una pestaña.\n        [x] Que por defecto tenga siempre 1 vista de explorador universal\n        [x] Que además pueda soportar nuevos componentes de vista por table\n            [ ] Con un hasRowViews en el schema.tables[*].attributes\n                [ ] Donde se mapee un nombre con un componente vue + parámetros fijos desde el schema\n\n[ ] Inyectar componentes UI en el proceso de despliegue:\n    [ ] Por API\n        [ ] Añadir un nuevo método\n        [ ] Hookear el src/app/app.calo con sintaxis @TO-HOOK\n        [ ] Alterar el proceso de despliegue para que permita hookear al app.calo con componentes Vue (código JS en última instancia)\n        [ ] Crear un test cutrecillo para test/network que compruebe que se ha inyectado un componente\n    [ ] Por el lenguaje\n        [ ] ...\n\n\n\n\n\n\n\n\n\n\nTODO of FORMS:\n\n[ ] Form types (vue):\n    [x] password\n    [x] object\n    [x] list\n    [x] time (calendario, reloj)\n    [ ] list: isRepeateableList / isSortableList\n    [ ] recursive insert/edit/delete\n    [ ] historical\n    [ ] json\n ....\n    [ ] options\n    [ ] option\n[ ] Special form types (project.json + vue):\n    [ ] hasOptionCondition\n    [ ] hasOptionsConditions\n\nTODO of PROTECTORS:\n\n[ ] Protectors:\n    [ ] Un protector común que directamente contemple las columnas:\n        ---------------------------------\n        [ ] viewable_by_users\n        [ ] viewable_by_groups\n        [ ] viewable_by_privileges\n        ---------------------------------\n        [ ] persistable_by_users\n        [ ] persistable_by_groups\n        [ ] persistable_by_privileges   \n        ---------------------------------\n        [ ] administrable_by_users      -]-\n        [ ] administrable_by_groups   ---]--- Que permita modificar los valores de estas tablas\n        [ ] administrable_by_privileges -]-\n        ---------------------------------\n\nTODO of DATABASE:\n\n[ ] Soft delete ( created_at )\n[ ] Tracers:\n    [ ] created_by\n    [ ] updated_by\n    [ ] last_updated_by\n    [ ] deleted_by\n\nTODO of UI:\n\n[ ] Notificaciones\n    [ ] error\n    [ ] success\n[ ] Schema CRUDs:\n    [ ] add/update/delete table\n    [ ] add/update/delete column\n    [ ] add/update/delete protector\n[ ] ...\n[ ] Queries complejas\n[ ] Gráficos (sobre queries y sobre datos)\n[ ] UX/UI\n[ ] Extras\n\n\nDONE:\n\n[x] Procesos:\n    [x] Habilitar un servicio para llamar a procesos\n    [x] Que use un switch-case (no un JSON ni un array)\n    [x] Con método para añadir proceso a servidor\n[x] Servidor de aplicación automáticamente creado e iniciado\n    [x] Habilitando CORS en el server del back y del front\n    [x] Que sirva ficheros estáticos\n    [x] Que centralice todos los schemas dinámicamente\n    [x] Con el código fuente de la aplicación original pero adaptado\n[x] Gramática de aplicación REST.\n";
fs.writeFileSync(node_2, node_contents_2, "utf8");

const node_3 = path.resolve(baseDirectory, ".", "api.js");
const node_contents_3 = "const fs = require(\"fs\");\nconst path = require(\"path\");\nconst generatorDeProyecto = require(__dirname + \"/generator.js\");\n\nconst RestServersNetwork = class {\n\n    static async buildNetwork(deployer) {\n        try {\n            const network = new this();\n            const deployment = await deployer(network);\n            const schema = await network.buildSchema.call(network);\n            return { network, deployment, schema };\n        } catch (error) {\n            console.log(\"Error on building network from deployer:\", error);\n            throw error;\n\n        }\n    }\n\n    constructor() {\n        this.INTERCEPTOR_TOKEN = \"\\n                ////>>>> INSERT_PROCESSES_LAST_CASE_CLAUSE_HERE <<<<////\";\n        this.configurations = { directorioBase: \".\" };\n        this.servers = {};\n        this.application = {};\n        this.projects = {};\n        this.administrators = {};\n        this.executions = [];\n        this.requester = undefined;\n        this.utils = undefined;\n    }\n\n    async execute(operation) {\n        try {\n            operation.started_at = new Date();\n            this.executions.push(operation);\n            if (operation.comando === \"addConfigurations\") {\n                await this.addConfigurations(operation);\n            } else if (operation.comando === \"addServer\") {\n                await this.addServer(operation);\n            } else if (operation.comando === \"startServers\") {\n                await this.startServers(operation);\n            } else if (operation.comando === \"addProject\") {\n                await this.addProject(operation);\n            } else if (operation.comando === \"addTable\") {\n                await this.addTable(operation);\n            } else if (operation.comando === \"addProcess\") {\n                await this.addProcess(operation);\n            } else if (operation.comando === \"addData\") {\n                await this.addData(operation);\n            } else if (operation.comando === \"addFileToServer\") {\n                await this.addFileToServer(operation);\n            } else if (operation.comando === \"addFileToProject\") {\n                await this.addFileToProject(operation);\n            } else if (operation.comando === \"addFileToApplication\") {\n                await this.addFileToApplication(operation);\n            } else {\n                throw new Error(\"Required parameter «comando» to be an identifiable command, but «\" + operation.comando + \"» is not identified\");\n            }\n            operation.finished_at = new Date();\n        } catch(error) {\n            console.error(error);\n            throw error;\n        }\n    }\n\n    async addConfigurations(parametros) {\n        try {\n            delete parametros.comando;\n            const claves = Object.keys(parametros);\n            for(let index = 0; index < claves.length; index++) {\n                const clave = claves[index];\n                const valor = parametros[clave];\n                this.configurations[clave] = valor;\n            }\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    async addServer(parametros) {\n        try {\n            if (typeof parametros.directorio !== \"string\") {\n                throw new Error(\"Required parameter «directorio» to be a string in order to «addServer»\");\n            }\n            if (typeof parametros.configuracion !== \"object\") {\n                throw new Error(\"Required parameter «configuracion» to be an object in order to «addServer»\");\n            }\n            if (typeof parametros.configuracion.SERVER_ID !== \"string\") {\n                throw new Error(\"Required parameter «configuracion.SERVER_ID» to be an object in order to «addServer»\");\n            }\n            if (typeof parametros.configuracion.SERVER_PORT !== \"number\") {\n                throw new Error(\"Required parameter «configuracion.SERVER_PORT» to be a number in order to «addServer»\");\n            }\n            if (parametros.configuracion.SERVER_ID in this.servers) {\n                throw new Error(\"Required parameter «configuracion.SERVER_ID» to not be an already added server in order to «addServer»\");\n            }\n            const directorio = path.resolve(this.configurations.directorioBase, parametros.directorio);\n            this.servers[parametros.configuracion.SERVER_ID] = {\n                configuracion: parametros.configuracion,\n                directorio: directorio\n            };\n            if(parametros.resetear === true) {\n                fs.rmdirSync(directorio, { recursive: true });\n            }\n            await generatorDeProyecto(directorio);\n            const settingsJsonPath = path.resolve(directorio, \"./src/security/settings.json\");\n            const settingsJson = JSON.parse(fs.readFileSync(settingsJsonPath).toString());\n            const settingsJson2 = Object.assign({}, settingsJson, parametros.configuracion);\n            fs.writeFileSync(settingsJsonPath, JSON.stringify(settingsJson2, null, 2), \"utf8\");\n            if(typeof this.requester === \"undefined\") {\n                this.requester = require(path.resolve(directorio, \"./src/classes/server/Requester.js\"))\n            }\n            if(typeof this.utils === \"undefined\") {\n                this.utils = require(path.resolve(directorio, \"./src/classes/Utils.js\"));\n            }\n        } catch(error) {\n            throw error;\n        }\n    }\n\n    async startServers(parametros) {\n        try {\n            if(!Array.isArray(parametros.servidores)) {\n                throw new Error(\"Required parameter «servidores» to be an array in order to «startServers»\");\n            }\n            for(let index = 0; index < parametros.servidores.length; index++) {\n                const serverId = parametros.servidores[index];\n                if(!(serverId in this.servers)) {\n                    throw new Error(\"Required parameter «servidores» on index «\" + index + \"» to be a SERVER_ID in order to «startServers»\");\n                }\n                const serverData = this.servers[serverId];\n                const serverPath = serverData.directorio;\n                const startPath = path.resolve(serverPath, \"./src/start.js\");\n                const starter = require(startPath);\n                if(starter instanceof Error) {\n                    throw starter;\n                }\n                const result = await starter;\n                this.servers[serverId].environment = result;\n            }\n            await this.execute({\n                comando: \"addServer\",\n                directorio: \"./statics\",\n                interfazDeUsuario: true,\n                resetear: true,\n                configuracion: {\n                    SERVER_ID: \"Static_resources\",\n                    SERVER_PORT: 9090,\n                    APPLICATION_PORT: 9090\n                }\n            });\n            const appPath = path.resolve(this.configurations.directorioBase, \"./statics/src/app.js\");\n            await require(appPath);\n            this.application.path = path.resolve(this.configurations.directorioBase, \"./statics\");\n        } catch(error) {\n            throw error;\n        }\n    }\n\n    async addProject(parametros) {\n        try {\n            if(typeof parametros.proyecto !== \"string\") {\n                throw new Error(\"Required parameter «proyecto» to be a string in order to «addProject»\");\n            }\n            if(!Array.isArray(parametros.servidor)) {\n                throw new Error(\"Required parameter «servidor» to be an array in order to «addProject»\");\n            }\n            if(parametros.servidor.length !== 1) {\n                throw new Error(\"Required parameter «servidor» to be an array of 1 item in order to «addProject»\");\n            }\n            if(typeof parametros.servidor[0] !== \"string\") {\n                throw new Error(\"Required parameter «servidor» on index «0» to be a string in order to «addProject»\");\n            }\n            if(!(parametros.servidor[0] in this.servers)) {\n                throw new Error(\"Required parameter «servidor» on index «0» to be a SERVER_ID in order to «addProject»\");\n            }\n            if(!(\"autentificador\" in parametros)) {\n                throw new Error(\"Required parameter «autentificador» to be defined in order to «addProject»\");\n            }\n            if(parametros.autentificador === null) {\n                if(typeof parametros.configuraciones !== \"object\") {\n                    throw new Error(\"Required parameter «configuraciones» to be an object when «autentificador» is null in order to «addProject»\");\n                }\n                if(typeof parametros.configuraciones.administrator_name !== \"string\") {\n                    throw new Error(\"Required parameter «configuraciones.administrator_name» to be a string when «autentificador» is null in order to «addProject»\");\n                }\n                if(typeof parametros.configuraciones.administrator_password !== \"string\") {\n                    throw new Error(\"Required parameter «configuraciones.administrator_password» to be a string when «autentificador» is null in order to «addProject»\");\n                }\n                if(typeof parametros.configuraciones.administrator_email !== \"string\") {\n                    throw new Error(\"Required parameter «configuraciones.administrator_email» to be a string when «autentificador» is null in order to «addProject»\");\n                }\n            } else {\n                if(!Array.isArray(parametros.autentificador)) {\n                    throw new Error(\"Required parameter «autentificador» to be an array in order to «addProject»\");\n                }\n                if(parametros.autentificador.length !== 2) {\n                    throw new Error(\"Required parameter «autentificador» to be an array with 2 items in order to «addProject»\");\n                }\n                const autentificadorId = parametros.autentificador.join(\"@\");\n                if(!(autentificadorId in this.projects)) {\n                    throw new Error(\"Required parameter «autentificador» to be a valid project identifier when not null in order to «addProject»\");\n                }\n            }\n            const projectId = parametros.servidor.concat([ parametros.proyecto ]).join(\"@\");\n            if(projectId in this.projects) {\n                throw new Error(\"Required parameter «servidor» and «proyecto» to be a unique project identifier in order to «addProject»\");\n            }\n            this.projects[projectId] = parametros;\n            const serverData = this.servers[parametros.servidor[0]];\n            const serverDirectory = serverData.directorio;\n            const serverSettingsPath = path.resolve(serverDirectory, \"./src/security/settings.json\");\n            const serverSettings = JSON.parse(fs.readFileSync(serverSettingsPath).toString());\n            const adminUser = serverSettings.ADMINISTRATOR_USER;\n            const adminPassword = serverSettings.ADMINISTRATOR_PASSWORD;\n            const publicParams = {\n                operation: \"create-project\"\n            };\n            const privateParams = {\n                user: adminUser,\n                password: adminPassword,\n                project: parametros.proyecto,\n                administrator_name: parametros.configuraciones.administrator_name,\n                administrator_password: parametros.configuraciones.administrator_password,\n                administrator_email: parametros.configuraciones.administrator_email,\n                schema_attributes: {\n                    isAuthenticatedBy: this.getAuthenticationSchemaAttributesFromProject(parametros.autentificador)\n                }\n            };\n            const response = await this.requester.request(\"POST\", `${serverSettings.SERVER_PROTOCOL}://${serverSettings.SERVER_HOST}:${serverSettings.SERVER_PORT}`, publicParams, privateParams, {}, true, false, \"Creating project: \" + projectId)\n            if(response.response.status === \"success\") {\n                return true;\n            } else {\n                throw response.response.data;\n            }\n        } catch(error) {\n            throw error;\n        }\n    }\n\n    async addTable(parametros) {\n        try {\n            if (typeof parametros.tabla !== \"string\") {\n                throw new Error(\"Required parameter «tabla» to be a string in order to «addTable»\");\n            }\n            if (!Array.isArray(parametros.proyecto)) {\n                throw new Error(\"Required parameter «proyecto» to be an array in order to «addTable»\");\n            }\n            if (parametros.proyecto.length !== 2) {\n                throw new Error(\"Required parameter «proyecto» to be an array with 2 items in order to «addTable»\");\n            }\n            const proyectoId = parametros.proyecto.join(\"@\");\n            if (!(proyectoId in this.projects)) {\n                throw new Error(\"Required parameter «proyecto» to be a valid project identifier in order to «addTable»\");\n            }\n            const adminToken = await this.getAuthAdminTokenFromProject(parametros.proyecto);\n            const serverURL = await this.getServerURL(parametros.proyecto[0]);\n            await this.requester.request(\"POST\", serverURL, {\n                project: parametros.proyecto[1],\n                operation: \"add-table\"\n            }, {\n                table: parametros.tabla,\n                attributes: JSON.stringify(parametros.configuraciones.attributes || {}),\n                properties: JSON.stringify(parametros.configuraciones.properties || {}),\n                columns: JSON.stringify(parametros.configuraciones.columns || {})\n            }, {\n                authorization: adminToken,\n            }, true, false, \"Add table «\" + parametros.tabla + \"» to project «\" + proyectoId + \"»\");\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    async addProcess(parametros) {\n        try {\n            if (typeof parametros.ruta !== \"string\") {\n                throw new Error(\"Required parameter «ruta» to be a string in order to «addProcess»\");\n            }\n            if (parametros.ruta.indexOf(\"..\") !== -1) {\n                throw new Error(\"Required parameter «ruta» to not contain '..' in order to «addProcess»\");\n            }\n            if (!parametros.ruta.endsWith(\".js\")) {\n                throw new Error(\"Required parameter «ruta» to not contain '..' in order to «addProcess»\");\n            }\n            if (typeof parametros.nombre !== \"string\") {\n                throw new Error(\"Required parameter «nombre» to be a string in order to «addProcess»\");\n            }\n            if (typeof parametros.proceso !== \"function\") {\n                throw new Error(\"Required parameter «proceso» to be a function in order to «addProcess»\");\n            }\n            if(!Array.isArray(parametros.proyectos)) {\n                throw new Error(\"Required parameter «proyectos» to be an array in order to «addProcess»\");\n            }\n            for(let indexProyecto = 0; indexProyecto < parametros.proyectos.length; indexProyecto++) {\n                const proyecto = parametros.proyectos[indexProyecto];\n                if (!Array.isArray(proyecto)) {\n                    throw new Error(\"Required parameter «proyectos» on index «\" + indexProyecto + \"» to be an array in order to «addProcess»\");\n                }\n                if (proyecto.length !== 2) {\n                    throw new Error(\"Required parameter «proyectos» on index «\" + indexProyecto + \"» to be an array of 2 items in order to «addProcess»\");\n                }\n                const proyectoId = proyecto.join(\"@\");\n                if (!(proyectoId in this.projects)) {\n                    throw new Error(\"Required parameter «proyectos» on index «\" + indexProyecto + \"» to be a valid project identifier in order to «addProcess»\");\n                }\n                const serverId = proyecto[0];\n                const projectName = proyecto[1];\n                if(!(serverId in this.servers)) {\n                    throw new Error(\"Required parameter «proyectos» on index «\" + indexProyecto + \"» on index «0» to be a valid server identifier in order to «addProcess»\");\n                }\n                const serverData = this.servers[serverId];\n                const serverPath = serverData.directorio;\n                const processPath = path.resolve(serverPath, \"./src/classes/database/process\", parametros.ruta);\n                if(!processPath.startsWith(serverPath)) {\n                    throw new Error(\"Required parameter «ruta» to result a subpath of the process folder in order to «addProcess»\");\n                }\n                const processSubpath = parametros.ruta;\n                const processSubpathParts = processSubpath.split(\"/\");\n                const processSubpathFolders = processSubpathParts.splice(0, processSubpathParts.length - 1);\n                CreatingFolders:\n                for(let indexFolders = 0; indexFolders < processSubpathFolders.length; indexFolders++) {\n                    const processSubpathFolder = path.resolve(serverPath, \"./src/classes/database/process\", processSubpathFolders.slice(0, indexFolders + 1).join(\"/\"));\n                    const existsFile = await this.utils.fileExists(processSubpathFolder);\n                    if (!existsFile) {\n                        await fs.promises.mkdir(processSubpathFolder);\n                    }\n                }\n                await fs.promises.writeFile(processPath, `module.exports = ${parametros.proceso.toString()};`);\n                const processClassPath = path.resolve(serverPath, \"./src/classes/database/Process.js\");\n                const processClassSource = await fs.promises.readFile(processClassPath, \"utf8\");\n                const processClassSourceModified = processClassSource.replace(this.INTERCEPTOR_TOKEN, this.generateSwitchCaseCodeForProcess(parametros.nombre, parametros.ruta) + this.INTERCEPTOR_TOKEN);\n                await fs.promises.writeFile(processClassPath, processClassSourceModified, \"utf8\");\n                serverData.environment.database.Process.selfUpdate(serverData.environment);\n                const projectJsonPath = path.resolve(serverPath, \"./src/data/projects/\" + projectName + \"/project.json\");\n                const projectData = await this.utils.hydrateJSON(projectJsonPath);\n                projectData.schema.attributes.hasEnabledProcesses[parametros.nombre] = true;\n                await this.utils.dehydrateJSON(projectJsonPath, projectData);\n            }\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    async addData(parametros) {\n        try {\n            const { proyecto, tabla, datos } = parametros;\n            if(typeof proyecto !== \"object\") {\n                throw new Error(\"Required parameter «proyecto» to be an object in order to «addData»\");\n            }\n            if(!Array.isArray(proyecto)) {\n                throw new Error(\"Required parameter «proyecto» to be an array in order to «addData»\");\n            }\n            if(proyecto.length !== 2) {\n                throw new Error(\"Required parameter «proyecto» to be an array of 2 items in order to «addData»\");\n            }\n            const proyectoId = proyecto.join(\"@\");\n            if (!(proyectoId in this.projects)) {\n                throw new Error(\"Required parameter «proyecto» to be a valid project identifier in order to «addData»\");\n            }\n            if(typeof tabla !== \"string\") {\n                throw new Error(\"Required parameter «tabla» to be a string in order to «addData»\");\n            }\n            let dataProvidedAs = undefined;\n            if(typeof datos === \"function\") {\n                dataProvidedAs = \"function\";\n            } else if(typeof datos === \"object\") {\n                dataProvidedAs = \"object\";\n            } else {\n                throw new Error(\"Required parameter «datos» to be a function or an object in order to «addData»\");\n            }\n            const [serverId, projectName] = proyecto;\n            const serverDirectory = this.servers[serverId].directorio;\n            const tableFile = path.resolve(serverDirectory, \"./src/data/projects/\" + projectName + \"/data/\" + tabla + \".json\");\n            const tableData = await this.utils.hydrateJSON(tableFile);\n            if(dataProvidedAs === \"function\") {\n                datos = await datos();\n            }\n            if(!Array.isArray(datos)) {\n                throw new Error(\"Required parameter «datos» for «project.table» (\" + proyecto.join(\"@\") + \".\" + tabla + \") to end as an array or as a function that returns an array in order to «addData»\");\n            }\n            const addedIds = [];\n            for(let indexRow = 0; indexRow < datos.length; indexRow++) {\n                const dato = datos[indexRow];\n                const lastId = tableData.id++;\n                dato.id = lastId;\n                tableData.data[lastId] = dato;\n                addedIds.push(lastId);\n            }\n            await this.utils.dehydrateJSON(tableFile, tableData);\n            return addedIds;\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    async addFileToServer(parametros) {\n        try {\n            const { servidor, tipo, origen, destino } = parametros;\n            if (typeof servidor !== \"string\") {\n                throw new Error(\"Required parameter «servidor» to be a string in order to «addFileToServer»\");\n            }\n            if (!(servidor in this.servers)) {\n                throw new Error(\"Required parameter «servidor» (\" + servidor + \") to be a valid server identifier in order to «addFileToServer»\");\n            }\n            if (typeof tipo !== \"string\") {\n                throw new Error(\"Required parameter «tipo» to be a string in order to «addFileToServer»\");\n            }\n            if ([\"fichero\", \"directorio\"].indexOf(tipo) === -1) {\n                throw new Error(\"Required parameter «tipo» to be 'fichero' or 'directorio' in order to «addFileToServer»\");\n            }\n            if (typeof origen !== \"string\") {\n                throw new Error(\"Required parameter «origen» to be a string in order to «addFileToServer»\");\n            }\n            if (typeof destino !== \"string\") {\n                throw new Error(\"Required parameter «destino» to be a string in order to «addFileToServer»\");\n            }\n            const origenSanitized = path.resolve(process.cwd(), origen);\n            const directorioServidor = path.resolve(this.servers[servidor].directorio);\n            const destinoSanitized = path.resolve(directorioServidor, destino);\n            if (tipo === \"fichero\") {\n                await fs.promises.copyFile(origenSanitized, destinoSanitized);\n            } else if (tipo === \"directorio\") {\n                // @TODO: copiar recursivamente ficheros y carpetas.\n            }\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    async addFileToApplication(parametros) {\n        try {\n            const { tipo, origen, destino } = parametros;\n            if (typeof tipo !== \"string\") {\n                throw new Error(\"Required parameter «tipo» to be a string in order to «addFileToApplication»\");\n            }\n            if ([\"fichero\", \"directorio\"].indexOf(tipo) === -1) {\n                throw new Error(\"Required parameter «tipo» to be 'fichero' or 'directorio' in order to «addFileToApplication»\");\n            }\n            if (typeof origen !== \"string\") {\n                throw new Error(\"Required parameter «origen» to be a string in order to «addFileToApplication»\");\n            }\n            if (typeof destino !== \"string\") {\n                throw new Error(\"Required parameter «destino» to be a string in order to «addFileToApplication»\");\n            }\n            const origenSanitized = path.resolve(process.cwd(), origen);\n            const directorioServidor = path.resolve(this.configurations.directorioBase, \"./statics\");\n            const destinoSanitized = path.resolve(directorioServidor, destino);\n            if (tipo === \"fichero\") {\n                await fs.promises.copyFile(origenSanitized, destinoSanitized);\n            } else if (tipo === \"directorio\") {\n                // @TODO: copiar recursivamente ficheros y carpetas.\n            }\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    async addFileToProject(parametros) {\n        try {\n            const { proyecto, tipo, origen, destino } = parametros;\n            if (typeof proyecto !== \"object\") {\n                throw new Error(\"Required parameter «proyecto» to be an object in order to «addFileToProject»\");\n            }\n            if (!Array.isArray(proyecto)) {\n                throw new Error(\"Required parameter «proyecto» to be an array in order to «addFileToProject»\");\n            }\n            if (proyecto.length !== 2) {\n                throw new Error(\"Required parameter «proyecto» to be an array of 2 items in order to «addFileToProject»\");\n            }\n            const proyectoId = proyecto.join(\"@\");\n            if (!(proyectoId in this.projects)) {\n                throw new Error(\"Required parameter «proyecto» (\" + proyectoId + \") to be a valid project identifier in order to «addFileToProject»\");\n            }\n            if (typeof tipo !== \"string\") {\n                throw new Error(\"Required parameter «tipo» to be a string in order to «addFileToProject»\");\n            }\n            if ([\"fichero\", \"directorio\"].indexOf(tipo) === -1) {\n                throw new Error(\"Required parameter «tipo» to be 'fichero' or 'directorio' in order to «addFileToProject»\");\n            }\n            if (typeof origen !== \"string\") {\n                throw new Error(\"Required parameter «origen» to be a string in order to «addFileToProject»\");\n            }\n            if (typeof destino !== \"string\") {\n                throw new Error(\"Required parameter «destino» to be a string in order to «addFileToProject»\");\n            }\n            const origenSanitized = path.resolve(process.cwd(), origen);\n            const directorioProyecto = path.resolve(this.servers[proyecto[0]].directorio, \"./src/data/projects/\" + proyecto[1]);\n            const destinoSanitized = path.resolve(directorioProyecto, destino);\n            if(tipo === \"fichero\") {\n                await fs.promises.copyFile(origenSanitized, destinoSanitized);\n            } else if(tipo === \"directorio\") {\n                // @TODO: copiar recursivamente ficheros y carpetas.\n            }\n        } catch(error) {\n            throw error;\n        }\n    }\n\n    generateSwitchCaseCodeForProcess(processId, processPath) {\n        return `\n                case ${JSON.stringify(processId)}: {\n                    response = await require(__dirname + \"/process/\" + ${JSON.stringify(processPath)}).call(this.environment, publicParameters, privateParameters, configurations);\n                    break;\n                }`;\n    }\n\n    getAuthenticationSchemaAttributesFromProject(project) {\n        if(project === null) {\n            return undefined;\n        }\n        const [ serverId, projectName ] = project;\n        const serverDirectory = this.servers[serverId].directorio;\n        const serverSettingsPath = path.resolve(serverDirectory, \"./src/security/settings.json\");\n        const serverSettings = JSON.parse(fs.readFileSync(serverSettingsPath).toString());\n        return {\n            url: `${serverSettings.SERVER_PROTOCOL}://${serverSettings.SERVER_HOST}:${serverSettings.SERVER_PORT}`,\n            project: projectName,\n        };\n    }\n\n    async getServerURL(serverId) {\n        try {\n            if(!(serverId in this.servers)) {\n                throw new Error(\"Required parameter «serverId» to be a valid server identifier\");\n            }\n            const settingsPath = path.resolve(this.servers[serverId].directorio, \"./src/security/settings.json\");\n            const settingsData = await this.utils.hydrateJSON(settingsPath);\n            return `${settingsData.SERVER_PROTOCOL}://${settingsData.SERVER_HOST}:${settingsData.SERVER_PORT}`;\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    async getAuthAdminTokenFromProject(project) {\n        try {\n            const [ projectServerId, projectName ] = project;\n            const projectId = project.join(\"@\");\n            const projectData = this.projects[projectId];\n            const projectAuthenticator = projectData.autentificador;\n            let authServerId, authServerData, authProjectName, authProjectId, authProjectData;\n            if(projectAuthenticator === null) {\n                authServerId = projectServerId;\n                authServerData = this.servers[authServerId];\n                authProjectName = projectName;\n                authProjectId = project.join(\"@\");\n                authProjectData = projectData;\n            } else {\n                authServerId = projectAuthenticator[0];\n                authServerData = this.servers[authServerId];\n                authProjectName = projectAuthenticator[0];\n                authProjectId = projectAuthenticator.join(\"@\");\n                authProjectData = this.projects[authProjectId];\n            }\n            if(!(authProjectId in this.administrators)) {\n                const authServerSettings = await this.utils.hydrateJSON(path.resolve(authServerData.directorio, \"./src/security/settings.json\"));\n                const authURL = `${authServerSettings.SERVER_PROTOCOL}://${authServerSettings.SERVER_HOST}:${authServerSettings.SERVER_PORT}`;\n                const adminUser = this.projects[authProjectId].configuraciones.administrator_name;\n                const adminPassword = this.projects[authProjectId].configuraciones.administrator_password;\n                const response = await this.requester.request(\"POST\", authURL, {\n                    project: authProjectName,\n                    operation: \"login\"\n                }, {\n                    user: adminUser,\n                    password: adminPassword,\n                }, {}, true, false, \"Login to project «\" + authProjectId + \"»\");\n                this.administrators[authProjectId] = { token: response.response.data.session.token };\n            }\n            return this.administrators[authProjectId].token;\n        } catch(error) {\n            throw error;\n        }\n    }\n\n    async getServerPublicData(serverId) {\n        try {\n            const serverData = this.servers[serverId];\n            const settingsPath = path.resolve(serverData.directorio, \"./src/security/settings.json\");\n            const settingsData = await this.utils.hydrateJSON(settingsPath);\n            const serverPublicData = {\n                id: serverId,\n                url: `${settingsData.SERVER_PROTOCOL}://${settingsData.SERVER_HOST}:${settingsData.SERVER_PORT}`,\n                port: settingsData.SERVER_PORT,\n                host: settingsData.SERVER_HOST,\n                protocol: settingsData.SERVER_PROTOCOL,\n            };\n            return serverPublicData;\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    async buildSchema() {\n        try {\n            const projectIds = Object.keys(this.projects);\n            const schema = { projects: {}, authProject: undefined };\n            for(let indexProject = 0; indexProject < projectIds.length; indexProject++) {\n                const projectId = projectIds[indexProject];\n                const projectData = this.projects[projectId];\n                const [ serverId, projectName ] = projectId.split(\"@\");\n                const serverData = this.servers[serverId];\n                const projectPath = path.resolve(serverData.directorio, \"./src/data/projects\", projectName, \"./project.json\");\n                const serverJson = await this.getServerPublicData(serverId);\n                const projectJsonBrute = await this.utils.hydrateJSON(projectPath);\n                const projectJson = Object.assign({ id: projectId, name: projectName }, projectJsonBrute);\n                schema.projects[projectId] = { server: serverJson, project: projectJson };\n                if((projectData.autentificador === null) && (typeof(schema.authProject) === \"undefined\")) {\n                    schema.authProject = projectId;\n                }\n            }\n            const schemaPath = path.resolve(this.application.path, \"./src/app/schema.json\");\n            await this.utils.dehydrateJSON(schemaPath, schema);\n            return this;\n        } catch(error) {\n            throw error;\n        }\n    }\n\n};\n\nconst una_red_de_servidores_http_rest_automaticos = function (deployerCallback) {\n    if (typeof window === \"object\") {\n        console.log(\"La gramática de redes de servidores HTTP REST automáticos solo tiene efecto en entornos Node.js\");\n    } else if (typeof global === \"object\") {\n        return RestServersNetwork.buildNetwork(deployerCallback);\n    }\n};\n\nmodule.exports = { RestServersNetwork, una_red_de_servidores_http_rest_automaticos };";
fs.writeFileSync(node_3, node_contents_3, "utf8");

const node_4 = path.resolve(baseDirectory, ".", "bin");
fs.mkdirSync(node_4);

const node_5 = path.resolve(baseDirectory, ".", "bin", "build-generator.js");
const node_contents_5 = "const fs = require(\"fs\");\nconst path = require(\"path\");\n\nconst getTree = function(directory, isRoot = true, rootDirectory = undefined) {\n    const files = fs.readdirSync(directory).reduce(function(output, filenode) {\n        const filenodePath = path.resolve(directory, filenode);\n        const isGeneratorFile = [\"generator.cli.js\", \"generator.js\"].indexOf(filenode) !== -1;\n        const isJsFile = filenodePath.endsWith(\".js\");\n        const hasCaloFile = isJsFile ? fs.existsSync(filenodePath.replace(/\\.js$/g, \".calo\")) : false;\n        if (isGeneratorFile) {} else {\n            const isDirectory = fs.lstatSync(filenodePath).isDirectory();\n            if (isJsFile && hasCaloFile) {\n                // output[filenode] = isDirectory ? {} : fs.readFileSync(filenodePath).toString();\n            } else if (isJsFile) {\n                output[filenode] = isDirectory ? {} : fs.readFileSync(filenodePath).toString();\n            } else {\n                output[filenode] = isDirectory ? {} : fs.readFileSync(filenodePath).toString();\n            }\n        }\n        return output;\n    }, {});\n    const subnodeIds = Object.keys(files);\n    for(let index = 0; index < subnodeIds.length; index++) {\n        const subnodeId = subnodeIds[index];\n        const subnode = files[subnodeId];\n        if(typeof subnode === \"object\") {\n            const currentRootDirectory = (typeof rootDirectory === \"undefined\") ? directory : rootDirectory;\n            const subnodePath = path.resolve(directory, subnodeId);\n            console.log(\"Importing: \" + subnodePath)\n            files[subnodeId] = getTree(subnodePath, false, currentRootDirectory);\n        }\n    }\n    if(!isRoot) {\n        return files;\n    }\n    return { files, directory };\n};\n\nconst generateSourceCode = function(tree) {\n    const { files, directory } = tree;\n    let output = '';\n    output += 'const fs = require(\"fs\");\\n';\n    output += 'const path = require(\"path\");\\n';\n    output += 'const baseDirectory = process.argv[2];\\n';\n    output += 'if(typeof baseDirectory === \"undefined\") throw new Error(\"Required argument to know the destination of the project\");\\n';\n    output += 'if(path.resolve(baseDirectory) === path.resolve(__dirname)) throw new Error(\"Required argument to not be the same directory of the generator file\");\\n';\n    output += '';\n    let index = 0;\n    const generateSourceCodeForNode = function(treeNode, treeNodePath = [\".\"]) {\n        let outputForNode = \"\";\n        if(typeof treeNode === \"string\") {\n            let nodeIndex = index++;\n            const treeNodePathToParametersString = treeNodePath.length ? treeNodePath.map(n => JSON.stringify(n)).join(', ') : '\".\"';\n            outputForNode += '\\nconst node_' + nodeIndex + ' = path.resolve(baseDirectory, ' + treeNodePathToParametersString + ');';\n            outputForNode += '\\nconst node_contents_' + nodeIndex + ' = ' + JSON.stringify(treeNode) + ';';\n            outputForNode += '\\nfs.writeFileSync(node_' + nodeIndex + ', node_contents_' + nodeIndex + ', \"utf8\");\\n';\n        } else if(typeof treeNode === \"object\") {\n            let nodeIndex = index++;\n            const treeNodePathToParametersString = treeNodePath.length ? treeNodePath.map(n => JSON.stringify(n)).join(', ') : '\".\"';\n            outputForNode += '\\nconst node_' + nodeIndex + ' = path.resolve(baseDirectory, ' + treeNodePathToParametersString + ');';\n            outputForNode += '\\nfs.mkdirSync(node_' + nodeIndex + ');\\n';\n            outputForNode += Object.keys(treeNode).map(subnode => generateSourceCodeForNode(treeNode[subnode], treeNodePath.concat([subnode]))).join('');\n        }\n        return outputForNode;\n    };\n    output += generateSourceCodeForNode(tree.files);\n    return output;\n};\n\nconst generatorTree = getTree(path.resolve(__dirname, \"..\"));\nconst generatorSourceCode = generateSourceCode(generatorTree);\nconst generatorSrcPath = path.resolve(__dirname, \"..\", \"generator.cli.js\");\nfs.writeFileSync(generatorSrcPath, generatorSourceCode, \"utf8\");\n\ntry {\n    const generatorDstPath = \"/home/carlos/Escritorio/Castelog/official/src/lib/401.castelog.v1.variables.generador_de_proyecto_rest.part.js\";\n    const generatorDst2Path = path.resolve(__dirname, \"..\", \"generator.js\");\n    let output = \"\";\n    output += \"Castelog.variables.generador_de_proyector_rest = function(baseDirectoryArg) {\\n\";\n    output += \"\\n\";\n    output += generatorSourceCode.replace('const baseDirectory = process.argv[2];', 'const baseDirectory = path.resolve(baseDirectoryArg);');\n    output += \"\";\n    output += \"};\";\n    fs.writeFileSync(generatorDstPath, output, \"utf8\");\n    output = output.replace(\"Castelog.variables.generador_de_proyector_rest\", \"module.exports\");\n    fs.writeFileSync(generatorDst2Path, output, \"utf8\");\n} catch(error) {\n    \n}";
fs.writeFileSync(node_5, node_contents_5, "utf8");

const node_6 = path.resolve(baseDirectory, ".", "bin", "clean-tests.js");
const node_contents_6 = "const mkdirSync = function(...args) {\n    try {\n        require(\"fs\").mkdirSync(...args);\n    } catch(error) {\n        \n    }\n};\n\nconst rmdirSync = function (...args) {\n    try {\n        require(\"fs\").rmdirSync(...args);\n    } catch (error) {\n\n    }\n};\n\nconst unlinkSync = function (...args) {\n    try {\n        require(\"fs\").unlinkSync(...args);\n    } catch (error) {\n\n    }\n};\n\nrmdirSync(__dirname + \"/../test/network/red_uno\", { recursive: true });\nmkdirSync(__dirname + \"/../test/network/red_uno\");\nrmdirSync(__dirname + \"/../test/network/red_dos\", { recursive: true });\nmkdirSync(__dirname + \"/../test/network/red_dos\");\nrmdirSync(__dirname + \"/../test/network/red_dos_prototipo\", { recursive: true });\nmkdirSync(__dirname + \"/../test/network/red_dos_prototipo\");\nunlinkSync(__dirname + \"/../src/app/app.js\");\nunlinkSync(__dirname + \"/../src/app/main.js\");\nunlinkSync(__dirname + \"/../src/app/js/almacenamiento.js\");\nunlinkSync(__dirname + \"/../src/app/js/api-nativa.js\");\nunlinkSync(__dirname + \"/../src/app/js/cliente.js\");\nunlinkSync(__dirname + \"/../src/app/js/notificaciones.js\");\nunlinkSync(__dirname + \"/../src/app/js/traducciones.js\");\nunlinkSync(__dirname + \"/../src/app/js/utilidades.js\");\nunlinkSync(__dirname + \"/../src/app/restologia-app.1.0.0.html\");\nrmdirSync(__dirname + \"/../src/data/projects/Empresa_z\", { recursive: true });";
fs.writeFileSync(node_6, node_contents_6, "utf8");

const node_7 = path.resolve(baseDirectory, ".", "bin", "stop-server.js");
const node_contents_7 = "const { SERVER_PORT } = require(__dirname + \"/../src/security/settings.json\");\nrequire(\"child_process\").execSync(`fuser -n tcp -k ${SERVER_PORT}`);";
fs.writeFileSync(node_7, node_contents_7, "utf8");

const node_8 = path.resolve(baseDirectory, ".", "build-network.sh");
const node_contents_8 = "pkill node\nnpm run build:generator\nnpm run test:network";
fs.writeFileSync(node_8, node_contents_8, "utf8");

const node_9 = path.resolve(baseDirectory, ".", "build-syntax.sh");
const node_contents_9 = "pkill node\nnpm run build:generator\ncd ~/Escritorio/Castelog/official\nnpm run build:all\ncd ~/Escritorio/PROGRAMAS/restologia/instalacion\nnpm run test:network";
fs.writeFileSync(node_9, node_contents_9, "utf8");

const node_10 = path.resolve(baseDirectory, ".", "nodemon.json");
const node_contents_10 = "{\n    \"events\": {\n        \"crash\": \"npm run close:all\"\n    }\n}";
fs.writeFileSync(node_10, node_contents_10, "utf8");

const node_11 = path.resolve(baseDirectory, ".", "package.json");
const node_contents_11 = "{\n  \"name\": \"restologia\",\n  \"version\": \"0.0.1\",\n  \"description\": \"Automatic HTTP JSON REST API made easy and scalable.\",\n  \"main\": \"./api.js\",\n  \"scripts\": {\n    \"build:generator\": \"npm run clean:tests && node bin/build-generator.js\",\n    \"build:syntax\": \"bash build-syntax.sh\",\n    \"build:network\": \"bash build-network.sh\",\n    \"clean:tests\": \"node bin/clean-tests.js\",\n    \"start\": \"node src/start.js\",\n    \"app\": \"node src/app.js\",\n    \"start:dev\": \"nodemon --watch 'src' -e 'js' -x 'npm run start'\",\n    \"test:monolith\": \"node test/monolith.js\",\n    \"test:pluralith\": \"node test/pluralith.js\",\n    \"test:network\": \"node test/network.js\",\n    \"test:app\": \"bash neto.sh\",\n    \"stop:server\": \"node bin/stop-server.js\"\n  },\n  \"keywords\": [\"http\", \"api\", \"rest\", \"automatic\", \"dependency-free\", \"json\"],\n  \"author\": \"https://github.com/allnulled\",\n  \"license\": \"WTFPL\"\n}\n";
fs.writeFileSync(node_11, node_contents_11, "utf8");

const node_12 = path.resolve(baseDirectory, ".", "src");
fs.mkdirSync(node_12);

const node_13 = path.resolve(baseDirectory, ".", "src", "app");
fs.mkdirSync(node_13);

const node_14 = path.resolve(baseDirectory, ".", "src", "app", "app-prev-1.calo");
const node_contents_14 = "Compilable con:\n  ./js/api-nativa.calo\n  ./js/almacenamiento.calo\n  ./js/traducciones.calo\n  ./js/notificaciones.calo\n  ./js/utilidades.calo\n  ./js/cliente.calo\nEmpaquetable con:\n  ./js/api-nativa.js\n  ./js/almacenamiento.js\n  ./js/traducciones.js\n  ./js/notificaciones.js\n  ./js/utilidades.js\n  ./js/cliente.js\nEjecutable como documento HTML5\ncon autor allnulled\ncon nombre restologia-app\ncon versión 1.0.0:\n<head>\n    <title>Restologia</title>\n    <meta charset=\"utf8\" />\n    <link rel=\"stylesheet\" href=\"/app/styles/reset.css\" />\n    <link rel=\"stylesheet\" href=\"/app/styles/framework.css\" />\n    <link rel=\"stylesheet\" href=\"/app/styles/app.css\" />\n    <link rel=\"stylesheet\" href=\"/app/styles/theme.css\" />\n    <link rel=\"stylesheet\" href=\"/app/styles/custom.css\" />\n</head>\n<body>\n    <div id=\"app\"></div>\n</body>.\n\nCreo noop como una función donde retorno {}.\n\n@SECCIÓN 1. Prerrequisitos & Componentes:\n\n@SECCIÓN 1.*. Prerrequisito de Propiedades de Control comunes:\n\nCreo propiedadesDeControl como {\n    Propiedad onChange como {\n        Propiedad type como Function.\n        Propiedad default como noop.\n    }.\n    Propiedad label como {\n        Propiedad type como String.\n        Propiedad default como \"\".\n    }.\n    Propiedad placeholder como {\n        Propiedad type como String.\n        Propiedad default como \"\".\n    }.\n    Propiedad initialValue como {\n        Propiedad type como String.\n        Propiedad default como \"\".\n    }.\n    Propiedad generalClasses como {\n        Propiedad type como String.\n        Propiedad default como \"\".\n    }.\n    Propiedad labelClasses como {\n        Propiedad type como String.\n        Propiedad default como \"\".\n    }.\n    Propiedad inputClasses como {\n        Propiedad type como String.\n        Propiedad default como \"\".\n    }.\n    Propiedad onClick como {\n        Propiedad type como Function.\n        Propiedad default como noop.\n    }.\n}.\n\n@SECCIÓN 1.*. Prerrequisito de Datos de Control comunes:\n\nCreo datosDeControl como una función con (scope) donde {\n    Retorno {\n        Propiedad internalValue como scope.initialValue.\n        Propiedad internalOnChange como scope.onChange.\n        Propiedad internalLabel como scope.label.\n        Propiedad internalGeneralClasses como scope.generalClasses.\n        Propiedad internalLabelClasses como scope.labelClasses.\n        Propiedad internalInputClasses como scope.inputClasses.\n        Propiedad internalPlaceholder como scope.placeholder.\n        Propiedad internalOnClick como scope.onClick.\n    }.\n}.\n\n@SECCIÓN 1.*. Prerrequisito de Watchers de Control comunes:\n\nCreo watchersDeControl como {\n    Método internalValue como una función con (v) donde {\n        Hago this.internalOnChange(v, this).\n    }.\n}.\n\n@SECCIÓN 1.*. Componente de Card:\n\nCreo Card como un componente vue con nombre \"Card\" con plantilla {\n    <div class=\"Card\" :class=\"internalGeneralClasses\">\n        <slot></slot>\n    </div>\n} con lógica {\n    Retorno {\n        Propiedad props como { ...Incluyo propiedadesDeControl }.\n        Método data como una función donde retorno { ...Incluyo datosDeControl(this) }.\n        Propiedad watch como { ...Incluyo watchersDeControl }.\n    }.\n}.\n\n@SECCIÓN 1.*. Componente de ControlForText:\n\nCreo ControlForText como un componente vue con nombre \"ControlForText\" con plantilla {\n    <div class=\"ControlForText\" :class=\"internalGeneralClasses\">\n        <div v-if=\"internalLabel\" :class=\"internalLabelClasses\">{{ $t(internalLabel) }}</div>\n        <input type=\"text\" :class=\"internalInputClasses\" v-model=\"internalValue\" />\n    </div>\n} con lógica {\n    Retorno {\n        Propiedad props como { ...Incluyo propiedadesDeControl }.\n        Método data como una función donde retorno { ...Incluyo datosDeControl(this) }.\n        Propiedad watch como { ...Incluyo watchersDeControl }.\n    }.\n}.\n\n@SECCIÓN 1.*. Componente de ControlForPassword:\n\nCreo ControlForPassword como un componente vue con nombre \"ControlForPassword\" con plantilla {\n    <div class=\"ControlForPassword\" :class=\"internalGeneralClasses\">\n        <div v-if=\"internalLabel\" :class=\"internalLabelClasses\">{{ $t(internalLabel) }}</div>\n        <input type=\"password\" :class=\"internalInputClasses\" v-model=\"internalValue\" />\n    </div>\n} con lógica {\n    Retorno {\n        Propiedad props como { ...Incluyo propiedadesDeControl }.\n        Método data como una función donde retorno { ...Incluyo datosDeControl(this) }.\n        Propiedad watch como { ...Incluyo watchersDeControl }.\n    }.\n}.\n\n@SECCIÓN 1.*. Componente de ControlForButton:\n\nCreo ControlForButton como un componente vue con nombre \"ControlForButton\" con plantilla {\n    <div class=\"ControlForButton\" :class=\"internalGeneralClasses\">\n        <button type=\"button\" :class=\"internalInputClasses\" v-on:click=\"internalOnClick\">\n            <slot></slot>\n        </button>\n    </div>\n} con lógica {\n    Retorno {\n        Propiedad props como { ...Incluyo propiedadesDeControl }.\n        Método data como una función donde retorno { ...Incluyo datosDeControl(this) }.\n        Propiedad watch como { ...Incluyo watchersDeControl }.\n    }.\n}.\n\n@SECCIÓN 1.*. Componente de Horizontally:\n\nCreo Horizontally como un componente vue con nombre \"Horizontally\" con plantilla {\n    <table class=\"width_100x100\">\n        <tbody>\n            <tr>\n                <slot></slot>\n            </tr>\n        </tbody>\n    </table>\n} con lógica {\n    Retorno {\n        Propiedad props como { ...Incluyo propiedadesDeControl }.\n        Método data como una función donde retorno { ...Incluyo datosDeControl(this) }.\n        Propiedad watch como { ...Incluyo watchersDeControl }.\n    }.\n}.\n\n@SECCIÓN 1.*. Componente de TitleOfPage:\n\nCreo TitleOfPage como un componente vue con nombre \"TitleOfPage\" con plantilla {\n    <div class=\"TitleOfPage\">\n        <h3 class=\"padding_2 text_align_right\"><slot></slot></h3>\n    </div>\n}.\n\n@SECCIÓN 1.*. Componente de LanguageSelector:\n\nCreo LanguageSelector como un componente vue con nombre \"LanguageSelector\" con plantilla {\n    <div class=\"LanguageSelector text_align_right\">\n        <Horizontally>\n            <td class=\"width_1x100\">\n                <span>{{ $t(\"Idioma:\") }}</span>\n            </td>\n            <td class=\"width_100x100\">\n                <select v-model=\"selected_language\">\n                    <option value=\"es\">Español</option>\n                    <option value=\"ca\">Català</option>\n                    <option value=\"en\">English</option>\n                </select>\n            </td>\n        </Horizontally>\n    </div>\n} con lógica donde {\n    Retorno {\n        Método data como una función donde {\n            Retorno {\n                Propiedad selected_language como \"\".\n            }.\n        }.\n        Propiedad watch como {\n            Método selected_language como una función con (nuevoValor) donde {\n                Hago this.$almacenamiento.persistir(\"preferences.user.language\", nuevoValor).\n                Hago this.$i18n.i18next.changeLanguage(nuevoValor).\n            }.\n        }.\n        Método mounted como una función donde {\n            Asigno this.selected_language como this.$almacenamiento.obtener(\"preferences.user.language\", this.$i18n.i18next.language).\n        }.\n    }.\n}.\n\n@SECCIÓN 1.*. Componente de Notificaciones:\n\nCreo Notificaciones como un componente vue con nombre \"Notificaciones\" con plantilla {\n    <div class=\"Notificaciones padding_horizontal_3 padding_top_2\">\n        <div style=\"position: fixed; top: auto; bottom: 0; left: 0; right: 0;\">\n            <span>Notificaciones: </span>\n            <span>{{ notifications }}</span>\n        </div>\n    </div>\n} con lógica donde {\n    Retorno {\n        Método data como una función donde retorno {\n            Propiedad notifications como [].\n        }.\n        Propiedad methods como {\n            Método addNotification como una función con (notification) donde {\n                Creo $id como window.$utilidades.getRandomId(10).\n                Creo notification2 como Object.assign({}, notification, { $id }).\n                Si notification es instancia de Error {\n                    Hago this.notifications.push(notification2).\n                }\n                Y si no {\n                    Hago this.notifications.push(notification2).\n                }.\n                Hago setTimeout(una lambda donde {\n                    Creo indiceNotification como Object.keys(this.notifications).filter(una lambda con (index) donde {\n                        Retorno this.notifications[index].$id es igual que $id.\n                    })[0].\n                    Hago this.notifications.splice(indiceNotification, 1).\n                }, notification2.timeout o 5000).\n            }.\n        }.\n    }.\n}.\n\n@SECCIÓN 1.*. Componente de Topbar:\n\nCreo Topbar como un componente vue con nombre \"Topbar\" con plantilla {\n    <div class=\"Topbar\">\n        <Horizontally>\n            <td class=\"width_1x100\">\n                <ControlForButton :on-click=\"toggleNavigation\">\n                    #\n                </ControlForButton>\n            </td>\n            <td class=\"width_100x100 text_align_center\">\n                <h2>Restología</h2>\n            </td>\n        </Horizontally>\n    </div>\n} con lógica donde {\n    Retorno {\n        Método data como una función donde retorno {}.\n        Propiedad methods como {\n            Método toggleNavigation como una función donde {\n                Hago this.$router.history.push(\"/home\").\n            }.\n        }.\n    }.\n}.\n\n@SECCIÓN 1.*. Componente de BackButton:\n\nCreo BackButton como un componente vue con nombre \"BackButton\" con plantilla {\n    <div class=\"BackButton\" :class=\"internalGeneralClasses\">\n        <ControlForButton input-classes=\"width_auto\" :on-click=\"goToRouteUp\" >{{ $t(\"Atrás\") }}</ControlForButton>\n    </div>\n} con lógica donde {\n    Retorno {\n        Método props como {\n            Propiedad generalClasses como {\n                Propiedad type como String.\n                Propiedad default como \"\".\n            }.\n            Propiedad levels como {\n                Propiedad type como Number.\n                Propiedad default como 1.\n            }.\n        }.\n        Método data como una función donde retorno {\n            Propiedad internalGeneralClasses como this.generalClasses.\n            Propiedad internalLevels como this.levels.\n        }.\n        Propiedad methods como {\n            Método goToRouteUp como una función donde {\n                Creo variable partesDeRuta como this.$route.path.split(\"/\").\n                Desde 0 hasta this.internalLevels hago partesDeRuta.pop().\n                Creo variable nuevaRuta como partesDeRuta.join(\"/\").\n                Si nuevaRuta es igual que \"\" asigno nuevaRuta como \"/home\".\n                Hago this.$router.history.push(nuevaRuta).\n            }.\n        }.\n    }.\n}.\n\n@SECCIÓN 2. Páginas:\n\n@SECCIÓN 2.*. Componente de HomePage:\n\nCreo HomePage como un componente vue con nombre \"HomePage\" con plantilla {\n    <div class=\"HomePage\">\n        <TitleOfPage>\n            <Horizontally>\n                <td class=\"width_auto\"><BackButton general-classes=\"visibility_hidden\" /></td>\n                <td class=\"width_100x100\">{{ $t(\"Home\") }}</td>\n            </Horizontally>\n        </TitleOfPage>\n        <hr />\n        <div class=\"padding_2 padding_bottom_0\">\n            <Card>\n                <ul class=\"BigMenuSquaresList\">\n                    <li class=\"margin_bottom_2\" v-on:click=\"() => $router.history.push('/data')\">\n                        <span class=\"link_text\">{{ $t(\"Datos\") }}</span>\n                    </li>\n                    <li class=\"margin_bottom_2\" v-on:click=\"() => $router.history.push('/settings')\">\n                        <span class=\"link_text\">{{ $t(\"Configuraciones\") }}</span>\n                    </li>\n                    <li class=\"margin_bottom_2\" v-on:click=\"() => $router.history.push('/logout')\">\n                        <span class=\"link_text\">{{ $t(\"Cerrar sesión\") }}</span>\n                    </li>\n                </ul>\n            </Card>\n        </div>\n    </div>\n}.\n\n@SECCIÓN 2.*. Componente de LoginPage:\n\nCreo LoginPage como un componente vue con nombre \"LoginPage\" con plantilla {\n    <div class=\"LoginPage\">\n        <TitleOfPage>\n            <Horizontally>\n                <td class=\"width_auto\"><BackButton :general-classes=\"$root.authentication ? '' : 'visibility_hidden'\" /></td>\n                <td class=\"width_100x100\">{{ $t(\"Identificación\") }}</td>\n            </Horizontally>\n        </TitleOfPage>\n        <hr />\n        <div class=\"padding_vertical_4 text_align_center\"> \n            {{ $root.metadata.project }}\n        </div>\n        <hr />\n        <div class=\"text_align_center remarked_row padding_horizontal_2\">\n            <div class=\"padding_2 padding_bottom_0 text_align_left display_inline_block margin_vertical_4 info_group default_row\" style=\"max-width: 180px;\">\n                <Card general-classes=\"\">\n                    <ControlForText :on-change=\"v => user = v\" label=\"Usuario:\" ref=\"Login_user_input\" general-classes=\"padding_top_2\" />\n                    <ControlForPassword :on-change=\"v => password = v\" label=\"Contraseña:\" ref=\"Login_password_input\" general-classes=\"padding_top_2\" />\n                    <ControlForButton :on-click=\"login\" general-classes=\"padding_vertical_2\">{{ $t(\"Identificarse\") }}</ControlForButton>\n                </Card>\n            </div>\n        </div>\n        <hr />\n        <div class=\"padding_2\">\n            <LanguageSelector />\n        </div>\n    </div>\n} con lógica {\n    Retorno {\n        Método data como una función donde {\n            Asigno window.$loginpage como this.\n            Retorno {\n                Propiedad user como this.$almacenamiento.obtener(\"preferences.user.user\", \"\").\n                Propiedad password como this.$almacenamiento.obtener(\"preferences.user.password\", \"\").\n            }.\n        }.\n        Propiedad methods como {\n            Método login como una función asíncrona donde {\n                Hago this.$rest.setProject(this.project).\n                Creo respuestaLogin como asíncronamente this.$rest.login(this.user, this.password).\n                Creo respuestaSchema como asíncronamente this.$rest.schema(this.$root).\n                Hago this.$router.history.push(\"/home\").\n            } en errores hago this.$notificaciones.error(error).\n        }.\n        Propiedad watch como {\n            Método user como una función con (nuevoValor) donde {\n                Hago this.$almacenamiento.persistir(\"preferences.user.user\", nuevoValor).\n            }.\n            Método password como una función con (nuevoValor) donde {\n                Hago this.$almacenamiento.persistir(\"preferences.user.password\", nuevoValor).\n            }.\n        }.\n        Método mounted como una función donde {\n            Asigno this.$refs[\"Login_user_input\"].internalValue como this.$almacenamiento.obtener(\"preferences.user.user\", \"\").\n            Asigno this.$refs[\"Login_password_input\"].internalValue como this.$almacenamiento.obtener(\"preferences.user.password\", \"\").\n        }.\n    }.\n}.\n\n@SECCIÓN 2.*. Componente de LogoutPage:\n\nCreo LogoutPage como un componente vue con nombre \"LogoutPage\" con plantilla {\n    <div class=\"LogoutPage\">\n        <TitleOfPage>\n            <Horizontally>\n                <td class=\"width_auto\"><BackButton :general-classes=\"$root.authentication ? '' : 'visibility_hidden'\" /></td>\n                <td class=\"width_100x100\">{{ $t(\"Cerrar sesión\") }}</td>\n            </Horizontally>\n        </TitleOfPage>\n        <hr />\n        <div class=\"padding_horizontal_2 text_align_center\">\n            <ControlForButton :on-click=\"closeSession\" general-classes=\"padding_vertical_2\">{{ $t(\"Cerrar sesión\") }}</ControlForButton>\n        </div>\n    </div>\n} con lógica {\n    Retorno {\n        Método data como una función donde {\n            Retorno {}.\n        }.\n        Propiedad methods como {\n            Método closeSession como una función asíncrona donde {\n                Creo respuestaLogout como asíncronamente this.$rest.logout().\n                Si this.$rest.checkSuccess(respuestaLogout) hago this.$router.history.push(\"/home\");\n                Y si no hago this.$notificaciones.error(respuestaLogout).\n            } en errores hago this.$notificaciones.error(error).\n        }.\n    }.\n}.\n\n@SECCIÓN 2.*. Componente de DataTablePage:\n\nCreo DataTablePage como un componente vue con nombre \"DataTablePage\" con plantilla {\n    <div class=\"DataTablePage\">\n        <TitleOfPage>\n            <Horizontally>\n                <td class=\"width_auto\"><BackButton /></td>\n                <td class=\"width_100x100\">{{ $t(\"Datos de\") }} {{ $route.params.table }}</td>\n            </Horizontally>\n        </TitleOfPage>\n        <hr/>\n        <div class=\"padding_2\">\n            <DataTableComponent\n                mode=\"view\"\n                :target-table=\"$route.params.table\"\n            />\n        </div>\n    </div>\n} con lógica {\n    Retorno {\n        \n    }.\n}.\n\n@SECCIÓN 2.*. Componente de DataTableComponent:\n\nCreo DataTableComponent como un componente vue con nombre \"DataTableComponent\" con plantilla {\n    <div class=\"DataTableComponent\">\n        <div v-if=\"mode === 'input'\">\n            <Horizontally>\n                <td class=\"width_1x100\">\n                    <span class=\"font_size_small\">{{ (modeType === 'list') ? $t(\"Seleccionados\") : $t(\"Seleccionado\") }}: </span>\n                </td>\n                <td class=\"width_100x100\">\n                    <input type=\"text\" v-model=\"internalValue\" disabled />\n                </td>\n                <td class=\"width_1x100 min_width_25px\">\n                    <ControlForButton :on-click=\"() => isSelected = !isSelected\">{{ isSelected ? \"-\" : \"+\" }}</ControlForButton>\n                </td>\n            </Horizontally>\n        </div>\n        <div v-if=\"(mode === 'view') || (mode === 'input' && isSelected === true)\" :class=\"(mode === 'input') ? 'info_group padding_2 margin_top_2' : ''\">\n            <Horizontally>\n                <td class=\"width_100x100\">\n                    <ControlForText :on-change=\"v => search = v\"></ControlForText>\n                </td>\n                <td class=\"width_1x100\">\n                    <ControlForButton :on-click=\"toggleAdvancedSearch\">#</ControlForButton>\n                </td>\n                <td class=\"width_1x100\">\n                    <ControlForButton :on-click=\"loadRows\">Buscar</ControlForButton>\n                </td>\n            </Horizontally>\n            <div class=\"padding_top_0\" v-if=\"isAdvancedSearch\">\n                <Horizontally>\n                    <td style=\"width: 33%;\">\n                        <ControlForButton :on-click=\"goToWhereSettings\">{{ $t(\"Filtros\") }}</ControlForButton>\n                    </td>\n                    <td style=\"width: 33%;\">\n                        <ControlForButton :on-click=\"goToOrderSettings\">{{ $t(\"Orden\") }}</ControlForButton>\n                    </td>\n                    <td style=\"width: 33%;\">\n                        <ControlForButton :on-click=\"goToPaginationSettings\">{{ $t(\"Paginación\") }}</ControlForButton>\n                    </td>\n                </Horizontally>\n            </div>\n            <div v-if=\"isAdvancedSearch\">\n                <div v-if=\"isAdvancedSearchPanel === 'where'\">\n                    <div class=\"info_group padding_2 padding_top_0 margin_top_0\">\n                        <div class=\"padding_2 padding_horizontal_0 font_weight_bold\">Filtros aplicados:</div>\n                        <div class=\"padding_2 padding_horizontal_0 padding_vertical_1 font_size_small\" v-if=\"where.length === 0\">No hay filtros aplicados ahora mismo.</div>\n                        <div class=\"margin_bottom_0\" v-for=\"(whereRule, whereIndex) in where\" v-bind:key=\"'select-where-filter-' + whereIndex\">\n                            <div class=\"info_group padding_2 padding_bottom_0 margin_bottom_2 remarked_row\">\n                                <div class=\"info_group padding_2 margin_bottom_2 default_row\">\n                                    <div>{{ $t(\"Columna inicial\") }}:</div>\n                                    <div>\n                                        <select v-model=\"whereRule[0]\">\n                                            <option :value=\"columnIndex\" v-for=\"(column, columnIndex) in definition.columns\" v-bind:key=\"'select-where-filter-parameter-1-rule-' + whereIndex + '-option-' + columnIndex\">\n                                                {{ columnIndex }}\n                                            </option>\n                                        </select>\n                                    </div>\n                                </div>\n                                <Horizontally v-if=\"whereRule[0]\">\n                                    <td style=\"width: 50%;\">\n                                        <div class=\"info_group padding_2 margin_bottom_2 default_row\">\n                                            <div>{{ $t(\"Operador\") }}:</div>\n                                            <div>\n                                                <select v-model=\"whereRule[1]\">\n                                                    <option :value=\"operator\" v-for=\"(operator, operatorIndex) in allOperators\" v-bind:key=\"'select-where-filter-parameter-2-rule-' + whereIndex + '-option-' + operatorIndex\">\n                                                        {{ operatorIndex }}\n                                                    </option>\n                                                </select>\n                                            </div>\n                                        </div>\n                                    </td>\n                                    <td style=\"width: 50%;\">\n                                        <div class=\"info_group padding_2 margin_bottom_2 default_row\">\n                                            <div>{{ $t(\"Tipo\") }}:</div>\n                                            <div>\n                                                <select v-model=\"whereRule.hasValueType\" value=\"string\">\n                                                    <option :value=\"operandType\" v-for=\"(operandType, operandTypeIndex) in allOperandTypes\" v-bind:key=\"'select-where-filter-parameter-3-type-rule-' + whereIndex + '-option-' + operandTypeIndex\">\n                                                        {{ operandType }}\n                                                    </option>\n                                                </select>\n                                            </div>\n                                        </div>\n                                    </td>\n                                </Horizontally>\n                                <template v-if=\"whereRule.hasValueType\">\n                                    <div class=\"info_group padding_2 margin_bottom_2 default_row\">\n                                        <div v-if=\"whereRule.hasValueType === 'json'\">{{ $t(\"Valor\") }}:</div>\n                                        <div v-else-if=\"whereRule.hasValueType === 'string'\">{{ $t(\"Texto\") }}:</div>\n                                        <div>\n                                            <ControlForText :on-change=\"v => whereRule[2] = v\" />\n                                        </div>\n                                    </div>\n                                </template>\n                                <Horizontally>\n                                    <td class=\"width_100x100\"></td>\n                                    <td class=\"width_1x100 padding_bottom_2\">\n                                        <ControlForButton input-classes=\"danger_button no_break_line\" :on-click=\"() => deleteWhere(whereIndex)\">Eliminar filtro</ControlForButton>\n                                    </td>\n                                </Horizontally>\n                            </div>\n                        </div>\n                        <div class=\"margin_top_2\" v-bind:key=\"'add-where-rule-button'\">\n                            <ControlForButton :on-click=\"addWhere\">{{ $t(\"Añadir filtro\") }}</ControlForButton>\n                        </div>\n                    </div>\n                </div>\n                <div v-else-if=\"isAdvancedSearchPanel === 'sort'\">\n                    <div class=\"info_group padding_2 padding_top_0 margin_top_0\">\n                        <div class=\"padding_2 padding_horizontal_0 font_weight_bold\">Orden aplicado:</div>\n                        <div class=\"padding_2 padding_horizontal_0 padding_vertical_1 font_size_small\" v-if=\"order.length === 0\">No hay reglas de orden aplicadas ahora mismo.</div>\n                        <div class=\"margin_bottom_0\" v-for=\"(orderRule, orderIndex) in order\" v-bind:key=\"'select-order-filter-' + orderIndex\">\n                            <div class=\"info_group padding_2 padding_bottom_0 margin_bottom_2 remarked_row\">\n                                <template v-for=\"(orderRule, orderIndex) in order\">\n                                    <div>\n                                        <div class=\"info_group padding_2 margin_bottom_2 default_row\">\n                                            <div>{{ $t(\"Columna\") }}:</div>\n                                            <select v-model=\"orderRule[0]\">\n                                                <option :value=\"columnIndex\" v-for=\"(column, columnIndex) in definition.columns\" v-bind:key=\"'select-order-filter-parameter-1-rule-' + orderIndex + 'option-' + columnIndex\">\n                                                    {{ columnIndex }}\n                                                </option>\n                                            </select>\n                                        </div>\n                                    </div>\n                                    <div>\n                                        <div class=\"info_group padding_2 margin_bottom_2 default_row\" v-if=\"orderRule[0]\">\n                                            <div>{{ $t(\"Dirección\") }}:</div>\n                                            <select v-model=\"orderRule[1]\">\n                                                <option :value=\"sense\" v-for=\"(sense) in ['ascendent', 'descendent']\" v-bind:key=\"'select-order-filter-parameter-1-rule-' + orderIndex + '-sense-' + sense\">\n                                                    {{ sense }}\n                                                </option>\n                                            </select>\n                                        </div>\n                                    </div>\n                                </template>\n                                <Horizontally>\n                                    <td class=\"width_100x100\"></td>\n                                    <td class=\"width_1x100 padding_bottom_2\">\n                                        <ControlForButton input-classes=\"danger_button no_break_line\" :on-click=\"() => deleteOrder(orderIndex)\">Eliminar regla</ControlForButton>\n                                    </td>\n                                </Horizontally>\n                            </div>\n                        </div>\n                        <div class=\"margin_top_2\" v-bind:key=\"'add-order-rule-button'\">\n                            <ControlForButton :on-click=\"addOrder\">{{ $t(\"Añadir regla\") }}</ControlForButton>\n                        </div>\n                    </div>\n                </div>\n                <div v-else-if=\"isAdvancedSearchPanel === 'paginate'\">\n                    <div class=\"info_group padding_2 padding_top_0 margin_top_0\">\n                        <div class=\"padding_2 padding_horizontal_0 font_weight_bold\">Paginación:</div>\n                        <Horizontally>\n                            <td class=\"\" style=\"width: 50%;\">\n                                <div>{{ $t(\"Página\") }}:</div>\n                                <div>\n                                    <ControlForText :initial-value=\"'' + paginate[0]\" :on-change=\"v => paginate[0] = parseInt(v)\"></ControlForText>\n                                </div>\n                            </td>\n                            <td class=\"\" style=\"width: 50%;\">\n                                <div class=\"no_break_line\">{{ $t(\"Ítems por página\") }}:</div>\n                                <div>\n                                    <ControlForText :initial-value=\"'' + paginate[1]\" :on-change=\"v => paginate[1] = parseInt(v)\"></ControlForText>\n                                </div>\n                            </td>\n                        </Horizontally>\n                    </div>\n                </div>\n            </div>\n            <div v-if=\"typeof rows === 'undefined'\">\n                {{ $t(\"Cargando...\") }}\n            </div>\n            <div v-else style=\"overflow: scroll;\">\n                <table class=\"data_viewer_table width_100x100\">\n                    <thead>\n                        <tr>\n                            <th class=\"padding_2\" v-bind:key=\"'select-table-header-open-row-cell'\"></th>\n                            <th class=\"padding_2\" v-bind:key=\"'select-table-header-open-row-cell-of-column-id'\">\n                                {{ $t(\"#id\") }}\n                            </th>\n                            <template v-for=\"(column, columnId) in definition.columns\">\n                                <th class=\"padding_2\" v-bind:key=\"'select-table-header-cell-of-column-' + columnId\">\n                                    {{ $t(\"#\" + columnId) }}\n                                </th>\n                            </template>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <template v-for=\"(row, rowIndex) in rows\">\n                            <tr class=\"remarked_row\" v-bind:key=\"'select-table-body-row-' + rowIndex\">\n                                <td class=\"padding_horizontal_2\" v-bind:key=\"'select-table-row-' + rowIndex + '-open-row-cell'\">\n                                    <ControlForButton :on-click=\"() => goToRow(row, rowIndex)\" v-if=\"mode === 'view'\">\n                                        {{ $t(\"Ir\") }}\n                                    </ControlForButton>\n                                    <template v-else-if=\"mode === 'input'\">\n                                        <ControlForButton v-if=\"!isSelectedItem(row.id)\" :on-click=\"() => selectRow(row)\" v-bind:key=\"'select-table-row-button-' + rowIndex + '-select-item'\" general-classes=\"min_width_25px\">\n                                            {{ $t(\"+\") }}\n                                        </ControlForButton>\n                                        <ControlForButton v-else :on-click=\"() => unselectRow(row)\" v-bind:key=\"'select-table-row-button-' + rowIndex + '-remove-item'\" general-classes=\"min_width_25px\">\n                                            {{ $t(\"-\") }}\n                                        </ControlForButton>\n                                    </template>\n                                </td>\n                                <td class=\"padding_2 no_break_line\" v-bind:key=\"'select-table-row-' + rowIndex + '-cell-of-column-id'\">\n                                    <span class=\"link_text\">{{ row.id }}</span>\n                                </td>\n                                <template v-for=\"(column, columnId) in definition.columns\">\n                                    <td class=\"padding_2 no_break_line\" v-bind:key=\"'select-table-row-' + rowIndex + '-cell-of-column-' + columnId\">\n                                        <span class=\"link_text\">{{ row[columnId] }}</span>\n                                    </td>\n                                </template>\n                            </tr>\n                        </template>\n                    </tbody>\n                </table>\n            </div>\n            <Horizontally v-if=\"typeof pagination === 'object'\">\n                <td class=\"width_1x100\">\n                    <ControlForButton :on-click=\"goToFirstPage\"> «« </ControlForButton>\n                </td>\n                <td class=\"width_1x100\">\n                    <ControlForButton :on-click=\"goToPreviousPage\"> « </ControlForButton>\n                </td>\n                <td class=\"width_100x100 text_align_center\">\n                    <span>{{ $t(\"Página\") }} {{ pagination.page }} {{ $t(\"de\") }} {{ pagination.totalPages }}</span>\n                </td>\n                <td class=\"width_1x100\">\n                    <ControlForButton :on-click=\"goToNextPage\"> » </ControlForButton>\n                </td>\n                <td class=\"width_1x100\">\n                    <ControlForButton :on-click=\"goToLastPage\"> »» </ControlForButton>\n                </td>\n            </Horizontally>\n            <Horizontally v-if=\"mode === 'view'\">\n                <td class=\"width_100x100\"></td>\n                <td class=\"width_1x100\">\n                    <ControlForButton :on-click=\"goToAddItemPage\"><span class=\"no_break_line\">{{ $t(\"Añadir ítem\") }}</span></ControlForButton>\n                </td>\n            </Horizontally>\n        </div>\n    </div>\n} con lógica {\n    Retorno {\n        Propiedad props como {\n            Propiedad mode como {\n                Propiedad type como String.\n                Propiedad required como true.\n            }.\n            Propiedad modeType como {\n                Propiedad type como String.\n                Propiedad required como false.\n                Propiedad default como \"object\".\n            }.\n            Propiedad targetTable como {\n                Propiedad type como String.\n                Propiedad required como true.\n            }.\n            Propiedad onChange como {\n                Propiedad type como Function.\n                Propiedad required como false.\n                Propiedad default como noop.\n            }.\n            Propiedad initialValue como {\n                Propiedad required como false.\n                Propiedad default como undefined.\n            }.\n        }.\n        Método data como una función donde {\n            Retorno {\n                Propiedad rows como undefined.\n                Propiedad table como this.targetTable.\n                Propiedad definition como undefined.\n                Propiedad where como [].\n                Propiedad order como [].\n                Propiedad paginate como [1, 10].\n                Propiedad search como \"\".\n                Propiedad pagination como undefined.\n                Propiedad isAdvancedSearch como false.\n                Propiedad isAdvancedSearchPanel como \"where\".\n                Propiedad allOperators como {\n                    Propiedad \"is less than\" como \"<\".\n                    Propiedad \"is less or equal to\" como \"<=\".\n                    Propiedad \"is greater than\" como \">\".\n                    Propiedad \"is greater or equal to\" como \">=\".\n                    Propiedad \"is equal to\" como \"=\".\n                    Propiedad \"is not equal to\" como \"!=\".\n                    Propiedad \"is in\" como \"in\".\n                    Propiedad \"is not in\" como \"not in\".\n                    Propiedad \"is null\" como \"is null\".\n                    Propiedad \"is not null\" como \"is not null\".\n                    Propiedad \"has\" como \"has\".\n                    Propiedad \"has not\" como \"has not\".\n                }.\n                Propiedad allOperandTypes como [\"string\", \"json\", \"column\", \"nothing\"].\n                # Propiedades del modo 'input':\n                Propiedad isSelected como false.\n                Propiedad internalOnChange como this.onChange.\n                Propiedad internalValue como cuando this.initialValue entonces this.initialValue si no\n                    cuando this.modeType es igual que \"object\" entonces undefined si no\n                    cuando this.modeType es igual que \"list\" entonces [] si no this.initialValue.\n            }.\n        }.\n        Propiedad watch como {\n            Método internalValue como una función con (nuevoValor) donde {\n                Hago this.onChange(nuevoValor).\n            }.\n        }.\n        Propiedad methods como {\n            Método loadRows como una función asíncrona donde {\n                Creo responseSelect como asíncronamente this.$rest.select(\n                    this.table,\n                    this.sanitizeWhere(this.where),\n                    this.sanitizeOrder(this.order),\n                    this.paginate,\n                    this.search\n                ).\n                Si responseSelect.data.status no es igual que \"success\" lanzo un nuevo Error(\"Hubo errores para cargar los datos\").\n                Asigno this.rows como responseSelect.data.data.items.\n                Asigno this.pagination como {\n                    Propiedad page como this.paginate[0].\n                    Propiedad totalPages como Math.floor((responseSelect.data.data.total numerizado) / this.paginate[1]) + 1.\n                    Propiedad total como responseSelect.data.data.total.\n                }.\n            } en errores hago this.$notificaciones.error(error).\n            Método loadDefinition como una función donde {\n                Si this.$root.schema no es tipo indefinido {\n                    Asigno this.definition como this.$root.schema.tables[this.table].\n                }.\n            }.\n            Método goToFirstPage como una función donde {\n                Asigno this.paginate[0] como 1.\n                Hago this.loadRows().\n            }.\n            Método goToPreviousPage como una función donde {\n                Si this.paginate[0] no es igual que 1 {\n                    Decremento this.paginate[0].\n                }.\n                Hago this.loadRows().\n            }.\n            Método goToNextPage como una función donde {\n                Si this.paginate[0] no es igual que (this.pagination.totalPages) {\n                    Incremento this.paginate[0].\n                }.\n                Hago this.loadRows().\n            }.\n            Método goToLastPage como una función donde {\n                Asigno this.paginate[0] como this.pagination.totalPages.\n                Hago this.loadRows().\n            }.\n            Método goToWhereSettings como una función donde {\n                Asigno this.isAdvancedSearchPanel como \"where\".\n            }.\n            Método goToOrderSettings como una función donde {\n                Asigno this.isAdvancedSearchPanel como \"sort\".\n            }.\n            Método goToPaginationSettings como una función donde {\n                Asigno this.isAdvancedSearchPanel como \"paginate\".\n            }.\n            Método goToRow como una función con (row, rowIndex) donde {\n                Hago this.$router.history.push(\"/data/\" + this.table + \"/\" + row.id).\n            }.\n            Método goToAddItemPage como una función donde {\n                Hago this.$router.history.push(\"/data/\" + this.table + \"/@add\").\n            }.\n            Método toggleAdvancedSearch como una función donde {\n                Asigno this.isAdvancedSearch como no this.isAdvancedSearch.\n            }.\n            Método selectRow como una función con (row) donde {\n                Si this.modeType es igual que \"list\" {\n                    Hago this.internalValue.push(row.id).\n                }\n                Pero si this.modeType es igual que \"object\" {\n                    Asigno this.internalValue como row.id.\n                }.\n            }.\n            Método unselectRow como una función con (row) donde {\n                Si this.modeType es igual que \"list\" {\n                    Creo variable rowPosition como 0-1.\n                    Desde 0 hasta this.internalValue.length {\n                        Creo rowId como this.internalValue[index].\n                        Si rowId es igual que row.id {\n                            Hago this.internalValue.splice(index, 1).\n                        }.\n                    }.\n                }\n                Pero si this.modeType es igual que \"object\" {\n                    Asigno this.internalValue como undefined.\n                }.\n            }.\n            Método isSelectedItem como una función con (rowId) donde {\n                Si this.modeType es igual que \"list\" {\n                    Creo coincidentes como this.internalValue.filter(una lambda con (selectedRow) donde retorno selectedRow es igual que rowId).\n                    Retorno coincidentes.length es mayor que 0.\n                }\n                Pero si this.modeType es igual que \"object\" {\n                    Retorno this.internalValue es igual que rowId.\n                }.\n                Retorno false.\n            }.\n            Método addWhere como una función donde {\n                Creo variable hayVacios como false.\n                Desde 0 hasta this.where.length {\n                    Si this.where[index].length es menor que 2 asigno hayVacios como true.\n                }.\n                Si no hayVacios hago this.where.push([]).\n            }.\n            Método deleteWhere como una función con (rowIndex) donde {\n                Hago this.where.splice(rowIndex, 1).\n            }.\n            Método addOrder como una función donde {\n                Creo variable hayVacios como false.\n                Desde 0 hasta this.order.length {\n                    Si this.order[index].length es menor que 2 asigno hayVacios como true.\n                }.\n                Si no hayVacios hago this.order.push([]).\n            }.\n            Método deleteOrder como una función con (rowIndex) donde {\n                Hago this.order.splice(rowIndex, 1).\n            }.\n            Método sanitizeWhere como una función con (where) donde {\n                Retorno where.\n            }.\n            Método sanitizeOrder como una función con (order) donde {\n                Retorno order mapeado con una función con (orderRule) donde retorno (cuando orderRule[1] es igual que \"descendent\" entonces \"!\" si no \"\" ) + orderRule[0].\n            }.\n            Método extendWithIdColumn como una función con (tableDefinition) donde {\n                Asigno tableDefinition.columns.id como {}.\n                Retorno tableDefinition.\n            }.\n        }.\n        Método mounted como una función asíncrona donde {\n            Hago asíncronamente this.loadDefinition().\n            Hago asíncronamente this.loadRows().\n        }.\n    }.\n}.\n\n@SECCIÓN 2.*. Componente de FormControl:\n\nCreo FormControl como un componente vue con nombre \"FormControl\" con plantilla {\n    <div class=\"FormControl\">\n        <div class=\"\">\n            <span class=\"font_weight_bold\">{{ $window.$utilidades.capitalizeString(columnId) }}: </span>\n            <span class=\"font_size_small text_style_as_two\">[ {{ internalColumnMetadata.attributes.isType }} {{ internalColumnMetadata.attributes.isSubtype || \"\" }} ] </span>\n            <span class=\"font_size_small text_style_as_three\">{{ internalColumnMetadata.attributes.hasDescription || \"\" }}</span>\n        </div>\n        <div v-if=\"internalColumnMetadata.attributes.isType === 'string' && internalColumnMetadata.attributes.isSubtype === null\">\n            <input class=\"\" type=\"text\" v-model=\"internalValue\" />\n        </div>\n        <div v-else-if=\"internalColumnMetadata.attributes.isType === 'string' && internalColumnMetadata.attributes.isSubtype === 'password'\">\n            <input class=\"\" type=\"password\" v-model=\"internalValue\" />\n        </div>\n        <div v-else-if=\"internalColumnMetadata.attributes.isType === 'string'\">\n            <input class=\"\" type=\"text\" v-model=\"internalValue\" />\n        </div>\n        <div v-else-if=\"internalColumnMetadata.attributes.isType === 'number'\">\n            <input class=\"\" type=\"text\" v-model=\"internalValue\" />\n        </div>\n        <div v-else-if=\"internalColumnMetadata.attributes.isType === 'boolean'\">\n            <input class=\"\" type=\"text\" v-model=\"internalValue\" />\n        </div>\n        <div v-else-if=\"internalColumnMetadata.attributes.isType === 'option'\">\n            <input class=\"\" type=\"text\" v-model=\"internalValue\" />\n        </div>\n        <div v-else-if=\"internalColumnMetadata.attributes.isType === 'options'\">\n            <input class=\"\" type=\"text\" v-model=\"internalValue\" />\n        </div>\n        <div v-else-if=\"internalColumnMetadata.attributes.isType === 'object'\">\n            <DataTableComponent\n                mode=\"input\"\n                mode-type=\"object\"\n                :target-table=\"internalColumnMetadata.attributes.isReferenceOf\"\n                :on-change=\"v => internalValue = v\"\n                :initial-value=\"internalValue\"\n            />\n        </div>\n        <div v-else-if=\"internalColumnMetadata.attributes.isType === 'list'\">\n            <DataTableComponent\n                mode=\"input\"\n                mode-type=\"list\"\n                :target-table=\"internalColumnMetadata.attributes.isReferenceOf\"\n                :on-change=\"v => internalValue = v\"\n                :initial-value=\"internalValue\"\n            />\n        </div>\n        <div v-else-if=\"internalColumnMetadata.attributes.isType === 'time'\">\n            <ControlForDate\n                :initial-value=\"internalValue\"\n                :on-change=\"v => internalValue = v\"\n            />\n        </div>\n        <div v-else>\n            <input class=\"\" type=\"text\" v-model=\"internalValue\" />\n        </div>\n    </div>\n} con lógica {\n    Retorno {\n        Propiedad props como {\n            Propiedad columnId como {\n                Propiedad type como String.\n                Propiedad required como true.\n            }.\n            Propiedad tableMetadata como {\n                Propiedad type como Object.\n                Propiedad required como true.\n            }.\n            Propiedad initialValue como {\n                Propiedad type como [Array, Object, String, Number, Boolean, Function].\n                Propiedad required como false.\n                Propiedad default como una lambda donde retorno \"\".\n            }.\n            Propiedad onChange como {\n                Propiedad type como Function.\n                Propiedad required como false.\n                Propiedad default como noop.\n            }.\n        }.\n        Método data como una función donde {\n            Retorno {\n                Propiedad internalColumnId como this.columnId.\n                Propiedad internalColumnMetadata como this.tableMetadata.columns[this.columnId].\n                Propiedad internalTableMetadata como this.tableMetadata.\n                Propiedad internalOnChange como this.onChange.\n                Propiedad internalValue como this.initialValue.\n            }.\n        }.\n        Propiedad watch como {\n            Método internalValue como una función con (nuevoValor) donde {\n                Hago this.internalOnChange(nuevoValor).\n            }.\n        }.\n    }.\n}.\n\n@SECCIÓN 2.*. Componente de DataRowPage:\n\nCreo DataRowPage como un componente vue con nombre \"DataRowPage\" con plantilla {\n    <div class=\"DataRowPage\">\n        <TitleOfPage>\n            <Horizontally>\n                <td class=\"width_auto\"><BackButton /></td>\n                <td class=\"width_100x100\">{{ $t(\"Dato\") }} {{ $route.params.table }}: {{ $route.params.id || \"nuevo\" }}</td>\n            </Horizontally>\n        </TitleOfPage>\n        <hr/>\n        <div class=\"padding_2\" v-if=\"definition && row\">\n            <div class=\"form_group\" v-if=\"row\">\n                <div class=\"form_item\" v-for=\"(column, columnId) in definition.columns\" v-bind:key=\"'data-row-page-item-form-property-' + columnId\">\n                    <div>\n                        <FormControl\n                            :table-metadata=\"definition\"\n                            :column-id=\"columnId\"\n                            :initial-value=\"row[columnId]\"\n                            :on-change=\"v => { $console.log('Changed!'); row[columnId] = v; }\"\n                        />\n                    </div>\n                    <hr class=\"margin_vertical_2\" />\n                </div>\n                <div class=\"form_item\">\n                    <Horizontally>\n                        <td class=\"width_100x100\"></td>\n                        <td class=\"width_1x100\">\n                            <ControlForButton :on-click=\"sendForm\">\n                                {{ (operation === 'add') ? $t(\"Añadir\") : (operation === 'edit') ? $t(\"Guardar\") : $t(\"Enviar\") }}\n                            </ControlForButton>\n                        </td>\n                    </Horizontally>\n                </div>\n            </div>\n        </div>\n    </div>\n} con lógica {\n    Retorno {\n        Propiedad props como {\n            Propiedad operation como {\n                Propiedad type como String.\n                Propiedad default como \"add\".\n            }.\n        }.\n        Método data como una función donde {\n            Retorno {\n                Propiedad row como undefined.\n                Propiedad table como this.$route.params.table.\n                Propiedad definition como undefined.\n                Propiedad isLoaded como false.\n            }.\n        }.\n        Propiedad methods como {\n            Método loadRow como una función asíncrona donde {\n                Asigno this.definition como this.$root.schema.tables[this.$route.params.table].\n                Si this.operation es igual que \"add\" {\n                    Asigno this.row como {}.\n                    Retorno.\n                }.\n                Creo responseSelect como asíncronamente this.$rest.select(\n                    this.$route.params.table,\n                    [[ \"id\", \"=\", this.$route.params.id numerizado ]],\n                    [],\n                    [],\n                    undefined\n                ).\n                Si responseSelect.data.status no es igual que \"success\" lanzo un nuevo Error(\"Hubo errores para cargar el dato\").\n                Asigno this.row como responseSelect.data.data.items[0].\n            } en errores hago this.$notificaciones.error(error).\n            Método sendForm como una función asíncrona donde {\n                Imprimo \"Enviar formulario con datos:\".\n                Imprimo this.row.\n            }.\n        }.\n        Método mounted como una función asíncrona donde {\n            Hago asíncronamente this.loadRow().\n        } en errores hago this.$notificaciones.error(error).\n    }.\n}.\n\n@SECCIÓN 2.*. Componente de DataPage:\n\nCreo DataPage como un componente vue con nombre \"DataPage\" con plantilla {\n    <div class=\"DataPage\">\n        <TitleOfPage>\n            <Horizontally>\n                <td class=\"width_auto\"><BackButton /></td>\n                <td class=\"width_100x100\">{{ $t(\"Esquema\") }}</td>\n            </Horizontally>\n        </TitleOfPage>\n        <hr/>\n        <div class=\"padding_2\">\n            <table v-if=\"schema\">\n                <template v-for=\"(table, tableId) in schema.tables\">\n                    <tr class=\"remarked_row\" v-bind:key=\"'table-main-row-of-' + tableId\">\n                        <td class=\"width_100x100 padding_horizontal_2 cursor_pointer\" v-on:click=\"() => $router.history.push('/data/' + tableId)\">\n                            <span class=\"link_text\">{{ $t('#' + tableId) }}</span>\n                        </td>\n                        <td class=\"width_1x100\">\n                            <ControlForButton :on-click=\"() => toggleTable(tableId)\" v-if=\"selectedTables.indexOf(tableId) === -1\">+</ControlForButton>\n                            <ControlForButton :on-click=\"() => toggleTable(tableId)\" v-else>-</ControlForButton>\n                        </td>\n                    </tr>\n                    <template v-if=\"selectedTables.indexOf(tableId) !== -1\">\n                        <tr>\n                            <td class=\"width_100x100\">\n                                {{ $t(\"Atributos de\") }} {{ $t(\"#\" + tableId) }}\n                            </td>\n                            <td class=\"width_1x100\">\n                                <ControlForButton :on-click=\"() => toggleTableAttributesOf(tableId)\" v-if=\"selectedTableAttributesList.indexOf(tableId) !== -1\">-</ControlForButton>\n                                <ControlForButton :on-click=\"() => toggleTableAttributesOf(tableId)\" v-else>+</ControlForButton>\n                            </td>\n                        </tr>\n                        <template v-if=\"selectedTableAttributesList.indexOf(tableId) !== -1\">\n                            <tr v-bind:key=\"'table-attributes-row-of-' + tableId\" v-if=\"selectedTables.indexOf(tableId) !== -1\">\n                                <td colspan=\"100\">\n                                    <table class=\"width_100x100\">\n                                        <tr>\n                                            <td class=\"width_100x100\" colspan=\"100\">\n                                                <ControlForButton :on-click=\"() => goToEditAttributes(tableId)\">{{ $t(\"Editar atributos de\") }} {{ $t(\"#\" + tableId) }}</ControlForButton>\n                                            </td>\n                                        </tr>\n                                        <template v-for=\"(attribute, attributeId) in table.attributes\">\n                                            <template v-if=\"attributeId !== 'hasProtectors'\">\n                                                <tr v-bind:key=\"'table-attribute-key-row-of-' + tableId + '-attribute-' + attributeId\">\n                                                    <td class=\"width_100x100\">{{ $t('@' + attributeId) }}</td>\n                                                    <td class=\"width_1x100\">\n                                                        <ControlForButton :on-click=\"() => toggleTableAttribute(tableId, attributeId)\" v-if=\"selectedTableAttributes.indexOf(tableId + '/' + attributeId) === -1\">+</ControlForButton>\n                                                        <ControlForButton :on-click=\"() => toggleTableAttribute(tableId, attributeId)\" v-else>-</ControlForButton>\n                                                    </td>\n                                                </tr>\n                                                <tr v-bind:key=\"'table-attribute-value-row-of-' + tableId + '-attribute-' + attributeId\" v-if=\"selectedTableAttributes.indexOf(tableId + '/' + attributeId) !== -1\">\n                                                    <td class=\"width_100x100\" colspan=\"100\">\n                                                        <div>\n                                                            <div class=\"margin_1 font_size_small\">{{ attribute }}</div>\n                                                        </div>\n                                                    </td>\n                                                </tr>\n                                            </template>\n                                        </template>\n                                    </table>\n                                </td>\n                            </tr>\n                        </template>\n                        <tr>\n                            <td class=\"width_100x100\">\n                                {{ $t(\"Protectores de\") }} {{ $t(\"#\" + tableId) }}\n                            </td>\n                            <td class=\"width_1x100\">\n                                <ControlForButton :on-click=\"() => toggleTableProtectorsOf(tableId)\" v-if=\"selectedTableProtectorsList.indexOf(tableId) !== -1\">-</ControlForButton>\n                                <ControlForButton :on-click=\"() => toggleTableProtectorsOf(tableId)\" v-else>+</ControlForButton>\n                            </td>\n                        </tr>\n                        <template v-if=\"selectedTableProtectorsList.indexOf(tableId) !== -1\">\n                            <tr v-bind:key=\"'table-protectors-row-of-' + tableId\">\n                                <td colspan=\"100\">\n                                    <table class=\"width_100x100\">\n                                        <tr>\n                                            <td class=\"width_100x100\" colspan=\"100\">\n                                                <ControlForButton :on-click=\"() => goToEditProtectors(tableId)\">{{ $t(\"Editar protectores de\") }} {{ $t(\"#\" + tableId) }}</ControlForButton>\n                                            </td>\n                                        </tr>\n                                        <template v-for=\"(protector, protectorId) in table.attributes.hasProtectors\">\n                                            <tr v-bind:key=\"'table-protector-value-row-of-' + tableId + '-protector-' + protectorId\">\n                                                <td class=\"width_100x100\" colspan=\"100\">\n                                                    <div class=\"info_group margin_top_1\">\n                                                        <div class=\"padding_1 font_size_small remarked_row\" style=\"border-bottom: 1px solid #333;\">{{ protector.id }}</div>\n                                                        <template v-for=\"(protectorValue, protectorKey) in protector\">\n                                                            <div class=\"padding_horizontal_1 padding_top_1 font_size_small\" v-bind:key=\"'table-protector-property-of-' + tableId + '-protector-' + protectorId + '-property-' + protectorKey\">\n                                                                <span class=\"font_weight_bold\">{{ $t(protectorKey) }}: </span>\n                                                                <span class=\"\">{{ protectorValue }}</span>\n                                                            </div>\n                                                        </template>\n                                                    </div>\n                                                </td>\n                                            </tr>\n                                        </template>\n                                    </table>\n                                </td>\n                            </tr>\n                        </template>\n                        <tr>\n                            <td class=\"width_100x100\">\n                                {{ $t(\"Columnas de\") }} {{ $t(\"#\" + tableId) }}\n                            </td>\n                            <td class=\"width_1x100\">\n                                <ControlForButton :on-click=\"() => toggleTableColumnsOf(tableId)\" v-if=\"selectedTableColumnsList.indexOf(tableId) !== -1\">-</ControlForButton>\n                                <ControlForButton :on-click=\"() => toggleTableColumnsOf(tableId)\" v-else>+</ControlForButton>\n                            </td>\n                        </tr>\n                        <template v-if=\"selectedTableColumnsList.indexOf(tableId) !== -1\">\n                            <tr v-bind:key=\"'table-columns-row-of-' + tableId\">\n                                <td colspan=\"100\">\n                                    <table class=\"width_100x100\">\n                                        <template v-for=\"(column, columnId) in table.columns\">\n                                            <tr v-bind:key=\"'table-column-key-row-of-' + tableId + '-column-' + columnId\">\n                                                <td class=\"width_100x100 remarked_row\" style=\"border-bottom: 1px solid #AAA;\">{{ $t('#' + tableId) }}.{{ $t('#' + columnId) }}</td>\n                                                <td class=\"width_1x100\">\n                                                    <ControlForButton :on-click=\"() => toggleTableColumn(tableId, columnId)\" v-if=\"selectedTableColumns.indexOf(tableId + '/' + columnId) === -1\">+</ControlForButton>\n                                                    <ControlForButton :on-click=\"() => toggleTableColumn(tableId, columnId)\" v-else>-</ControlForButton>\n                                                </td>\n                                            </tr>\n                                            <template v-if=\"selectedTableColumns.indexOf(tableId + '/' + columnId) !== -1\">\n                                                <tr>\n                                                    <td class=\"width_100x100\" colspan=\"100\">\n                                                        <ControlForButton :on-click=\"() => goToEditColumn(tableId, columnId)\">{{ $t(\"Editar columna\") }} {{ $t(\"#\" + tableId) }}.{{ $t(\"#\" + columnId) }}</ControlForButton>\n                                                    </td>\n                                                </tr>\n                                                <tr v-bind:key=\"'table-column-value-row-of-' + tableId + '-column-' + columnId\">\n                                                    <td class=\"width_100x100\" colspan=\"100\">\n                                                        <div class=\"\">\n                                                            <table class=\"width_100x100\">\n                                                                <template v-for=\"(attribute, attributeId) in column.attributes\">\n                                                                    <tr v-bind:key=\"'column-attribute-key-row-of-' + tableId + '-' + columnId + '-attribute-' + attributeId\">\n                                                                        <td class=\"width_100x100\">\n                                                                            {{ $t( \"@\" + attributeId ) }}\n                                                                        </td>\n                                                                        <td class=\"width_1x100\">\n                                                                            <ControlForButton :on-click=\"() => toggleTableColumnAttribute(tableId, columnId, attributeId)\" v-if=\"selectedTableColumnAttributes.indexOf(tableId + '/' + columnId + '/' + attributeId) === -1\">+</ControlForButton>\n                                                                            <ControlForButton :on-click=\"() => toggleTableColumnAttribute(tableId, columnId, attributeId)\" v-else>-</ControlForButton>\n                                                                        </td>\n                                                                    </tr>\n                                                                    <tr v-bind:key=\"'column-attribute-value-row-of-' + tableId + '-' + columnId + '-attribute-' + attributeId\" v-if=\"selectedTableColumnAttributes.indexOf(tableId + '/' + columnId + '/' + attributeId) !== -1\">\n                                                                        <td colspan=\"100\">\n                                                                            <div>{{ attribute }}</div>\n                                                                        </td>\n                                                                    </tr>\n                                                                </template>\n                                                            </table>\n                                                        </div>\n                                                    </td>\n                                                </tr>\n                                            </template>\n                                        </template>\n                                    </table>\n                                </td>\n                            </tr>\n                        </template>\n                        <tr>\n                            <td class=\"width_100x100\" colspan=\"100\">\n                                <ControlForButton :on-click=\"() => goToAddColumn(tableId)\">{{ $t(\"Añadir columna a\") }} {{ $t(\"#\" + tableId) }}</ControlForButton>\n                            </td>\n                        </tr>\n                    </template>\n                </template>\n                <tr>\n                    <td class=\"width_100x100\" colspan=\"100\">\n                        <Horizontally>\n                            <td class=\"width_100x100\"></td>\n                            <td class=\"width_1x100\">\n                                <ControlForButton :on-click=\"() => goToAddTable()\">\n                                    <span class=\"no_break_line\">{{ $t(\"Añadir tabla\") }}</span>\n                                </ControlForButton>\n                            </td>\n                        </Horizontally>\n                    </td>\n                </tr>\n            </table>\n        </div>\n    </div>\n} con lógica {\n    Retorno {\n        Método data como una función donde {\n            Retorno {\n                Propiedad schema como this.$root.schema.\n                Propiedad selectedTables como [].\n                Propiedad selectedTableAttributesList como [].\n                Propiedad selectedTableAttributes como [].\n                Propiedad selectedTableProtectorsList como [].\n                Propiedad selectedTableColumnsList como [].\n                Propiedad selectedTableColumns como [].\n                Propiedad selectedColumnsAttributes como [].\n                Propiedad selectedTableColumnAttributes como [].\n            }.\n        }.\n        Propiedad methods como {\n            Método toggleTable como una función con (tableId) donde {\n                Creo posicionTable como this.selectedTables.indexOf(tableId).\n                Si posicionTable es igual que 0-1 hago this.selectedTables.push(tableId);\n                Y si no hago this.selectedTables.splice(posicionTable, 1).\n            }.\n            Método toggleTableAttributesOf como una función con (tableId) donde {\n                Creo posicionTable como this.selectedTableAttributesList.indexOf(tableId).\n                Si posicionTable es igual que 0-1 hago this.selectedTableAttributesList.push(tableId);\n                Y si no hago this.selectedTableAttributesList.splice(posicionTable, 1).\n            }.\n            Método toggleTableProtectorsOf como una función con (tableId) donde {\n                Creo posicionTable como this.selectedTableProtectorsList.indexOf(tableId).\n                Si posicionTable es igual que 0-1 hago this.selectedTableProtectorsList.push(tableId);\n                Y si no hago this.selectedTableProtectorsList.splice(posicionTable, 1).\n            }.\n            Método toggleTableColumnsOf como una función con (tableId) donde {\n                Creo posicionTable como this.selectedTableColumnsList.indexOf(tableId).\n                Si posicionTable es igual que 0-1 hago this.selectedTableColumnsList.push(tableId);\n                Y si no hago this.selectedTableColumnsList.splice(posicionTable, 1).\n            }.\n            Método toggleTableAttribute como una función con (tableId, attributeId) donde {\n                Creo posicionTableAttribute como this.selectedTableAttributes.indexOf(tableId + \"/\" + attributeId).\n                Si posicionTableAttribute es igual que 0-1 hago this.selectedTableAttributes.push(tableId + \"/\" + attributeId);\n                Y si no hago this.selectedTableAttributes.splice(posicionTableAttribute, 1).\n            }.\n            Método toggleTableColumn como una función con (tableId, columnId) donde {\n                Creo posicionTableColumn como this.selectedTableColumns.indexOf(tableId + \"/\" + columnId).\n                Si posicionTableColumn es igual que 0-1 hago this.selectedTableColumns.push(tableId + \"/\" + columnId);\n                Y si no hago this.selectedTableColumns.splice(posicionTableColumn, 1).\n            }.\n            Método toggleTableColumnAttribute como una función con (tableId, columnId, attributeId) donde {\n                Creo posicionTableColumn como this.selectedTableColumnAttributes.indexOf(tableId + \"/\" + columnId + \"/\" + attributeId).\n                Si posicionTableColumn es igual que 0-1 hago this.selectedTableColumnAttributes.push(tableId + \"/\" + columnId + \"/\" + attributeId);\n                Y si no hago this.selectedTableColumnAttributes.splice(posicionTableColumn, 1).\n            }.\n            Método goToEditAttributes como una función con (tableId) donde {\n                Retorno this.$router.history.push(\"/data/@edit-table/\" + tableId).\n            }.\n            Método goToEditProtectors como una función con (tableId) donde {\n                Retorno this.$router.history.push(\"/data/@edit-protectors/\" + tableId).\n            }.\n            Método goToEditColumn como una función con (tableId, columnId) donde {\n                Retorno this.$router.history.push(\"/data/@edit-column/\" + tableId + \"/\" + columnId).\n            }.\n            Método goToAddColumn como una función con (tableId) donde {\n                Retorno this.$router.history.push(\"/data/@add-column/\" + tableId).\n            }.\n            Método goToAddTable como una función con () donde {\n                Retorno this.$router.history.push(\"/data/@add-table\").\n            }.\n        }.\n        Método mounted como una función donde {\n            Asigno this.schema como this.$root.schema.\n        }.\n    }.\n}.\n\n@SECCIÓN 2.*. Componente de DataAddEditTablePage:\n\nCreo DataAddEditTablePage como un componente vue con nombre \"DataAddEditTablePage\" con plantilla {\n    <div class=\"DataAddEditTablePage\">\n        <TitleOfPage>\n            <Horizontally>\n                <td class=\"width_auto\"><BackButton :levels=\"(internalOperation === 'add') ? 1 : 2\" /></td>\n                <td class=\"width_100x100\">{{ $t(\"Tabla de esquema\") }} ({{ $t(internalOperation) }})</td>\n            </Horizontally>\n        </TitleOfPage>\n        <hr />\n        <div class=\"padding_2\">\n            ...\n        </div>\n    </div>\n} con lógica {\n    Retorno {\n        Propiedad props como {\n            Propiedad operation como {\n                Propiedad type como String.\n                Propiedad default como \"add\".\n            }.\n        }.\n        Método data como una función donde {\n            Retorno {\n                Propiedad internalOperation como this.operation.\n            }.\n        }.\n    }.\n}.\n\n@SECCIÓN 2.*. Componente de DataAddEditColumnPage:\n\nCreo DataAddEditColumnPage como un componente vue con nombre \"DataAddEditColumnPage\" con plantilla {\n    <div class=\"DataAddEditColumnPage\">\n        <TitleOfPage>\n            <Horizontally>\n                <td class=\"width_auto\"><BackButton :levels=\"(internalOperation === 'add') ? 2 : 3\" /></td>\n                <td class=\"width_100x100\">{{ $t(\"Columna de esquema\") }} ({{ $t(internalOperation) }})</td>\n            </Horizontally>\n        </TitleOfPage>\n        <hr />\n        <div class=\"padding_2\">\n            ...\n        </div>\n    </div>\n} con lógica {\n    Retorno {\n        Propiedad props como {\n            Propiedad operation como {\n                Propiedad type como String.\n                Propiedad default como \"add\".\n            }.\n        }.\n        Método data como una función donde {\n            Retorno {\n                Propiedad internalOperation como this.operation.\n            }.\n        }.\n    }.\n}.\n\n@SECCIÓN 2.*. Componente de DataEditProtectorsPage:\n\nCreo DataEditProtectorsPage como un componente vue con nombre \"DataEditProtectorsPage\" con plantilla {\n    <div class=\"DataEditProtectorsPage\">\n        <TitleOfPage>\n            <Horizontally>\n                <td class=\"width_auto\"><BackButton :levels=\"2\" /></td>\n                <td class=\"width_100x100\">{{ $t(\"Editar protectores\") }}</td>\n            </Horizontally>\n        </TitleOfPage>\n        <hr />\n        <div class=\"padding_2\">\n            ...\n        </div>\n    </div>\n} con lógica {\n    Retorno {}.\n}.\n\n@SECCIÓN 2.*. Componente de SettingsPage:\n\nCreo SettingsPage como un componente vue con nombre \"SettingsPage\" con plantilla {\n    <div class=\"SettingsPage\">\n        <TitleOfPage>\n            <Horizontally>\n                <td class=\"width_auto\"><BackButton /></td>\n                <td class=\"width_100x100\">{{ $t(\"Configuraciones\") }}</td>\n            </Horizontally>\n        </TitleOfPage>\n        <hr />\n        <div class=\"padding_2 padding_bottom_0\">\n            <ul class=\"BigMenuSquaresList\">\n                <li class=\"margin_bottom_2\" v-on:click=\"() => $router.history.push('/settings/language')\">\n                    <span class=\"link_text\">{{ $t(\"Idioma\") }}</span>\n                </li>\n                <li class=\"margin_bottom_2\" v-on:click=\"() => $router.history.push('/settings/session')\">\n                    <span class=\"link_text\">{{ $t(\"Sesión\") }}</span>\n                </li>\n            </ul>\n        </div>\n    </div>\n} con lógica {\n    Retorno {}.\n}.\n\n@SECCIÓN 2.*. Componente de LanguageSettingsPage:\n\nCreo LanguageSettingsPage como un componente vue con nombre \"LanguageSettingsPage\" con plantilla {\n    <div class=\"LanguageSettingsPage\">\n        <TitleOfPage>\n            <Horizontally>\n                <td class=\"width_auto\"><BackButton /></td>\n                <td class=\"width_100x100\">{{ $t(\"Idioma\") }}</td>\n            </Horizontally>\n        </TitleOfPage>\n        <hr />\n        <div class=\"padding_2\">\n            <LanguageSelector />\n        </div>\n    </div>\n} con lógica {\n    Retorno {}.\n}.\n\n@SECCIÓN 2.*. Componente de SessionSettingsPage:\n\nCreo SessionSettingsPage como un componente vue con nombre \"SessionSettingsPage\" con plantilla {\n    <div class=\"SessionSettingsPage\">\n        <TitleOfPage>\n            <Horizontally>\n                <td class=\"width_auto\"><BackButton /></td>\n                <td class=\"width_100x100\">{{ $t(\"Sesión\") }}</td>\n            </Horizontally>\n        </TitleOfPage>\n        <hr />\n        <div class=\"padding_2\">\n            <div>\n                <span class=\"font_weight_bold\">{{ $t(\"Usuario:\") }} </span>\n                <span>{{ $root.authentication.user.name }}</span>\n            </div>\n            <div>\n                <span class=\"font_weight_bold\">{{ $t(\"Email de usuario:\") }} </span>\n                <span>{{ $root.authentication.user.email }}</span>\n            </div>\n            <div>\n                <span class=\"font_weight_bold\">{{ $t(\"Grupos:\") }} </span>\n                <ul class=\"padding_bottom_2\">\n                    <li class=\"no_margin\" v-for=\"grupo in grupos\" v-bind:key=\"'auth-grupos-grupo-id-' + grupo.id\">\n                        <ul class=\"padding_top_2\">\n                            <div class=\"info_group remarked_row padding_2\">\n                                <li class=\"no_margin\">\n                                    <span class=\"font_weight_bold\">{{ $t(\"Grupo:\" )}} </span>\n                                    <span class=\"font_size_small\">{{ grupo.name }} [{{ grupo.id }}]</span>\n                                </li>\n                                <li class=\"no_margin\">\n                                    <span class=\"font_weight_bold\">{{ $t(\"Descripción:\" )}} </span>\n                                    <span class=\"font_size_small\">{{ grupo.description }}</span>\n                                </li>\n                                <li class=\"no_margin\">\n                                    <span class=\"font_weight_bold\">{{ $t(\"Privilegios:\" )}} </span>\n                                    <span class=\"font_size_small\">{{ grupo.privileges }}</span>\n                                </li>\n                            </div>\n                        </ul>\n                    </li>\n                </ul>\n            </div>\n            <div>\n                <span class=\"font_weight_bold\">{{ $t(\"Privilegios:\") }} </span>\n                <ul class=\"padding_bottom_2\">\n                    <li class=\"no_margin\" v-for=\"privilegio in privilegios\" v-bind:key=\"'auth-privilegios-privilegio-id-' + privilegio.id\">\n                        <ul class=\"padding_top_2\">\n                            <div class=\"info_group remarked_row padding_2\">\n                                <li class=\"no_margin\">\n                                    <span class=\"font_weight_bold\">{{ $t(\"Privilegio:\" )}} </span>\n                                    <span class=\"font_size_small\">{{ privilegio.name }} [{{ privilegio.id }}]</span>\n                                </li>\n                                <li class=\"no_margin\">\n                                    <span class=\"font_weight_bold\">{{ $t(\"Descripción:\" )}} </span>\n                                    <span class=\"font_size_small\">{{ privilegio.description }}</span>\n                                </li>\n                            </div>\n                        </ul>\n                    </li>\n                </ul>\n            </div>\n            <div>\n                <span class=\"font_weight_bold\">{{ $t(\"Token de sesión:\") }} </span>\n                <div class=\" margin_top_2 remarked_text info_group long_word font_family_monospace font_size_small\">{{ $root.authentication.token }}</div>\n            </div>\n        </div>\n    </div>\n} con lógica {\n    Retorno {\n        Propiedad data como una función donde {\n            Creo grupos como this.$root.authentication.user.groups.map(una lambda con (idDeGrupo) donde {\n                Retorno this.$root.authentication.groups.filter(una lambda con (datosDeGrupo) donde {\n                    Retorno datosDeGrupo.id es igual que idDeGrupo.\n                })[0].\n            }).\n            Creo privilegiosDeGrupo como grupos.map(una lambda con (grupo) donde retorno grupo.privileges).flat().\n            Creo privilegiosDeUsuario como this.$root.authentication.user.privileges.\n            Creo privilegiosUnicos como [].\n            Hago [].concat(privilegiosDeUsuario).concat(privilegiosDeGrupo).forEach(una lambda con (privilegioId) donde {\n                Si privilegiosUnicos.indexOf(privilegioId) es igual que 0-1 hago privilegiosUnicos.push(privilegioId).\n            }).\n            Creo privilegios como privilegiosUnicos.map(una lambda con (privilegioId) donde retorno this.$root.authentication.privileges.filter(una lambda con (privilegio) donde retorno privilegioId es igual que privilegio.id)[0]).\n            Retorno {\n                Propiedad grupos como grupos.\n                Propiedad privilegios como privilegios.\n            }.\n        }.\n    }.\n}.\n\n@SECCIÓN 3.*. Rutas:\n\nCreo routes como [{\n    Propiedad name como \"Inicio\".\n    Propiedad path como \"/home\".\n    Propiedad component como HomePage.\n}, {\n    Propiedad name como \"Login\".\n    Propiedad path como \"/login\".\n    Propiedad component como LoginPage.\n}, {\n    Propiedad name como \"Logout\".\n    Propiedad path como \"/logout\".\n    Propiedad component como LogoutPage.\n}, {\n    Propiedad name como \"DataAddEditTable\".\n    Propiedad path como \"/data/@add-table\".\n    Propiedad props como { operation: \"add\" }.\n    Propiedad component como DataAddEditTablePage.\n}, {\n    Propiedad name como \"DataAddEditTable\".\n    Propiedad path como \"/data/@edit-table/:table\".\n    Propiedad props como { operation: \"edit\" }.\n    Propiedad component como DataAddEditTablePage.\n}, {\n    Propiedad name como \"DataAddEditColumn\".\n    Propiedad path como \"/data/@add-column/:table\".\n    Propiedad props como { operation: \"add\" }.\n    Propiedad component como DataAddEditColumnPage.\n}, {\n    Propiedad name como \"DataAddEditColumn\".\n    Propiedad path como \"/data/@edit-column/:table/:column\".\n    Propiedad props como { operation: \"edit\" }.\n    Propiedad component como DataAddEditColumnPage.\n}, {\n    Propiedad name como \"DataEditProtectors\".\n    Propiedad path como \"/data/@edit-protectors/:table\".\n    Propiedad props como { operation: \"edit\" }.\n    Propiedad component como DataEditProtectorsPage.\n}, {\n    Propiedad name como \"DataRow\".\n    Propiedad path como \"/data/:table/@add\".\n    Propiedad props como { operation: \"add\" }.\n    Propiedad component como DataRowPage.\n}, {\n    Propiedad name como \"DataRow\".\n    Propiedad path como \"/data/:table/:id\".\n    Propiedad props como { operation: \"edit\" }.\n    Propiedad component como DataRowPage.\n}, {\n    Propiedad name como \"DataTable\".\n    Propiedad path como \"/data/:table\".\n    Propiedad component como DataTablePage.\n}, {\n    Propiedad name como \"Data\".\n    Propiedad path como \"/data\".\n    Propiedad component como DataPage.\n}, {\n    Propiedad name como \"Settings\".\n    Propiedad path como \"/settings\".\n    Propiedad component como SettingsPage.\n}, {\n    Propiedad name como \"LanguageSettings\".\n    Propiedad path como \"/settings/language\".\n    Propiedad component como LanguageSettingsPage.\n}, {\n    Propiedad name como \"SessionSettings\".\n    Propiedad path como \"/settings/session\".\n    Propiedad component como SessionSettingsPage.\n}].\n\n@SECCIÓN 4.*. Dependencias globales de Vue:\n\nAsigno Vue.prototype.$window como window.\nAsigno Vue.prototype.$rest como window.$restologia.\nAsigno Vue.prototype.$almacenamiento como window.$almacenamiento.\nAsigno Vue.prototype.$utilidades como window.$utilidades.\nAsigno Vue.prototype.$console como console.\n\n@SECCIÓN 1.*. ControlForDate component:\n\nCreo ControlForDate como un componente vue con nombre \"ControlForDate\" con plantilla {\n    <div class=\"ControlForDate\">\n        <Horizontally>\n            <td class=\"width_100x100\">\n                <input type=\"text\" v-model=\"internalValue\" disabled />\n            </td>\n            <td class=\"width_1x100\">\n                <ControlForButton input-classes=\"min_width_25px\" :on-click=\"() => isSelected = !isSelected\">{{ isSelected ? \"-\" : \"+\" }}</ControlForButton>\n            </td>\n        </Horizontally>\n        <div v-if=\"internalDate && isSelected\" class=\"info_group font_size_small padding_2 margin_top_2\">\n            <Horizontally>\n                <td class=\"width_1x100 min_width_25px\"><ControlForButton :on-click=\"decreaseDate\"> « </ControlForButton></td>\n                <td class=\"width_100x100 text_align_center\">\n                    <span>{{ $t($utilidades.fromWeekdayToText(internalDate.getDay())) }}, {{ $t(\"día\") }} </span>\n                    <span>{{ $utilidades.padLeft(internalDate.getDate(), 2, \"0\") }}</span>\n                </td>\n                <td class=\"width_1x100 min_width_25px\"><ControlForButton :on-click=\"increaseDate\"> » </ControlForButton></td>\n            </Horizontally>\n            <Horizontally>\n                <td style=\"width: 50%;\">\n                    <Horizontally>\n                        <td class=\"width_1x100 min_width_25px\"><ControlForButton :on-click=\"decreaseMonth\"> « </ControlForButton></td>\n                        <td class=\"width_100x100 text_align_center\">\n                            <span>{{ $t($utilidades.fromMonthToText(internalDate.getMonth())) }}</span>\n                        </td>\n                        <td class=\"width_1x100 min_width_25px\"><ControlForButton :on-click=\"increaseMonth\"> » </ControlForButton></td>\n                    </Horizontally>\n                </td>\n                <td style=\"width: 50%;\">\n                    <Horizontally>\n                        <td class=\"width_1x100 min_width_25px\"><ControlForButton :on-click=\"decreaseYear\"> « </ControlForButton></td>\n                        <td class=\"width_100x100 text_align_center\">{{ internalDate.getFullYear() }}</td>\n                        <td class=\"width_1x100 min_width_25px\"><ControlForButton :on-click=\"increaseYear\"> » </ControlForButton></td>\n                    </Horizontally>\n                </td>\n            </Horizontally>\n            <div class=\"padding_vertical_3\">\n                <table class=\"width_100x100 font_family_monospace\">\n                    <tr v-for=\"(row, rowIndex) in internalCalendar\" v-bind:key=\"'calendar-row-' + rowIndex\">\n                        <td class=\"calendar_cell\" :class=\"cell === internalDate.getDate() ? 'selected' : ''\" v-for=\"(cell, cellIndex) in row\" v-bind:key=\"'calendar-row-' + rowIndex + '-cell-' + cellIndex\">\n                            <template v-if=\"!cell\"></template>\n                            <span v-else class=\"calendar_cell_content font_size_small\" v-on:click=\"() => selectDate(cell)\">\n                                {{ $utilidades.padLeft(cell, 2, \"0\") }}\n                            </span>\n                        </td>\n                    </tr>\n                </table>\n            </div>\n            <Horizontally>\n                <td style=\"width: 33%;\">\n                    <Horizontally>\n                        <td class=\"width_1x100 min_width_25px\"><ControlForButton :on-click=\"decreaseHours\"> « </ControlForButton></td>\n                        <td class=\"width_100x100 text_align_center\">{{ $utilidades.padLeft(internalDate.getHours(), 2, \"0\") }}</td>\n                        <td class=\"width_1x100 min_width_25px\"><ControlForButton :on-click=\"increaseHours\"> » </ControlForButton></td>\n                    </Horizontally>\n                </td>\n                <td style=\"width: 33%;\">\n                    <Horizontally>\n                        <td class=\"width_1x100 min_width_25px\"><ControlForButton :on-click=\"decreaseMinutes\"> « </ControlForButton></td>\n                        <td class=\"width_100x100 text_align_center\">{{ $utilidades.padLeft(internalDate.getMinutes(), 2, \"0\") }}</td>\n                        <td class=\"width_1x100 min_width_25px\"><ControlForButton :on-click=\"increaseMinutes\"> » </ControlForButton></td>\n                    </Horizontally>\n                </td>\n                <td style=\"width: 33%;\">\n                    <Horizontally>\n                        <td class=\"width_1x100 min_width_25px\"><ControlForButton :on-click=\"decreaseSeconds\"> « </ControlForButton></td>\n                        <td class=\"width_100x100 text_align_center\">{{ $utilidades.padLeft(internalDate.getSeconds(), 2, \"0\") }}</td>\n                        <td class=\"width_1x100 min_width_25px\"><ControlForButton :on-click=\"increaseSeconds\"> » </ControlForButton></td>\n                    </Horizontally>\n                </td>\n            </Horizontally>\n        </div>\n    </div>\n} con lógica {\n    Retorno {\n        Propiedad props como {\n            Propiedad initialDate como {\n                Propiedad type como [String, Date].\n                Propiedad required como false.\n                Propiedad default como una función donde retorno una nueva Date().\n            }.\n            Propiedad onChange como {\n                Propiedad type como Function.\n                Propiedad required como false.\n                Propiedad default como noop.\n            }.\n        }.\n        Método data como una función donde {\n            Retorno {\n                Propiedad isSelected como false.\n                Propiedad internalDate como undefined.\n                Propiedad internalValue como undefined.\n                Propiedad internalOnChange como this.onChange.\n                Propiedad internalCalendar como undefined.\n            }.\n        }.\n        Propiedad watch como {\n            Método internalDate como una función con (nuevoValor) donde {\n                Si nuevoValor es tipo texto {\n                    Asigno this.internalValue como nuevoValor.\n                }\n                Y si no {\n                    Asigno this.internalValue como window.$utilidades.fromDateToString(nuevoValor, true).\n                }.\n            }.\n            Método internalValue como una función con (nuevoValor) donde {\n                Hago this.internalOnChange(nuevoValor, this).\n                Hago this.calculateCalendar().\n            }.\n        }.\n        Propiedad methods como {\n            Método calculateCalendar como una función donde {\n                Creo dayFirst como una nueva Date(this.internalDate).\n                Creo dayLast como una nueva Date(this.internalDate).\n                Hago dayFirst.setDate(1).\n                Hago dayLast.setMonth(dayLast.getMonth()+1).\n                Hago dayLast.setDate(0-1).\n                Creo weekDayFirst como window.$utilidades.adaptWeekDay(dayFirst.getDay()) - 1.\n                Creo weekDayLast como window.$utilidades.adaptWeekDay(dayLast.getDay()) - 1.\n                Creo calendar como [[]].\n                Creo variable calendarDaysIndex como 0.\n                Creo variable calendarRowsIndex como 0.\n                Desde 0 hasta Math.abs(weekDayFirst) {\n                    Hago calendar[0].push(undefined).\n                    Incremento calendarDaysIndex.\n                }.\n                Desde 0 hasta dayLast.getDate() {\n                    Si (calendarDaysIndex % 7) es igual que 0 {\n                        Incremento calendarRowsIndex.\n                        Asigno calendar[calendarRowsIndex] como [].\n                    }.\n                    Hago calendar[calendarRowsIndex].push(index+1).\n                    Incremento calendarDaysIndex.\n                }.\n                Asigno this.internalCalendar como calendar.\n            }.\n            Método decreaseYear como una función donde {\n                Creo date como una nueva Date(this.internalDate).\n                Hago date.setFullYear(date.getFullYear() - 1).\n                Asigno this.internalDate como date.\n            }.\n            Método increaseYear como una función donde {\n                Creo date como una nueva Date(this.internalDate).\n                Hago date.setFullYear(date.getFullYear() + 1).\n                Asigno this.internalDate como date.\n            }.\n            Método decreaseMonth como una función donde {\n                Creo date como una nueva Date(this.internalDate).\n                Hago date.setMonth(date.getMonth() - 1).\n                Asigno this.internalDate como date.\n            }.\n            Método increaseMonth como una función donde {\n                Creo date como una nueva Date(this.internalDate).\n                Hago date.setMonth(date.getMonth() + 1).\n                Asigno this.internalDate como date.\n            }.\n            Método decreaseDate como una función donde {\n                Creo date como una nueva Date(this.internalDate).\n                Hago date.setDate(date.getDate()).\n                Asigno this.internalDate como date.\n            }.\n            Método increaseDate como una función donde {\n                Creo date como una nueva Date(this.internalDate).\n                Hago date.setDate(date.getDate()).\n                Asigno this.internalDate como date.\n            }.\n            Método decreaseHours como una función donde {\n                Creo date como una nueva Date(this.internalDate).\n                Hago date.setHours(date.getHours() - 1).\n                Asigno this.internalDate como date.\n            }.\n            Método increaseHours como una función donde {\n                Creo date como una nueva Date(this.internalDate).\n                Hago date.setHours(date.getHours() + 1).\n                Asigno this.internalDate como date.\n            }.\n            Método decreaseMinutes como una función donde {\n                Creo date como una nueva Date(this.internalDate).\n                Hago date.setMinutes(date.getMinutes() - 1).\n                Asigno this.internalDate como date.\n            }.\n            Método increaseMinutes como una función donde {\n                Creo date como una nueva Date(this.internalDate).\n                Hago date.setMinutes(date.getMinutes() + 1).\n                Asigno this.internalDate como date.\n            }.\n            Método decreaseSeconds como una función donde {\n                Creo date como una nueva Date(this.internalDate).\n                Hago date.setSeconds(date.getSeconds() - 1).\n                Asigno this.internalDate como date.\n            }.\n            Método increaseSeconds como una función donde {\n                Creo date como una nueva Date(this.internalDate).\n                Hago date.setSeconds(date.getSeconds() + 1).\n                Asigno this.internalDate como date.\n            }.\n            Método selectDate como una función con (cell) donde {\n                Creo date como una nueva Date(this.internalDate).\n                Hago date.setDate(cell numerizado).\n                Asigno this.internalDate como date.\n            }.\n        }.\n        Método mounted como una función donde {\n            Asigno this.internalDate como window.$utilidades.fromStringToDate(this.initialDate, true).\n            Hago this.internalDate.setMilliseconds(0).\n        }.\n    }.\n}.\n\n@SECCIÓN 5.*. Aplicación:\n\nHago una aplicación vue con nombre \"App\" con rutas routes con traducciones window.$translations con plantilla {\n    <div class=\"App\">\n        <Topbar />\n        <hr />\n        <div class=\"main_contents_container padding_top_2\">\n            <div class=\"main_contents\">\n                <div v-if=\"authentication\">\n                    <div class=\"\">\n                        <router-view></router-view>\n                    </div>\n                </div>\n                <div v-else class=\"\">\n                    <LoginPage />\n                </div>\n            </div>\n        </div>\n        <Notificaciones ref=\"Notificaciones\" />\n    </div>\n} con estilos {\n    .app {}\n} con lógica donde {\n    Retorno {\n        Propiedad name como \"App\".\n        Método data como una función donde {\n            Retorno {\n                Propiedad authentication como undefined.\n                Propiedad metadata como {\n                    Propiedad project como \"Restología: donde tus datos descansan\".\n                }.\n            }.\n        }.\n        Método beforeMount como una función donde {\n            Asigno Vue.prototype.$root como this.\n        }.\n        Método mounted como una función donde {\n            Asigno Vue.prototype.$notificaciones como un nuevo window.$Notificaciones(this.$refs.Notificaciones).\n        }.\n    }.\n} montada en \"#app\".\n";
fs.writeFileSync(node_14, node_contents_14, "utf8");

const node_15 = path.resolve(baseDirectory, ".", "src", "app", "app.calo");
const node_contents_15 = "Compilable con:\n  ./js/api-nativa.calo\n  ./js/almacenamiento.calo\n  ./js/traducciones.calo\n  ./js/notificaciones.calo\n  ./js/utilidades.calo\n  ./js/cliente.calo\nEmpaquetable con:\n  ./js/api-nativa.js\n  ./js/almacenamiento.js\n  ./js/traducciones.js\n  ./js/notificaciones.js\n  ./js/utilidades.js\n  ./js/cliente.js\nEjecutable como documento HTML5\ncon autor allnulled\ncon nombre restologia-app\ncon versión 1.0.0:\n<head>\n    <title>Restologia</title>\n    <meta charset=\"utf8\" />\n    <link rel=\"stylesheet\" href=\"/app/styles/reset.css\" />\n    <link rel=\"stylesheet\" href=\"/app/styles/framework.css\" />\n    <link rel=\"stylesheet\" href=\"/app/styles/app.css\" />\n    <link rel=\"stylesheet\" href=\"/app/styles/theme.css\" />\n    <link rel=\"stylesheet\" href=\"/app/styles/custom.css\" />\n</head>\n<body>\n    <div id=\"app\"></div>\n</body>.\n\nCreo noop como una función donde retorno {}.\n\n@SECCIÓN 1. Prerrequisitos & Componentes:\n\n@SECCIÓN 1.*. Prerrequisito de Propiedades de Control comunes:\n\nCreo propiedadesDeControl como {\n    Propiedad onChange como {\n        Propiedad type como Function.\n        Propiedad default como noop.\n    }.\n    Propiedad label como {\n        Propiedad type como String.\n        Propiedad default como \"\".\n    }.\n    Propiedad placeholder como {\n        Propiedad type como String.\n        Propiedad default como \"\".\n    }.\n    Propiedad initialValue como {\n        Propiedad type como String.\n        Propiedad default como \"\".\n    }.\n    Propiedad generalClasses como {\n        Propiedad type como String.\n        Propiedad default como \"\".\n    }.\n    Propiedad labelClasses como {\n        Propiedad type como String.\n        Propiedad default como \"\".\n    }.\n    Propiedad inputClasses como {\n        Propiedad type como String.\n        Propiedad default como \"\".\n    }.\n    Propiedad onClick como {\n        Propiedad type como Function.\n        Propiedad default como noop.\n    }.\n}.\n\n@SECCIÓN 1.*. Prerrequisito de Datos de Control comunes:\n\nCreo datosDeControl como una función con (scope, extensor o en su defecto {}) donde {\n    Retorno {\n        Propiedad internalValue como scope.initialValue.\n        Propiedad internalOnChange como scope.onChange.\n        Propiedad internalLabel como scope.label.\n        Propiedad internalGeneralClasses como scope.generalClasses.\n        Propiedad internalLabelClasses como scope.labelClasses.\n        Propiedad internalInputClasses como scope.inputClasses.\n        Propiedad internalPlaceholder como scope.placeholder.\n        Propiedad internalOnClick como scope.onClick.\n        ...Incluyo extensor\n    }.\n}.\n\n@SECCIÓN 1.*. Prerrequisito de Watchers de Control comunes:\n\nCreo watchersDeControl como {\n    Método internalValue como una función con (v) donde {\n        Hago this.internalOnChange(v, this).\n    }.\n}.\n\n@SECCIÓN 1.*. Componente de Card:\n\nCreo Card como un componente vue con nombre \"Card\" con plantilla {\n    <div class=\"Card\" :class=\"internalGeneralClasses\">\n        <slot></slot>\n    </div>\n} con lógica {\n    Retorno {\n        Propiedad props como { ...Incluyo propiedadesDeControl }.\n        Método data como una función donde retorno { ...Incluyo datosDeControl(this) }.\n        Propiedad watch como { ...Incluyo watchersDeControl }.\n    }.\n}.\n\n@SECCIÓN 1.*. Componente de ControlForText:\n\nCreo ControlForText como un componente vue con nombre \"ControlForText\" con plantilla {\n    <div class=\"ControlForText\" :class=\"internalGeneralClasses\">\n        <div v-if=\"internalLabel\" :class=\"internalLabelClasses\">{{ $t(internalLabel) }}</div>\n        <input type=\"text\" :class=\"internalInputClasses\" v-model=\"internalValue\" />\n    </div>\n} con lógica {\n    Retorno {\n        Propiedad props como { ...Incluyo propiedadesDeControl }.\n        Método data como una función donde retorno { ...Incluyo datosDeControl(this) }.\n        Propiedad watch como { ...Incluyo watchersDeControl }.\n    }.\n}.\n\n@SECCIÓN 1.*. Componente de ControlForPassword:\n\nCreo ControlForPassword como un componente vue con nombre \"ControlForPassword\" con plantilla {\n    <div class=\"ControlForPassword\" :class=\"internalGeneralClasses\">\n        <div v-if=\"internalLabel\" :class=\"internalLabelClasses\">{{ $t(internalLabel) }}</div>\n        <input type=\"password\" :class=\"internalInputClasses\" v-model=\"internalValue\" />\n    </div>\n} con lógica {\n    Retorno {\n        Propiedad props como { ...Incluyo propiedadesDeControl }.\n        Método data como una función donde retorno { ...Incluyo datosDeControl(this) }.\n        Propiedad watch como { ...Incluyo watchersDeControl }.\n    }.\n}.\n\n@SECCIÓN 1.*. Componente de ControlForButton:\n\nCreo ControlForButton como un componente vue con nombre \"ControlForButton\" con plantilla {\n    <div class=\"ControlForButton\" :class=\"internalGeneralClasses\">\n        <button type=\"button\" :class=\"internalInputClasses\" v-on:click=\"internalOnClick\">\n            <slot></slot>\n        </button>\n    </div>\n} con lógica {\n    Retorno {\n        Propiedad props como { ...Incluyo propiedadesDeControl }.\n        Método data como una función donde retorno { ...Incluyo datosDeControl(this) }.\n        Propiedad watch como { ...Incluyo watchersDeControl }.\n    }.\n}.\n\n@SECCIÓN 1.*. Componente de Horizontally:\n\nCreo Horizontally como un componente vue con nombre \"Horizontally\" con plantilla {\n    <table :class=\"internalTableClasses\">\n        <tbody :class=\"internalTbodyClasses\">\n            <tr :class=\"internalTrClasses\">\n                <slot></slot>\n            </tr>\n        </tbody>\n    </table>\n} con lógica {\n    Retorno {\n        Propiedad props como {\n            Propiedad tableClasses como {\n                Propiedad type como [Object, String].\n                Propiedad required como false.\n                Propiedad default como una función donde retorno {}.\n            }.\n            Propiedad tbodyClasses como {\n                Propiedad type como [Object, String].\n                Propiedad required como false.\n                Propiedad default como una función donde retorno {}.\n            }.\n            Propiedad trClasses como {\n                Propiedad type como [Object, String].\n                Propiedad required como false.\n                Propiedad default como una función donde retorno {}.\n            }.\n        }.\n        Método data como una función donde retorno {\n            Propiedad internalTableClasses como this.tableClasses.\n            Propiedad internalTbodyClasses como this.tbodyClasses.\n            Propiedad internalTrClasses como this.trClasses.\n        }.\n        Propiedad watch como {}.\n    }.\n}.\n\n@SECCIÓN 1.*. Componente de TitleOfPage:\n\nCreo TitleOfPage como un componente vue con nombre \"TitleOfPage\" con plantilla {\n    <div class=\"TitleOfPage\">\n        <h3 class=\"padding_2 text_align_right\"><slot></slot></h3>\n    </div>\n}.\n\n@SECCIÓN 1.*. Componente de LanguageSelector:\n\nCreo LanguageSelector como un componente vue con nombre \"LanguageSelector\" con plantilla {\n    <div class=\"LanguageSelector text_align_right\">\n        <Horizontally>\n            <td class=\"width_1x100\">\n                <span>{{ $t(\"Idioma:\") }}</span>\n            </td>\n            <td class=\"width_100x100\">\n                <select v-model=\"selected_language\">\n                    <option value=\"es\">Español</option>\n                    <option value=\"ca\">Català</option>\n                    <option value=\"en\">English</option>\n                </select>\n            </td>\n        </Horizontally>\n    </div>\n} con lógica donde {\n    Retorno {\n        Método data como una función donde {\n            Retorno {\n                Propiedad selected_language como \"\".\n            }.\n        }.\n        Propiedad watch como {\n            Método selected_language como una función con (nuevoValor) donde {\n                Hago this.$almacenamiento.persistir(\"preferences.user.language\", nuevoValor).\n                Hago this.$i18n.i18next.changeLanguage(nuevoValor).\n            }.\n        }.\n        Método mounted como una función donde {\n            Asigno this.selected_language como this.$almacenamiento.obtener(\"preferences.user.language\", this.$i18n.i18next.language).\n        }.\n    }.\n}.\n\n@SECCIÓN 1.*. Componente de Notificaciones:\n\nCreo Notificaciones como un componente vue con nombre \"Notificaciones\" con plantilla {\n    <div class=\"Notificaciones padding_horizontal_3 padding_top_2\">\n        <div style=\"position: fixed; top: auto; bottom: 0; left: 0; right: 0;\">\n            <span>Notificaciones: </span>\n            <span>{{ notifications }}</span>\n        </div>\n    </div>\n} con lógica donde {\n    Retorno {\n        Método data como una función donde retorno {\n            Propiedad notifications como [].\n        }.\n        Propiedad methods como {\n            Método addNotification como una función con (notification) donde {\n                Creo $id como window.$utilidades.getRandomId(10).\n                Creo notification2 como Object.assign({}, notification, { $id }).\n                Si notification es instancia de Error {\n                    Hago this.notifications.push(notification2).\n                }\n                Y si no {\n                    Hago this.notifications.push(notification2).\n                }.\n                Hago setTimeout(una lambda donde {\n                    Creo indiceNotification como Object.keys(this.notifications).filter(una lambda con (index) donde {\n                        Retorno this.notifications[index].$id es igual que $id.\n                    })[0].\n                    Hago this.notifications.splice(indiceNotification, 1).\n                }, notification2.timeout o 5000).\n            }.\n        }.\n    }.\n}.\n\n@SECCIÓN 1.*. Componente de Topbar:\n\nCreo Topbar como un componente vue con nombre \"Topbar\" con plantilla {\n    <div class=\"Topbar\">\n        <Horizontally>\n            <td class=\"width_1x100\">\n                <ControlForButton :on-click=\"toggleNavigation\">\n                    #\n                </ControlForButton>\n            </td>\n            <td class=\"width_100x100 text_align_center\">\n                <h2>Restología</h2>\n            </td>\n        </Horizontally>\n    </div>\n} con lógica donde {\n    Retorno {\n        Método data como una función donde retorno {}.\n        Propiedad methods como {\n            Método toggleNavigation como una función donde {\n                Hago this.$router.history.push(\"/home\").\n            }.\n        }.\n    }.\n}.\n\n@SECCIÓN 1.*. Componente de BackButton:\n\nCreo BackButton como un componente vue con nombre \"BackButton\" con plantilla {\n    <div class=\"BackButton\" :class=\"internalGeneralClasses\">\n        <ControlForButton input-classes=\"width_auto\" :on-click=\"goToRouteUp\" >{{ $t(\"Atrás\") }}</ControlForButton>\n    </div>\n} con lógica donde {\n    Retorno {\n        Método props como {\n            Propiedad generalClasses como {\n                Propiedad type como String.\n                Propiedad default como \"\".\n            }.\n            Propiedad levels como {\n                Propiedad type como Number.\n                Propiedad default como 1.\n            }.\n        }.\n        Método data como una función donde retorno {\n            Propiedad internalGeneralClasses como this.generalClasses.\n            Propiedad internalLevels como this.levels.\n        }.\n        Propiedad methods como {\n            Método goToRouteUp como una función donde {\n                Creo variable partesDeRuta como this.$route.path.split(\"/\").\n                Desde 0 hasta this.internalLevels hago partesDeRuta.pop().\n                Creo variable nuevaRuta como partesDeRuta.join(\"/\").\n                Si nuevaRuta es igual que \"\" asigno nuevaRuta como \"/home\".\n                Hago this.$router.history.push(nuevaRuta).\n            }.\n        }.\n    }.\n}.\n\n@SECCIÓN 2. Páginas:\n\n@SECCIÓN 2.*. Componente de HomePage:\n\nCreo HomePage como un componente vue con nombre \"HomePage\" con plantilla {\n    <div class=\"HomePage\">\n        <TitleOfPage>\n            <Horizontally>\n                <td class=\"width_auto\"><BackButton general-classes=\"visibility_hidden\" /></td>\n                <td class=\"width_100x100\">{{ $t(\"Inicio\") }}</td>\n            </Horizontally>\n        </TitleOfPage>\n        <hr />\n        <div class=\"padding_top_2 padding_bottom_0\">\n            <Card>\n                <ul class=\"BigMenuSquaresList\">\n                    <li class=\"margin_bottom_2\" v-on:click=\"() => $router.history.push('/data')\">\n                        <span class=\"link_text\">{{ $t(\"Datos\") }}</span>\n                    </li>\n                    <li class=\"margin_bottom_2\" v-on:click=\"() => $router.history.push('/settings')\">\n                        <span class=\"link_text\">{{ $t(\"Configuraciones\") }}</span>\n                    </li>\n                    <li class=\"margin_bottom_2\" v-on:click=\"() => $router.history.push('/logout')\">\n                        <span class=\"link_text\">{{ $t(\"Cerrar sesión\") }}</span>\n                    </li>\n                </ul>\n            </Card>\n        </div>\n    </div>\n}.\n\n@SECCIÓN 2.*. Componente de LoginPage:\n\nCreo LoginPage como un componente vue con nombre \"LoginPage\" con plantilla {\n    <div class=\"LoginPage\">\n        <TitleOfPage>\n            <Horizontally>\n                <td class=\"width_auto\"><BackButton :general-classes=\"$root.authentication ? '' : 'visibility_hidden'\" /></td>\n                <td class=\"width_100x100\">{{ $t(\"Identificación\") }}</td>\n            </Horizontally>\n        </TitleOfPage>\n        <hr />\n        <div class=\"padding_vertical_4 text_align_center\"> \n            {{ $root.metadata.project }}\n        </div>\n        <hr />\n        <div class=\"text_align_center remarked_row padding_horizontal_2\">\n            <div class=\"padding_2 padding_bottom_0 text_align_left display_inline_block margin_vertical_4 info_group default_row\" style=\"max-width: 180px;\">\n                <Card general-classes=\"\">\n                    <ControlForText :on-change=\"v => user = v\" label=\"Usuario:\" ref=\"Login_user_input\" general-classes=\"padding_top_2\" />\n                    <ControlForPassword :on-change=\"v => password = v\" label=\"Contraseña:\" ref=\"Login_password_input\" general-classes=\"padding_top_2\" />\n                    <ControlForButton :on-click=\"login\" general-classes=\"padding_vertical_2\" input-classes=\"success_button\">{{ $t(\"Identificarse\") }}</ControlForButton>\n                </Card>\n            </div>\n        </div>\n        <hr />\n        <div class=\"padding_2\">\n            <LanguageSelector />\n        </div>\n    </div>\n} con lógica {\n    Retorno {\n        Método data como una función donde {\n            Asigno window.$loginpage como this.\n            Retorno {\n                Propiedad user como this.$almacenamiento.obtener(\"preferences.user.user\", \"\").\n                Propiedad password como this.$almacenamiento.obtener(\"preferences.user.password\", \"\").\n            }.\n        }.\n        Propiedad methods como {\n            Método login como una función asíncrona donde {\n                Hago this.$rest.setRootComponent(this.$root).\n                Creo respuestaSchema como asíncronamente this.$rest.schema().\n                Creo respuestaLogin como asíncronamente this.$rest.login(this.user, this.password).\n\n                Hago this.$router.history.push(\"/home\").\n            } en errores hago this.$notificaciones.error(error).\n        }.\n        Propiedad watch como {\n            Método user como una función con (nuevoValor) donde {\n                Hago this.$almacenamiento.persistir(\"preferences.user.user\", nuevoValor).\n            }.\n            Método password como una función con (nuevoValor) donde {\n                Hago this.$almacenamiento.persistir(\"preferences.user.password\", nuevoValor).\n            }.\n        }.\n        Método mounted como una función donde {\n            Asigno this.$refs[\"Login_user_input\"].internalValue como this.$almacenamiento.obtener(\"preferences.user.user\", \"\").\n            Asigno this.$refs[\"Login_password_input\"].internalValue como this.$almacenamiento.obtener(\"preferences.user.password\", \"\").\n        }.\n    }.\n}.\n\n@SECCIÓN 2.*. Componente de LogoutPage:\n\nCreo LogoutPage como un componente vue con nombre \"LogoutPage\" con plantilla {\n    <div class=\"LogoutPage\">\n        <TitleOfPage>\n            <Horizontally>\n                <td class=\"width_auto\"><BackButton :general-classes=\"$root.authentication ? '' : 'visibility_hidden'\" /></td>\n                <td class=\"width_100x100\">{{ $t(\"Cerrar sesión\") }}</td>\n            </Horizontally>\n        </TitleOfPage>\n        <hr />\n        <div class=\"padding_horizontal_2 text_align_center\">\n            <ControlForButton :on-click=\"closeSession\" general-classes=\"padding_vertical_2\">{{ $t(\"Cerrar sesión\") }}</ControlForButton>\n        </div>\n    </div>\n} con lógica {\n    Retorno {\n        Método data como una función donde {\n            Retorno {}.\n        }.\n        Propiedad methods como {\n            Método closeSession como una función asíncrona donde {\n                Creo respuestaLogout como asíncronamente this.$rest.logout().\n                Si no this.$root.authentication hago this.$router.history.push(\"/home\");\n                Y si no hago this.$notificaciones.error(respuestaLogout).\n            } en errores hago this.$notificaciones.error(error).\n        }.\n    }.\n}.\n\n@SECCIÓN 2.*. Componente de DataTablePage:\n\nCreo DataTablePage como un componente vue con nombre \"DataTablePage\" con plantilla {\n    <div class=\"DataTablePage\">\n        <template v-if=\"isLoaded\">\n            <TitleOfPage>\n                <Horizontally>\n                    <td class=\"width_auto\"><BackButton :levels=\"2\" /></td>\n                    <td class=\"width_100x100\">{{ $t(\"Datos de\") }} {{ $route.params.table }}</td>\n                </Horizontally>\n            </TitleOfPage>\n            <hr/>\n            <div class=\"padding_2\">\n                <DataTableComponent\n                    mode=\"view\"\n                    :target-project=\"$route.params.project\"\n                    :target-table=\"$route.params.table\"\n                />\n            </div>\n        </template>\n    </div>\n} con lógica {\n    Retorno {\n        Método data como una función donde retorno {\n            Propiedad isLoaded como true.\n        }.\n        Propiedad watch como {\n            Método $route como una función con (nuevoValor) donde {\n                Asigno this.isLoaded como false.\n                Hago una espera de 0 segundos donde asigno this.isLoaded como true.\n            }.\n        }.\n    }.\n}.\n\n@SECCIÓN 2.*. Componente de DataTableComponent:\n\nCreo DataTableComponent como un componente vue con nombre \"DataTableComponent\" con plantilla {\n    <div class=\"DataTableComponent\">\n        <div v-if=\"mode === 'input'\">\n            <Horizontally>\n                <td class=\"width_1x100\">\n                    <span class=\"font_size_small\">{{ (modeType === 'list') ? $t(\"Seleccionados\") : $t(\"Seleccionado\") }}: </span>\n                </td>\n                <td class=\"width_100x100\">\n                    <input type=\"text\" v-model=\"internalValue\" disabled />\n                </td>\n                <td class=\"width_1x100 min_width_25px\">\n                    <ControlForButton :on-click=\"() => isSelected = !isSelected\">{{ isSelected ? \"-\" : \"+\" }}</ControlForButton>\n                </td>\n            </Horizontally>\n        </div>\n        <div v-if=\"(mode === 'view') || (mode === 'input' && isSelected === true)\" :class=\"(mode === 'input') ? 'info_group padding_2 margin_top_2' : ''\">\n            <Horizontally>\n                <td class=\"width_100x100\">\n                    <ControlForText :on-change=\"v => search = v\"></ControlForText>\n                </td>\n                <td class=\"width_1x100\">\n                    <button :class=\"'default_button ' + (isAdvancedSearch ? 'selected' : '')\" v-on:click=\"toggleAdvancedSearch\">#</button>\n                </td>\n                <td class=\"width_1x100\">\n                    <ControlForButton input-classes=\"default_button\" :on-click=\"loadRows\">Buscar</ControlForButton>\n                </td>\n                <td class=\"width_1x100\">\n                    <ControlForButton input-classes=\"success_button\" :on-click=\"goToAddItemPage\"><span class=\"no_break_line\">{{ $t(\"Nuevo\") }}</span></ControlForButton>\n                </td>\n            </Horizontally>\n            <div class=\"padding_top_0\" v-if=\"isAdvancedSearch\">\n                <Horizontally>\n                    <td style=\"width: 33%;\">\n                        <button :class=\"'default_button ' + (isAdvancedSearchPanel === 'where' ? 'selected' : '')\" v-on:click=\"goToWhereSettings\">{{ $t(\"Filtros\") }}</button>\n                    </td>\n                    <td style=\"width: 33%;\">\n                        <button :class=\"'default_button ' + (isAdvancedSearchPanel === 'sort' ? 'selected' : '')\" v-on:click=\"goToOrderSettings\">{{ $t(\"Orden\") }}</button>\n                    </td>\n                    <td style=\"width: 33%;\">\n                        <button :class=\"'default_button ' + (isAdvancedSearchPanel === 'paginate' ? 'selected' : '')\" v-on:click=\"goToPaginationSettings\">{{ $t(\"Paginación\") }}</button>\n                    </td>\n                </Horizontally>\n            </div>\n            <div v-if=\"isAdvancedSearch\">\n                <div v-if=\"isAdvancedSearchPanel === 'where'\">\n                    <div class=\"info_group padding_2 padding_top_0 margin_top_0\">\n                        <div class=\"padding_2 padding_horizontal_0 font_weight_bold\">Filtros aplicados:</div>\n                        <div class=\"padding_2 padding_horizontal_0 padding_vertical_1 font_size_small\" v-if=\"where.length === 0\">No hay filtros aplicados ahora mismo.</div>\n                        <div class=\"margin_bottom_0\" v-for=\"(whereRule, whereIndex) in where\" v-bind:key=\"'select-where-filter-' + whereIndex\">\n                            <div class=\"info_group padding_2 margin_bottom_2 remarked_row\">\n                                <span class=\"info_group_item display_block width_100x100 vertical_align_top\">\n                                    <div class=\"padding_2 margin_bottom_2 default_row no_break_line\">\n                                        <div>{{ $t(\"Columna inicial\") }}:</div>\n                                        <div>\n                                            <select v-model=\"whereRule[0]\">\n                                                <option value=\"id\">{{ $t(\"id\") }}</option>\n                                                <option :value=\"columnIndex\" v-for=\"(column, columnIndex) in definition.columns\" v-bind:key=\"'select-where-filter-parameter-1-rule-' + whereIndex + '-option-' + columnIndex\">\n                                                    {{ columnIndex }}\n                                                </option>\n                                            </select>\n                                        </div>\n                                    </div>\n                                </span>\n                                <template v-if=\"whereRule[0]\">\n                                    <span class=\"info_group_item display_block width_100x100 vertical_align_top\">\n                                        <div class=\"padding_2 margin_bottom_2 default_row\">\n                                            <div>{{ $t(\"Operador\") }}:</div>\n                                            <div>\n                                                <select v-model=\"whereRule[1]\">\n                                                    <option :value=\"operator\" v-for=\"(operator, operatorIndex) in allOperators\" v-bind:key=\"'select-where-filter-parameter-2-rule-' + whereIndex + '-option-' + operatorIndex\">\n                                                        {{ operatorIndex }}\n                                                    </option>\n                                                </select>\n                                            </div>\n                                        </div>\n                                    </span>\n                                    <span class=\"info_group_item display_block width_100x100 vertical_align_top\">\n                                        <div class=\"padding_2 margin_bottom_2 default_row\">\n                                            <div>{{ $t(\"Tipo\") }}:</div>\n                                            <div>\n                                                <select v-model=\"whereRule[3]\" value=\"string\">\n                                                    <option :value=\"operandType\" v-for=\"(operandType, operandTypeIndex) in allOperandTypes\" v-bind:key=\"'select-where-filter-parameter-3-type-rule-' + whereIndex + '-option-' + operandTypeIndex\">\n                                                        {{ operandType }}\n                                                    </option>\n                                                </select>\n                                            </div>\n                                        </div>\n                                    </span>\n                                </template>\n                                <template v-if=\"whereRule[3]\">\n                                    <span class=\"info_group_item display_block width_100x100 vertical_align_top\">\n                                        <div class=\"padding_2 margin_bottom_2 default_row\">\n                                            <div v-if=\"whereRule[3] === 'json'\">{{ $t(\"Valor\") }}:</div>\n                                            <div v-else-if=\"whereRule[3] === 'string'\">{{ $t(\"Texto\") }}:</div>\n                                            <div>\n                                                <ControlForText :on-change=\"v => whereRule[2] = v\" />\n                                            </div>\n                                        </div>\n                                    </span>\n                                </template>\n                                <span class=\"info_group_item display_block width_auto vertical_align_top margin_bottom_0\">\n                                    <ControlForButton input-classes=\"danger_button no_break_line\" :on-click=\"() => deleteWhere(whereIndex)\">Eliminar filtro</ControlForButton>\n                                </span>\n                            </div>\n                        </div>\n                        <div class=\"margin_top_2\" v-bind:key=\"'add-where-rule-button'\">\n                            <ControlForButton :on-click=\"addWhere\">{{ $t(\"Añadir filtro\") }}</ControlForButton>\n                        </div>\n                    </div>\n                </div>\n                <div v-else-if=\"isAdvancedSearchPanel === 'sort'\">\n                    <div class=\"info_group padding_2 padding_top_0 margin_top_0\">\n                        <div class=\"padding_2 padding_horizontal_0 font_weight_bold\">Orden aplicado:</div>\n                        <div class=\"padding_2 padding_horizontal_0 padding_vertical_1 font_size_small\" v-if=\"order.length === 0\">No hay reglas de orden aplicadas ahora mismo.</div>\n                        <div class=\"margin_bottom_0\" v-else>\n                            <div class=\"info_group padding_2 padding_bottom_0 margin_bottom_2 remarked_row\">\n                                <template v-for=\"(orderRule, orderIndex) in order\">\n                                    <span class=\"info_group_item display_block width_100x100 vertical_align_top\" v-bind:key=\"'select-order-filter-parameter-1-rule-' + orderIndex + '-row-for-subject'\">\n                                        <div class=\"padding_2 margin_bottom_2 default_row\">\n                                            <div>{{ $t(\"Columna\") }}:</div>\n                                            <select v-model=\"orderRule[0]\">\n                                                <option value=\"id\">{{ $t(\"id\") }}</option>\n                                                <option :value=\"columnIndex\" v-for=\"(column, columnIndex) in definition.columns\" v-bind:key=\"'select-order-filter-parameter-1-rule-' + orderIndex + 'option-' + columnIndex\">\n                                                    {{ columnIndex }}\n                                                </option>\n                                            </select>\n                                        </div>\n                                    </span>\n                                    <span class=\"info_group_item display_block width_100x100 vertical_align_top\" v-bind:key=\"'select-order-filter-parameter-1-rule-' + orderIndex + '-row-for-direction'\" v-if=\"orderRule[0]\">\n                                        <div class=\"padding_2 margin_bottom_2 default_row\">\n                                            <div>{{ $t(\"Dirección\") }}:</div>\n                                            <select v-model=\"orderRule[1]\">\n                                                <option :value=\"sense\" v-for=\"(sense) in ['ascendent', 'descendent']\" v-bind:key=\"'select-order-filter-parameter-1-rule-' + orderIndex + '-sense-' + sense\">\n                                                    {{ sense }}\n                                                </option>\n                                            </select>\n                                        </div>\n                                    </span>\n                                    <span class=\"info_group_item display_block width_100x100 vertical_align_top margin_bottom_2\" v-bind:key=\"'select-order-filter-parameter-1-rule-' + orderIndex + '-row-for-delete-button'\">\n                                        <ControlForButton input-classes=\"danger_button no_break_line\" :on-click=\"() => deleteOrder(orderIndex)\">Eliminar regla</ControlForButton>\n                                    </span>\n                                </template>\n                            </div>\n                        </div>\n                        <div class=\"margin_top_2\" v-bind:key=\"'add-order-rule-button'\">\n                            <ControlForButton :on-click=\"addOrder\">{{ $t(\"Añadir regla\") }}</ControlForButton>\n                        </div>\n                    </div>\n                </div>\n                <div v-else-if=\"isAdvancedSearchPanel === 'paginate'\">\n                    <div class=\"info_group padding_2 padding_top_0 margin_top_0\">\n                        <div class=\"padding_2 padding_horizontal_0 font_weight_bold\">Paginación:</div>\n                        <Horizontally>\n                            <td class=\"\" style=\"width: 50%;\">\n                                <div>{{ $t(\"Página\") }}:</div>\n                                <div>\n                                    <ControlForText :initial-value=\"'' + paginate[0]\" :on-change=\"v => paginate[0] = parseInt(v)\"></ControlForText>\n                                </div>\n                            </td>\n                            <td class=\"\" style=\"width: 50%;\">\n                                <div class=\"no_break_line\">{{ $t(\"Ítems por página\") }}:</div>\n                                <div>\n                                    <ControlForText :initial-value=\"'' + paginate[1]\" :on-change=\"v => paginate[1] = parseInt(v)\"></ControlForText>\n                                </div>\n                            </td>\n                        </Horizontally>\n                    </div>\n                </div>\n            </div>\n            <div v-if=\"typeof rows === 'undefined'\">\n                {{ $t(\"Cargando...\") }}\n            </div>\n            <div v-else style=\"overflow: scroll; max-height: 360px;\">\n                <table class=\"data_viewer_table width_100x100\">\n                    <thead>\n                        <tr>\n                            <th class=\"padding_2 width_1x100\" v-bind:key=\"'select-table-header-open-row-cell'\"></th>\n                            <th class=\"padding_2 width_1x100\" v-bind:key=\"'select-table-header-view-row-cell'\"></th>\n                            <th class=\"padding_2 width_1x100\" v-bind:key=\"'select-table-header-open-row-cell-of-column-id'\">\n                                {{ $t(\"#id\") }}\n                            </th>\n                            <template v-for=\"(column, columnId) in definition.columns\">\n                                <th class=\"padding_2\" v-bind:key=\"'select-table-header-cell-of-column-' + columnId\">\n                                    {{ $t(\"#\" + columnId) }}\n                                </th>\n                            </template>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <template v-for=\"(row, rowIndex) in rows\">\n                            <tr class=\"remarked_row\" v-bind:key=\"'select-table-body-row-' + rowIndex\">\n                                <td class=\"padding_horizontal_2 padding_right_0 width_1x100\" v-bind:key=\"'select-table-row-' + rowIndex + '-open-row-cell'\">\n                                    <ControlForButton :on-click=\"() => goToRow(row, rowIndex)\" v-if=\"mode === 'view'\" input-classes=\"success_button\">\n                                        {{ $t(\"Ir\") }}\n                                    </ControlForButton>\n                                    <template v-else-if=\"mode === 'input'\">\n                                        <ControlForButton v-if=\"!isSelectedItem(row.id)\" :on-click=\"() => selectRow(row)\" v-bind:key=\"'select-table-row-button-' + rowIndex + '-select-item'\" general-classes=\"min_width_25px\">\n                                            {{ $t(\"+\") }}\n                                        </ControlForButton>\n                                        <ControlForButton v-else :on-click=\"() => unselectRow(row)\" v-bind:key=\"'select-table-row-button-' + rowIndex + '-remove-item'\" general-classes=\"min_width_25px\">\n                                            {{ $t(\"-\") }}\n                                        </ControlForButton>\n                                    </template>\n                                </td>\n                                <td class=\"padding_horizontal_2 width_1x100\" v-bind:key=\"'select-table-row-' + rowIndex + '-see-row-cell'\">\n                                    <ControlForButton v-if=\"viewedRows.indexOf(row.id) === -1\" :on-click=\"() => viewRow(row.id)\" v-bind:key=\"'button-to-view-row-' + row.id\" input-classes=\"default_button\">\n                                        {{ $t(\"Ver\") }}\n                                    </ControlForButton>\n                                    <ControlForButton v-else :on-click=\"() => hideRow(row.id)\" v-bind:key=\"'button-to-hide-row-' + row.id\" input-classes=\"default_button selected\">\n                                        {{ $t(\"Ok\") }}\n                                    </ControlForButton>\n                                </td>\n                                <td class=\"padding_2 no_break_line width_1x100\" v-bind:key=\"'select-table-row-' + rowIndex + '-cell-of-column-id'\">\n                                    <span class=\"link_text\">{{ row.id }}</span>\n                                </td>\n                                <template v-for=\"(column, columnId) in definition.columns\">\n                                    <td class=\"padding_2 no_break_line\" v-bind:key=\"'select-table-row-' + rowIndex + '-cell-of-column-' + columnId\">\n                                        <span class=\"link_text\">{{ row[columnId] }}</span>\n                                    </td>\n                                </template>\n                            </tr>\n                            <tr class=\"remarked_row secondary\" v-if=\"isViewedRow(row.id)\" v-bind:key=\"'select-table-body-row-' + rowIndex + '-details-row'\">\n                                <td colspan=\"1000\">\n                                    <div>\n                                        <Horizontally>\n                                            <td class=\"width_1x100 padding_left_2\">\n                                                <span>{{$t(\"Vista de ítem\")}}: </span>\n                                                <span>\n                                                    <select class=\"width_auto\" v-model=\"selectedView[row.id]\">\n                                                        <option :value=\"undefined\">{{ $t(\"Por defecto\") }}</option>\n                                                    </select>\n                                                </span>\n                                            </td>\n                                        </Horizontally>\n                                    </div>\n                                    <div v-if=\"selectedView[row.id] === undefined\">\n                                        <DataRowExplorerComponent\n                                            :project=\"project\"\n                                            :table=\"table\"\n                                            :row-id=\"row.id\"\n                                        />\n                                    </div>\n                                </td>\n                            </tr>\n                        </template>\n                    </tbody>\n                </table>\n            </div>\n            <Horizontally v-if=\"typeof pagination === 'object'\">\n                <td class=\"width_1x100\">\n                    <ControlForButton :on-click=\"goToFirstPage\"> «« </ControlForButton>\n                </td>\n                <td class=\"width_1x100\">\n                    <ControlForButton :on-click=\"goToPreviousPage\"> « </ControlForButton>\n                </td>\n                <td class=\"width_100x100 text_align_center\">\n                    <span>{{ $t(\"Página\") }} {{ pagination.page }} {{ $t(\"de\") }} {{ pagination.totalPages }}</span>\n                </td>\n                <td class=\"width_1x100\">\n                    <ControlForButton :on-click=\"goToNextPage\"> » </ControlForButton>\n                </td>\n                <td class=\"width_1x100\">\n                    <ControlForButton :on-click=\"goToLastPage\"> »» </ControlForButton>\n                </td>\n            </Horizontally>\n        </div>\n    </div>\n} con lógica {\n    Retorno {\n        Propiedad props como {\n            Propiedad mode como {\n                Propiedad type como String.\n                Propiedad required como true.\n            }.\n            Propiedad modeType como {\n                Propiedad type como String.\n                Propiedad required como false.\n                Propiedad default como \"object\".\n            }.\n            Propiedad targetProject como {\n                Propiedad type como String.\n                Propiedad required como true.\n            }.\n            Propiedad targetTable como {\n                Propiedad type como String.\n                Propiedad required como true.\n            }.\n            Propiedad onChange como {\n                Propiedad type como Function.\n                Propiedad required como false.\n                Propiedad default como noop.\n            }.\n            Propiedad initialValue como {\n                Propiedad required como false.\n                Propiedad default como undefined.\n            }.\n        }.\n        Método data como una función donde {\n            Retorno {\n                Propiedad rows como undefined.\n                Propiedad table como this.targetTable.\n                Propiedad project como this.targetProject.\n                Propiedad definition como undefined.\n                Propiedad where como [].\n                Propiedad order como [].\n                Propiedad paginate como [1, 10].\n                Propiedad search como \"\".\n                Propiedad pagination como undefined.\n                Propiedad isAdvancedSearch como false.\n                Propiedad isAdvancedSearchPanel como \"where\".\n                Propiedad allOperators como {\n                    Propiedad \"is less than\" como \"<\".\n                    Propiedad \"is less or equal to\" como \"<=\".\n                    Propiedad \"is greater than\" como \">\".\n                    Propiedad \"is greater or equal to\" como \">=\".\n                    Propiedad \"is equal to\" como \"=\".\n                    Propiedad \"is not equal to\" como \"!=\".\n                    Propiedad \"is in\" como \"in\".\n                    Propiedad \"is not in\" como \"not in\".\n                    Propiedad \"is null\" como \"is null\".\n                    Propiedad \"is not null\" como \"is not null\".\n                    Propiedad \"has\" como \"has\".\n                    Propiedad \"has not\" como \"has not\".\n                }.\n                Propiedad allOperandTypes como [\"string\", \"json\", \"column\", \"nothing\"].\n                # Propiedades del modo 'input':\n                Propiedad isSelected como false.\n                Propiedad internalOnChange como this.onChange.\n                Propiedad internalValue como cuando this.initialValue entonces this.initialValue si no\n                    cuando this.modeType es igual que \"object\" entonces undefined si no\n                    cuando this.modeType es igual que \"list\" entonces [] si no this.initialValue.\n                # Propiedades de la row:\n                Propiedad viewedRows como [].\n                # Propiedades de la vista:\n                Propiedad selectedView como {}.\n            }.\n        }.\n        Propiedad watch como {\n            Método internalValue como una función con (nuevoValor) donde {\n                Hago this.onChange(nuevoValor).\n            }.\n        }.\n        Propiedad methods como {\n            Método loadRows como una función asíncrona donde {\n                Asigno this.rows como undefined.\n                Creo responseSelect como asíncronamente this.$rest.select(\n                    this.project,\n                    this.table,\n                    this.sanitizeWhere(this.where),\n                    this.sanitizeOrder(this.order),\n                    this.paginate,\n                    this.search\n                ).\n                Si responseSelect.data.status no es igual que \"success\" lanzo un nuevo Error(\"Hubo errores para cargar los datos\").\n                Asigno this.rows como responseSelect.data.data.items.\n                Asigno this.pagination como {\n                    Propiedad page como this.paginate[0].\n                    Propiedad totalPages como Math.floor((responseSelect.data.data.total numerizado) / this.paginate[1]) + 1.\n                    Propiedad total como responseSelect.data.data.total.\n                }.\n            } en errores hago this.$notificaciones.error(error).\n            Método loadDefinition como una función donde {\n                Si this.$root.schema no es tipo indefinido {\n                    Asigno this.definition como this.$root.schema.projects[this.project].project.schema.tables[this.table].\n                }.\n            }.\n            Método goToFirstPage como una función donde {\n                Asigno this.paginate[0] como 1.\n                Hago this.loadRows().\n            }.\n            Método goToPreviousPage como una función donde {\n                Si this.paginate[0] no es igual que 1 {\n                    Decremento this.paginate[0].\n                }.\n                Hago this.loadRows().\n            }.\n            Método goToNextPage como una función donde {\n                Si this.paginate[0] no es igual que (this.pagination.totalPages) {\n                    Incremento this.paginate[0].\n                }.\n                Hago this.loadRows().\n            }.\n            Método goToLastPage como una función donde {\n                Asigno this.paginate[0] como this.pagination.totalPages.\n                Hago this.loadRows().\n            }.\n            Método goToWhereSettings como una función donde {\n                Asigno this.isAdvancedSearchPanel como \"where\".\n            }.\n            Método goToOrderSettings como una función donde {\n                Asigno this.isAdvancedSearchPanel como \"sort\".\n            }.\n            Método goToPaginationSettings como una función donde {\n                Asigno this.isAdvancedSearchPanel como \"paginate\".\n            }.\n            Método goToRow como una función con (row, rowIndex) donde {\n                Hago this.$router.history.push(\"/data/\" + this.project + \"/\" + this.table + \"/\" + row.id).\n            }.\n            Método goToAddItemPage como una función donde {\n                Hago this.$router.history.push(\"/data/\" + this.project + \"/\" + this.table + \"/@add\").\n            }.\n            Método viewRow como una función con (rowId) donde {\n                Hago this.viewedRows.push(rowId).\n            }.\n            Método hideRow como una función con (rowId) donde {\n                Creo indexRow como this.viewedRows.indexOf(rowId).\n                Hago this.viewedRows.splice(indexRow, 1).\n            }.\n            Método toggleAdvancedSearch como una función donde {\n                Asigno this.isAdvancedSearch como no this.isAdvancedSearch.\n            }.\n            Método selectRow como una función con (row) donde {\n                Si this.modeType es igual que \"list\" {\n                    Hago this.internalValue.push(row.id).\n                }\n                Pero si this.modeType es igual que \"object\" {\n                    Asigno this.internalValue como row.id.\n                }.\n            }.\n            Método unselectRow como una función con (row) donde {\n                Si this.modeType es igual que \"list\" {\n                    Creo variable rowPosition como 0-1.\n                    Desde 0 hasta this.internalValue.length {\n                        Creo rowId como this.internalValue[index].\n                        Si rowId es igual que row.id {\n                            Hago this.internalValue.splice(index, 1).\n                        }.\n                    }.\n                }\n                Pero si this.modeType es igual que \"object\" {\n                    Asigno this.internalValue como undefined.\n                }.\n            }.\n            Método isSelectedItem como una función con (rowId) donde {\n                Si this.modeType es igual que \"list\" {\n                    Creo coincidentes como this.internalValue.filter(una lambda con (selectedRow) donde retorno selectedRow es igual que rowId).\n                    Retorno coincidentes.length es mayor que 0.\n                }\n                Pero si this.modeType es igual que \"object\" {\n                    Retorno this.internalValue es igual que rowId.\n                }.\n                Retorno false.\n            }.\n            Método isViewedRow como una función con (rowId) donde {\n                Creo coincidentes como this.viewedRows.filter(una lambda con (viewedRow) donde retorno viewedRow es igual que rowId).\n                Retorno coincidentes.length es mayor que 0.\n            }.\n            Método addWhere como una función donde {\n                Creo variable hayVacios como false.\n                Desde 0 hasta this.where.length {\n                    Si this.where[index].length es menor que 2 asigno hayVacios como true.\n                }.\n                Si no hayVacios hago this.where.push([]).\n            }.\n            Método deleteWhere como una función con (rowIndex) donde {\n                Hago this.where.splice(rowIndex, 1).\n            }.\n            Método addOrder como una función donde {\n                Creo variable hayVacios como false.\n                Desde 0 hasta this.order.length {\n                    Si this.order[index].length es menor que 2 asigno hayVacios como true.\n                }.\n                Si no hayVacios hago this.order.push([]).\n            }.\n            Método deleteOrder como una función con (rowIndex) donde {\n                Hago this.order.splice(rowIndex, 1).\n            }.\n            Método sanitizeWhere como una función con (where) donde {\n                Retorno where.\n            }.\n            Método sanitizeOrder como una función con (order) donde {\n                Retorno order mapeado con una función con (orderRule) donde retorno (cuando orderRule[1] es igual que \"descendent\" entonces \"!\" si no \"\" ) + orderRule[0].\n            }.\n            Método extendWithIdColumn como una función con (tableDefinition) donde {\n                Asigno tableDefinition.columns.id como {}.\n                Retorno tableDefinition.\n            }.\n        }.\n        Método mounted como una función asíncrona donde {\n            Hago asíncronamente this.loadDefinition().\n            Hago asíncronamente this.loadRows().\n        }.\n    }.\n}.\n\n@SECCIÓN 2.*. Componente DataRowExplorerComponent:\n\nCreo DataRowExplorerComponent como un componente vue con nombre \"DataRowExplorerComponent\" con plantilla {\n    <div class=\"DataRowExplorerComponent\">\n        <div v-if=\"!internalRow\" class=\"font_size_small padding_2\">\n            No se encontró elemento.\n        </div>\n        <div v-else class=\"border_left_marked padding_1\">\n            <table class=\"width_100x100\">\n                <tbody>\n                    <tr>\n                        <td colspan=\"1000\">\n                            <Horizontally tableClasses=\"width_100x100\">\n                                <td class=\"width_1x100\">\n                                    <ControlForButton general-classes=\"width_1x100\" input-classes=\"width_auto success_button no_break_line\" :on-click=\"() => $router.history.push('/data/' + internalProject + '/' + internalTable + '/' + internalRow.id)\">\n                                        <div class=\"font_weight_bold text_decoration_underline no_break_line\">\n                                            {{ internalProject }} » {{ internalTable }} » {{ internalRowId }}\n                                        </div>\n                                    </ControlForButton>\n                                </td>\n                                <td class=\"width_1x100\">\n                                    <ControlForButton general-classes=\"width_1x100\" input-classes=\"width_auto success_button\" :on-click=\"() => $router.history.push('/data/' + internalProject + '/' + internalTable + '/@add')\">{{ $t(\"Nuevo\") }}</ControlForButton>\n                                </td>\n                                <td class=\"width_100x100\"></td>\n                            </Horizontally>\n                        </td>\n                    </tr>\n                </tbody>\n                <template v-for=\"(rowProperty, rowColumn) in internalRow\">\n                    <tbody v-bind:key=\"'row-explorer-item-for-project-' + internalProject + '-table-' + internalTable + '-column-' + rowColumn + '-row-' + internalRowId\">\n                        <tr class=\"padding_1 margin_bottom_1 font_size_small\">\n                            <td class=\"text_align_left width_1x100\">\n                                <b>{{ rowColumn }}:</b>\n                            </td>\n                            <td class=\"width_100x100\">\n                                <template v-if=\"isReferenceListInSchema(internalProject, internalTable, rowColumn)\">\n                                    <span v-bind:key=\"'data-row-explorer-' + uid + '-as-list-column-on-project-' + internalProject + '-table-' + internalTable + '-column-' + rowColumn + '-row-' + internalRowId\">\n                                        <span>[ </span>\n                                            <template v-for=\"(propertyValue, propertyIndex) in rowProperty\">\n                                                <span v-bind:key=\"'row-explorer-item-for-' + internalProject + '-' + internalTable + '-' + internalRowId + '-' + rowColumn + '-row-' + internalRowId + '-list-item-' + propertyIndex\">\n                                                    <span v-if=\"propertyIndex !== 0\">, </span>\n                                                    <button class=\"default_button small_button width_1x100\" :class=\"{selected: typeof selectedItems === 'object' && typeof selectedItems[rowColumn] === 'object' && selectedItems[rowColumn].index === propertyIndex}\" v-on:click=\"() => toggleItemFromList(rowColumn, propertyIndex, propertyValue)\">{{ propertyValue }}</button>\n                                                </span>\n                                            </template>\n                                        <span> ]</span>\n                                    </span>\n                                </template>\n                                <template v-else-if=\"isReferenceObjectInSchema(internalProject, internalTable, rowColumn)\">\n                                    <button class=\"default_button small_button width_1x100\" :class=\"{selected:typeof selectedItems[rowColumn] === 'object'}\" v-on:click=\"() => toggleItemFromObject(rowColumn, rowProperty)\" v-bind:key=\"'data-row-explorer-' + uid + '-as-object-column-on-project-' + internalProject + '-table-' + internalTable + '-column-' + rowColumn + '-row-' + internalRowId\">{{ rowProperty }}</button>\n                                </template>\n                                <template v-else>\n                                    <span v-bind:key=\"'data-row-explorer-' + uid + '-as-default-column-on-project-' + internalProject + '-table-' + internalTable + '-column-' + rowColumn + '-row-' + internalRowId\">\n                                        <span>{{ rowProperty }}</span>\n                                    </span>\n                                </template>\n                            </td>\n                        </tr>\n                        <tr v-if=\"isTypeInSchema(internalProject, internalTable, rowColumn, 'image')\">\n                            <td colspan=\"1000\">\n                                <div class=\"image_preview_container\">\n                                    <div class=\"image_preview_wrapper\">\n                                        <img class=\"image_preview\" :src=\"$rest.getFileUrl(internalProject, internalTable, internalRowId, rowColumn)\" />\n                                    </div>\n                                </div>\n                            </td>\n                        </tr>\n                        <tr v-if=\"typeof selectedItems === 'object' && typeof selectedItems[rowColumn] !== 'undefined'\" v-bind:key=\"'data-row-explorer-' + uid + '-as-new-data-row-explorer-tr-on-project-' + internalProject + '-table-' + internalTable + '-column-' + rowColumn + '-row-' + internalRowId\">\n                            <td colspan=\"1000\">\n                                <DataRowExplorerComponent\n                                    :project=\"selectedItems[rowColumn].project\"\n                                    :table=\"selectedItems[rowColumn].table\"\n                                    :row-id=\"selectedItems[rowColumn].id\"\n                                />\n                            </td>\n                        </tr>\n                    </tbody>\n                </template>\n            </table>\n        </div>\n    </div>\n} con lógica {\n    Retorno {\n        Propiedad props como {\n            Propiedad uid como {\n                Propiedad type como String.\n                Propiedad default como una función donde retorno Vue.prototype.$utilidades.getRandomId(10).\n            }.\n            Propiedad project como {\n                Propiedad type como String.\n                Propiedad required como true.\n            }.\n            Propiedad table como {\n                Propiedad type como String.\n                Propiedad required como true.\n            }.\n            Propiedad rowId como {\n                Propiedad type como Number.\n                Propiedad required como true.\n            }.\n        }.\n        Método data como una función donde {\n            Retorno {\n                Propiedad internalProject como this.project.\n                Propiedad internalTable como this.table.\n                Propiedad internalRowId como this.rowId.\n                Propiedad internalRow como undefined.\n                Propiedad selectedItems como {}.\n            }.\n        }.\n        Propiedad watch como {\n            @POR-OKKK.\n        }.\n        Propiedad methods como {\n            Método isTypeInSchema como una función con (project, table, column, isType o en su defecto \"undefined\") donde {\n                Si this.$root.schema.projects no contiene clave project retorno false.\n                Si this.$root.schema.projects[project].project.schema.tables no contiene clave table retorno false.\n                Si this.$root.schema.projects[project].project.schema.tables[table].columns no contiene clave column retorno false.\n                Si this.$root.schema.projects[project].project.schema.tables[table].columns[column].attributes.isType no es igual que isType retorno false.\n                Retorno true.\n            }.\n            Método toggleItemFromList como una función con (column, index, value) donde {\n                Creo props como this.$rest.getReferredProjectAndTableByColumn(this.internalProject, this.internalTable, column).\n                Creo previoEstado como Object.assign({}, this.selectedItems).\n                Asigno this.selectedItems como undefined.\n                Creo objetoModificador como {}.\n                Creo objetoEstado como Object.assign({}, previoEstado).\n                Creo objetoNuevoEstado como {}.\n                Si objetoEstado no contiene clave column {\n                    Asigno objetoModificador[column] como {\n                        Propiedad index como index.\n                        Propiedad project como props.project.\n                        Propiedad table como props.table.\n                        Propiedad id como value.\n                    }.\n                }\n                Pero si objetoEstado[column].index no es igual que index {\n                    Asigno objetoModificador[column] como {\n                        Propiedad index como index.\n                        Propiedad project como props.project.\n                        Propiedad table como props.table.\n                        Propiedad id como value.\n                    }.\n                }\n                Y si no {\n                    Elimino propiedad objetoModificador[column].\n                    Elimino propiedad objetoEstado[column].\n                }.\n                Hago Object.assign(objetoNuevoEstado, objetoEstado, objetoModificador).\n                Hago una espera de 0.1 segundos donde {\n                    Asigno this.selectedItems como objetoNuevoEstado.\n                    Hago this.$forceUpdate(true).\n                }.\n            } en errores hago this.$notificaciones.error(error).\n            Método toggleItemFromObject como una función con (column, value) donde {\n                Creo props como this.$rest.getReferredProjectAndTableByColumn(this.internalProject, this.internalTable, column).\n                Creo previoEstado como Object.assign({}, this.selectedItems).\n                Asigno this.selectedItems como undefined.\n                Hago this.$forceUpdate(true).\n                Creo objetoModificador como {}.\n                Creo objetoEstado como Object.assign({}, previoEstado).\n                Creo objetoNuevoEstado como {}.\n                Si objetoEstado no contiene clave column {\n                    Asigno objetoModificador[column] como {\n                        Propiedad project como props.project.\n                        Propiedad table como props.table.\n                        Propiedad id como value.\n                    }.\n                }\n                Pero si objetoEstado[column].id no es igual que value {\n                    Asigno objetoModificador[column] como {\n                        Propiedad project como props.project.\n                        Propiedad table como props.table.\n                        Propiedad id como value.\n                    }.\n                }\n                Y si no {\n                    Elimino propiedad objetoModificador[column].\n                    Elimino propiedad objetoEstado[column].\n                }.\n                Hago Object.assign(objetoNuevoEstado, objetoEstado, objetoModificador).\n                Hago una espera de 0 segundos donde {\n                    Asigno this.selectedItems como objetoNuevoEstado.\n                    Hago this.$forceUpdate(true).\n                }.\n            } en errores hago this.$notificaciones.error(error).\n            Método isReferenceListInSchema como una función con (projectId, tableId, columnId) donde {\n                Si columnId es igual que \"id\" retorno false.\n                Si this.$root.allTables no contiene clave projectId + \":\" + tableId lanzo un nuevo Error(\"Required parameters «project» (\" + projectId + \") and «table» (\" + tableId + \") to conform a defined table in schema in order to «FormControl.isReferenceListInSchema»\").\n                Si this.$root.allTables[projectId + \":\" + tableId].columns no contiene clave columnId lanzo un nuevo Error(\"Required parameters «project» (\" + projectId + \"), «table» (\" + tableId + \") and «column» (\" + columnId + \") to conform a defined column in schema in order to «FormControl.isReferenceListInSchema»\").\n                Retorno this.$root.allTables[projectId + \":\" + tableId].columns[columnId].attributes.isType es igual que \"list\".\n            } en errores hago this.$notificaciones.error(error).\n            Método isReferenceObjectInSchema como una función con (projectId, tableId, columnId) donde {\n                Si columnId es igual que \"id\" retorno false.\n                Si this.$root.allTables no contiene clave projectId + \":\" + tableId lanzo un nuevo Error(\"Required parameters «project» (\" + projectId + \") and «table» (\" + tableId + \") to conform a defined table in schema in order to «FormControl.isReferenceObjectInSchema»\").\n                Si this.$root.allTables[projectId + \":\" + tableId].columns no contiene clave columnId lanzo un nuevo Error(\"Required parameters «project» (\" + projectId + \"), «table» (\" + tableId + \") and «column» (\" + columnId + \") to conform a defined column in schema in order to «FormControl.isReferenceObjectInSchema»\").\n                Retorno this.$root.allTables[projectId + \":\" + tableId].columns[columnId].attributes.isType es igual que \"object\".\n            } en errores hago this.$notificaciones.error(error).\n        }.\n        Método mounted como una función asíncrona donde {\n            Creo respuestaSelect como asíncronamente this.$rest.select(\n                this.internalProject,\n                this.internalTable,\n                [[ \"id\", \"=\", this.internalRowId ]],\n                [],\n                [],\n                \"\"\n            ).\n            Asigno this.internalRow como respuestaSelect.data.data.items[0].\n        } en errores hago this.$notificaciones.error(error).\n    }.\n}.\n\n@SECCIÓN 2.*. Componente de FormControl:\n\nCreo FormControl como un componente vue con nombre \"FormControl\" con plantilla {\n    <div class=\"FormControl padding_top_2 padding_bottom_2\" style=\"border-bottom: 1px dashed #DDD;\" v-if=\"meetsOptionConditions()\">\n        <div class=\"\">\n            <span class=\"font_weight_bold\">{{ $window.$utilidades.capitalizeString(columnId) }}: </span>\n            <span class=\"font_size_small text_style_as_two\">[ {{ internalColumnMetadata.attributes.isType }} {{ internalColumnMetadata.attributes.isSubtype || \"\" }} ] </span>\n            <span class=\"font_size_small text_style_as_three\">{{ internalColumnMetadata.attributes.hasDescription || \"\" }}</span>\n        </div>\n        <div v-if=\"internalColumnMetadata.attributes.isType === 'string' && internalColumnMetadata.attributes.isSubtype === null\">\n            <input class=\"form_control_input\" type=\"text\" v-model=\"internalValue\" :ref=\"'form-control-' + uid\" />\n        </div>\n        <div v-else-if=\"internalColumnMetadata.attributes.isType === 'string' && internalColumnMetadata.attributes.isSubtype === 'password'\">\n            <input class=\"form_control_input\" type=\"password\" v-model=\"internalValue\" :ref=\"'form-control-' + uid\" />\n        </div>\n        <div v-else-if=\"internalColumnMetadata.attributes.isType === 'string' || internalColumnMetadata.attributes.isType === 'text'\">\n            <template v-if=\"internalColumnMetadata.attributes.hasMultipleRows\">\n                <textarea class=\"form_control_input textarea_input\" type=\"text\" v-model=\"internalValue\" :ref=\"'form-control-' + uid\"></textarea>\n            </template>\n            <template v-else>\n                <input class=\"form_control_input\" type=\"text\" v-model=\"internalValue\" :ref=\"'form-control-' + uid\" />\n            </template>\n        </div>\n        <div v-else-if=\"internalColumnMetadata.attributes.isType === 'number'\">\n            <input class=\"form_control_input\" type=\"number\" v-model=\"internalValue\" :ref=\"'form-control-' + uid\" />\n        </div>\n        <div v-else-if=\"internalColumnMetadata.attributes.isType === 'boolean'\">\n            <input class=\"form_control_input\" type=\"checkbox\" v-model=\"internalValue\" :ref=\"'form-control-' + uid\" />\n        </div>\n        <div v-else-if=\"internalColumnMetadata.attributes.isType === 'option'\">\n            <select class=\"form_control_input select_input\" v-model=\"internalValue\" :ref=\"'form-control-' + uid\">\n                <option v-for=\"(optionData, optionIndex) in internalColumnMetadata.attributes.hasOptions\" v-bind:key=\"'form-control-' + uid + '-option-' + optionIndex\" :value=\"optionData.value\">\n                    {{ optionData.label }}\n                </option>\n            </select>\n        </div>\n        <div v-else-if=\"internalColumnMetadata.attributes.isType === 'options'\">\n            <input class=\"form_control_input\" type=\"checkbox\" v-model=\"internalValue\" :ref=\"'form-control-' + uid\" />\n        </div>\n        <div v-else-if=\"internalColumnMetadata.attributes.isType === 'object'\">\n            <DataTableComponent\n                mode=\"input\"\n                mode-type=\"object\"\n                :target-project=\"$rest.getReferredProjectAndTableByColumn(internalProjectId, internalTableId, internalColumnId).project\"\n                :target-table=\"$rest.getReferredProjectAndTableByColumn(internalProjectId, internalTableId, internalColumnId).table\"\n                :on-change=\"v => internalValue = v\"\n                :initial-value=\"internalValue\"\n                :ref=\"'form-control-' + uid\" />\n        </div>\n        <div v-else-if=\"internalColumnMetadata.attributes.isType === 'list'\">\n            <DataTableComponent\n                mode=\"input\"\n                mode-type=\"list\"\n                :target-project=\"$rest.getReferredProjectAndTableByColumn(internalProjectId, internalTableId, internalColumnId).project\"\n                :target-table=\"$rest.getReferredProjectAndTableByColumn(internalProjectId, internalTableId, internalColumnId).table\"\n                :on-change=\"v => internalValue = v\"\n                :initial-value=\"internalValue\"\n                :ref=\"'form-control-' + uid\" />\n        </div>\n        <div v-else-if=\"internalColumnMetadata.attributes.isType === 'time'\">\n            <ControlForDate\n                :initial-value=\"internalValue\"\n                :on-change=\"v => internalValue = v\"\n                :ref=\"'form-control-' + uid\" />\n        </div>\n        <div v-else-if=\"internalColumnMetadata.attributes.isType === 'file'\">\n            <ControlForFile\n                :initial-value=\"internalValue\"\n                :on-change=\"v => internalValue = v\"\n                :ref=\"'form-control-' + uid\"\n                :form-control-parent=\"this\" />\n        </div>\n        <div v-else-if=\"internalColumnMetadata.attributes.isType === 'image'\">\n            <ControlForImage\n                :initial-value=\"internalValue\"\n                :on-change=\"v => internalValue = v\"\n                :image-url=\"getImageUrl()\"\n                :ref=\"'form-control-' + uid\"\n                :form-control-parent=\"this\" />\n        </div>\n        <div v-else>\n            <input class=\"form_control_input\" type=\"text\" v-model=\"internalValue\" />\n        </div>\n    </div>\n} con lógica {\n    Retorno {\n        Propiedad props como {\n            Propiedad uid como {\n                Propiedad type como String.\n                Propiedad required como false.\n                Propiedad default como una función donde retorno this.$utilidades.getRandomId(10).\n            }.\n            Propiedad fullRow como {\n                Propiedad type como Object.\n                Propiedad required como true.\n            }.\n            Propiedad projectId como {\n                Propiedad type como String.\n                Propiedad required como true.\n            }.\n            Propiedad columnId como {\n                Propiedad type como String.\n                Propiedad required como true.\n            }.\n            Propiedad tableId como {\n                Propiedad type como String.\n                Propiedad required como true.\n            }.\n            Propiedad tableMetadata como {\n                Propiedad type como Object.\n                Propiedad required como true.\n            }.\n            Propiedad itemId como {\n                Propiedad type como [Number, String].\n                Propiedad required como false.\n                Propiedad default como undefined.\n            }.\n            Propiedad initialValue como {\n                Propiedad type como [Array, Object, String, Number, Boolean, Function].\n                Propiedad required como false.\n                Propiedad default como una lambda donde retorno \"\".\n            }.\n            Propiedad onChange como {\n                Propiedad type como Function.\n                Propiedad required como false.\n                Propiedad default como noop.\n            }.\n        }.\n        Método data como una función donde {\n            Retorno {\n                Propiedad internalFullRow como this.fullRow.\n                Propiedad internalProjectId como this.projectId.\n                Propiedad internalTableId como this.tableId.\n                Propiedad internalTableMetadata como this.tableMetadata.\n                Propiedad internalItemId como this.itemId.\n                Propiedad internalColumnId como this.columnId.\n                Propiedad internalColumnMetadata como this.tableMetadata.columns[this.columnId].\n                Propiedad internalOnChange como this.onChange.\n                Propiedad internalValue como this.initialValue.\n            }.\n        }.\n        Propiedad methods como {\n            Método getImageUrl como una función donde {\n                Retorno this.$rest.getFileUrl(this.internalProjectId, this.tableId, this.internalItemId, this.columnId).\n            } en errores hago this.$notificaciones.error(error).\n            Método getFiles como una función donde {\n                Si [\"file\", \"image\"] no contiene valor this.internalColumnMetadata.attributes.isType lanzo un nuevo Error(\"Required form control to be «file» or «image» in order to «getFiles»\").\n                Creo controlElement como this.$refs[\"form-control-\" + this.uid].\n                Creo fileInputs como controlElement.getFileInputs().\n                Retorno fileInputs.\n            } en errores hago this.$notificaciones.error(error).\n            Método meetsOptionConditions como una función donde {\n                Creo optionConditionGroups como this.internalColumnMetadata.attributes.hasOptionConditions.\n                Si optionConditionGroups es tipo indefinido retorno true.\n                Si optionConditionGroups es igual que null retorno true.\n                Si optionConditionGroups no es tipo lista lanzo un nuevo Error(\"Required configuration on «schema.tables[\" + this.internalTableId + \"].columns[\" + this.internalColumnId + \"].attributes.hasOptionConditions» to be an array, «undefined» or «null» in order to «meetsOptionConditions»\").\n                Itero como objeto optionConditionGroups creando constante groupIndex donde {\n                    Creo optionConditionGroup como optionConditionGroups[groupIndex].\n                    Creo variable resultConditionGroup como true.\n                    Si optionConditionGroup no es tipo lista lanzo un nuevo Error(\"Required configuration on «schema.tables[\" + JSON.stringify(this.internalTableId) + \"].columns[\" + JSON.stringify(this.internalColumnId) + \"].attributes.hasOptionConditions» on index «\" + groupIndex + \"» to be an array in order to «meetsOptionConditions»\").\n                    Itero como objeto optionConditionGroup creando constante atomicIndex donde {\n                        Creo atomicCondition como optionConditionGroup[atomicIndex].\n                        Si atomicCondition no es tipo lista lanzo un nuevo Error(\"Required configuration on «schema.tables[\" + JSON.stringify(this.internalTableId) + \"].columns[\" + JSON.stringify(this.internalColumnId) + \"].attributes.hasOptionConditions» on index «\" + groupIndex + \"».«\" + atomicIndex + \"» to be an array in order to «meetsOptionConditions»\").\n                        Creo atomicConditionResult como this.resolveCondition(atomicCondition).\n                        Asigno resultConditionGroup como resultConditionGroup y atomicConditionResult.\n                        Si resultConditionGroup es igual que false retorno false.\n                    }.\n                }.\n                Retorno true.\n            } en errores hago this.$notificaciones.error(error).\n            Método resolveCondition como una función con (parametros) donde {\n                Creo sujeto como parametros[0].\n                Creo operacion como parametros[1].\n                Creo predicado como parametros[2].\n                Creo usandoVariable como parametros[3] o false.\n                Si operacion es igual que \"=\" {\n                    Creo sujetoFinal como this.internalFullRow.getProperty(sujeto).\n                    Creo predicadoFinal como cuando usandoVariable entonces this.internalFullRow.getProperty(predicado) si no predicado.\n                    Si sujetoFinal no es igual que predicadoFinal {\n                        Retorno false.\n                    }.\n                }.\n                @POR-HACER.... != < > <= >= in not in has has not ... ?\n                Retorno true.\n            }.\n        }.\n        Propiedad watch como {\n            Método internalValue como una función con (nuevoValor) donde {\n                Hago this.internalOnChange(nuevoValor).\n            }.\n        }.\n    }.\n}.\n\n@SECCIÓN 2.*. Componente de DataRowPage:\n\nCreo DataRowPage como un componente vue con nombre \"DataRowPage\" con plantilla {\n    <div class=\"DataRowPage\">\n        <template v-if=\"isLoaded\">\n            <div v-bind:key=\"'data-row-page-for-' + project + '-table-' + table + '-id-' + (id ? id : '@add')\">\n                <TitleOfPage>\n                    <Horizontally>\n                        <td class=\"width_auto\"><BackButton /></td>\n                        <td class=\"width_100x100\">{{ $t(\"Dato\") }} {{ table }}: {{ id || $t(\"nuevo\") }}</td>\n                    </Horizontally>\n                </TitleOfPage>\n                <hr/>\n                <div class=\"padding_2 padding_top_0\" v-if=\"definition && row\">\n                    <div class=\"form_group\" v-if=\"row\">\n                        <div v-if=\"['file', 'image'].indexOf(column.attributes.isType) === -1\" class=\"form_item\" v-for=\"(column, columnId) in definition.columns\" v-bind:key=\"'data-row-page-item-form-property-for-' + project + '-table-' + table + '-id-' + (id ? id : '@add') + '-column-' + columnId\">\n                            <div>\n                                <FormControl\n                                    :full-row=\"{ getProperty: p => row[p], getRow: () => row }\"\n                                    :project-id=\"project\"\n                                    :table-id=\"table\"\n                                    :table-metadata=\"definition\"\n                                    :column-id=\"columnId\"\n                                    :initial-value=\"row[columnId]\"\n                                    :on-change=\"v => { row[columnId] = v; }\"\n                                />\n                            </div>\n                        </div>\n                        <template v-if=\"operation === 'edit'\">\n                            <template v-for=\"(column, columnId) in definition.columns\">\n                                <div class=\"form_item\" v-if=\"['file', 'image'].indexOf(column.attributes.isType) !== -1\" v-bind:key=\"'data-row-page-item-form-file-for-' + project + '-table-' + table + '-id-' + (id ? id : '@add') + '-column-' + columnId\">\n                                    <div>\n                                        <FormControl\n                                            :full-row=\"{ getProperty: p => row[p], getRow: () => row }\"\n                                            :project-id=\"project\"\n                                            :table-id=\"table\"\n                                            :table-metadata=\"definition\"\n                                            :item-id=\"id\"\n                                            :column-id=\"columnId\"\n                                            :initial-value=\"row[columnId]\"\n                                            :on-change=\"v => { row[columnId] = v; }\"\n                                            :ref=\"'form-control-reference-for-' + project + '-table-' + table + '-id-' + id + '-column-' + columnId\"\n                                        />\n                                    </div>\n                                </div>\n                            </template>\n                        </template>\n                        <div class=\"form_item padding_top_2\">\n                            <Horizontally>\n                                <td class=\"width_1x100\">\n                                    <ControlForButton :on-click=\"sendFormToDelete\" v-if=\"operation === 'edit'\" input-classes=\"danger_button\">\n                                        {{ $t(\"Eliminar\") }}\n                                    </ControlForButton>\n                                </td>\n                                <td class=\"width_100x100\"></td>\n                                <td class=\"width_1x100\">\n                                    <ControlForButton :on-click=\"sendFormToSave\" input-classes=\"success_button\">\n                                        {{ (operation === 'add') ? $t(\"Añadir\") : (operation === 'edit') ? $t(\"Guardar\") : $t(\"Enviar\") }}\n                                    </ControlForButton>\n                                </td>\n                            </Horizontally>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </template>\n    </div>\n} con lógica {\n    Retorno {\n        Propiedad props como {\n            Propiedad operation como {\n                Propiedad type como String.\n                Propiedad default como \"add\".\n            }.\n        }.\n        Método data como una función donde {\n            Retorno {\n                Propiedad project como this.$route.params.project.\n                Propiedad table como this.$route.params.table.\n                Propiedad id como this.$route.params.id o undefined.\n                Propiedad row como undefined.\n                Propiedad definition como undefined.\n                Propiedad isLoaded como false.\n            }.\n        }.\n        Propiedad watch como {\n            Método $route como una función asíncrona con (nuevoValor) donde {\n                Asigno this.project como nuevoValor.params.project.\n                Asigno this.table como nuevoValor.params.table.\n                Asigno this.id como nuevoValor.params.id o undefined.\n                Hago asíncronamente this.loadRow().\n            } en errores hago this.$notificaciones.error(error).\n        }.\n        Propiedad methods como {\n            \n            Método loadRow como una función asíncrona donde {\n                Asigno this.isLoaded como false.\n                Asigno this.definition como this.$root.schema.projects[this.project].project.schema.tables[this.table].\n                Si this.operation es igual que \"add\" {\n                    Asigno this.row como {}.\n                    Asigno this.isLoaded como true.\n                    Retorno.\n                }.\n                Creo responseSelect como asíncronamente this.$rest.select(\n                    this.project,\n                    this.table,\n                    [[ \"id\", \"=\", this.id numerizado ]],\n                    [],\n                    [],\n                    undefined\n                ).\n                Si responseSelect.data.status no es igual que \"success\" lanzo un nuevo Error(\"Hubo errores para cargar el dato\").\n                Asigno this.row como responseSelect.data.data.items[0].\n                Asigno this.isLoaded como true.\n            } en errores hago this.$notificaciones.error(error).\n\n            Método sendFormToSave como una función asíncrona donde {\n                Si this.operation es igual que \"add\" {\n                    Creo responseInsert como asíncronamente this.$rest.insert(\n                        this.project,\n                        this.table,\n                        this.row\n                    ).\n                    Hago this.$router.history.push(\"/data/\" + this.project + \"/\" + this.table + \"/\" + responseInsert.data.data.item.id).\n                }\n                Pero si this.operation es igual que \"edit\" {\n                    Creo responseUpdate como asíncronamente this.$rest.update(\n                        this.project,\n                        this.table,\n                        this.id numerizado,\n                        this.row\n                    ).\n                    Creo responseFiles como [].\n                    Itero como objeto this.definition.columns creando constante columnId donde {\n                        Creo columnData como this.definition.columns[columnId].\n                        Si [\"file\", \"image\"] no contiene valor columnData.attributes.isType continúo proceso.\n                        Creo columnRefs como this.$refs[\"form-control-reference-for-\" + this.project + \"-table-\" + this.table + \"-id-\" + this.id + \"-column-\" + columnId].\n                        Creo columnRef como columnRefs[0].  # Obligado por vue2 quizá a devolver un array de refs siempre\n                        Creo fileInputs como columnRef.getFiles().\n                        Creo responseFile como asíncronamente this.$rest.setFile(\n                            this.project,\n                            this.table,\n                            this.id numerizado,\n                            columnId,\n                            fileInputs\n                        ).\n                        Hago responseFiles.push(responseFile).\n                    }.\n                    Hago this.loadRow().\n                }.\n            } en errores hago this.$notificaciones.error(error).\n            \n            Método sendFormToDelete como una función asíncrona donde {\n                Creo responseDelete como asíncronamente this.$rest.delete(\n                    this.project,\n                    this.table,\n                    this.id numerizado\n                ).\n            } en errores hago this.$notificaciones.error(error).\n\n        }.\n        Método mounted como una función asíncrona donde {\n            Hago asíncronamente this.loadRow().\n        } en errores hago this.$notificaciones.error(error).\n    }.\n}.\n\n@SECCIÓN 2.*. Componente de DataPage:\n\nCreo DataPage como un componente vue con nombre \"DataPage\" con plantilla {\n    <div class=\"DataPage\">\n        <TitleOfPage>\n            <Horizontally>\n                <td class=\"width_auto\"><BackButton /></td>\n                <td class=\"width_100x100\">{{ $t(\"Esquema\") }}</td>\n            </Horizontally>\n        </TitleOfPage>\n        <hr/>\n        <div class=\"padding_2 overflow_x_scroll\">\n            <table v-if=\"allTables\">\n                <thead>\n                    <tr>\n                        <th class=\"text_align_right\">{{ $t(\"Tabla\") }}</th>\n                        <th>{{ $t(\"Proyecto\") }}</th>\n                        <th></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <template v-for=\"(table, tableId) in allTables\">\n                        <template v-if=\"(!table.attributes) || (!table.attributes.isExternalizedBy)\">\n                            <tr class=\"remarked_row\" v-bind:key=\"'table-main-row-of-' + tableId\">\n                                <td class=\"width_1x100 text_align_right padding_horizontal_2 cursor_pointer\" v-on:click=\"() => $router.history.push('/data/' + getProjectFromTableId(tableId) + '/' + getTableFromTableId(tableId))\">\n                                    <span class=\"link_text\">{{ $t('#' + $utilidades.capitalizeString(getTableFromFullTableId(tableId))) }}</span>\n                                </td>\n                                <td class=\"width_100x100\">\n                                    <span class=\"link_text\">{{ $t(\"#\" + getProjectFromFullTableId(tableId) )}}</span>\n                                </td>\n                                <td class=\"width_1x100\">\n                                    <ControlForButton :on-click=\"() => toggleTable(tableId)\" v-if=\"selectedTables.indexOf(tableId) === -1\">...</ControlForButton>\n                                    <ControlForButton :on-click=\"() => toggleTable(tableId)\" v-else>-</ControlForButton>\n                                </td>\n                            </tr>\n                            <template v-if=\"selectedTables.indexOf(tableId) !== -1\">\n                                <tr>\n                                    <td colspan=\"2\" class=\"width_100x100\">\n                                        {{ $t(\"Atributos de\") }} {{ $t(\"#\" + tableId) }}\n                                    </td>\n                                    <td class=\"width_1x100\">\n                                        <ControlForButton :on-click=\"() => toggleTableAttributesOf(tableId)\" v-if=\"selectedTableAttributesList.indexOf(tableId) !== -1\">-</ControlForButton>\n                                        <ControlForButton :on-click=\"() => toggleTableAttributesOf(tableId)\" v-else>...</ControlForButton>\n                                    </td>\n                                </tr>\n                                <template v-if=\"selectedTableAttributesList.indexOf(tableId) !== -1\">\n                                    <tr v-bind:key=\"'table-attributes-row-of-' + tableId\" v-if=\"selectedTables.indexOf(tableId) !== -1\">\n                                        <td colspan=\"100\">\n                                            <table class=\"width_100x100\">\n                                                <tr>\n                                                    <td class=\"width_100x100 text_align_right\" colspan=\"100\">\n                                                        <ControlForButton input-classes=\"width_auto\" :on-click=\"() => goToEditAttributes(tableId)\">{{ $t(\"Editar atributos de\") }} {{ $t(\"#\" + tableId) }}</ControlForButton>\n                                                    </td>\n                                                </tr>\n                                                <template v-for=\"(attribute, attributeId) in table.attributes\">\n                                                    <template v-if=\"attributeId !== 'hasProtectors'\">\n                                                        <tr v-bind:key=\"'table-attribute-key-row-of-' + tableId + '-attribute-' + attributeId\">\n                                                            <td class=\"width_100x100\">{{ $t('@' + attributeId) }}</td>\n                                                            <td class=\"width_1x100\">\n                                                                <ControlForButton :on-click=\"() => toggleTableAttribute(tableId, attributeId)\" v-if=\"selectedTableAttributes.indexOf(tableId + '/' + attributeId) === -1\">...</ControlForButton>\n                                                                <ControlForButton :on-click=\"() => toggleTableAttribute(tableId, attributeId)\" v-else>-</ControlForButton>\n                                                            </td>\n                                                        </tr>\n                                                        <tr v-bind:key=\"'table-attribute-value-row-of-' + tableId + '-attribute-' + attributeId\" v-if=\"selectedTableAttributes.indexOf(tableId + '/' + attributeId) !== -1\">\n                                                            <td class=\"width_100x100\" colspan=\"100\">\n                                                                <div>\n                                                                    <div class=\"margin_1 font_size_small\">{{ attribute }}</div>\n                                                                </div>\n                                                            </td>\n                                                        </tr>\n                                                    </template>\n                                                </template>\n                                            </table>\n                                        </td>\n                                    </tr>\n                                </template>\n                                <tr>\n                                    <td colspan=\"2\" class=\"width_1x100\">\n                                        {{ $t(\"Protectores de\") }} {{ $t(\"#\" + tableId) }}\n                                    </td>\n                                    <td class=\"width_1x100\">\n                                        <ControlForButton :on-click=\"() => toggleTableProtectorsOf(tableId)\" v-if=\"selectedTableProtectorsList.indexOf(tableId) !== -1\">-</ControlForButton>\n                                        <ControlForButton :on-click=\"() => toggleTableProtectorsOf(tableId)\" v-else>...</ControlForButton>\n                                    </td>\n                                </tr>\n                                <template v-if=\"selectedTableProtectorsList.indexOf(tableId) !== -1\">\n                                    <tr v-bind:key=\"'table-protectors-row-of-' + tableId\">\n                                        <td colspan=\"100\">\n                                            <table class=\"width_100x100\">\n                                                <tr>\n                                                    <td class=\"width_100x100 text_align_right\" colspan=\"100\">\n                                                        <ControlForButton input-classes=\"width_auto\" :on-click=\"() => goToEditProtectors(tableId)\">{{ $t(\"Editar protectores de\") }} {{ $t(\"#\" + tableId) }}</ControlForButton>\n                                                    </td>\n                                                </tr>\n                                                <template v-for=\"(protector, protectorId) in table.attributes.hasProtectors\">\n                                                    <tr v-bind:key=\"'table-protector-value-row-of-' + tableId + '-protector-' + protectorId\">\n                                                        <td class=\"width_100x100\" colspan=\"100\">\n                                                            <div class=\"info_group margin_top_1\">\n                                                                <div class=\"padding_1 font_size_small remarked_row\" style=\"border-bottom: 1px solid #333;\">{{ protector.id }}</div>\n                                                                <template v-for=\"(protectorValue, protectorKey) in protector\">\n                                                                    <div class=\"padding_horizontal_1 padding_top_1 font_size_small\" v-bind:key=\"'table-protector-property-of-' + tableId + '-protector-' + protectorId + '-property-' + protectorKey\">\n                                                                        <span class=\"font_weight_bold\">{{ $t(protectorKey) }}: </span>\n                                                                        <span class=\"\">{{ protectorValue }}</span>\n                                                                    </div>\n                                                                </template>\n                                                            </div>\n                                                        </td>\n                                                    </tr>\n                                                </template>\n                                            </table>\n                                        </td>\n                                    </tr>\n                                </template>\n                                <tr>\n                                    <td colspan=\"2\" class=\"width_100x100\">\n                                        {{ $t(\"Columnas de\") }} {{ $t(\"#\" + tableId) }}\n                                    </td>\n                                    <td class=\"width_1x100\">\n                                        <ControlForButton :on-click=\"() => toggleTableColumnsOf(tableId)\" v-if=\"selectedTableColumnsList.indexOf(tableId) !== -1\">-</ControlForButton>\n                                        <ControlForButton :on-click=\"() => toggleTableColumnsOf(tableId)\" v-else>...</ControlForButton>\n                                    </td>\n                                </tr>\n                                <template v-if=\"selectedTableColumnsList.indexOf(tableId) !== -1\">\n                                    <tr v-bind:key=\"'table-columns-row-of-' + tableId\">\n                                        <td colspan=\"100\">\n                                            <table class=\"width_100x100\">\n                                                <template v-for=\"(column, columnId) in table.columns\">\n                                                    <tr v-bind:key=\"'table-column-key-row-of-' + tableId + '-column-' + columnId\">\n                                                        <td class=\"width_100x100 remarked_row\" style=\"border-bottom: 1px solid #AAA;\">{{ $t('#' + tableId) }}.{{ $t('#' + columnId) }}</td>\n                                                        <td class=\"width_1x100\">\n                                                            <ControlForButton :on-click=\"() => toggleTableColumn(tableId, columnId)\" v-if=\"selectedTableColumns.indexOf(tableId + '/' + columnId) === -1\">...</ControlForButton>\n                                                            <ControlForButton :on-click=\"() => toggleTableColumn(tableId, columnId)\" v-else>-</ControlForButton>\n                                                        </td>\n                                                    </tr>\n                                                    <template v-if=\"selectedTableColumns.indexOf(tableId + '/' + columnId) !== -1\">\n                                                        <tr>\n                                                            <td class=\"width_100x100 text_align_right\" colspan=\"100\">\n                                                                <ControlForButton input-classes=\"width_auto\" :on-click=\"() => goToEditColumn(tableId, columnId)\">\n                                                                    {{ $t(\"Editar columna\") }} {{ $t(\"#\" + tableId) }}.{{ columnId }}\n                                                                </ControlForButton>\n                                                            </td>\n                                                        </tr>\n                                                        <tr v-bind:key=\"'table-column-value-row-of-' + tableId + '-column-' + columnId\">\n                                                            <td class=\"width_100x100\" colspan=\"100\">\n                                                                <div class=\"\">\n                                                                    <table class=\"width_100x100\">\n                                                                        <template v-for=\"(attribute, attributeId) in column.attributes\">\n                                                                            <tr v-bind:key=\"'column-attribute-key-row-of-' + tableId + '-' + columnId + '-attribute-' + attributeId\">\n                                                                                <td class=\"width_100x100\">\n                                                                                    {{ $t( \"@\" + attributeId ) }}\n                                                                                </td>\n                                                                                <td class=\"width_1x100\">\n                                                                                    <ControlForButton :on-click=\"() => toggleTableColumnAttribute(tableId, columnId, attributeId)\" v-if=\"selectedTableColumnAttributes.indexOf(tableId + '/' + columnId + '/' + attributeId) === -1\">...</ControlForButton>\n                                                                                    <ControlForButton :on-click=\"() => toggleTableColumnAttribute(tableId, columnId, attributeId)\" v-else>-</ControlForButton>\n                                                                                </td>\n                                                                            </tr>\n                                                                            <tr v-bind:key=\"'column-attribute-value-row-of-' + tableId + '-' + columnId + '-attribute-' + attributeId\" v-if=\"selectedTableColumnAttributes.indexOf(tableId + '/' + columnId + '/' + attributeId) !== -1\">\n                                                                                <td colspan=\"100\">\n                                                                                    <div>{{ attribute }}</div>\n                                                                                </td>\n                                                                            </tr>\n                                                                        </template>\n                                                                    </table>\n                                                                </div>\n                                                            </td>\n                                                        </tr>\n                                                    </template>\n                                                </template>\n                                            </table>\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td class=\"width_100x100 text_align_right\" colspan=\"100\">\n                                            <ControlForButton input-classes=\"width_auto\" :on-click=\"() => goToAddColumn(tableId)\">{{ $t(\"Añadir columna a\") }} {{ $t(\"#\" + tableId) }}</ControlForButton>\n                                        </td>\n                                    </tr>\n                                </template>\n                            </template>\n                        </template>\n                    </template>\n                    <tr>\n                        <td class=\"width_100x100\" colspan=\"100\">\n                            <Horizontally>\n                                <td class=\"width_100x100\"></td>\n                                <td class=\"width_1x100\">\n                                    <ControlForButton :on-click=\"() => goToAddTable()\">\n                                        <span class=\"no_break_line\">{{ $t(\"Añadir tabla\") }}</span>\n                                    </ControlForButton>\n                                </td>\n                            </Horizontally>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n} con lógica {\n    Retorno {\n        Método data como una función donde {\n            Retorno {\n                Propiedad schema como undefined.\n                Propiedad allTables como undefined.\n                Propiedad selectedTables como [].\n                Propiedad selectedTableAttributesList como [].\n                Propiedad selectedTableAttributes como [].\n                Propiedad selectedTableProtectorsList como [].\n                Propiedad selectedTableColumnsList como [].\n                Propiedad selectedTableColumns como [].\n                Propiedad selectedColumnsAttributes como [].\n                Propiedad selectedTableColumnAttributes como [].\n            }.\n        }.\n        Propiedad methods como {\n            Método getTableFromFullTableId como una función con (tableId) donde {\n                Retorno tableId.split(\":\")[1].\n            }.\n            Método getProjectFromFullTableId como una función con (tableId) donde {\n                Retorno tableId.split(\":\")[0].\n            }.\n            Método toggleTable como una función con (tableId) donde {\n                Creo posicionTable como this.selectedTables.indexOf(tableId).\n                Si posicionTable es igual que 0-1 hago this.selectedTables.push(tableId);\n                Y si no hago this.selectedTables.splice(posicionTable, 1).\n            }.\n            Método toggleTableAttributesOf como una función con (tableId) donde {\n                Creo posicionTable como this.selectedTableAttributesList.indexOf(tableId).\n                Si posicionTable es igual que 0-1 hago this.selectedTableAttributesList.push(tableId);\n                Y si no hago this.selectedTableAttributesList.splice(posicionTable, 1).\n            }.\n            Método toggleTableProtectorsOf como una función con (tableId) donde {\n                Creo posicionTable como this.selectedTableProtectorsList.indexOf(tableId).\n                Si posicionTable es igual que 0-1 hago this.selectedTableProtectorsList.push(tableId);\n                Y si no hago this.selectedTableProtectorsList.splice(posicionTable, 1).\n            }.\n            Método toggleTableColumnsOf como una función con (tableId) donde {\n                Creo posicionTable como this.selectedTableColumnsList.indexOf(tableId).\n                Si posicionTable es igual que 0-1 hago this.selectedTableColumnsList.push(tableId);\n                Y si no hago this.selectedTableColumnsList.splice(posicionTable, 1).\n            }.\n            Método toggleTableAttribute como una función con (tableId, attributeId) donde {\n                Creo posicionTableAttribute como this.selectedTableAttributes.indexOf(tableId + \"/\" + attributeId).\n                Si posicionTableAttribute es igual que 0-1 hago this.selectedTableAttributes.push(tableId + \"/\" + attributeId);\n                Y si no hago this.selectedTableAttributes.splice(posicionTableAttribute, 1).\n            }.\n            Método toggleTableColumn como una función con (tableId, columnId) donde {\n                Creo posicionTableColumn como this.selectedTableColumns.indexOf(tableId + \"/\" + columnId).\n                Si posicionTableColumn es igual que 0-1 hago this.selectedTableColumns.push(tableId + \"/\" + columnId);\n                Y si no hago this.selectedTableColumns.splice(posicionTableColumn, 1).\n            }.\n            Método toggleTableColumnAttribute como una función con (tableId, columnId, attributeId) donde {\n                Creo posicionTableColumn como this.selectedTableColumnAttributes.indexOf(tableId + \"/\" + columnId + \"/\" + attributeId).\n                Si posicionTableColumn es igual que 0-1 hago this.selectedTableColumnAttributes.push(tableId + \"/\" + columnId + \"/\" + attributeId);\n                Y si no hago this.selectedTableColumnAttributes.splice(posicionTableColumn, 1).\n            }.\n            Método goToEditAttributes como una función con (tableId) donde {\n                Retorno this.$router.history.push(\"/data/@edit-table/\" + tableId).\n            }.\n            Método goToEditProtectors como una función con (tableId) donde {\n                Retorno this.$router.history.push(\"/data/@edit-protectors/\" + tableId).\n            }.\n            Método goToEditColumn como una función con (tableId, columnId) donde {\n                Retorno this.$router.history.push(\"/data/@edit-column/\" + tableId + \"/\" + columnId).\n            }.\n            Método goToAddColumn como una función con (tableId) donde {\n                Retorno this.$router.history.push(\"/data/@add-column/\" + tableId).\n            }.\n            Método goToAddTable como una función con () donde {\n                Retorno this.$router.history.push(\"/data/@add-table\").\n            }.\n            Método getProjectFromTableId como una función con (tableId) donde {\n                Retorno tableId.split(\":\")[0].\n            }.\n            Método getTableFromTableId como una función con (tableId) donde {\n                Retorno tableId.split(\":\")[1].\n            }.\n        }.\n        Método mounted como una función donde {\n            Asigno this.schema como this.$root.schema.\n            Asigno this.allTables como this.$root.allTables.\n        }.\n        Propiedad watch como {}.\n    }.\n}.\n\n@SECCIÓN 2.*. Componente de DataAddEditTablePage:\n\nCreo DataAddEditTablePage como un componente vue con nombre \"DataAddEditTablePage\" con plantilla {\n    <div class=\"DataAddEditTablePage\">\n        <TitleOfPage>\n            <Horizontally>\n                <td class=\"width_auto\"><BackButton :levels=\"(internalOperation === 'add') ? 1 : 2\" /></td>\n                <td class=\"width_100x100\">{{ $t(\"Tabla de esquema\") }} ({{ $t(internalOperation) }})</td>\n            </Horizontally>\n        </TitleOfPage>\n        <hr />\n        <div class=\"padding_2\">\n            ...\n        </div>\n    </div>\n} con lógica {\n    Retorno {\n        Propiedad props como {\n            Propiedad operation como {\n                Propiedad type como String.\n                Propiedad default como \"add\".\n            }.\n        }.\n        Método data como una función donde {\n            Retorno {\n                Propiedad internalOperation como this.operation.\n            }.\n        }.\n    }.\n}.\n\n@SECCIÓN 2.*. Componente de DataAddEditColumnPage:\n\nCreo DataAddEditColumnPage como un componente vue con nombre \"DataAddEditColumnPage\" con plantilla {\n    <div class=\"DataAddEditColumnPage\">\n        <TitleOfPage>\n            <Horizontally>\n                <td class=\"width_auto\"><BackButton :levels=\"(internalOperation === 'add') ? 2 : 3\" /></td>\n                <td class=\"width_100x100\">{{ $t(\"Columna de esquema\") }} ({{ $t(internalOperation) }})</td>\n            </Horizontally>\n        </TitleOfPage>\n        <hr />\n        <div class=\"padding_2\">\n            ...\n        </div>\n    </div>\n} con lógica {\n    Retorno {\n        Propiedad props como {\n            Propiedad operation como {\n                Propiedad type como String.\n                Propiedad default como \"add\".\n            }.\n        }.\n        Método data como una función donde {\n            Retorno {\n                Propiedad internalOperation como this.operation.\n            }.\n        }.\n    }.\n}.\n\n@SECCIÓN 2.*. Componente de DataEditProtectorsPage:\n\nCreo DataEditProtectorsPage como un componente vue con nombre \"DataEditProtectorsPage\" con plantilla {\n    <div class=\"DataEditProtectorsPage\">\n        <TitleOfPage>\n            <Horizontally>\n                <td class=\"width_auto\"><BackButton :levels=\"2\" /></td>\n                <td class=\"width_100x100\">{{ $t(\"Editar protectores\") }}</td>\n            </Horizontally>\n        </TitleOfPage>\n        <hr />\n        <div class=\"padding_2\">\n            ...\n        </div>\n    </div>\n} con lógica {\n    Retorno {}.\n}.\n\n@SECCIÓN 2.*. Componente de SettingsPage:\n\nCreo SettingsPage como un componente vue con nombre \"SettingsPage\" con plantilla {\n    <div class=\"SettingsPage\">\n        <TitleOfPage>\n            <Horizontally>\n                <td class=\"width_auto\"><BackButton /></td>\n                <td class=\"width_100x100\">{{ $t(\"Configuraciones\") }}</td>\n            </Horizontally>\n        </TitleOfPage>\n        <hr />\n        <div class=\"padding_2 padding_bottom_0\">\n            <ul class=\"BigMenuSquaresList\">\n                <li class=\"margin_bottom_2\" v-on:click=\"() => $router.history.push('/settings/language')\">\n                    <span class=\"link_text\">{{ $t(\"Idioma\") }}</span>\n                </li>\n                <li class=\"margin_bottom_2\" v-on:click=\"() => $router.history.push('/settings/session')\">\n                    <span class=\"link_text\">{{ $t(\"Sesión\") }}</span>\n                </li>\n            </ul>\n        </div>\n    </div>\n} con lógica {\n    Retorno {}.\n}.\n\n@SECCIÓN 2.*. Componente de LanguageSettingsPage:\n\nCreo LanguageSettingsPage como un componente vue con nombre \"LanguageSettingsPage\" con plantilla {\n    <div class=\"LanguageSettingsPage\">\n        <TitleOfPage>\n            <Horizontally>\n                <td class=\"width_auto\"><BackButton /></td>\n                <td class=\"width_100x100\">{{ $t(\"Idioma\") }}</td>\n            </Horizontally>\n        </TitleOfPage>\n        <hr />\n        <div class=\"padding_2\">\n            <LanguageSelector />\n        </div>\n    </div>\n} con lógica {\n    Retorno {}.\n}.\n\n@SECCIÓN 2.*. Componente de SessionSettingsPage:\n\nCreo SessionSettingsPage como un componente vue con nombre \"SessionSettingsPage\" con plantilla {\n    <div class=\"SessionSettingsPage\">\n        <TitleOfPage>\n            <Horizontally>\n                <td class=\"width_auto\"><BackButton /></td>\n                <td class=\"width_100x100\">{{ $t(\"Sesión\") }}</td>\n            </Horizontally>\n        </TitleOfPage>\n        <hr />\n        <div class=\"padding_2\">\n            <div>\n                <span class=\"font_weight_bold\">{{ $t(\"Usuario:\") }} </span>\n                <span>{{ $root.authentication.user.name }}</span>\n            </div>\n            <div>\n                <span class=\"font_weight_bold\">{{ $t(\"Email de usuario:\") }} </span>\n                <span>{{ $root.authentication.user.email }}</span>\n            </div>\n            <div>\n                <span class=\"font_weight_bold\">{{ $t(\"Grupos:\") }} </span>\n                <ul class=\"padding_bottom_2\">\n                    <li class=\"no_margin\" v-for=\"grupo in grupos\" v-bind:key=\"'auth-grupos-grupo-id-' + grupo.id\">\n                        <ul class=\"padding_top_2\">\n                            <div class=\"info_group remarked_row padding_2\">\n                                <li class=\"no_margin\">\n                                    <span class=\"font_weight_bold\">{{ $t(\"Grupo:\" )}} </span>\n                                    <span class=\"font_size_small\">{{ grupo.name }} [{{ grupo.id }}]</span>\n                                </li>\n                                <li class=\"no_margin\">\n                                    <span class=\"font_weight_bold\">{{ $t(\"Descripción:\" )}} </span>\n                                    <span class=\"font_size_small\">{{ grupo.description }}</span>\n                                </li>\n                                <li class=\"no_margin\">\n                                    <span class=\"font_weight_bold\">{{ $t(\"Privilegios:\" )}} </span>\n                                    <span class=\"font_size_small\">{{ grupo.privileges }}</span>\n                                </li>\n                            </div>\n                        </ul>\n                    </li>\n                </ul>\n            </div>\n            <div>\n                <span class=\"font_weight_bold\">{{ $t(\"Privilegios:\") }} </span>\n                <ul class=\"padding_bottom_2\">\n                    <li class=\"no_margin\" v-for=\"privilegio in privilegios\" v-bind:key=\"'auth-privilegios-privilegio-id-' + privilegio.id\">\n                        <ul class=\"padding_top_2\">\n                            <div class=\"info_group remarked_row padding_2\">\n                                <li class=\"no_margin\">\n                                    <span class=\"font_weight_bold\">{{ $t(\"Privilegio:\" )}} </span>\n                                    <span class=\"font_size_small\">{{ privilegio.name }} [{{ privilegio.id }}]</span>\n                                </li>\n                                <li class=\"no_margin\">\n                                    <span class=\"font_weight_bold\">{{ $t(\"Descripción:\" )}} </span>\n                                    <span class=\"font_size_small\">{{ privilegio.description }}</span>\n                                </li>\n                            </div>\n                        </ul>\n                    </li>\n                </ul>\n            </div>\n            <div>\n                <span class=\"font_weight_bold\">{{ $t(\"Token de sesión:\") }} </span>\n                <div class=\" margin_top_2 remarked_text info_group long_word font_family_monospace font_size_small\">{{ $root.authentication.token }}</div>\n            </div>\n        </div>\n    </div>\n} con lógica {\n    Retorno {\n        Propiedad data como una función donde {\n            Creo grupos como this.$root.authentication.user.groups.map(una lambda con (idDeGrupo) donde {\n                Retorno this.$root.authentication.groups.filter(una lambda con (datosDeGrupo) donde {\n                    Retorno datosDeGrupo.id es igual que idDeGrupo.\n                })[0].\n            }).\n            Creo privilegiosDeGrupo como grupos.map(una lambda con (grupo) donde retorno grupo.privileges).flat().\n            Creo privilegiosDeUsuario como this.$root.authentication.user.privileges.\n            Creo privilegiosUnicos como [].\n            Hago [].concat(privilegiosDeUsuario).concat(privilegiosDeGrupo).forEach(una lambda con (privilegioId) donde {\n                Si privilegiosUnicos.indexOf(privilegioId) es igual que 0-1 hago privilegiosUnicos.push(privilegioId).\n            }).\n            Creo privilegios como privilegiosUnicos.map(una lambda con (privilegioId) donde retorno this.$root.authentication.privileges.filter(una lambda con (privilegio) donde retorno privilegioId es igual que privilegio.id)[0]).\n            Retorno {\n                Propiedad grupos como grupos.\n                Propiedad privilegios como privilegios.\n            }.\n        }.\n    }.\n}.\n\n@SECCIÓN 3.*. Rutas:\n\nCreo routes como [{\n    Propiedad name como \"Inicio\".\n    Propiedad path como \"/home\".\n    Propiedad component como HomePage.\n}, {\n    Propiedad name como \"Login\".\n    Propiedad path como \"/login\".\n    Propiedad component como LoginPage.\n}, {\n    Propiedad name como \"Logout\".\n    Propiedad path como \"/logout\".\n    Propiedad component como LogoutPage.\n}, {\n    Propiedad name como \"DataAddEditTable\".\n    Propiedad path como \"/data/@add-table\".\n    Propiedad props como { operation: \"add\" }.\n    Propiedad component como DataAddEditTablePage.\n}, {\n    Propiedad name como \"DataAddEditTable\".\n    Propiedad path como \"/data/@edit-table/:table\".\n    Propiedad props como { operation: \"edit\" }.\n    Propiedad component como DataAddEditTablePage.\n}, {\n    Propiedad name como \"DataAddEditColumn\".\n    Propiedad path como \"/data/@add-column/:table\".\n    Propiedad props como { operation: \"add\" }.\n    Propiedad component como DataAddEditColumnPage.\n}, {\n    Propiedad name como \"DataAddEditColumn\".\n    Propiedad path como \"/data/@edit-column/:table/:column\".\n    Propiedad props como { operation: \"edit\" }.\n    Propiedad component como DataAddEditColumnPage.\n}, {\n    Propiedad name como \"DataEditProtectors\".\n    Propiedad path como \"/data/@edit-protectors/:table\".\n    Propiedad props como { operation: \"edit\" }.\n    Propiedad component como DataEditProtectorsPage.\n}, {\n    Propiedad name como \"DataRow\".\n    Propiedad path como \"/data/:project/:table/@add\".\n    Propiedad props como { operation: \"add\" }.\n    Propiedad component como DataRowPage.\n}, {\n    Propiedad name como \"DataRow\".\n    Propiedad path como \"/data/:project/:table/:id\".\n    Propiedad props como { operation: \"edit\" }.\n    Propiedad component como DataRowPage.\n}, {\n    Propiedad name como \"DataTable\".\n    Propiedad path como \"/data/:project/:table\".\n    Propiedad component como DataTablePage.\n}, {\n    Propiedad name como \"Data\".\n    Propiedad path como \"/data\".\n    Propiedad component como DataPage.\n}, {\n    Propiedad name como \"Settings\".\n    Propiedad path como \"/settings\".\n    Propiedad component como SettingsPage.\n}, {\n    Propiedad name como \"LanguageSettings\".\n    Propiedad path como \"/settings/language\".\n    Propiedad component como LanguageSettingsPage.\n}, {\n    Propiedad name como \"SessionSettings\".\n    Propiedad path como \"/settings/session\".\n    Propiedad component como SessionSettingsPage.\n}].\n\n@SECCIÓN 4.*. Dependencias globales de Vue:\n\nAsigno Vue.prototype.$window como window.\nAsigno Vue.prototype.$rest como window.$restologia.\nAsigno Vue.prototype.$almacenamiento como window.$almacenamiento.\nAsigno Vue.prototype.$utilidades como window.$utilidades.\nAsigno Vue.prototype.$console como console.\n\n@SECCIÓN 1.*. ControlForDate component:\n\nCreo ControlForDate como un componente vue con nombre \"ControlForDate\" con plantilla {\n    <div class=\"ControlForDate\">\n        <Horizontally>\n            <td class=\"width_100x100\">\n                <input type=\"text\" v-model=\"internalValue\" disabled />\n            </td>\n            <td class=\"width_1x100\">\n                <ControlForButton input-classes=\"min_width_25px\" :on-click=\"() => isSelected = !isSelected\">{{ isSelected ? \"-\" : \"+\" }}</ControlForButton>\n            </td>\n        </Horizontally>\n        <div v-if=\"internalDate && isSelected\" class=\"info_group font_size_small padding_2 margin_top_2\">\n            <Horizontally>\n                <td class=\"width_1x100 min_width_25px\"><ControlForButton :on-click=\"decreaseDate\"> « </ControlForButton></td>\n                <td class=\"width_100x100 text_align_center\">\n                    <span>{{ $t($utilidades.fromWeekdayToText(internalDate.getDay())) }}, {{ $t(\"día\") }} </span>\n                    <span>{{ $utilidades.padLeft(internalDate.getDate(), 2, \"0\") }}</span>\n                </td>\n                <td class=\"width_1x100 min_width_25px\"><ControlForButton :on-click=\"increaseDate\"> » </ControlForButton></td>\n            </Horizontally>\n            <Horizontally>\n                <td style=\"width: 50%;\">\n                    <Horizontally>\n                        <td class=\"width_1x100 min_width_25px\"><ControlForButton :on-click=\"decreaseMonth\"> « </ControlForButton></td>\n                        <td class=\"width_100x100 text_align_center\">\n                            <span>{{ $t($utilidades.fromMonthToText(internalDate.getMonth())) }}</span>\n                        </td>\n                        <td class=\"width_1x100 min_width_25px\"><ControlForButton :on-click=\"increaseMonth\"> » </ControlForButton></td>\n                    </Horizontally>\n                </td>\n                <td style=\"width: 50%;\">\n                    <Horizontally>\n                        <td class=\"width_1x100 min_width_25px\"><ControlForButton :on-click=\"decreaseYear\"> « </ControlForButton></td>\n                        <td class=\"width_100x100 text_align_center\">{{ internalDate.getFullYear() }}</td>\n                        <td class=\"width_1x100 min_width_25px\"><ControlForButton :on-click=\"increaseYear\"> » </ControlForButton></td>\n                    </Horizontally>\n                </td>\n            </Horizontally>\n            <div class=\"padding_vertical_3\">\n                <table class=\"width_100x100 font_family_monospace\">\n                    <tr v-for=\"(row, rowIndex) in internalCalendar\" v-bind:key=\"'calendar-row-' + rowIndex\">\n                        <td class=\"calendar_cell\" :class=\"cell === internalDate.getDate() ? 'selected' : ''\" v-for=\"(cell, cellIndex) in row\" v-bind:key=\"'calendar-row-' + rowIndex + '-cell-' + cellIndex\">\n                            <template v-if=\"!cell\"></template>\n                            <span v-else class=\"calendar_cell_content font_size_small\" v-on:click=\"() => selectDate(cell)\">\n                                {{ $utilidades.padLeft(cell, 2, \"0\") }}\n                            </span>\n                        </td>\n                    </tr>\n                </table>\n            </div>\n            <Horizontally>\n                <td style=\"width: 33%;\">\n                    <Horizontally>\n                        <td class=\"width_1x100 min_width_25px\"><ControlForButton :on-click=\"decreaseHours\"> « </ControlForButton></td>\n                        <td class=\"width_100x100 text_align_center\">{{ $utilidades.padLeft(internalDate.getHours(), 2, \"0\") }}</td>\n                        <td class=\"width_1x100 min_width_25px\"><ControlForButton :on-click=\"increaseHours\"> » </ControlForButton></td>\n                    </Horizontally>\n                </td>\n                <td style=\"width: 33%;\">\n                    <Horizontally>\n                        <td class=\"width_1x100 min_width_25px\"><ControlForButton :on-click=\"decreaseMinutes\"> « </ControlForButton></td>\n                        <td class=\"width_100x100 text_align_center\">{{ $utilidades.padLeft(internalDate.getMinutes(), 2, \"0\") }}</td>\n                        <td class=\"width_1x100 min_width_25px\"><ControlForButton :on-click=\"increaseMinutes\"> » </ControlForButton></td>\n                    </Horizontally>\n                </td>\n                <td style=\"width: 33%;\">\n                    <Horizontally>\n                        <td class=\"width_1x100 min_width_25px\"><ControlForButton :on-click=\"decreaseSeconds\"> « </ControlForButton></td>\n                        <td class=\"width_100x100 text_align_center\">{{ $utilidades.padLeft(internalDate.getSeconds(), 2, \"0\") }}</td>\n                        <td class=\"width_1x100 min_width_25px\"><ControlForButton :on-click=\"increaseSeconds\"> » </ControlForButton></td>\n                    </Horizontally>\n                </td>\n            </Horizontally>\n        </div>\n    </div>\n} con lógica {\n    Retorno {\n        Propiedad props como {\n            Propiedad initialDate como {\n                Propiedad type como [String, Date].\n                Propiedad required como false.\n                Propiedad default como una función donde retorno una nueva Date().\n            }.\n            Propiedad onChange como {\n                Propiedad type como Function.\n                Propiedad required como false.\n                Propiedad default como noop.\n            }.\n        }.\n        Método data como una función donde {\n            Retorno {\n                Propiedad isSelected como false.\n                Propiedad internalDate como undefined.\n                Propiedad internalValue como undefined.\n                Propiedad internalOnChange como this.onChange.\n                Propiedad internalCalendar como undefined.\n            }.\n        }.\n        Propiedad watch como {\n            Método internalDate como una función con (nuevoValor) donde {\n                Si nuevoValor es tipo texto {\n                    Asigno this.internalValue como nuevoValor.\n                }\n                Y si no {\n                    Asigno this.internalValue como window.$utilidades.fromDateToString(nuevoValor, true).\n                }.\n            }.\n            Método internalValue como una función con (nuevoValor) donde {\n                Hago this.internalOnChange(nuevoValor, this).\n                Hago this.calculateCalendar().\n            }.\n        }.\n        Propiedad methods como {\n            Método calculateCalendar como una función donde {\n                Creo dayFirst como una nueva Date(this.internalDate).\n                Creo dayLast como una nueva Date(this.internalDate).\n                Hago dayFirst.setDate(1).\n                Hago dayLast.setMonth(dayLast.getMonth()+1).\n                Hago dayLast.setDate(0-1).\n                Creo weekDayFirst como window.$utilidades.adaptWeekDay(dayFirst.getDay()) - 1.\n                Creo weekDayLast como window.$utilidades.adaptWeekDay(dayLast.getDay()) - 1.\n                Creo calendar como [[]].\n                Creo variable calendarDaysIndex como 0.\n                Creo variable calendarRowsIndex como 0.\n                Desde 0 hasta Math.abs(weekDayFirst) {\n                    Hago calendar[0].push(undefined).\n                    Incremento calendarDaysIndex.\n                }.\n                Desde 0 hasta dayLast.getDate() {\n                    Si (calendarDaysIndex % 7) es igual que 0 {\n                        Incremento calendarRowsIndex.\n                        Asigno calendar[calendarRowsIndex] como [].\n                    }.\n                    Hago calendar[calendarRowsIndex].push(index+1).\n                    Incremento calendarDaysIndex.\n                }.\n                Asigno this.internalCalendar como calendar.\n            }.\n            Método decreaseYear como una función donde {\n                Creo date como una nueva Date(this.internalDate).\n                Hago date.setFullYear(date.getFullYear() - 1).\n                Asigno this.internalDate como date.\n            }.\n            Método increaseYear como una función donde {\n                Creo date como una nueva Date(this.internalDate).\n                Hago date.setFullYear(date.getFullYear() + 1).\n                Asigno this.internalDate como date.\n            }.\n            Método decreaseMonth como una función donde {\n                Creo date como una nueva Date(this.internalDate).\n                Hago date.setMonth(date.getMonth() - 1).\n                Asigno this.internalDate como date.\n            }.\n            Método increaseMonth como una función donde {\n                Creo date como una nueva Date(this.internalDate).\n                Hago date.setMonth(date.getMonth() + 1).\n                Asigno this.internalDate como date.\n            }.\n            Método decreaseDate como una función donde {\n                Creo date como una nueva Date(this.internalDate).\n                Hago date.setDate(date.getDate()).\n                Asigno this.internalDate como date.\n            }.\n            Método increaseDate como una función donde {\n                Creo date como una nueva Date(this.internalDate).\n                Hago date.setDate(date.getDate()).\n                Asigno this.internalDate como date.\n            }.\n            Método decreaseHours como una función donde {\n                Creo date como una nueva Date(this.internalDate).\n                Hago date.setHours(date.getHours() - 1).\n                Asigno this.internalDate como date.\n            }.\n            Método increaseHours como una función donde {\n                Creo date como una nueva Date(this.internalDate).\n                Hago date.setHours(date.getHours() + 1).\n                Asigno this.internalDate como date.\n            }.\n            Método decreaseMinutes como una función donde {\n                Creo date como una nueva Date(this.internalDate).\n                Hago date.setMinutes(date.getMinutes() - 1).\n                Asigno this.internalDate como date.\n            }.\n            Método increaseMinutes como una función donde {\n                Creo date como una nueva Date(this.internalDate).\n                Hago date.setMinutes(date.getMinutes() + 1).\n                Asigno this.internalDate como date.\n            }.\n            Método decreaseSeconds como una función donde {\n                Creo date como una nueva Date(this.internalDate).\n                Hago date.setSeconds(date.getSeconds() - 1).\n                Asigno this.internalDate como date.\n            }.\n            Método increaseSeconds como una función donde {\n                Creo date como una nueva Date(this.internalDate).\n                Hago date.setSeconds(date.getSeconds() + 1).\n                Asigno this.internalDate como date.\n            }.\n            Método selectDate como una función con (cell) donde {\n                Creo date como una nueva Date(this.internalDate).\n                Hago date.setDate(cell numerizado).\n                Asigno this.internalDate como date.\n            }.\n        }.\n        Método mounted como una función donde {\n            Asigno this.internalDate como window.$utilidades.fromStringToDate(this.initialDate, true).\n            Hago this.internalDate.setMilliseconds(0).\n        }.\n    }.\n}.\n\n@SECCIÓN 4.*. ControlForFile\n\nCreo ControlForFile como un componente vue con nombre \"ControlForFile\" con plantilla {\n    <div class=\"ControlForFile\">\n        <Horizontally>\n            <td class=\"width_100x100\">\n                <input class=\"display_none\" type=\"file\" :ref=\"'column-file-for-' + uid\" v-on:change=\"() => setFilePath()\" />\n                <div class=\"form_control_input\">{{ $t(\"File: \") }} {{ internalFilePath }}</div>\n            </td>\n            <td class=\"width_1x100\">\n                <ControlForButton input-classes=\"min_width_25px success_button\" :on-click=\"() => downloadFile()\"> Descargar </ControlForButton>\n            </td>\n            <td class=\"width_1x100\">\n                <ControlForButton input-classes=\"min_width_25px\" :on-click=\"() => changeFile()\"> * </ControlForButton>\n            </td>\n        </Horizontally>\n    </div>\n} con lógica {\n    Retorno {\n        Propiedad props como {\n            Propiedad initialValue como {\n                Propiedad type como [String, Date].\n                Propiedad required como false.\n                Propiedad default como una función donde retorno una nueva Date().\n            }.\n            Propiedad onChange como {\n                Propiedad type como Function.\n                Propiedad required como false.\n                Propiedad default como noop.\n            }.\n            Propiedad uid como {\n                Propiedad type como String.\n                Propiedad default como una función donde retorno window.$utilidades.getRandomId(10).\n            }.\n            Propiedad formControlParent como {\n                Propiedad type como Object.\n                Propiedad required como true.\n            }.\n        }.\n        Método data como una función donde {\n            Retorno {\n                Propiedad internalValue como this.initialValue.\n                Propiedad internalFilePath como undefined.\n            }.\n        }.\n        Propiedad watch como {}.\n        Propiedad methods como {\n            Método changeFile como una función donde {\n                Retorno this.$refs[\"column-file-for-\" + this.uid].click().\n            } en errores hago this.$notificaciones.error(error).\n            Método setFilePath como una función donde {\n                Creo inputFile como this.$refs[\"column-file-for-\" + this.uid].\n                Creo inputFileData como inputFile.files[0].\n                Asigno this.internalFilePath como inputFileData.name + \" [mimetype: \" + inputFileData.type + \"] [space: \" + inputFileData.size + \" bytes]\".\n            } en errores hago this.$notificaciones.error(error).\n            Método getFileInputs como una función donde {\n                Creo inputFile como this.$refs[\"column-file-for-\" + this.uid].\n                Retorno [inputFile].\n            } en errores hago this.$notificaciones.error(error).\n            Método downloadFile como una función donde {\n                @POR-HACER...\n                Hago window.alert(\"Funcionalidad por completar\").\n            } en errores hago this.$notificaciones.error(error).\n        }.\n        Método mounted como una función donde {\n        }.\n    }.\n}.\n\n@SECCIÓN 4.*. ControlForImage\n\nCreo ControlForImage como un componente vue con nombre \"ControlForImage\" con plantilla {\n    <div class=\"ControlForImage\">\n        <Horizontally>\n            <td class=\"width_100x100\">\n                <input class=\"display_none\" type=\"file\" :ref=\"'column-image-for-' + uid\" v-on:change=\"() => setFilePath()\" />\n                <div class=\"form_control_input\">{{ $t(\"Image: \") }} {{ internalFilePath }}</div>\n            </td>\n            <td class=\"width_1x100\">\n                <ControlForButton input-classes=\"min_width_25px success_button\" :on-click=\"() => openImage()\"> Abrir </ControlForButton>\n            </td>\n            <td class=\"width_1x100\">\n                <ControlForButton input-classes=\"min_width_25px\" :on-click=\"() => changeFile()\"> * </ControlForButton>\n            </td>\n        </Horizontally>\n        <div v-on:click=\"() => refreshImage()\">\n            <Horizontally table-classes=\"width_100x100\" v-if=\"internalImageUrl\">\n                <td class=\"width_100x100\" colspan=\"100\" v-bind:key=\"internalImageUid\">\n                    <div class=\"image_preview_container\">\n                        <div class=\"image_preview_wrapper\">\n                            <img class=\"image_preview\" :src=\"internalImageUrl\" />\n                        </div>\n                    </div>\n                </td>\n            </Horizontally>\n        </div>\n    </div>\n} con lógica {\n    Retorno {\n        Propiedad props como {\n            Propiedad initialValue como {\n                Propiedad type como [String, Date].\n                Propiedad required como false.\n                Propiedad default como una función donde retorno una nueva Date().\n            }.\n            Propiedad onChange como {\n                Propiedad type como Function.\n                Propiedad required como false.\n                Propiedad default como noop.\n            }.\n            Propiedad uid como {\n                Propiedad type como String.\n                Propiedad required como false.\n                Propiedad default como una función donde retorno window.$utilidades.getRandomId(10).\n            }.\n            Propiedad imageUrl como {\n                Propiedad type como String.\n                Propiedad required como false.\n                Propiedad default como undefined.\n            }.\n            Propiedad formControlParent como {\n                Propiedad type como Object.\n                Propiedad required como true.\n            }.\n        }.\n        Método data como una función donde {\n            Retorno {\n                Propiedad internalValue como this.initialValue.\n                Propiedad internalFilePath como undefined.\n                Propiedad internalImageUrl como this.imageUrl.\n                Propiedad internalImageUid como this.$utilidades.getRandomId(10).\n            }.\n        }.\n        Propiedad watch como {\n        }.\n        Propiedad methods como {\n            Método changeFile como una función donde {\n                Retorno this.$refs[\"column-image-for-\" + this.uid].click().\n            } en errores hago this.$notificaciones.error(error).\n            Método setFilePath como una función donde {\n                Creo inputFile como this.$refs[\"column-image-for-\" + this.uid].\n                Creo fileItem como inputFile.files[0].\n                Si fileItem {\n                    Asigno this.internalFilePath como fileItem.name + \" [mimetype: \" + fileItem.type + \"] [space: \" + fileItem.size + \" bytes]\".\n                }.\n            } en errores hago this.$notificaciones.error(error).\n            Método getFileInputs como una función donde {\n                Creo inputFile como this.$refs[\"column-image-for-\" + this.uid].\n                Retorno [inputFile].\n            } en errores hago this.$notificaciones.error(error).\n            Método refreshImage como una función donde {\n                Asigno this.internalImageUrl como false.\n                Creo imageUrlInstance como un nuevo URL(this.imageUrl).\n                Creo imageUrlParams como un nuevo URLSearchParams(imageUrlInstance.search).\n                Hago imageUrlParams.set(\"nocache\", this.$utilidades.getRandomId(10)).\n                Creo imageUrl2 como imageUrlInstance.origin + imageUrlInstance.pathname + '?' + imageUrlParams.toString().\n                Hago una espera de 0.5 segundos donde {\n                    Asigno this.internalImageUrl como imageUrl2.\n                }.\n\n            }.\n            Método openImage como una función donde {\n                @POR-HACER...\n                Hago window.alert(\"Funcionalidad por completar\").\n            }.\n        }.\n        Método mounted como una función donde {\n        }.\n    }.\n}.\n\n@SECCIÓN 5.*. Aplicación:\n\nHago una aplicación vue con nombre \"App\" con rutas routes con traducciones window.$translations con plantilla {\n    <div class=\"App\">\n        <Topbar />\n        <hr />\n        <div class=\"main_contents_container padding_horizontal_2 padding_top_2\">\n            <div class=\"main_contents\">\n                <div v-if=\"authentication\">\n                    <div class=\"\">\n                        <router-view></router-view>\n                    </div>\n                </div>\n                <div v-else class=\"\">\n                    <LoginPage />\n                </div>\n            </div>\n        </div>\n        <Notificaciones ref=\"Notificaciones\" />\n    </div>\n} con estilos {\n    .app {}\n} con lógica donde {\n    Retorno {\n        Propiedad name como \"App\".\n        Método data como una función donde {\n            Retorno {\n                Propiedad schema como undefined.\n                Propiedad allTables como undefined.\n                Propiedad authentication como undefined.\n                Propiedad metadata como {\n                    Propiedad project como \"Restología: donde tus datos descansan\".\n                }.\n            }.\n        }.\n        Método beforeMount como una función donde {\n            Asigno Vue.prototype.$root como this.\n        }.\n        Método mounted como una función donde {\n            Asigno Vue.prototype.$notificaciones como un nuevo window.$Notificaciones(this.$refs.Notificaciones).\n        }.\n        Propiedad watch como {\n            Método schema como una función con (nuevoValor) donde {\n                Creo allTables como {}.\n                Itero como objeto nuevoValor.projects creando projectName donde {\n                    Creo projectData como nuevoValor.projects[projectName].\n                    Itero como objeto projectData.project.schema.tables creando tableId donde {\n                        Creo tableData como projectData.project.schema.tables[tableId].\n                        Asigno allTables[projectName + \":\" + tableId] como tableData.\n                    }.\n                }.\n                Asigno this.allTables como allTables.\n            }.\n        }.\n        Propiedad methods como {\n            \n        }.\n    }.\n} montada en \"#app\".\n";
fs.writeFileSync(node_15, node_contents_15, "utf8");

const node_16 = path.resolve(baseDirectory, ".", "src", "app", "images");
fs.mkdirSync(node_16);

const node_17 = path.resolve(baseDirectory, ".", "src", "app", "images", "logo.png");
const node_contents_17 = "�PNG\r\n\u001a\n\u0000\u0000\u0000\rIHDR\u0000\u0000\u00013\u0000\u0000\u00013\u0004\u0003\u0000\u0000\u0000�v�m\u0000\u0000\u0000\u0018PLTE\"�]$�^%�_\"�]\"�](�c\"�]#�]\\\tmR\u0000\u0000\u0000\u0001tRNS\u0000@��f\u0000\u0000\u0000\u0001bKGD\u0000�\u0005\u001dH\u0000\u0000\u0000\tpHYs\u0000\u0000\u000b\u0013\u0000\u0000\u000b\u0013\u0001\u0000��\u0018\u0000\u0000\u0000\u0007tIME\u0007�\u0005\u0018\n\b3f�m�\u0000\u0000\u0006�IDATx���ۊ�8\u0010\u0006`�E�:�\u001dڷ�\u0011��\bt3�\rt\u0018���t3�q�CI���\u0006�k�����*Gq�(G9�Q��)>~\u0016����\u0004�2s�\u0018����\u001b\u0001\u0006m\u001b�\u0019[Bf���dFl1Z��h�\u0016�ŮL��U[E�h���B�Vm1Z�EZ�+S�e��\u0006l�ՆW��\u0005�+�R�(ۊ��:�T����zi��@�LJ6J7יBh\u0003Pc�R�C�Fn)���\u000f�����A�BcE\u0000m��\u00077��wl���:�a�U\u0003\u0010[g�\u0000���^#��v|yaۮ.#j�י%����\u001b�������=��\u0010��\"bc:��P`�&�6�\u000e�=�p\u000e-�a��MYmvۀ��F�1\u0015\f̑�YRy@qڤ����+���m\u0003���\t���%������ώ�6o��\u0016\u0011\u000b�\u0006$��e�zq��JCE�B�'p���\u000f\u0004\u0007�5V��,a\u000bM4AY�\u001eZ�����\u0015Kp6��k�+�\t�4'_�u��9i*M=�O;\f$[_�t\u0014L��E�BsN�F�9d1L�\u0007��\u001d4$�e^�/�g3����U�g\u0014�tP\u0002�Y.\u0010Z�DӒ+w\u0000�\u0017���B�hҊ�e\tz��,k��]�j��Ц�PTh'�l��A�I�dw\u0013��4Yrz\u0013�-�rC�F2펦�dZ����NtYb��Ҧ\u0006ڂ��ȶ\u0003A��mϷ?����-*I{\u001a�ߟV��J�J����0�Ǩ$�z�\\�o8�@Xg�􂴑����Ά���~�q�;�hS}��n�\u0000�͕U�f}~��(���m\u001f\n�[��:;��i�\\�Ch����@V�\u0015#B'<m Ҳ_\u0001B+G��L�\u001b��)3\\\f�F8�Q�S���0Do�nT�\u0007\u0006<�8\u000e4nT�j�G%\u001f\u0017�\u001f�hӲ��@�\u0006�\u001f���6�Ȋ�D��~�AKGc�o\u0016h��_=�\b\u000eǴV\u001e6��4,tC�a!J�\u0004���І�L�|p�\u0016g���ei�ҟ��������K٤iCw�@>�LN\u0006]�u��%\u0013\u0004xc��٤�WP�4�Y�F���\u0006͹��ކ�%�e��\u0002��[��2�Bi��\u001f3�Eᴯ�Gy�N��kܛ\t�K���a������6wXK��U�)��v1E[�i��Ο�`�ӳ�\u0018m$����m 4b�੷ai�(�\u0016���ٰ��N�\u001e�\r�l�v�F�\u001bf\u000f�0�6�����0{hݨ\bC\u0014|{\u001f�����\u0003�(��d蘞h�h�Bn�\u0019��]�o,\f�\u0005�L���;�r��Xm\u0003�\u0011y$�6�\u000b\u0015A�)*٦l\\\u0012�G~r��D��z&�\u0014_�F�2������4���{ԍ�6��e�쥙{��\u001eEc\u001es\u001b\r�m�M2l\"h�Qi�4��Ҥ�kW����IG2�\u0002����\u0004\u0004LǞ�\u0016\u0014˝�:\u001a&�<�� \u0011p�њ���`u���Ҍ��\b,��\u0011\u0006Ͷl���P\b6\u00114�����}�mkӟ�:h���M�\u0002�ָ5\\� nZ�z���i��72�8������\u0019\u00014�I��4����Mi\u0019i\r�Ғ���5m�K�\u0000��\u0016w����,\u000bm���!���?\u0014\u0014��o�^���~K�Z\u0007��#Q�ֵ�~m{��~}l���<\u000b-�TZ��4X�om,{^w��\u001f�MK�\u001d��c���,C��i.�>\u0019�\u00164d4[`�q�!\u0015C{��G�&x�����c�il�ZwS\u0018�T���l\u000b\n�\u0006Ѧ48\tC!h��6}Y�\u0016��\r��z\u0019\u0019�\u001f{��\u001a�&��F����l_\fFX��%��A\u0002%�\r\u0001�\u0011t�L˂�Q��F\u0007g�}�e\u0005��Q��\u0001Y=�\u0005��J\u00072\"K����j}�ɪ�,�i��)Q��*�\u0012�uP�Z�W\u001b\u0005��:({}����Ս7�(���xH!�=T\u001e��6�G\u0001�2�M��ɮ��݌=hZ�mx��bwS� ؕem\u0016�.>�]14#�Gʛev��sVm�Y�\u0005g�fLV��_#6g�x���\u001c�(��\u0017��\u0010\u0016.��\u0017\u0000\u0000\u0000\u0000IEND�B`�";
fs.writeFileSync(node_17, node_contents_17, "utf8");

const node_18 = path.resolve(baseDirectory, ".", "src", "app", "js");
fs.mkdirSync(node_18);

const node_19 = path.resolve(baseDirectory, ".", "src", "app", "js", "almacenamiento.calo");
const node_contents_19 = "Asigno window.$almacenamiento como {}.\n\nAsigno window.$almacenamiento.ID_ALMACENAMIENTO como \"Restologia\".\n\nAsigno window.$almacenamiento.persistir como una función con (clave, valor) donde {\n    Creo datosJSON como localStorage[window.$almacenamiento.ID_ALMACENAMIENTO].\n    Creo datos como un hecho donde retorno JSON.parse(datosJSON) en errores retorno {}.\n    Asigno datos[clave] como valor.\n    Asigno localStorage[window.$almacenamiento.ID_ALMACENAMIENTO] como datos textualizado.\n    Retorno datos.\n}.\n\nAsigno window.$almacenamiento.obtener como una función con (clave, porDefecto o en su defecto undefined) donde {\n    Creo datosJSON como localStorage[window.$almacenamiento.ID_ALMACENAMIENTO].\n    Creo datos como un hecho donde retorno JSON.parse(datosJSON) en errores retorno {}.\n    Retorno cuando datos contiene clave clave entonces datos[clave] si no porDefecto.\n}.\n";
fs.writeFileSync(node_19, node_contents_19, "utf8");

const node_20 = path.resolve(baseDirectory, ".", "src", "app", "js", "api-nativa.calo");
const node_contents_20 = "Importo api nativa.";
fs.writeFileSync(node_20, node_contents_20, "utf8");

const node_21 = path.resolve(baseDirectory, ".", "src", "app", "js", "cliente-prev-1.calo");
const node_contents_21 = "Asigno window.$restologia como {}.\n\nAsigno window.$restologia.cliente como axios.create({ baseUrl: \"http://127.0.0.1:9999\" }).\n\nAsigno window.$restologia.$project como undefined.\n\nAsigno window.$restologia.setProject como una función con (project) donde asigno window.$restologia.$project como project.\n\nAsigno window.$restologia.login como una función con (user, password) donde {\n    Creo responsePromise como window.$restologia.cliente.post(\"/?operation=login&project=\" + this.$project, { user, password }).\n    Hago responsePromise.then(una función con (response) donde {\n        Si response.data.status es igual que \"success\" {\n            Asigno window.$restologia.cliente.defaults.headers.common.Authorization como response.data.data.session.token.\n            Asigno Vue.prototype.$root.authentication como {\n                Propiedad token como response.data.data.session.token.\n                Propiedad user como response.data.data.session.authentication.user.\n                Propiedad groups como response.data.data.session.authentication.groups.\n                Propiedad privileges como response.data.data.session.authentication.privileges.\n            }.\n        }.\n        Retorno response.\n    }).\n    Retorno responsePromise.\n}.\n\nAsigno window.$restologia.logout como una función con () donde {\n    Creo responsePromise como window.$restologia.cliente.post(\"/?operation=logout&project=\" + this.$project, { }).\n    Hago responsePromise.then(una función con (response) donde {\n        Si response.data.status es igual que \"success\" {\n            Elimino propiedad window.$restologia.cliente.defaults.headers.common.Authorization.\n            Asigno Vue.prototype.$root.authentication como undefined.\n        }.\n        Retorno response.\n    }).\n    Retorno responsePromise.\n}.\n\nAsigno window.$restologia.schema como una función con (root) donde {\n    Retorno window.$restologia.cliente.get(\"/?operation=view-schema&project=\" + this.$project).then(una función con (response) donde {\n        Si response.data.status es igual que \"success\" {\n            Asigno root.schema como response.data.data.schema.\n        } y si no lanzo un nuevo Error(\"No se pudo cargar esquema de datos\").\n        Retorno response.\n    }).\n}.\n\nAsigno window.$restologia.select como una función con (table, where, order, paginate, search) donde {\n    Retorno window.$restologia.cliente.get(\"/?operation=select\"\n        + \"&project=\" + this.$project\n        + \"&table=\" + table\n        + \"&where=\" + encodeURIComponent(where textualizado)\n        + \"&sort=\" + encodeURIComponent(order textualizado)\n        + \"&paginate=\" + encodeURIComponent(paginate textualizado)\n        + \"&search=\" + encodeURIComponent(search textualizado)\n    ).\n}.\n\nAsigno window.$restologia.checkSuccess como una función con (response) donde {\n    Retorno response.data y (response.data.status es igual que \"success\").\n}.";
fs.writeFileSync(node_21, node_contents_21, "utf8");

const node_22 = path.resolve(baseDirectory, ".", "src", "app", "js", "cliente.calo");
const node_contents_22 = "##########################################################################################\n@SECCIÓN: 1.0. window.$Restologia\nAsigno window.$Restologia como una clase donde {\n\n    @SECCIÓN: 1.*. window.$Restologia.create(...)\n    \n    Método estático create con (extensiones o en su defecto {}) donde {\n        Retorno un nuevo this(extensiones).\n    }.\n\n    @SECCIÓN: 1. Métodos propios:\n\n    @SECCIÓN: 1.*. window.$Restologia.constructor(...)\n    \n    Método constructor con (extensiones o en su defecto {}) donde {\n        Asigno this.schemaData como undefined.\n        Asigno this.rootComponent como undefined.\n        Asigno this.authentication como undefined.\n        Asigno this.axiosClient como axios.create({ baseUrl: window.location.href }).\n        Hago Object.assign(this, extensiones).\n    }.\n\n    @SECCIÓN: 1.*. window.$Restologia#setRootComponent(...)\n    \n    Método setRootComponent con ($rootComponent) donde {\n        Asigno this.rootComponent como $rootComponent.\n    }.\n\n    @SECCIÓN: 1.*. window.$Restologia#getProjectURLOfProject(...)\n    \n    Método getProjectURLOfProject con (projectId) donde {\n        Si this.schemaData.projects no contiene clave projectId lanzo un nuevo Error(\"Required parameter «projectId» to be a valid project in order to «$rest.getProjectURLOfProject»\").\n        Retorno this.schemaData.projects[projectId].server.url.\n    }.\n\n    @SECCIÓN: 1.*. window.$Restologia#getProjectNameOfProject(...)\n    \n    Método getProjectNameOfProject con (projectId) donde {\n        Si this.schemaData.projects no contiene clave projectId lanzo un nuevo Error(\"Required parameter «projectId» to be a valid project in order to «$rest.getProjectNameOfProject»\").\n        Retorno this.schemaData.projects[projectId].project.name.\n    }.\n\n    @SECCIÓN: 1.*. window.$Restologia#getReferredProjectAndTableByColumn(...)\n    \n    Método getReferredProjectAndTableByColumn con (projectId, table, column) donde {\n        Si this.schemaData.projects no contiene clave projectId lanzo un nuevo Error(\"Required parameter «project» (\" + projectId + \") to be a known project full-identifier in order to «$rest.getProjectAndTableByExternalizedColumn»\").\n        Si this.schemaData.projects[projectId].project.schema.tables no contiene clave table lanzo un nuevo Error(\"Required parameter «table» (\" + table + \") to be a known table identifier in «project» (\" + projectId + \") in order to «$rest.getProjectAndTableByExternalizedColumn»\").\n        Si this.schemaData.projects[projectId].project.schema.tables[table].columns no contiene clave column lanzo un nuevo Error(\"Required parameter «column» (\" + column + \") to be a known column identifier in «project» (\" + projectId + \") and «table» (\" + table + \") in order to «$rest.getProjectAndTableByExternalizedColumn»\").\n        Creo columnData como this.schemaData.projects[projectId].project.schema.tables[table].columns[column].\n        Si columnData.attributes.isReferenceOf no es tipo texto lanzo un nuevo Error(\"Required parameter «project.table.column» (\" + projectId + \".\" + table + \".\" + column + \") to be a reference of other table in order to «$rest.getProjectAndTableByExternalizedColumn»\").\n        Si this.schemaData.projects[projectId].project.schema.tables no contiene clave columnData.attributes.isReferenceOf lanzo un nuevo Error(\"Required configuration «isReferenceOf» in «column» (\" + projectId + \".\" + table + \".\" + column + \") to have attribute «isReferenceOf» (\" + columnData.attributes.isReferenceOf + \") pointing to a valid own table in order to «$rest.getProjectAndTableByExternalizedColumn»\").\n        Creo referencedTable como this.schemaData.projects[projectId].project.schema.tables[columnData.attributes.isReferenceOf].\n        Creo externalization como referencedTable.attributes.isExternalizedBy.\n        Si no externalization retorno {\n            Propiedad project como projectId.\n            Propiedad table como columnData.attributes.isReferenceOf.\n        }.\n        Retorno un hecho donde {\n            Creo externalHost como externalization.host.\n            Creo externalProject como externalization.project.\n            Creo externalTable como externalization.table.\n            Creo variable isExternalTableOfProject como false.\n            Itero como objeto this.schemaData.projects creando variable projectId2 donde {\n                Creo projectData como this.schemaData.projects[projectId2].\n                Creo projectUrl como projectData.server.url.\n                Si projectUrl es igual que externalHost {\n                    Asigno isExternalTableOfProject como projectData.\n                    Si projectData.project.schema.tables no contiene clave externalTable lanzo un nuevo Error(\"Required configuration «isExternalizedBy» on «host» (\" + externalization.host + \") and «table» (\" + externalization.table + \") parameters to refer to a valid table in schema in order to «$rest.getProjectAndTableByExternalizedColumn»\").\n                }.\n            }.\n            Si isExternalTableOfProject es igual que false lanzo un nuevo Error(\"Required parameter «project.table.column» (\" + projectId + \".\" + table + \".\" + column + \") to be a valid reference of other table in the same project in order to «$rest.getProjectAndTableByExternalizedColumn»\").\n            Si isExternalTableOfProject.project.schema.tables no contiene clave externalTable lanzo un nuevo Error(\"Missing table (\" + externalTable + \") on «project.host» (\" + externalProject + \".\" + externalHost + \") due to externalized «host.table» (\" + externalization.host + \".\" + externalization.table + \") on «project.table.column» (\" + projectId + \".\" + table + \".\" + column + \") in order to «getProjectAndTableByExternalizedColumn» \").\n            Retorno {\n                Propiedad project como isExternalTableOfProject.project.id.\n                Propiedad table como externalTable.\n            }.\n        }.\n    } en errores {\n        Imprimo error.\n        Hago this.rootComponent.$refs.Notificaciones.addNotificacion(error).\n        Lanzo error.\n    }.\n\n    @SECCIÓN: 2. Métodos REST generales:\n\n    @SECCIÓN: 2.*. window.$Restologia#schema(...)\n    \n    Método asíncrono schema con () donde {\n        Creo respuestaSchema como asíncronamente una petición http\n            con url \"/schema.json\"\n            con método \"GET\"\n            con cuerpo {}\n            con cabeceras {}\n            usando cliente this.axiosClient.\n        Si respuestaSchema.data.error lanzo un nuevo Error(respuestaSchema.data.error.message).\n        Asigno this.schemaData como respuestaSchema.data.\n        Asigno this.rootComponent.schema como this.schemaData.\n        Asigno this.authProject como this.schemaData.projects[this.schemaData.authProject].\n        Retorno this.schemaData.\n    } en errores {\n        Imprimo error.\n        Hago this.rootComponent.$refs.Notificaciones.addNotification(error).\n        Lanzo error.\n    }.\n\n    @SECCIÓN: 2.*. window.$Restologia#login(...)\n    \n    Método asíncrono login con (user, password) donde {\n        Creo authUrl como this.authProject.server.url.\n        Creo respuestaLogin como asíncronamente una petición http\n            con url authUrl + `?project=${this.authProject.project.name}&operation=login`\n            con método \"POST\"\n            con cuerpo { user, password }\n            con cabeceras {}\n            usando cliente this.axiosClient.\n        Si respuestaLogin.data.error lanzo un nuevo Error(respuestaLogin.data.error.message).\n        Asigno this.authentication como {\n            Propiedad token como respuestaLogin.data.data.session.token.\n            Propiedad user como respuestaLogin.data.data.session.authentication.user.\n            Propiedad groups como respuestaLogin.data.data.session.authentication.groups.\n            Propiedad privileges como respuestaLogin.data.data.session.authentication.privileges.\n        }.\n        Asigno this.rootComponent.authentication como this.authentication.\n        Asigno this.axiosClient.defaults.headers.common.Authorization como respuestaLogin.data.data.session.token.\n        Retorno this.authentication.\n    } en errores {\n        Imprimo error.\n        Hago this.rootComponent.$refs.Notificaciones.addNotification(error).\n        Lanzo error.\n    }.\n\n    @SECCIÓN: 2.*. window.$Restologia#logout(...)\n    \n    Método asíncrono logout con () donde {\n        Creo authUrl como this.authProject.server.url.\n        Creo respuestaLogout como asíncronamente una petición http\n            con url authUrl + `?project=${this.authProject.project.name}&operation=logout`\n            con método \"POST\"\n            con cuerpo {}\n            con cabeceras {}\n            usando cliente this.axiosClient.\n        Si respuestaLogout.data.error lanzo un nuevo Error(respuestaLogout.data.error.message).\n        Asigno this.rootComponent.authentication como undefined.\n        Asigno this.authentication como undefined.\n        Elimino propiedad this.axiosClient.defaults.headers.common.Authorization.\n        Retorno this.authentication.\n    } en errores {\n        Imprimo error.\n        Hago this.rootComponent.$refs.Notificaciones.addNotification(error).\n        Lanzo error.\n    }.\n\n    @SECCIÓN: 3. Métodos REST sobre DATOS:\n\n    @SECCIÓN: 3.*. window.$Restologia#select(...)\n\n    Método asíncrono select con (project, table, where, order, paginate, search) donde {\n        Creo projectUrl como this.getProjectURLOfProject(project).\n        Creo projectName como this.getProjectNameOfProject(project).\n        Creo parametrosQuerystring como un nuevo URLSearchParams({\n            Propiedad operation como \"select\".\n            Propiedad project como projectName.\n            Propiedad table como table.\n            Propiedad where como where textualizado.\n            Propiedad sort como order textualizado.\n            Propiedad paginate como paginate textualizado.\n            Propiedad search como search textualizado.\n        }).toString().\n        Creo respuestaSelect como asíncronamente una petición http\n            con url projectUrl + \"?\" + parametrosQuerystring\n            con método \"GET\"\n            con cuerpo {}\n            con cabeceras {}\n            usando cliente this.axiosClient.\n        Si respuestaSelect.data.error lanzo un nuevo Error(respuestaSelect.data.error.message).\n        Retorno respuestaSelect.\n    } en errores {\n        Imprimo error.\n        Hago this.rootComponent.$refs.Notificaciones.addNotification(error).\n        Lanzo error.\n    }.\n\n    @SECCIÓN: 3.*. window.$Restologia#insert(...)\n\n    Método asíncrono insert con (project, table, value) donde {\n        Creo projectUrl como this.getProjectURLOfProject(project).\n        Creo projectName como this.getProjectNameOfProject(project).\n        Creo parametrosQuerystring como un nuevo URLSearchParams({\n            Propiedad operation como \"insert\".\n            Propiedad project como projectName.\n        }).toString().\n        Creo respuestaInsert como asíncronamente una petición http\n            con url projectUrl + \"?\" + parametrosQuerystring\n            con método \"POST\"\n            con cuerpo {\n                Propiedad table como table.\n                Propiedad value como value textualizado.\n            }\n            con cabeceras {}\n            usando cliente this.axiosClient.\n        Si respuestaInsert.data.error lanzo un nuevo Error(respuestaInsert.data.error.message).\n        Retorno respuestaInsert.\n    } en errores {\n        Imprimo error.\n        Hago this.rootComponent.$refs.Notificaciones.addNotification(error).\n        Lanzo error.\n    }.\n\n    @SECCIÓN: 3.*. window.$Restologia#update(...)\n\n    Método asíncrono update con (project, table, id, value) donde {\n        Creo projectUrl como this.getProjectURLOfProject(project).\n        Creo projectName como this.getProjectNameOfProject(project).\n        Creo parametrosQuerystring como un nuevo URLSearchParams({\n            Propiedad operation como \"update\".\n            Propiedad project como projectName.\n        }).toString().\n        Creo respuestaInsert como asíncronamente una petición http\n            con url projectUrl + \"?\" + parametrosQuerystring\n            con método \"POST\"\n            con cuerpo {\n                Propiedad table como table.\n                Propiedad id como id.\n                Propiedad value como value textualizado.\n            }\n            con cabeceras {}\n            usando cliente this.axiosClient.\n        Si respuestaInsert.data.error lanzo un nuevo Error(respuestaInsert.data.error.message).\n        Retorno respuestaInsert.\n    } en errores {\n        Imprimo error.\n        Hago this.rootComponent.$refs.Notificaciones.addNotification(error).\n        Lanzo error.\n    }.\n\n    @SECCIÓN: 3.*. window.$Restologia#delete(...)\n\n    Método asíncrono delete con (project, table, id) donde {\n        Creo projectUrl como this.getProjectURLOfProject(project).\n        Creo projectName como this.getProjectNameOfProject(project).\n        Creo parametrosQuerystring como un nuevo URLSearchParams({\n            Propiedad operation como \"delete\".\n            Propiedad project como projectName.\n        }).toString().\n        Creo respuestaInsert como asíncronamente una petición http\n            con url projectUrl + \"?\" + parametrosQuerystring\n            con método \"POST\"\n            con cuerpo {\n                Propiedad table como table.\n                Propiedad id como id.\n            }\n            con cabeceras {}\n            usando cliente this.axiosClient.\n        Si respuestaInsert.data.error lanzo un nuevo Error(respuestaInsert.data.error.message).\n        Retorno respuestaInsert.\n    } en errores {\n        Imprimo error.\n        Hago this.rootComponent.$refs.Notificaciones.addNotification(error).\n        Lanzo error.\n    }.\n\n    @SECCIÓN: 3.*. window.$Restologia#setFile(...)\n\n    Método asíncrono setFile con (project, table, id, column, fileInputs o en su defecto []) donde {\n        Creo projectName como this.getProjectNameOfProject(project).\n        Creo projectUrl como this.getProjectURLOfProject(project).\n        Creo parametrosQuerystring como un nuevo URLSearchParams({\n            Propiedad operation como \"set-file\".\n            Propiedad project como projectName.\n            Propiedad table como table.\n            Propiedad column como column.\n            Propiedad id como id.\n        }).toString().\n        Creo actionUrl como projectUrl + \"?\" + parametrosQuerystring.\n        Creo formData como un nuevo FormData().\n        Creo variable hasOne como false.\n        Creo fileKeys como Object.keys(fileInputs).\n        Itero como lista fileKeys creando variable keyIndex donde {\n            Creo fileKey como fileKeys[keyIndex].\n            Creo fileInput como fileInputs[fileKey].\n            Si fileInput es tipo indefinido lanzo un nuevo Error(\"Required parameter «fileInputs» on index «\" + keyIndex + \"» to not be undefined in order to «$restologia.setFile» from front\").\n            Si fileInput no es instancia de HTMLElement lanzo un nuevo Error(\"Required parameter «fileInputs» on index «\" + keyIndex + \"» to be an «HTMLElement» instance in order to «$restologia.setFile» from front\").\n            Si fileInput no es instancia de HTMLInputElement lanzo un nuevo Error(\"Required parameter «fileInputs» on index «\" + keyIndex + \"» to be an «HTMLInputElement» instance in order to «$restologia.setFile» from front\").\n            Si fileInput.files es tipo indefinido lanzo un nuevo Error(\"Required parameter «fileInputs» on index «\" + keyIndex + \"» to have a «files» property in order to «$restologia.setFile» from front\").\n            Si fileInput.files[0] es tipo indefinido lanzo un nuevo Error(\"Required parameter «fileInputs» on index «\" + keyIndex + \"» to have at least 1 «File» instance in order to «$restologia.setFile» from front\").\n            Creo fileItem como fileInput.files[0].\n            Hago formData.append(\"files[]\", fileItem).\n            Si hasOne no es igual que true asigno hasOne como true.\n        }.\n        Si hasOne es igual que false lanzo un nuevo Error(\"Required parameter «fileInputs» to have at least 1 item in order to «$restologia.setFile» from front\").\n        Creo respuestaSetFile como asíncronamente una petición http\n            con url actionUrl\n            con método \"POST\"\n            con cuerpo formData\n            con cabeceras {\n                \"Content-type\": \"multipart/formdata\"\n            }\n            usando cliente this.axiosClient.\n        Si respuestaSetFile.data.error lanzo un nuevo Error(respuestaSetFile.data.error.message).\n        Retorno respuestaSetFile.\n    } en errores {\n        Imprimo error.\n        Hago this.rootComponent.$refs.Notificaciones.addNotification(error).\n        Lanzo error.\n    }.\n\n    @SECCIÓN: 3.*. window.$Restologia#getFileUrl(...)\n\n    Método getFileUrl con (project, table, id, column) donde {\n        Creo projectName como this.getProjectNameOfProject(project).\n        Creo projectUrl como this.getProjectURLOfProject(project).\n        Creo parametrosQuerystring como un nuevo URLSearchParams({\n            Propiedad operation como \"get-file\".\n            Propiedad project como projectName.\n            Propiedad table como table.\n            Propiedad column como column.\n            Propiedad id como id.\n            Propiedad nocache como Vue.prototype.$utilidades.getRandomId(10).\n            Propiedad authorization como this.rootComponent.authentication.token.\n        }).toString().\n        Retorno projectUrl + \"?\" + parametrosQuerystring.\n    } en errores {\n        Imprimo error.\n        Hago this.rootComponent.$refs.Notificaciones.addNotification(error).\n        Lanzo error.\n    }.\n\n    @SECCIÓN: 3.*. window.$Restologia#getFile(...)\n\n    Método asíncrono getFile con (project, table, id, column) donde {\n        Creo projectUrl como this.getFileUrl(project, table, id, column).\n        Creo respuestaGetFile como asíncronamente una petición http\n            con url this.getFileUrl(this.getProjectNameOfProject(project), table, column, id)\n            con método \"GET\"\n            con cuerpo {}\n            con cabeceras {}\n            usando cliente this.axiosClient.\n        Si respuestaGetFile.data.error lanzo un nuevo Error(respuestaGetFile.data.error.message).\n        Retorno respuestaGetFile.\n    } en errores {\n        Imprimo error.\n        Hago this.rootComponent.$refs.Notificaciones.addNotification(error).\n        Lanzo error.\n    }.\n\n}.\n\n##########################################################################################\n@SECCIÓN: 2.*. window.$restologia\nAsigno window.$restologia como window.$Restologia.create().";
fs.writeFileSync(node_22, node_contents_22, "utf8");

const node_23 = path.resolve(baseDirectory, ".", "src", "app", "js", "notificaciones.calo");
const node_contents_23 = "Asigno window.$Notificaciones como una clase donde {\n\n    Método constructor con (componenteNotificaciones) donde {\n        Asigno this.componente como componenteNotificaciones.\n    }.\n\n    Método error con (error) donde {\n        Imprimo \"ERROR:\".\n        Imprimo error.\n        Hago this.componente.addNotification({\n            Propiedad type como \"error\".\n            Propiedad name como error.name.\n            Propiedad message como error.message.\n        }).\n    }.\n\n    Método mensaje con (mensaje) donde {\n        Imprimo mensaje.\n    }.\n\n}.\n";
fs.writeFileSync(node_23, node_contents_23, "utf8");

const node_24 = path.resolve(baseDirectory, ".", "src", "app", "js", "traducciones.calo");
const node_contents_24 = "Asigno window.$translations como {\n    \"es\": {\n        \"add\": \"añadir\",\n        \"edit\": \"editar\"\n    },\n    \"en\": {\n        \"Economía algorítmica\": \"Algorythmic economy\",\n        \"Inicio\": \"Home\",\n        \"Identificación\": \"Identification\",\n        \"Productos\": \"Products\",\n        \"Tecnologías\": \"Technologies\",\n        \"Consumidores\": \"Consumers\",\n        \"Sucursales\": \"Sucursals\",\n        \"Operaciones\": \"Operations\",\n        \"Estrategia\": \"Strategy\",\n        \"Idioma\": \"Language\",\n        \"Idioma:\": \"Language:\",\n        \"Identificarse\": \"Login\",\n        \"Usuario:\": \"User:\",\n        \"Contraseña:\": \"Password:\",\n        \"Sesión\": \"Session\",\n        \"Configuraciones\": \"Configurations\",\n        \"Atrás\": \"Back\",\n        \"Datos\": \"Data\",\n        \"Autentificación\": \"Authentification\",\n        \"Proyecto:\": \"Project:\",\n        \"add\": \"add\",\n        \"edit\": \"edit\"\n    },\n    \"ca\": {\n        \"Economía algorítmica\": \"Economia algorítmica\",\n        \"Inicio\": \"Inici\",\n        \"Identificación\": \"Identificació\",\n        \"Productos\": \"Productes\",\n        \"Tecnologías\": \"Tecnologies\",\n        \"Consumidores\": \"Consumidors\",\n        \"Sucursales\": \"Sucursals\",\n        \"Operaciones\": \"Operacions\",\n        \"Estrategia\": \"Estratègia\",\n        \"Idioma\": \"Idioma\",\n        \"Idioma:\": \"Idioma:\",\n        \"Identificarse\": \"Identificar-se\",\n        \"Usuario:\": \"Usuari:\",\n        \"Contraseña:\": \"Contrasenya:\",\n        \"Sesión\": \"Sessió\",\n        \"Configuraciones\": \"Configuracions\",\n        \"Atrás\": \"Enrere\",\n        \"Datos\": \"Dades\",\n        \"Autentificación\": \"Autentificació\",\n        \"Proyecto:\": \"Projecte:\",\n        \"add\": \"afegir\",\n        \"edit\": \"editar\"\n    }\n}.\n";
fs.writeFileSync(node_24, node_contents_24, "utf8");

const node_25 = path.resolve(baseDirectory, ".", "src", "app", "js", "utilidades.calo");
const node_contents_25 = "Creo ALPHABET como \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\".split(\"\").\n\nAsigno window.$utilidades como {}.\n\nAsigno window.$utilidades.getRandomId como una función con (len o en su defecto 1000, alphabet o en su defecto ALPHABET) donde {\n    Creo variable id como \"\".\n    Desde 0 hasta len {\n        Asigno id como id + alphabet[Math.floor(Math.random() * alphabet.length)].\n    }.\n    Retorno id.\n}.\n\nAsigno window.$utilidades.capitalizeString como una función con (texto) donde {\n    Retorno texto.substr(0, 1).toUpperCase() + texto.substr(1).\n}.\n\n\n\nAsigno window.$utilidades.padLeft como una función con (text, len, ch o en su defecto \"0\") {\n    Creo variable out como \"\" + text.\n    Mientras out.length es menor que len {\n        Asigno out como ch + out.\n    }.\n    Retorno out.\n}.\n    \nAsigno window.$utilidades.fromDateToString como una función con (date, untilSeconds o en su defecto false) {\n    Si untilSeconds {\n        Retorno \"\" + window.$utilidades.padLeft(date.getFullYear(), 4, \"0\")\n            + \"/\" + window.$utilidades.padLeft(date.getMonth() + 1, 2, \"0\")\n            + \"/\" + window.$utilidades.padLeft(date.getDate(), 2, \"0\")\n            + \" \" + window.$utilidades.padLeft(date.getHours(), 2, \"0\")\n            + \":\" + window.$utilidades.padLeft(date.getMinutes(), 2, \"0\")\n            + \":\" + window.$utilidades.padLeft(date.getSeconds(), 2, \"0\")\n            + \".\" + window.$utilidades.padLeft(date.getMilliseconds(), 3, \"0\").\n    }\n    Y si no {\n        Retorno \"\" + window.$utilidades.padLeft(date.getFullYear(), 4, \"0\")\n            + \"/\" + window.$utilidades.padLeft(date.getMonth() + 1, 2, \"0\")\n            + \"/\" + window.$utilidades.padLeft(date.getDate(), 2, \"0\").\n    }.\n}.\n\nAsigno window.$utilidades.fromStringToDate como una función con (dateStr, untilSeconds o en su defecto false) {\n    Si dateStr es instancia de Date retorno dateStr.\n    Creo dateStrParts como dateStr.split(una nueva RegExp(\"[\\\\/\\\\:\\\\ \\\\.]\", \"g\")).\n    Creo date como una nueva Date().\n    Hago date.setFullYear(dateStrParts[0]).\n    Hago date.setMonth(dateStrParts[1] - 1).\n    Hago date.setDate(dateStrParts[2]).\n    Si untilSeconds {\n        Hago date.setHours(dateStrParts[3]).\n        Hago date.setMinutes(dateStrParts[4]).\n        Hago date.setSeconds(dateStrParts[5]).\n        Hago date.setMilliseconds(dateStrParts[6]).\n    }\n    Y si no {\n        Hago date.setHours(0).\n        Hago date.setMinutes(0).\n        Hago date.setSeconds(0).\n        Hago date.setMilliseconds(0).\n    }.\n    Retorno date.\n}.\n\nAsigno window.$utilidades.adaptWeekDay como una función con (day) donde {\n    Si day es igual que 0 retorno 7.\n    Si day es igual que 1 retorno 1.\n    Si day es igual que 2 retorno 2.\n    Si day es igual que 3 retorno 3.\n    Si day es igual que 4 retorno 4.\n    Si day es igual que 5 retorno 5.\n    Si day es igual que 6 retorno 6.\n}.\n\nAsigno window.$utilidades.fromWeekdayToText como una función con (day) donde {\n    Si day es igual que 0 retorno \"Domingo\".\n    Si day es igual que 1 retorno \"Lunes\".\n    Si day es igual que 2 retorno \"Martes\".\n    Si day es igual que 3 retorno \"Miércoles\".\n    Si day es igual que 4 retorno \"Jueves\".\n    Si day es igual que 5 retorno \"Viernes\".\n    Si day es igual que 6 retorno \"Sábado\".\n}.\n\nAsigno window.$utilidades.fromMonthToText como una función con (month) donde {\n    Si month es igual que 0 retorno \"Enero\".\n    Si month es igual que 1 retorno \"Febrero\".\n    Si month es igual que 2 retorno \"Marzo\".\n    Si month es igual que 3 retorno \"Abril\".\n    Si month es igual que 4 retorno \"Mayo\".\n    Si month es igual que 5 retorno \"Junio\".\n    Si month es igual que 6 retorno \"Julio\".\n    Si month es igual que 7 retorno \"Agosto\".\n    Si month es igual que 8 retorno \"Septiembre\".\n    Si month es igual que 9 retorno \"Octubre\".\n    Si month es igual que 10 retorno \"Noviembre\".\n    Si month es igual que 11 retorno \"Diciembre\".\n}.";
fs.writeFileSync(node_25, node_contents_25, "utf8");

const node_26 = path.resolve(baseDirectory, ".", "src", "app", "styles");
fs.mkdirSync(node_26);

const node_27 = path.resolve(baseDirectory, ".", "src", "app", "styles", "app.css");
const node_contents_27 = "";
fs.writeFileSync(node_27, node_contents_27, "utf8");

const node_28 = path.resolve(baseDirectory, ".", "src", "app", "styles", "custom.css");
const node_contents_28 = "";
fs.writeFileSync(node_28, node_contents_28, "utf8");

const node_29 = path.resolve(baseDirectory, ".", "src", "app", "styles", "framework.css");
const node_contents_29 = "html {\n    background-color: #E0E0E0;\n    font-family: Roboto;\n    font-size: 12px;\n}\ninput,button,textarea,select {\n    width: 100%;\n    font-family: Roboto;\n    font-size: 12px;\n    cursor: pointer;\n}\nhr {\n    border: 0px solid black;\n    border-top: 1px solid black;\n}\nhr,h1,h2,h3,h4,h5,h6 {\n    padding: 0;\n    margin: 0;\n}\n\n.margin_0 { margin: 0px; }\n.margin_1 { margin: 3px; }\n.margin_2 { margin: 6px; }\n.margin_3 { margin: 12px; }\n.margin_4 { margin: 20px; }\n\n.margin_vertical_0 { margin-top: 0px; margin-bottom: 0px; }\n.margin_vertical_1 { margin-top: 3px; margin-bottom: 3px; }\n.margin_vertical_2 { margin-top: 6px; margin-bottom: 6px; }\n.margin_vertical_3 { margin-top: 12px; margin-bottom: 12px; }\n.margin_vertical_4 { margin-top: 20px; margin-bottom: 20px; }\n\n.margin_horizontal_0 { margin-top: 0px; margin-bottom: 0px; }\n.margin_horizontal_1 { margin-top: 3px; margin-bottom: 3px; }\n.margin_horizontal_2 { margin-top: 6px; margin-bottom: 6px; }\n.margin_horizontal_3 { margin-top: 12px; margin-bottom: 12px; }\n.margin_horizontal_4 { margin-top: 20px; margin-bottom: 20px; }\n\n.margin_top_0 { margin-top: 0px; }\n.margin_top_1 { margin-top: 3px; }\n.margin_top_2 { margin-top: 6px; }\n.margin_top_3 { margin-top: 12px; }\n.margin_top_4 { margin-top: 20px; }\n\n.margin_bottom_0 { margin-bottom: 0px; }\n.margin_bottom_1 { margin-bottom: 3px; }\n.margin_bottom_2 { margin-bottom: 6px; }\n.margin_bottom_3 { margin-bottom: 12px; }\n.margin_bottom_4 { margin-bottom: 20px; }\n\n.margin_left_0 { margin-left: 0px; }\n.margin_left_1 { margin-left: 3px; }\n.margin_left_2 { margin-left: 6px; }\n.margin_left_3 { margin-left: 12px; }\n.margin_left_4 { margin-left: 20px; }\n\n.margin_right_0 { margin-right: 0px; }\n.margin_right_1 { margin-right: 3px; }\n.margin_right_2 { margin-right: 6px; }\n.margin_right_3 { margin-right: 12px; }\n.margin_right_4 { margin-right: 20px; }\n\n.padding_0 { padding: 0px; }\n.padding_1 { padding: 3px; }\n.padding_2 { padding: 6px; }\n.padding_3 { padding: 12px; }\n.padding_4 { padding: 20px; }\n\n.padding_vertical_0 { padding-top: 0px; padding-bottom: 0px; }\n.padding_vertical_1 { padding-top: 3px; padding-bottom: 3px; }\n.padding_vertical_2 { padding-top: 6px; padding-bottom: 6px; }\n.padding_vertical_3 { padding-top: 12px; padding-bottom: 12px; }\n.padding_vertical_4 { padding-top: 20px; padding-bottom: 20px; }\n\n.padding_horizontal_0 { padding-left: 0px; padding-right: 0px; }\n.padding_horizontal_1 { padding-left: 3px; padding-right: 3px; }\n.padding_horizontal_2 { padding-left: 6px; padding-right: 6px; }\n.padding_horizontal_3 { padding-left: 12px; padding-right: 12px; }\n.padding_horizontal_4 { padding-left: 20px; padding-right: 20px; }\n\n.padding_top_0 { padding-top: 0px; }\n.padding_top_1 { padding-top: 3px; }\n.padding_top_2 { padding-top: 6px; }\n.padding_top_3 { padding-top: 12px; }\n.padding_top_4 { padding-top: 20px; }\n\n.padding_bottom_0 { padding-bottom: 0px; }\n.padding_bottom_1 { padding-bottom: 3px; }\n.padding_bottom_2 { padding-bottom: 6px; }\n.padding_bottom_3 { padding-bottom: 12px; }\n.padding_bottom_4 { padding-bottom: 20px; }\n\n.padding_left_0 { padding-left: 0px; }\n.padding_left_1 { padding-left: 3px; }\n.padding_left_2 { padding-left: 6px; }\n.padding_left_3 { padding-left: 12px; }\n.padding_left_4 { padding-left: 20px; }\n\n.padding_right_0 { padding-right: 0px; }\n.padding_right_1 { padding-right: 3px; }\n.padding_right_2 { padding-right: 6px; }\n.padding_right_3 { padding-right: 12px; }\n.padding_right_4 { padding-right: 20px; }\n\n.text_align_right { text-align: right; }\n.text_align_center { text-align: center; }\n.text_align_left { text-align: left; }\n\n.text_decoration_underline { text-decoration: underline; }\n\n.cursor_pointer { cursor: pointer; }\n\n.width_100x100 { width: 100%; }\n.width_auto { width: auto; }\n.width_1x100 { width: 1%; }\n\n.AppLogo { width: 30px; height: 30px; }\n\n.main_contents_container { display: block; width: 100%; text-align: center; resize: vertical; }\n.main_contents { display: inline-block; width: 100%; text-align: left; }\n\n.visibility_hidden { visibility: hidden; }\n\n.font_weight_bold { font-weight: bold; }\n\n.font_family_monospace { font-family: monospace; }\n\n.display_none { display: none; }\n.display_block { display: block; }\n.display_inline_block { display: inline-block; }\n.display_table { display: table; border-collapse: collapse; width: 100%; }\n.display_table_row { display: table-row; }\n.display_table_cell { display: table-cell; }\n\n.overflow_scroll { overflow: scroll; }\n.overflow_x_scroll { overflow-x: scroll; }\n.overflow_y_scroll { overflow-y: scroll; }\n\n.no_break_line { white-space: nowrap; }\n\n.link_text { color: blue; }\n\nli.no_margin { margin-left: 0px; }\n\n.min_width_25px { min-width: 25px; }\n\n.vertical_align_top { vertical-align: top; }\n.vertical_align_middle { vertical-align: middle; }\n.vertical_align_bottom { vertical-align: bottom; }";
fs.writeFileSync(node_29, node_contents_29, "utf8");

const node_30 = path.resolve(baseDirectory, ".", "src", "app", "styles", "reset.css");
const node_contents_30 = "html,body {\n    padding: 0px;\n    margin: 0px;\n}\n* {\n    box-sizing: border-box;\n}\ntable {\n    border-collapse: collapse;\n}\n\nul, ol, li {\n    list-style-type: none;\n    padding: 0;\n    margin: 0;\n}\nli {\n    margin-left: 6px;\n    padding-left: 0px;\n}\n";
fs.writeFileSync(node_30, node_contents_30, "utf8");

const node_31 = path.resolve(baseDirectory, ".", "src", "app", "styles", "theme.css");
const node_contents_31 = "input, textarea, select, button { border-radius: 0pt; padding: 3px; border: 1px solid #333; min-width: 30px; }\n\n.main_contents_container {  }\n\n.main_contents { max-width: 680px; border: 1px solid black; background-color: #FFF; }\n\n.remarked_text { border: 1px solid #333; padding: 10px; background-color: #AADDAA; }\n\n.long_word { word-break: break-all; word-wrap: nowrap; }\n\n.info_group { border: 1px solid #333; }\n\n.default_button { }\n.default_button.selected { border: 2px solid #222; background-color: #333; color: white; }\n\n.success_button { border: 1px solid #333; border-radius: 0pt; background-color: #AADDAA; }\n.success_button.selected { border: 1px solid rgb(5, 133, 5); border-radius: 0pt; background-color: #275227; color: white; }\n\n.danger_button { border: 1px solid #333; border-radius: 0pt; background-color: #DDAAAA; }\n\n.font_size_small { font-size: 10px; }\n\n.small_button { text-align: center; padding: 0px; margin: 0px; display: inline-block; }\n\n.default_row { background-color: #FFFFFF; }\n\n.remarked_row { background-color: #D0D0D0; }\n.remarked_row:hover { background-color: #DDDDDD; }\n\n.remarked_row.secondary { background-color: #EBEBEB; }\n.remarked_row.secondary:hover { background-color: #EFEFEF; }\n\n.remarked_row > td { border-bottom: 2px dotted #FFFFFF; }\n\n.BigMenuSquaresList {}\n\n.BigMenuSquaresList > li { width: 90px; height: 90px; border: 1px solid #333; display: inline-block; font-size: 10px; text-align: center; padding-top: 25px; background-color: #D0D0D0; cursor: pointer; }\n\n.BigMenuSquaresList > li:hover { background-color: #DDDDDD; }\n\n.text_style_as_two { color: #333; }\n\n.text_style_as_three { color: #888; }\n\n.form_item { }\n\n.calendar_cell { padding-bottom: 2px; }\n.calendar_cell_content { border: 1px solid #333; padding: 2px; cursor: pointer; width: 100%; display: inline-block; text-align: center; }\n.calendar_cell_content:hover { }\n.calendar_cell.selected { }\n.calendar_cell.selected > .calendar_cell_content { background-color: #333; color: white; }\n\n.selectable_reference { display: inline-block; cursor: pointer; color: blue; text-align: center; min-width: 20px; min-height:20px; text-decoration: underline; border: 1px solid blue; border-radius: 0px; background-color: blue; color: white; }\n.selectable_reference.selected { background-color: white; color: blue; }\n\n.border_left_marked { border-left: 2px solid #CCC; }\n\n.form_control_input { border: 1px solid #333; border-radius: 0pt; color: #666; padding: 3px; }\n.image_preview_container { display: block; text-align: center; min-height: 205px; overflow-x: scroll; position: relative; overflow-x: scroll; }\n.image_preview_wrapper { display: inline-block; position: absolute; min-height: 180px; max-height: 180px; top: 0; left: 0; bottom: auto; right: auto; padding-top: 5px; padding-bottom: 5px;}\n.image_preview { display: inline-block; width: auto; max-height: 180px; border: 1px dashed #666; }\n\n.form_control_input.textarea_input { resize: vertical; min-height: 70px; }";
fs.writeFileSync(node_31, node_contents_31, "utf8");

const node_32 = path.resolve(baseDirectory, ".", "src", "app", "test.html");
const node_contents_32 = "";
fs.writeFileSync(node_32, node_contents_32, "utf8");

const node_33 = path.resolve(baseDirectory, ".", "src", "app.js");
const node_contents_33 = "const fs = require(\"fs\");\nconst url = require(\"url\");\nconst path = require(\"path\");\n\nconst staticPath = __dirname + \"/app\";\nconst dispatchStaticResources = function(request, response) {\n    const parsedURL = url.parse(request.url, true);\n    let relativePath = parsedURL.path.replace(\"/app\", \"\");\n    if ((relativePath === \"\") || (relativePath === \"/\")) {\n        relativePath = \"/index.html\";\n    }\n    if ((relativePath.indexOf(\"..\") !== -1) && (relativePath.indexOf(\"&\") !== -1)) {\n        response.setHeader(\"Content-type\", \"text/plain\");\n        response.write(\"The expression '..' and '&' are never allowed for static requests.\");\n        return response.end();\n    }\n    const targetPath = staticPath + relativePath;\n    if(targetPath.startsWith(\"\")) {\n        \n    }\n    console.log(\"Requested file: \" + targetPath);\n    if(targetPath.endsWith(\".json\")) {\n        response.setHeader(\"Content-type\", \"application/json\");\n    }\n    const stream = fs.createReadStream(targetPath);\n    stream.on(\"error\", function () {\n        response.setHeader(\"Content-type\", \"text/plain\");\n        response.write(\"The requested file was not found.\");\n        return response.end();\n    });\n    return stream.pipe(response);\n};\n\nmodule.exports = (function () {\n    try {\n        return new Promise(function(ok) {\n            const server = require(\"http\").createServer(dispatchStaticResources);\n            const settings = require(__dirname + \"/security/settings.json\");\n            server.listen(settings.APPLICATION_PORT, function() {\n                console.log(\"App listening on:\");\n                console.log(\"  » \" + settings.SERVER_PROTOCOL + \"://\" + settings.SERVER_HOST + \":\" + settings.APPLICATION_PORT);\n                return ok({ server, settings, directory: path.resolve(__dirname + \"/..\") });\n            });\n        });\n    } catch (error) {\n        console.log(\"Error on start:\", error.name, error.message, error.stack);\n        return error;\n    }\n})();";
fs.writeFileSync(node_33, node_contents_33, "utf8");

const node_34 = path.resolve(baseDirectory, ".", "src", "classes");
fs.mkdirSync(node_34);

const node_35 = path.resolve(baseDirectory, ".", "src", "classes", "Environment.js");
const node_contents_35 = "const Utils = require(__dirname + \"/Utils.js\");\n\nclass Environment {\n\n    constructor(Database, Server, Auth, ChatSocket, metadata, settings) {\n        try {\n            this.utils = Utils;\n            this.utils.setEnvironment(this);\n            this.database = new Database(this);\n            this.server = new Server(this);\n            this.auth = new Auth(this);\n            this.chatSocket = new ChatSocket(this);\n            this.metadata = metadata;\n            this.settings = settings;\n        } catch(error) {\n            Utils.debugError(\"Environment.constructor\", error);\n        }\n    }\n    \n    async start() {\n        try {\n            await this.auth.start();\n            await this.database.start();\n            await this.server.start();\n            await this.chatSocket.start();\n            return this;\n        } catch(error) {\n            Utils.debugError(\"Environment.start\", error);\n        }\n    }\n\n}\n\nmodule.exports = Environment;";
fs.writeFileSync(node_35, node_contents_35, "utf8");

const node_36 = path.resolve(baseDirectory, ".", "src", "classes", "Utils.js");
const node_contents_36 = "const fsOriginal = require(\"fs\");\nconst fs = fsOriginal.promises;\nconst path = require(\"path\");\nconst DEFAULT_ALPHABET = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\".split(\"\");\n\nclass Utils {\n\n    static get fsOriginal() {\n        return fsOriginal;\n    }\n\n    static get fs() {\n        return fs;\n    }\n\n    static setEnvironment(environment) {\n        this.environment = environment;\n    }\n\n    static parseURL(url) {\n        return require(\"url\").parse(url);\n    }\n\n    static getBaseURL() {\n        return `${this.environment.settings.SERVER_PROTOCOL}://${this.environment.settings.SERVER_HOST}:${this.environment.settings.SERVER_PORT}`;\n    }\n\n    static getResponsePrototype() {\n        return {\n            ...this.environment.metadata.RESPONSE_PROTOTYPE,\n            app: this.environment.metadata.APPLICATION_NAME,\n            version: this.environment.metadata.APPLICATION_VERSION,\n        };\n    }\n\n    static formatResponse(data, publicParameters) {\n        return {\n            status: \"success\",\n            ...this.getResponsePrototype(),\n            project: publicParameters ? publicParameters.project : undefined,\n            data\n        };\n    }\n    \n    static debug(...args) {\n        console.log(\"[DEBUG]\", ...args);\n    }\n\n    static formatErrorResponse(error) {\n        return {\n            status: \"error\",\n            ...this.getResponsePrototype(),\n            error\n        };\n    }\n\n    static noop() {}\n\n    static log(...args) {\n        console.log(\"[LOG]    \", ...args);\n    }\n\n    static trace(id) {\n        console.log(\"[TRACE]   \" + id);\n    }\n\n    static debugRequest(request) {\n        console.log(\"[REQUEST] Request «\" + request.method + \" \" + request.url + \"» from «\" + JSON.stringify(request.headers, null, 2) + \"»\");\n    }\n\n    static debugError(id, error, mustPropagate = false) {\n        try {\n            console.log(\"[ERROR] Error on «\" + id + \"»:\", error.name, error.message, error.stack);\n        } catch(error2) {\n            console.log(error);\n        }\n        if (mustPropagate) {\n            throw error;\n        }\n    }\n\n    static debugSuccess(id) {\n        console.log(\"[SUCCESS] \" + id);\n    }\n\n    static resolve(...args) {\n        return path.resolve(...args);\n    }\n\n    static resolveFromSrc(...args) {\n        return path.resolve(this.environment.settings.PROJECT_SRC, ...args);\n    }\n\n    static async hydrateJSON(file) {\n        try {\n            const filePath = path.resolve(file);\n            const fileContents = await fs.readFile(filePath, \"utf8\");\n            const data = JSON.parse(fileContents);\n            return data;\n        } catch (error) {\n            this.debugError(\"Utils.hydrateJSON\", error, true);\n        }\n    }\n\n    static async dehydrateJSON(file, data, beautify = false) {\n        try {\n            const filePath = path.resolve(file);\n            const dataJson = beautify ? JSON.stringify(data, null, 2) : JSON.stringify(data);\n            await fs.writeFile(filePath, dataJson);\n            return true;\n        } catch (error) {\n            this.debugError(\"Utils.dehydrateJSON\", error, true);\n        }\n    }\n\n    static async fileExists(file, silenced = false) {\n        try {\n            const filePath = path.resolve(file);\n            await fs.open(filePath);\n            return true;\n        } catch (error) {\n            if (error.message.startsWith(\"ENOENT: no such file or directory\")) {\n                return false;\n            }\n            this.debugError(\"Utils.fileExists\", error, true);\n        }\n    }\n\n    static async createFile(file, contents, encoding = \"utf8\") {\n        try {\n            const filePath = path.resolve(file);\n            await fs.writeFile(filePath, contents, encoding);\n        } catch (error) {\n            this.debugError(\"Utils.createFile\", error, true);\n        }\n    }\n\n    static async copyFile(origin, destination) {\n        try {\n            const filePathOrigin = path.resolve(origin);\n            const filePathDestination = path.resolve(destination);\n            // this.dieStringify( [ filePathOrigin, filePathDestination ] );\n            const fileContentsOrigin = await fs.readFile(filePathOrigin);\n            await fs.writeFile(filePathDestination, fileContentsOrigin, \"utf8\");\n        } catch (error) {\n            this.debugError(\"Utils.copyFile\", error, true);\n        }\n    }\n\n    static async createDirectory(directory) {\n        try {\n            const directoryPath = path.resolve(directory);\n            await fs.mkdir(directoryPath);\n        } catch(error) {\n            this.debugError(\"Utils.createDirectory\", error, true);\n        }\n    }\n\n    static async deleteDirectory(directory, recursively = false) {\n        try {\n            if(recursively) {\n                const directoryPath = path.resolve(directory);\n                await fs.rmdir(directoryPath, { recursive: true });\n            } else {\n                const directoryPath = path.resolve(directory);\n                await fs.rmdir(directoryPath);\n            }\n        } catch(error) {\n            this.debugError(\"Utils.deleteDirectory\", error, true);\n        }\n    }\n\n    static async deleteFile(file) {\n        try {\n            const filePath = path.resolve(file);\n            await fs.unlink(filePath);\n        } catch (error) {\n            this.debugError(\"Utils.deleteFile\", error, true);\n        }\n    }\n\n    static async listDirectory(directory) {\n        try {\n            const directoryPath = path.resolve(directory);\n            return await fs.readdir(directoryPath);\n        } catch(error) {\n            this.debugError(\"Utils.listDirectory\", error, true);\n        }\n    }\n\n    static generateRandomString(len, alphabet = DEFAULT_ALPHABET) {\n        let out = \"\";\n        for (let index = 0; index < len; index++) {\n            const char = alphabet[Math.floor(Math.random() * alphabet.length)];\n            out += char;\n        }\n        return out;\n    }\n\n    static padLeft(text, len, ch = \"0\") {\n        let out = \"\" + text;\n        while(out.length < len) {\n            out = ch + out;\n        }\n        return out;\n    }\n    \n    static fromDateToString(date, untilSeconds = false) {\n        if (untilSeconds) {\n            return `${this.padLeft(date.getFullYear(), 4, \"0\")\n                }/${this.padLeft(date.getMonth() + 1, 2, \"0\")\n                }/${this.padLeft(date.getDate(), 2, \"0\")\n                } ${this.padLeft(date.getHours(), 2, \"0\")\n                }:${this.padLeft(date.getMinutes(), 2, \"0\")\n                }:${this.padLeft(date.getSeconds(), 2, \"0\")\n                }.${this.padLeft(date.getMilliseconds(), 3, \"0\")}`;\n        } else {\n            return `${this.padLeft(date.getFullYear(), 4, \"0\")\n                }/${this.padLeft(date.getMonth() + 1, 2, \"0\")\n                }/${this.padLeft(date.getDate(), 2, \"0\")\n                }`;\n        }\n    }\n\n    static encrypt(text) {\n        return text;\n    }\n\n    static decrypt(text) {\n        return text;\n    }\n\n    static die(...args) {\n        console.log(...args);\n        process.exit(0);\n    }\n\n    static dieStringify(...args) {\n        console.log(...args.map(arg => JSON.stringify(arg, null, 2)));\n        process.exit(0);\n    }\n\n}\n\nclass Check {\n\n    static equals(x, y) {\n        return x === y;\n    }\n\n    static isOneOf(x, y) {\n        return y.indexOf(x) !== -1;\n    }\n\n    static isBoolean(x) {\n        return typeof x === \"boolean\";\n    }\n\n    static isString(x) {\n        return typeof x === \"string\";\n    }\n\n    static isNumber(x) {\n        return typeof x === \"number\";\n    }\n\n    static isInteger(x) {\n        return typeof x === \"number\" && Number.isInteger(x);\n    }\n\n    static isDate(x) {\n        return x instanceof Date;\n    }\n\n    static isDateString(x) {\n        return typeof x === \"string\" && x.match(/[0-9][0-9][0-9][0-9]\\/[0-9][0-9]\\/[0-9][0-9]/g);\n    }\n\n    static isTimeString(x) {\n        return typeof x === \"string\" && x.match(/[0-9][0-9][0-9][0-9]\\/[0-9][0-9]\\/[0-9][0-9] [0-9][0-9]:[0-9][0-9]:[0-9][0-9]/g);\n    }\n\n    static isFunction(x) {\n        return typeof x === \"function\";\n    }\n\n    static isUndefined(x) {\n        return typeof x === \"undefined\";\n    }\n\n    static isObject(x) {\n        return typeof x === \"object\";\n    }\n\n    static isArray(x) {\n        return Array.isArray(x);\n    }\n\n    static isStringNotContaining(x, ...args) {\n        if (typeof x !== \"string\") {\n            return false;\n        }\n        for (let i = 0; i < args.length; i++) {\n            if (x.indexOf(args[i]) !== -1) {\n                return false; a\n            }\n        }\n        return true;\n    }\n\n    static isStringMatchingRegex(x, regex) {\n        if (typeof x !== \"string\") {\n            return false;\n        }\n        return x.match(regex);\n    }\n\n    static hasLengthOf(x, len) {\n        if ((typeof x !== \"string\") && (!Array.isArray(x))) {\n            return false;\n        }\n        return x.length === len;\n    }\n\n    static that(target) {\n        return new this(target);\n    }\n\n    constructor(target) {\n        this.target = target;\n    }\n\n    equals(x) {\n        return this.target === x;\n    }\n\n    isOneOf(x) {\n        return x.indexOf(this.target) !== -1;\n    }\n\n    itsProperty(propertyPath, defaultValue = undefined) {\n        let targetProperty = this.target;\n        for(let indexProperty = 0; indexProperty < propertyPath.length; indexProperty++) {\n            const propertyId = propertyPath[indexProperty];\n            if([\"object\", \"string\", \"function\"].indexOf(typeof targetProperty) === -1) {\n                return new this.constructor(defaultValue);\n            }\n            targetProperty = targetProperty[propertyId];\n        }\n        return new this.constructor(targetProperty);\n    }\n\n    isBoolean() {\n        return typeof this.target === \"boolean\";\n    }\n\n    isString() {\n        return typeof this.target === \"string\";\n    }\n\n    isNumber() {\n        return typeof this.target === \"number\";\n    }\n\n    isInteger() {\n        return typeof this.target === \"number\" && Number.isInteger(this.target);\n    }\n\n    isDate() {\n        return this.target instanceof Date;\n    }\n\n    isDateString() {\n        return typeof this.target === \"string\" && this.target.match(/[0-9][0-9][0-9][0-9]\\/[0-9][0-9]\\/[0-9][0-9]/g);\n    }\n\n    isTimeString() {\n        return typeof this.target === \"string\" && this.target.match(/[0-9][0-9][0-9][0-9]\\/[0-9][0-9]\\/[0-9][0-9] [0-9][0-9]:[0-9][0-9]:[0-9][0-9]/g);\n    }\n\n    isFunction() {\n        return typeof this.target === \"function\";\n    }\n\n    isUndefined() {\n        return typeof this.target === \"undefined\";\n    }\n\n    isObject() {\n        return typeof this.target === \"object\";\n    }\n\n    isArray() {\n        return Array.isArray(this.target);\n    }\n\n    isStringNotContaining(...args) {\n        if(typeof this.target !== \"string\") {\n            return false;\n        }\n        for(let i=0; i<args.length; i++) {\n            if(this.target.indexOf(args[i]) !== -1) {\n                return false;a\n            }\n        }\n        return true;\n    }\n\n    isStringMatchingRegex(regex) {\n        if(typeof this.target !== \"string\") {\n            return false;\n        }\n        return this.target.match(regex);\n    }\n\n    hasLengthOf(len) {\n        if((typeof this.target !== \"string\") && (!Array.isArray(this.target))) {\n            return false;\n        }\n        return this.target.length === len;\n    }\n    \n    async followsSchemaOf(projectData, table, tableData, operation, project, sessionToken, authentication, environment) {\n        try {\n            const schemaColumns = projectData.schema.tables[table].columns;\n            const allColumns = Object.keys(schemaColumns);\n            CheckingColumns:\n            for (let columnIndex = 0; columnIndex < allColumns.length; columnIndex++) {\n                const columnId = allColumns[columnIndex];\n                const schemaColumn = schemaColumns[columnId].attributes;\n                let isNullified = false;\n                IsSelfUserId:\n                if (schemaColumn.isSelfUserId) {\n                    this.target[columnId] = authentication.user.id;\n                    continue CheckingColumns;\n                }\n                HasDefaultCheck:\n                if (schemaColumn.hasDefault) {\n                    if ((!(columnId in this.target)) || (this.target[columnId] === null) || (typeof this.target[columnId] === \"undefined\")) {\n                        this.target[columnId] = schemaColumn.hasDefault;\n                        isNullified = false;\n                    }\n                }\n                IsSubtypeOnCreated:\n                if (schemaColumn.isType === \"date\") {\n                    if ((operation === \"insert\") && (schemaColumn.isSubtype === \"on_created\")) {\n                        this.target[columnId] = Utils.fromDateToString(new Date(), false);\n                        isNullified = false;\n                    } else if ((operation === \"insert\") && (schemaColumn.isSubtype === \"on_updated\")) {\n                        this.target[columnId] = Utils.fromDateToString(new Date(), false);\n                        isNullified = false;\n                    } else if ((operation === \"update\") && (schemaColumn.isSubtype === \"on_updated\")) {\n                        this.target[columnId] = Utils.fromDateToString(new Date(), false);\n                        isNullified = false;\n                    }\n                }\n                IsSubtypeOnUpdated:\n                if (schemaColumn.isType === \"time\") {\n                    if ((operation === \"insert\") && (schemaColumn.isSubtype === \"on_created\")) {\n                        this.target[columnId] = Utils.fromDateToString(new Date(), true);\n                        isNullified = false;\n                    } else if ((operation === \"insert\") && (schemaColumn.isSubtype === \"on_updated\")) {\n                        this.target[columnId] = Utils.fromDateToString(new Date(), true);\n                        isNullified = false;\n                    } else if ((operation === \"update\") && (schemaColumn.isSubtype === \"on_updated\")) {\n                        this.target[columnId] = Utils.fromDateToString(new Date(), true);\n                        isNullified = false;\n                    }\n                }\n                IsNullableCheck:\n                if (!schemaColumn.isNullable) {\n                    if (!(columnId in this.target)) {\n                        throw new Error(\"Parameter «\" + table + \".\" + columnId + \"» cannot be empty [Schema constraints error nº 0002]\");\n                    } else if (this.target[columnId] === null) {\n                        throw new Error(\"Parameter «\" + table + \".\" + columnId + \"» cannot be null [Schema constraints error nº 0003]\");\n                    } else if (typeof this.target[columnId] === \"undefined\") {\n                        throw new Error(\"Parameter «\" + table + \".\" + columnId + \"» cannot be undefined [Schema constraints error nº 0004]\");\n                    }\n                } else {\n                    if (!(columnId in this.target)) {\n                        isNullified = true;\n                    } else if (this.target[columnId] === null) {\n                        isNullified = true;\n                    } else if (typeof this.target[columnId] === \"undefined\") {\n                        isNullified = true;\n                    }\n                }\n                IsUniqueCheck:\n                if(schemaColumn.isUnique === true) {\n                    if (isNullified) {\n                        break IsUniqueCheck;\n                    }\n                    for(let rowId in tableData) {\n                        const row = tableData[rowId];\n                        if(row[columnId] === this.target[columnId]) {\n                            if(row.id && (row.id === this.target.id)) {\n                                // @OK!\n                            } else {\n                                throw new Error(\"Parameter «\" + table + \".\" + columnId + \"» is duplicated in «\" + table + \"» table and it must be unique [Schema constraints error nº 0005]\");\n                            }\n                        }\n                    }\n                }\n                IsTypeCheck:\n                if(schemaColumn.isType) {\n                    if(isNullified) {\n                        break IsTypeCheck;\n                    }\n                    switch (schemaColumn.isType) {\n                        case \"text\": \n                        case \"string\": {\n                            if(!this.constructor.isString(this.target[columnId])) {\n                                console.log(this.target, columnId);\n                                throw new Error(\"Parameter «\" + table + \".\" + columnId + \"» must be a string [Schema constraints error nº 0006]\");\n                            }\n                            break;\n                        }\n                        case \"number\": {\n\n                            this.target[columnId] = typeof this.target[columnId] === \"string\" ? parseFloat(this.target[columnId]) : this.target[columnId];\n                            if(!this.constructor.isNumber(this.target[columnId])) {\n                                throw new Error(\"Parameter «\" + table + \".\" + columnId + \"» must be a number [Schema constraints error nº 0007]\");\n                            }\n                            break;\n                        }\n                        case \"integer\": {\n                            this.target[columnId] = typeof this.target[columnId] === \"string\" ? parseInt(this.target[columnId]) : this.target[columnId];\n                            if(!this.constructor.isInteger(this.target[columnId])) {\n                                throw new Error(\"Parameter «\" + table + \".\" + columnId + \"» must be an integer [Schema constraints error nº 0008]\");\n                            }\n                            break;\n                        }\n                        case \"date\": {\n                            if (!this.constructor.isDateString(this.target[columnId])) {\n                                console.log(this.target[columnId]);\n                                throw new Error(\"Parameter «\" + table + \".\" + columnId + \"» must be a date (as string) [Schema constraints error nº 0009]\");\n                            }\n                            break;\n                        }\n                        case \"time\": {\n                            if (!this.constructor.isTimeString(this.target[columnId])) {\n                                console.log(this.target[columnId]);\n                                throw new Error(\"Parameter «\" + table + \".\" + columnId + \"» must be a time (as string) [Schema constraints error nº 0010]\");\n                            }\n                            break;\n                        }\n                        case \"object\": {\n                            const referencedTable = schemaColumn.isReferenceOf;\n                            const referencedTableSchema = projectData.schema.tables[referencedTable];\n                            // @STEP: A) if table is external table:\n                            if(typeof referencedTableSchema.attributes.isExternalizedBy === \"object\") {\n                                const { host: externalHost, project: externalProject, table: externalTable } = referencedTableSchema.attributes.isExternalizedBy;\n                                const temporaryResponse = await environment.server.Requester.request(\"GET\", externalHost, {\n                                    project: externalProject,\n                                    operation: \"select\",\n                                    table: externalTable,\n                                    where: JSON.stringify([[ \"id\", \"=\", this.target[columnId] ]])\n                                }, {}, {\n                                    authorization: sessionToken\n                                }, false, false);\n                                if(temporaryResponse.response.data.items.length === 0) {\n                                    throw new Error(\"Parameter «\" + columnId + \"» does not match any external reference id from «\" + schemaColumn.isReferenceOf + \"» [Schema constraints error nº 0012.0001]\");\n                                }\n                                break;\n                            }\n                            // @STEP: B) if table is local table:\n                            const referencedDBPath = environment.utils.resolveFromSrc(\"data/projects/\" + project + \"/data/\" + schemaColumn.isReferenceOf + \".json\");\n                            const referencedDB = await environment.utils.hydrateJSON(referencedDBPath);\n                            const isValidReference = this.target[columnId] in referencedDB.data;\n                            if (!isValidReference) {\n                                throw new Error(\"Parameter «\" + columnId + \"» does not match any external reference id from «\" + schemaColumn.isReferenceOf + \"» [Schema constraints error nº 0012]\");\n                            }\n                            break;\n                        }\n                        case \"list\": {\n                            const items = Array.isArray(this.target[columnId]) ? this.target[columnId] : JSON.parse(this.target[columnId]);\n                            const referencedTable = schemaColumn.isReferenceOf;\n                            const referencedTableSchema = projectData.schema.tables[referencedTable];\n                            // @STEP: A) if table is external table:\n                            if (typeof referencedTableSchema.attributes.isExternalizedBy === \"object\") {\n                                const { host: externalHost, project: externalProject, table: externalTable } = referencedTableSchema.attributes.isExternalizedBy;\n                                const temporaryResponse = await environment.server.Requester.request(\"GET\", externalHost, {\n                                    project: externalProject,\n                                    operation: \"select\",\n                                    table: externalTable,\n                                    suboperation: \"hasIds\",\n                                    ids: items.join(\",\"),\n                                }, {}, {\n                                    authorization: sessionToken\n                                }, false, false);\n                                if (temporaryResponse.response.data.missingIds.length !== 0) {\n                                    throw new Error(\"Parameter «\" + table + \".\" + columnId + \"» misses indexes «\" + temporaryResponse.response.data.missingIds + \"» as external reference ids from «\" + schemaColumn.isReferenceOf + \"» [Schema constraints error nº 0013]\");\n                                }\n                                break;\n                            }\n                            // @STEP: B) if table is local table:\n                            const referencedDBPath = environment.utils.resolveFromSrc(\"data/projects/\" + project + \"/data/\" + schemaColumn.isReferenceOf + \".json\");\n                            const referencedDB = await environment.utils.hydrateJSON(referencedDBPath);\n                            for(let indexItem = 0; indexItem < items.length; indexItem++) {\n                                const item = items[indexItem];\n                                const isValidReference = item in referencedDB.data;\n                                if (!isValidReference) {\n                                    throw new Error(\"Parameter «\" + table + \".\" + columnId + \"» on index «\" + indexItem + \"» does not match any external reference id from «\" + schemaColumn.isReferenceOf + \"» [Schema constraints error nº 0013]\");\n                                }\n                            }\n                            break;\n                        }\n                        case \"json\": {\n                            if (!this.constructor.isString(this.target[columnId])) {\n                                throw new Error(\"Parameter «\" + table + \".\" + columnId + \"» must be a JSON (as string) [Schema constraints error nº 0014]\");\n                            }\n                            try {\n                                JSON.parse(this.target[columnId]);\n                            } catch(error) {\n                                throw new Error(\"Parameter «\" + table + \".\" + columnId + \"» must be a valid JSON [Schema constraints error nº 0015]\");\n                            }\n                            break;\n                        }\n                        case \"boolean\": {\n                            if (!this.constructor.isBoolean(this.target[columnId])) {\n                                throw new Error(\"Parameter «\" + table + \".\" + columnId + \"» must be a boolean [Schema constraints error nº 0016]\");\n                            }\n                            break;\n                        }\n                        case \"file\": {\n                            if (!this.constructor.isString(this.target[columnId])) {\n                                throw new Error(\"Parameter «\" + table + \".\" + columnId + \"» must be a string [Schema constraints error nº 0018]\");\n                            }\n                            break;\n                        }\n                        case \"image\": {\n                            if (!this.constructor.isString(this.target[columnId])) {\n                                throw new Error(\"Parameter «\" + table + \".\" + columnId + \"» must be a string [Schema constraints error nº 0019]\");\n                            }\n                            break;\n                        }\n                        case \"option\": {\n                            if (!this.constructor.isString(this.target[columnId])) {\n                                throw new Error(\"Parameter «\" + table + \".\" + columnId + \"» must be a string [Schema constraints error nº 0020]\");\n                            }\n                            break;\n                        }\n                        default: {\n                            throw new Error(\"Schema type on «\" + table + \".\" + columnId + \"» is not identified [Schema constraints error nº 4001]\");\n                        }\n                    }\n                }\n                IsEncryptedCheck:\n                if (schemaColumn.isEncrypted) {\n                    if (isNullified) {\n                        break IsEncryptedCheck;\n                    }\n                    this.target[columnId] = await environment.utils.encrypt(this.target[columnId]);\n                }\n                IsReferenceOfCheck:\n                if (schemaColumn.isReferenceOf) {\n                    if (isNullified) {\n                        break IsReferenceOfCheck;\n                    }\n                    if(schemaColumn.isType === \"object\") {\n                        break IsReferenceOfCheck;\n                    }\n                    if (schemaColumn.isType === \"list\") {\n                        break IsReferenceOfCheck;\n                    }\n                    const referencedDBPath = environment.utils.resolveFromSrc(\"data/projects/\" + project + \"/data/\" + schemaColumn.isReferenceOf + \".json\");\n                    const referencedDB = await environment.utils.hydrateJSON(referencedDBPath);\n                    const isValidReference = this.target[columnId] in referencedDB.data;\n                    if(!isValidReference) {\n                        throw new Error(\"Parameter «\" + columnId + \"» does not match any external reference id from «\" + schemaColumn.isReferenceOf + \"» [Schema constraints error nº 0018]\");\n                    }\n                }\n                HasMinimumCheck:\n                if (schemaColumn.hasMinimum) {\n                    if (isNullified) {\n                        break HasMinimumCheck;\n                    }\n                    if(schemaColumn.isType === \"string\") {\n                        if(this.target[columnId].length < schemaColumn.hasMinimum) {\n                            throw new Error(\"Parameter «\" + table + \".\" + columnId + \"» must have minimum «\" + schemaColumn.hasMinimum + \"» characters [Schema constraints error nº 0019]\");\n                        }\n                    } else if ((schemaColumn.isType === \"number\") || (schemaColumn.isType === \"integer\")) {\n                        if (this.target[columnId] < schemaColumn.hasMinimum) {\n                            throw new Error(\"Parameter «\" + table + \".\" + columnId + \"» must be minimum «\" + schemaColumn.hasMinimum + \"» [Schema constraints error nº 0020]\");\n                        }\n                    }\n                }\n                HasMaximumCheck:\n                if (schemaColumn.hasMaximum) {\n                    if (isNullified) {\n                        break HasMaximumCheck;\n                    }\n                    if (schemaColumn.isType === \"string\") {\n                        if (this.target[columnId].length > schemaColumn.hasMaximum) {\n                            throw new Error(\"Parameter «\" + table + \".\" + columnId + \"» must have minimum «\" + schemaColumn.hasMaximum + \"» characters [Schema constraints error nº 0021]\");\n                        }\n                    } else if ((schemaColumn.isType === \"number\") || (schemaColumn.isType === \"integer\")) {\n                        if (this.target[columnId] > schemaColumn.hasMaximum) {\n                            throw new Error(\"Parameter «\" + table + \".\" + columnId + \"» must be maximum «\" + schemaColumn.hasMaximum + \"» [Schema constraints error nº 0022]\");\n                        }\n                    }\n                }\n                HasPatternCheck:\n                if (schemaColumn.hasPattern) {\n                    if (isNullified) {\n                        break HasPatternCheck;\n                    }\n                    if (schemaColumn.isType === \"string\" && typeof this.target[columnId] === \"string\") {\n                        if (this.target[columnId].match(new RegExp(schemaColumn.hasPattern, \"g\"))) {\n                            if(schemaColumn.hasPatternErrorMessage) {\n                                throw schemaColumn.hasPatternErrorMessage;\n                            }\n                            throw new Error(\"Parameter «\" + table + \".\" + columnId + \"» must follow pattern «\" + schemaColumn.hasPattern + \"» [Schema constraints error nº 0023]\");\n                        }\n                    }\n                }\n            }\n            return this.target;\n        } catch (error) {\n            environment.utils.debugError(\"Check.followsSchemaOf\", error, true);\n        }\n    }\n\n}\n\nUtils.check = Check;\n\nmodule.exports = Utils;";
fs.writeFileSync(node_36, node_contents_36, "utf8");

const node_37 = path.resolve(baseDirectory, ".", "src", "classes", "auth");
fs.mkdirSync(node_37);

const node_38 = path.resolve(baseDirectory, ".", "src", "classes", "auth", "Auth.js");
const node_contents_38 = "class Auth {\n\n    constructor(environment) {\n        this.environment = environment;\n        this.environment.utils.trace(\"Auth.constructor\");\n    }\n\n    async start() {\n        try {\n            this.environment.utils.trace(\"Auth.start\");\n            this.Authentication = require(__dirname + \"/Authentication.js\");\n            this.Authenticator = require(__dirname + \"/Authenticator.js\");\n            this.Authorization = require(__dirname + \"/Authorization.js\");\n            this.Authorizator = require(__dirname + \"/Authorizator.js\");\n        } catch (error) {\n            this.environment.utils.debugError(\"Auth.create\", error);\n        }\n    }\n\n}\n\nmodule.exports = Auth;";
fs.writeFileSync(node_38, node_contents_38, "utf8");

const node_39 = path.resolve(baseDirectory, ".", "src", "classes", "auth", "Authentication.js");
const node_contents_39 = "class Authentication {\n\n    constructor(environment, project) {\n        this.environment = environment;\n        this.project = project;\n        this.credentials = undefined;\n        this.session = undefined;\n        this.user = undefined;\n        this.groups = undefined;\n        this.privileges = undefined;\n    }\n\n    setCredentials(userOrEmail, password) {\n        this.environment.utils.trace(\"Authentication.setCredentials\");\n        this.credentials = [userOrEmail, password ];\n    }\n\n    setUser(user) {\n        this.environment.utils.trace(\"Authentication.setUser\");\n        this.user = user;\n    }\n\n    setGroups(groups) {\n        this.environment.utils.trace(\"Authentication.setGroups\");\n        this.groups = groups;\n    }\n\n    setPrivileges(privileges) {\n        this.environment.utils.trace(\"Authentication.setPrivileges\");\n        this.privileges = privileges;\n    }\n\n    setSession(session) {\n        this.environment.utils.trace(\"Authentication.setSession\");\n        this.session = session;\n    }\n\n    toPlainObject() {\n        const sanitizedUser = Object.assign({}, this.user);\n        const sanitizedSession = Object.assign({}, this.session);\n        delete sanitizedUser.password;\n        delete sanitizedSession.token;\n        return {\n            project: this.project,\n            session: sanitizedSession,\n            user: sanitizedUser,\n            groups: this.groups,\n            privileges: this.privileges,\n        };\n    }\n\n}\n\nmodule.exports = Authentication;";
fs.writeFileSync(node_39, node_contents_39, "utf8");

const node_40 = path.resolve(baseDirectory, ".", "src", "classes", "auth", "Authenticator.js");
const node_contents_40 = "class Authenticator {\n\n    constructor(environment, project) {\n        this.environment = environment;\n        this.project = project;\n    }\n\n    async authenticate(token) {\n        try {\n            this.environment.utils.trace(\"Authenticator.authenticate\");\n            const authentication = new this.environment.auth.Authentication(this.environment, this.project);\n            const { projectData } = await this.environment.database.Project.initialize(this.project, \"authenticate\");\n            ////////////////////////////////\n            // 1.2.A. Respond by externalized auth system:\n            if(this.environment.utils.check.that(projectData).itsProperty([\"schema\", \"attributes\", \"isAuthenticatedBy\"]).isObject()) {\n                const { url: authURL, project: authProjectId } = projectData.schema.attributes.isAuthenticatedBy;\n                const response = await this.environment.server.Requester.request(\"GET\", authURL, {\n                    project: authProjectId,\n                    operation: \"authenticate\"\n                }, {}, {\n                    authorization: token\n                }, false, false);\n                if (response.response.status === \"error\") {\n                    throw new Error(response.response.error.message);\n                }\n                authentication.setSession(response.response.data.authentication.session);\n                authentication.setUser(response.response.data.authentication.user);\n                authentication.setGroups(response.response.data.authentication.groups);\n                authentication.setPrivileges(response.response.data.authentication.privileges);\n                return authentication;\n            }\n            ////////////////////////////////\n            // 1.2.B. Respond by self auth system:\n            const usersPath = this.environment.utils.resolveFromSrc(\"data/projects/\" + this.project + \"/data/users.json\");\n            const sessionsPath = this.environment.utils.resolveFromSrc(\"data/projects/\" + this.project + \"/data/sessions.json\");\n            const groupsPath = this.environment.utils.resolveFromSrc(\"data/projects/\" + this.project + \"/data/groups.json\");\n            const privilegesPath = this.environment.utils.resolveFromSrc(\"data/projects/\" + this.project + \"/data/privileges.json\");\n            // Sessions:\n            const sessions = await this.environment.utils.hydrateJSON(sessionsPath);\n            const matchedSessions = Object.values(sessions.data).filter(session => session.token === token);\n            if (matchedSessions.length === 0) {\n                throw new Error(\"Authentication token is not valid on authentication process\");\n            }\n            const [matchedSession] = matchedSessions;\n            // Users:\n            const users = await this.environment.utils.hydrateJSON(usersPath);\n            const matchedUsers = Object.values(users.data).filter(user => user.id === matchedSession.user);\n            if (matchedUsers.length !== 1) {\n                throw new Error(\"Session token does not correspond to any valid user\");\n            }\n            const [matchedUser] = matchedUsers;\n            // Groups:\n            const groups = await this.environment.utils.hydrateJSON(groupsPath);\n            const matchedGroups = matchedUser.groups.map(groupId => groups.data[groupId]);\n            // Privileges:\n            const privileges = await this.environment.utils.hydrateJSON(privilegesPath);\n            const matchedPrivilegesMap = matchedUser.privileges.reduce((output, privilegeId) => {\n                output[privilegeId] = privileges.data[privilegeId];\n                return output;\n            }, {});\n            matchedGroups.forEach(group => {\n                group.privileges.forEach(privilegeId => {\n                    const matchedPrivilege = privileges.data[privilegeId];\n                    matchedPrivilegesMap[privilegeId] = matchedPrivilege;\n                });\n            });\n            const matchedPrivileges = Object.values(matchedPrivilegesMap);\n            // Fill authentication:\n            authentication.setSession(matchedSession);\n            authentication.setUser(matchedUser);\n            authentication.setGroups(matchedGroups);\n            authentication.setPrivileges(matchedPrivileges);\n            // Return authentication:\n            return authentication;\n        } catch(error) {\n            this.environment.utils.debugError(\"Authenticator.authenticate\", error, true);\n        }\n    }\n\n}\n\nmodule.exports = Authenticator;";
fs.writeFileSync(node_40, node_contents_40, "utf8");

const node_41 = path.resolve(baseDirectory, ".", "src", "classes", "auth", "Authorization.js");
const node_contents_41 = "class Authorization {\n\n    constructor(environment, project, authentication) {\n        this.environment = environment;\n        this.project = project;\n        this.authentication = authentication;\n    }\n\n    isAuthorizedToSelect(operation, table, ...parameters) {\n        // @TOCUSTOMIZE:\n        return true;\n    }\n\n    isAuthorizedToInsert(operation, table, ...parameters) {\n        // @TOCUSTOMIZE:\n        return true;\n    }\n\n    isAuthorizedToUpdate(operation, table, ...parameters) {\n        // @TOCUSTOMIZE:\n        return true;\n    }\n\n    isAuthorizedToDelete(operation, table, ...parameters) {\n        // @TOCUSTOMIZE:\n        return true;\n    }\n\n    isAuthorizedToAddTable(operation, table, ...parameters) {\n        // @TOCUSTOMIZE:\n        return this.authentication.privileges.filter(privilege => privilege.name === \"to administrate\").length > 0;\n    }\n\n    isAuthorizedToAddColumn(operation, table, ...parameters) {\n        // @TOCUSTOMIZE:\n        return this.authentication.privileges.filter(privilege => privilege.name === \"to administrate\").length > 0;\n    }\n\n    isAuthorizedToAddProtector(operation, table, ...parameters) {\n        // @TOCUSTOMIZE:\n        return this.authentication.privileges.filter(privilege => privilege.name === \"to administrate\").length > 0;\n    }\n\n    isAuthorizedToUpdateTable(operation, table, ...parameters) {\n        // @TOCUSTOMIZE:\n        return this.authentication.privileges.filter(privilege => privilege.name === \"to administrate\").length > 0;\n    }\n\n    isAuthorizedToUpdateColumn(operation, table, ...parameters) {\n        // @TOCUSTOMIZE:\n        return this.authentication.privileges.filter(privilege => privilege.name === \"to administrate\").length > 0;\n    }\n\n    isAuthorizedToUpdateProtector(operation, table, ...parameters) {\n        // @TOCUSTOMIZE:\n        return this.authentication.privileges.filter(privilege => privilege.name === \"to administrate\").length > 0;\n    }\n\n    isAuthorizedToDeleteTable(operation, table, ...parameters) {\n        // @TOCUSTOMIZE:\n        return this.authentication.privileges.filter(privilege => privilege.name === \"to administrate\").length > 0;\n    }\n\n    isAuthorizedToDeleteColumn(operation, table, ...parameters) {\n        // @TOCUSTOMIZE:\n        return this.authentication.privileges.filter(privilege => privilege.name === \"to administrate\").length > 0;\n    }\n\n    isAuthorizedToDeleteProtector(operation, table, ...parameters) {\n        // @TOCUSTOMIZE:\n        return this.authentication.privileges.filter(privilege => privilege.name === \"to administrate\").length > 0;\n    }\n\n    isAuthorizedToLogin(operation, table, ...parameters) {\n        // @TOCUSTOMIZE:\n        return true;\n    }\n\n    isAuthorizedToLogout(operation, table, ...parameters) {\n        // @TOCUSTOMIZE:\n        return true;\n    }\n\n    isAuthorizedToViewSchema(operation, table, ...parameters) {\n        // @TOCUSTOMIZE:\n        return true;\n    }\n\n    isAuthorizedToViewProtectors(operation, table, ...parameters) {\n        // @TOCUSTOMIZE:\n        return true;\n    }\n\n    \n    async forOperation(operation, table, ...parameters) {\n        try {\n            this.environment.utils.trace(\"Authorization.forOperation\");\n            switch(operation) {\n                case \"select\": return this.isAuthorizedToSelect(operation, table, ...parameters);\n                case \"insert\": return this.isAuthorizedToInsert(operation, table, ...parameters);\n                case \"update\": return this.isAuthorizedToUpdate(operation, table, ...parameters);\n                case \"delete\": return this.isAuthorizedToDelete(operation, table, ...parameters);\n                case \"add-table\": return this.isAuthorizedToAddTable(operation, table, ...parameters);\n                case \"add-column\": return this.isAuthorizedToAddColumn(operation, table, ...parameters);\n                case \"add-protector\": return this.isAuthorizedToAddProtector(operation, table, ...parameters);\n                case \"update-table\": return this.isAuthorizedToUpdateTable(operation, table, ...parameters);\n                case \"update-column\": return this.isAuthorizedToUpdateColumn(operation, table, ...parameters);\n                case \"update-protector\": return this.isAuthorizedToUpdateProtector(operation, table, ...parameters);\n                case \"delete-table\": return this.isAuthorizedToDeleteTable(operation, table, ...parameters);\n                case \"delete-column\": return this.isAuthorizedToDeleteColumn(operation, table, ...parameters);\n                case \"delete-protector\": return this.isAuthorizedToDeleteProtector(operation, table, ...parameters);\n                case \"login\": return this.isAuthorizedToLogin(operation, table, ...parameters);\n                case \"logout\": return this.isAuthorizedToLogout(operation, table, ...parameters);\n                case \"view-schema\": return this.isAuthorizedToViewSchema(operation, table, ...parameters);\n                case \"view-protectors\": return this.isAuthorizedToViewProtectors(operation, table, ...parameters);\n                default: return true;\n            }\n        } catch(error) {\n            this.environment.utils.debugError(\"Authorization.forOperation\", error, true);\n        }\n    }\n}\n\nmodule.exports = Authorization;";
fs.writeFileSync(node_41, node_contents_41, "utf8");

const node_42 = path.resolve(baseDirectory, ".", "src", "classes", "auth", "Authorizator.js");
const node_contents_42 = "class Authorizator {\n\n    constructor(environment, project) {\n        this.environment = environment;\n        this.project = project;\n    }\n\n    authorize(authentication) {\n        try {\n            this.environment.utils.trace(\"Authorization.authorize\");\n            return new this.environment.auth.Authorization(this.environment, this.project, authentication);\n        } catch (error) {\n            this.environment.utils.debugError(\"AuthorizationRequest.requestAuthorizationFor\", error, true);\n        }\n    }\n\n}\n\nmodule.exports = Authorizator;";
fs.writeFileSync(node_42, node_contents_42, "utf8");

const node_43 = path.resolve(baseDirectory, ".", "src", "classes", "database");
fs.mkdirSync(node_43);

const node_44 = path.resolve(baseDirectory, ".", "src", "classes", "database", "AddColumn.js");
const node_contents_44 = "\n\nclass AddColumn {\n\n    constructor(environment) {\n        this.environment = environment;\n    }\n\n    async execute(publicParameters, privateParameters, configurations) {\n        try {\n            this.environment.utils.trace(\"AddColumn.execute\");\n            const project = publicParameters.project;\n            const authenticator = new this.environment.auth.Authenticator(this.environment, project);\n            const authentication = await authenticator.authenticate(configurations.authorization);\n            const authorizator = new this.environment.auth.Authorizator(this.environment, project);\n            const authorization = await authorizator.authorize(authentication);\n            const hasAuthorization = await authorization.forOperation(\n                publicParameters.operation\n            );\n            if (!hasAuthorization) {\n                throw new Error(\"User is not allowed to «add-column»\");\n            }\n            // @TODO: apply protectors\n            const { table, column, attributes: attributesOriginal = \"{}\", properties: propertiesOriginal = \"{}\" } = privateParameters;\n            if (!this.environment.utils.check.that(project).isStringMatchingRegex(/^[A-Za-z0-9\\.\\-\\_]+$/g)) {\n                throw new Error(\"Parameter «project» must be a non-empty string based only on letters, numbers, '.', '-' and '_' in order to «delete-row»\");\n            }\n            if (!this.environment.utils.check.that(table).isStringMatchingRegex(/^[A-Za-z0-9\\.\\-\\_]+$/g)) {\n                throw new Error(\"Parameter «table» must be a non-empty string based only on letters, numbers, '.', '-' and '_' in order to «add-column»\");\n            }\n            if (!this.environment.utils.check.that(column).isStringMatchingRegex(/^[A-Za-z0-9\\.\\-\\_]+$/g)) {\n                throw new Error(\"Parameter «column» must be a non-empty string based only on letters, numbers, '.', '-' and '_' in order to «add-column»\");\n            }\n            if (!this.environment.utils.check.that(attributesOriginal).isString()) {\n                throw new Error(\"Parameter «attributes» must be a string or omitted in order to «add-column»\");\n            }\n            if (!this.environment.utils.check.that(propertiesOriginal).isString()) {\n                throw new Error(\"Parameter «properties» must be a string or omitted in order to «add-column»\");\n            }\n            const attributes = JSON.parse(attributesOriginal);\n            const properties = JSON.parse(propertiesOriginal);\n            if (!this.environment.utils.check.that(attributes).isObject()) {\n                throw new Error(\"Parameter «attributes» must be a JSON object or omitted in order to «add-column»\");\n            }\n            if (!this.environment.utils.check.that(properties).isObject()) {\n                throw new Error(\"Parameter «properties» must be a JSON object or omitted in order to «add-column»\");\n            }\n            await this.environment.database.TransactionManager.block(project + \"/project.json\", async (unblock, unblockFailing) => {\n                try {\n                    const { projectPath, projectData } = await this.environment.database.Project.initialize(project, \"add-column\");\n                    if (!(table in projectData.schema.tables)) {\n                        throw new Error(\"Parameter «table» must exist as table in schema in order to «add-column»\");\n                    }\n                    if (column in projectData.schema.tables[table].columns) {\n                        throw new Error(\"Parameter «column» must not exist as column in schema in order to «add-column»\");\n                    }\n                    projectData.schema.tables[table].columns[column] = {\n                        attributes: Object.assign({}, this.environment.database.constructor.DEFAULT_COLUMN_ATTRIBUTES, attributes),\n                        properties: Object.assign({}, this.environment.database.constructor.DEFAULT_COLUMN_PROPERTIES, properties),\n                    };\n                    await this.environment.utils.dehydrateJSON(projectPath, projectData);\n                    unblock();\n                } catch (error) {\n                    unblockFailing(error);\n                }\n            });\n            // @TODO: apply triggers\n            return { message: \"Operation «add-column» successfully achieved\", table, column };\n        } catch (error) {\n            this.environment.utils.debugError(\"AddColumn.execute\", error, true);\n        }\n    }\n\n}\n\nmodule.exports = AddColumn;";
fs.writeFileSync(node_44, node_contents_44, "utf8");

const node_45 = path.resolve(baseDirectory, ".", "src", "classes", "database", "AddProtector.js");
const node_contents_45 = "class AddProtector {\n\n    constructor(environment) {\n        this.environment = environment;\n    }\n\n    async execute(publicParameters, privateParameters, configurations) {\n        try {\n            this.environment.utils.trace(\"AddProtector.execute\");\n            const project = publicParameters.project;\n            const authenticator = new this.environment.auth.Authenticator(this.environment, project);\n            const authentication = await authenticator.authenticate(configurations.authorization);\n            const authorizator = new this.environment.auth.Authorizator(this.environment, project);\n            const authorization = await authorizator.authorize(authentication);\n            const hasAuthorization = await authorization.forOperation(\n                publicParameters.operation\n            );\n            if (!hasAuthorization) {\n                throw new Error(\"User is not allowed to «add-protector»\");\n            }\n            // @TODO: apply protectors\n            const { table } = privateParameters;\n            const { protector_type, protector_name, parameters: parametersOriginal } = privateParameters;\n            if (!this.environment.utils.check.that(project).isStringMatchingRegex(/^[A-Za-z0-9\\.\\-\\_]+$/g)) {\n                throw new Error(\"Parameter «project» must be a non-empty string based only on letters, numbers, '.', '-' and '_' in order to «add-protector»\");\n            }\n            if (!this.environment.utils.check.that(table).isStringMatchingRegex(/^[A-Za-z0-9\\.\\-\\_]+$/g)) {\n                throw new Error(\"Parameter «table» must be a non-empty string based only on letters, numbers, '.', '-' and '_' in order to «add-protector»\");\n            }\n            if (!this.environment.utils.check.that(parametersOriginal).isString()) {\n                throw new Error(\"Parameter «parameters» must be a string in order to «add-protector»\");\n            }\n            if (!this.environment.utils.check.that(protector_type).isStringMatchingRegex(/^[A-Za-z0-9\\.\\-\\_]+$/g)) {\n                throw new Error(\"Parameter «protector_type» must be a string based only on letters, numbers, '.', '-' and '_' in order to «add-protector»\");\n            }\n            if (!this.environment.utils.check.that(protector_name).isString()) {\n                throw new Error(\"Parameter «protector_name» must be a string in order to «add-protector»\");\n            }\n            const parameters = JSON.parse(parametersOriginal);\n            if (!this.environment.utils.check.that(parameters).isObject()) {\n                throw new Error(\"Parameter «parameters» must be a JSON object in order to «add-protector»\");\n            }\n            await this.environment.database.TransactionManager.block(project + \"/project.json\", async (unblock, unblockFailing) => {\n                try {\n                    const { projectPath, projectData } = await this.environment.database.Project.initialize(project, \"update-table\");\n                    if (!(table in projectData.schema.tables)) {\n                        throw new Error(\"Parameter «table» must exist as table in schema in order to «add-protector»\");\n                    }\n                    const tableProtectors = projectData.schema.tables[table].attributes.hasProtectors || [];\n                    const coincidingProtectors = tableProtectors.filter(protector => protector.name === protector_name);\n                    if (!this.environment.utils.check.that(coincidingProtectors.length).equals(0)) {\n                        throw new Error(\"Parameter «protector_name» must be unique as table protector name in order to «add-protector»\");\n                    }\n                    const availableProtectorIdsBrute = await this.environment.utils.listDirectory(__dirname + \"/protectors\");\n                    const availableProtectorIds = availableProtectorIdsBrute.filter(protector => protector.endsWith(\".js\")).map(protector => protector.replace(/\\.js$/g, \"\"));\n                    if (availableProtectorIds.indexOf(protector_type) === -1) {\n                        throw new Error(\"Parameter «parameter_type» must match a valid protector type in order to «add-protector»\");\n                    }\n                    const protectorClass = require(__dirname + \"/protectors/\" + protector_type + \".js\");\n                    await protectorClass.checkSettings(parameters, projectData, table, \"add-protector\");\n                    if (!(\"hasProtectors\" in projectData.schema.tables[table].attributes)) {\n                        projectData.schema.tables[table].attributes.hasProtectors = [];\n                    }\n                    projectData.schema.tables[table].attributes.hasProtectors.push({\n                        id: protector_type,\n                        fixed: false,\n                        name: protector_name,\n                        parameters,\n                    });\n                    await this.environment.utils.dehydrateJSON(projectPath, projectData);\n                    unblock();\n                } catch (error) {\n                    unblockFailing(error);\n                }\n            });\n            // @TODO: apply triggers\n            return { message: \"Operation «add-protector» successfully achieved\", project };\n        } catch (error) {\n            this.environment.utils.debugError(\"AddProtector.execute\", error, true);\n        }\n    }\n\n}\n\nmodule.exports = AddProtector;";
fs.writeFileSync(node_45, node_contents_45, "utf8");

const node_46 = path.resolve(baseDirectory, ".", "src", "classes", "database", "AddTable.js");
const node_contents_46 = "class AddTable {\n\n    constructor(environment) {\n        this.environment = environment;\n    }\n\n    async execute(publicParameters, privateParameters, configurations) {\n        try {\n            this.environment.utils.trace(\"AddTable.execute\");\n            const project = publicParameters.project;\n            const authenticator = new this.environment.auth.Authenticator(this.environment, project);\n            const authentication = await authenticator.authenticate(configurations.authorization);\n            const authorizator = new this.environment.auth.Authorizator(this.environment, project);\n            const authorization = await authorizator.authorize(authentication);\n            const hasAuthorization = await authorization.forOperation(\n                publicParameters.operation\n            );\n            if (!hasAuthorization) {\n                throw new Error(\"User is not allowed to «add-table»\");\n            }\n            // @TODO: apply protectors\n            const { table, attributes: attributesOriginal = \"{}\", properties: propertiesOriginal = \"{}\", columns: columnsOriginal = \"{}\" } = privateParameters;\n            if (!this.environment.utils.check.that(project).isStringMatchingRegex(/^[A-Za-z0-9\\.\\-\\_]+$/g)) {\n                throw new Error(\"Parameter «project» must be a non-empty string based only on letters, numbers, '.', '-' and '_' in order to «delete-row»\");\n            }\n            if (!this.environment.utils.check.that(table).isStringMatchingRegex(/^[A-Za-z0-9\\.\\-\\_]+$/g)) {\n                throw new Error(\"Parameter «table» must be a non-empty string based only on letters, numbers, '.', '-' and '_' in order to «add-table»\");\n            }\n            if (!this.environment.utils.check.that(attributesOriginal).isString()) {\n                throw new Error(\"Parameter «attributes» must be a string or omitted in order to «add-table»\");\n            }\n            if (!this.environment.utils.check.that(propertiesOriginal).isString()) {\n                throw new Error(\"Parameter «properties» must be a string or omitted in order to «add-table»\");\n            }\n            if (!this.environment.utils.check.that(columnsOriginal).isString()) {\n                throw new Error(\"Parameter «columns» must be a string or omitted in order to «add-table»\");\n            }\n            const attributes = JSON.parse(attributesOriginal);\n            const properties = JSON.parse(propertiesOriginal);\n            const allColumns = JSON.parse(columnsOriginal);\n            if (!this.environment.utils.check.that(attributes).isObject()) {\n                throw new Error(\"Parameter «attributes» must be a JSON object or omitted in order to «add-table»\");\n            }\n            if (!this.environment.utils.check.that(properties).isObject()) {\n                throw new Error(\"Parameter «properties» must be a JSON object or omitted in order to «add-table»\");\n            }\n            if (!this.environment.utils.check.that(allColumns).isObject()) {\n                throw new Error(\"Parameter «columns» must be a JSON object or omitted in order to «add-table»\");\n            }\n            const { projectPath, projectData } = await this.environment.database.Project.initialize(project, \"add-table\");\n            await this.environment.database.TransactionManager.block(project + \"/project.json\", async (unblock, unblockFailing) => {\n                try {\n                    if(table in projectData.schema.tables) {\n                        throw new Error(\"Parameter «table» must not exist as table in schema in order to «add-table»\");\n                    }\n                    const finalColumns = {};\n                    const allColumnIds = Object.keys(allColumns);\n                    for (let indexColumns = 0; indexColumns < allColumnIds.length; indexColumns++) {\n                        const columnId = allColumnIds[indexColumns];\n                        if (!this.environment.utils.check.that(columnId).isStringMatchingRegex(/^[A-Za-z0-9\\.\\-\\_]+$/g)) {\n                            throw new Error(\"Parameter «column» on index «\" + columnId + \"» must be keyed as a non-empty string based only on letters, numbers, '.', '-' and '_' in order to «add-table»\");\n                        }\n                        const column = allColumns[columnId];\n                        if(!this.environment.utils.check.that(column).isObject()) {\n                            throw new Error(\"Parameter «columns» on index «\" + columnId + \"» must be an object in order to «add-table»\");\n                        }\n                        finalColumns[columnId] = {\n                            attributes: Object.assign({}, this.environment.database.constructor.DEFAULT_COLUMN_ATTRIBUTES, column.attributes || {}),\n                            properties: Object.assign({}, this.environment.database.constructor.DEFAULT_COLUMN_PROPERTIES, column.properties || {}),\n                        };\n                    }\n                    projectData.schema.tables[table] = {\n                        attributes: Object.assign({}, this.environment.database.constructor.DEFAULT_TABLE_ATTRIBUTES, attributes),\n                        properties: Object.assign({}, this.environment.database.constructor.DEFAULT_TABLE_PROPERTIES, properties),\n                        columns: finalColumns\n                    };\n                    await this.environment.utils.dehydrateJSON(projectPath, projectData);\n                    unblock();\n                } catch(error) {\n                    unblockFailing(error);\n                }\n            });\n            // @NOTE: no need to block because this file does not exist yet here:\n            const tablePath = this.environment.utils.resolveFromSrc(\"data/projects/\" + project + \"/data/\" + table + \".json\");\n            await this.environment.utils.dehydrateJSON(tablePath, { id: 1, data: {} });\n            // @TODO: apply triggers\n            return { message: \"Operation «add-table» successfully achieved\", table };\n        } catch (error) {\n            this.environment.utils.debugError(\"AddTable.execute\", error, true);\n        }\n    }\n\n}\n\nmodule.exports = AddTable;";
fs.writeFileSync(node_46, node_contents_46, "utf8");

const node_47 = path.resolve(baseDirectory, ".", "src", "classes", "database", "Authenticate.js");
const node_contents_47 = "class Authenticate {\n\n    constructor(environment) {\n        this.environment = environment;\n    }\n\n    async execute(publicParameters, privateParameters, configurations) {\n        try {\n            this.environment.utils.trace(\"Authenticate.execute\");\n            const { project } = publicParameters;\n            const authenticator = new this.environment.auth.Authenticator(this.environment, project);\n            const authentication = await authenticator.authenticate(configurations.authorization);\n            return { message: \"Operation «authenticate» successfully achieved\", authentication: authentication.toPlainObject() };\n        } catch (error) {\n            this.environment.utils.debugError(\"Authenticate.execute\", error, true);\n        }\n    }\n\n}\n\nmodule.exports = Authenticate;";
fs.writeFileSync(node_47, node_contents_47, "utf8");

const node_48 = path.resolve(baseDirectory, ".", "src", "classes", "database", "CreateProject.js");
const node_contents_48 = "class CreateProject {\n\n    constructor(environment) {\n        this.environment = environment;\n    }\n\n    async execute(publicParameters, privateParameters, configurations) {\n        try {\n            this.environment.utils.trace(\"CreateProject.execute\");\n            ////////////////////////////////\n            // 1. Authorize operation:\n            const user = this.environment.settings.ADMINISTRATOR_USER;\n            const password = this.environment.settings.ADMINISTRATOR_PASSWORD;\n            if(privateParameters.user !== user) {\n                throw new Error(\"Specified user does not correspond to administrator in order to «create-project»\");\n            }\n            if(privateParameters.password !== password) {\n                throw new Error(\"Specified password does not correspond to administrator in order to «create-project»\");\n            }\n            ////////////////////////////////\n            // 2. Execute operation:\n            ////////////////////////////////\n            // 2.1. Validate parameters\n            const project = privateParameters.project;\n            if (!this.environment.utils.check.that(project).isStringMatchingRegex(/^[A-Za-z0-9\\.\\-\\_]+$/g)) {\n                throw new Error(\"Parameter «project» must be a non-empty string based only on letters, numbers, '.', '-' and '_' in order to «create-project»\");\n            }\n            const { projectPath } = new this.environment.database.Project(project, \"create-project\");\n            const projectDirectory = require(\"path\").dirname(projectPath);\n            const projectExists = await this.environment.utils.fileExists(projectDirectory);\n            if(projectExists) {\n                throw new Error(\"Project «\" + project + \"» cannot be created because it already exists\");\n            }\n            ////////////////////////////////\n            // 2.2. Copy & Paste defaults with proper alterations\n            const projectOriginFile = __dirname + \"/defaults/project.json\";\n            const projectData = await this.environment.utils.hydrateJSON(projectOriginFile);\n            const projectDataDirectory = this.environment.utils.resolveFromSrc(\"data/projects/\" + project + \"/data\");\n            const projectFilesDirectory = this.environment.utils.resolveFromSrc(\"data/projects/\" + project + \"/files\");\n            const sessionsDestinationFile = projectDataDirectory + \"/sessions.json\";\n            const usersDestinationFile = projectDataDirectory + \"/users.json\";\n            const groupsDestinationFile = projectDataDirectory + \"/groups.json\";\n            const privilegesDestinationFile = projectDataDirectory + \"/privileges.json\";\n            await this.environment.utils.createDirectory(projectDirectory);\n            await this.environment.utils.createDirectory(projectDataDirectory);\n            await this.environment.utils.createDirectory(projectFilesDirectory);\n            if(privateParameters.schema_attributes) {\n                Object.assign(projectData.schema.attributes, privateParameters.schema_attributes);\n            }\n            if (!this.environment.utils.check.that(projectData).itsProperty([\"schema\", \"attributes\", \"isAuthenticatedBy\"], undefined).isObject()) {\n                const administratorName = privateParameters.administrator_name;\n                const administratorEmail = privateParameters.administrator_email;\n                const administratorPassword = privateParameters.administrator_password;\n                if (!this.environment.utils.check.that(administratorName).isStringMatchingRegex(/^[A-Za-z0-9\\.\\-\\_]+$/g)) {\n                    throw new Error(\"Parameter «administrator_name» must be a non-empty string based only on letters, numbers, '.', '-' and '_' in order to «create-project»\");\n                }\n                if (!this.environment.utils.check.that(administratorEmail).isStringMatchingRegex(/^[A-Za-z0-9\\.\\-\\_\\@]+$/g)) {\n                    throw new Error(\"Parameter «administrator_email» must be a non-empty string based only on letters, numbers, '@', '.', '-' and '_' in order to «create-project»\");\n                }\n                if (!this.environment.utils.check.that(administratorPassword).isStringMatchingRegex(/^[A-Za-z0-9\\.\\-\\_]+$/g)) {\n                    throw new Error(\"Parameter «administrator_password» must be a non-empty string based only on letters, numbers, '.', '-' and '_' in order to «create-project»\");\n                }\n                const sessionsOriginFile = __dirname + \"/defaults/sessions.json\";\n                const usersOriginFile = __dirname + \"/defaults/users.json\";\n                const groupsOriginFile = __dirname + \"/defaults/groups.json\";\n                const privilegesOriginFile = __dirname + \"/defaults/privileges.json\";\n                const sessions = await this.environment.utils.hydrateJSON(sessionsOriginFile);\n                const users = await this.environment.utils.hydrateJSON(usersOriginFile);\n                const groups = await this.environment.utils.hydrateJSON(groupsOriginFile);\n                const privileges = await this.environment.utils.hydrateJSON(privilegesOriginFile);\n                users.data[1].name = administratorName;\n                users.data[1].email = administratorEmail;\n                users.data[1].password = administratorPassword;\n                users.data[1].groups = [1];\n                users.data[1].privileges = [];\n                await this.environment.utils.dehydrateJSON(sessionsDestinationFile, sessions);\n                await this.environment.utils.dehydrateJSON(usersDestinationFile, users);\n                await this.environment.utils.dehydrateJSON(groupsDestinationFile, groups);\n                await this.environment.utils.dehydrateJSON(privilegesDestinationFile, privileges);\n            } else {\n                delete projectData.schema.tables.users;\n                delete projectData.schema.tables.groups;\n                delete projectData.schema.tables.privileges;\n                delete projectData.schema.tables.sessions;\n            }\n            const projectDestinationFile = projectDirectory + \"/project.json\";\n            await this.environment.utils.dehydrateJSON(projectDestinationFile, projectData);\n            ////////////////////////////////\n            // 3. Respond:\n            return { message: \"Operation «create-project» successfully achieved\", project };\n        } catch (error) {\n            this.environment.utils.debugError(\"CreateProject.execute\", error, true);\n        }\n    }\n\n}\n\nmodule.exports = CreateProject;";
fs.writeFileSync(node_48, node_contents_48, "utf8");

const node_49 = path.resolve(baseDirectory, ".", "src", "classes", "database", "Database.js");
const node_contents_49 = "class Database {\n\n    constructor(environment) {\n        this.environment = environment;\n        this.environment.utils.trace(\"Database.constructor\");\n    }\n\n    static get DEFAULT_COLUMN_ATTRIBUTES() {\n        return {\n            isUnique: false,\n            isType: \"string\",\n            isSubtype: null,\n            isEncrypted: false,\n            isReferenceOf: null,\n            isNullable: true,\n            hasDefault: null,\n            hasMinimum: null,\n            hasMaximum: null,\n            hasPattern: null,\n            hasPatternErrorMessage: null,\n            hasDescription: null,\n        };\n    };\n\n    static get DEFAULT_COLUMN_PROPERTIES() {\n        return {};\n    };\n\n    static get DEFAULT_TABLE_ATTRIBUTES() {\n        return {\n            hasDescription: null,\n            hasMulitpleUniqueKeys: [],\n            hasProtectors: [],\n        };\n    };\n\n    static get DEFAULT_TABLE_PROPERTIES() {\n        return {};\n    };\n\n    async start() {\n        try {\n            this.environment.utils.trace(\"Database.start\");\n            ////////////////////////////////////////////////////////////////////////\n            // Projects:\n            this.Project = require(__dirname + \"/Project.js\");\n            this.CreateProject = require(__dirname + \"/CreateProject.js\");\n            this.DeleteProject = require(__dirname + \"/DeleteProject.js\");\n            // Sessions:\n            this.Login = require(__dirname + \"/Login.js\");\n            this.Logout = require(__dirname + \"/Logout.js\");\n            this.Authenticate = require(__dirname + \"/Authenticate.js\");\n            // Data:\n            this.SelectRows = require(__dirname + \"/SelectRows.js\");\n            this.InsertRow = require(__dirname + \"/InsertRow.js\");\n            this.UpdateRow = require(__dirname + \"/UpdateRow.js\");\n            this.DeleteRow = require(__dirname + \"/DeleteRow.js\");\n            // Files:\n            this.GetFile = require(__dirname + \"/GetFile.js\");\n            this.SetFile = require(__dirname + \"/SetFile.js\");\n            // Schema:\n            this.ViewSchema = require(__dirname + \"/ViewSchema.js\");\n            this.AddTable = require(__dirname + \"/AddTable.js\");\n            this.AddColumn = require(__dirname + \"/AddColumn.js\");\n            this.UpdateTable = require(__dirname + \"/UpdateTable.js\");\n            this.UpdateColumn = require(__dirname + \"/UpdateColumn.js\");\n            this.DeleteTable = require(__dirname + \"/DeleteTable.js\");\n            this.DeleteColumn = require(__dirname + \"/DeleteColumn.js\");\n            // Protectors:\n            this.AddProtector = require(__dirname + \"/AddProtector.js\");\n            this.UpdateProtector = require(__dirname + \"/UpdateProtector.js\");\n            this.DeleteProtector = require(__dirname + \"/DeleteProtector.js\");\n            // Managers & Handlers:\n            this.TransactionManager = require(__dirname + \"/TransactionManager.js\");\n            this.ProtectorHandler = require(__dirname + \"/ProtectorHandler.js\");\n            // Process:\n            this.Process = require(__dirname + \"/Process.js\");\n            ////////////////////////////////////////////////////////////////////////\n        } catch(error) {\n            this.environment.utils.debugError(\"Database.create\", error);\n        }\n    }\n\n}\n\nmodule.exports = Database;";
fs.writeFileSync(node_49, node_contents_49, "utf8");

const node_50 = path.resolve(baseDirectory, ".", "src", "classes", "database", "DeleteColumn.js");
const node_contents_50 = "class DeleteColumn {\n\n    constructor(environment) {\n        this.environment = environment;\n    }\n\n    async execute(publicParameters, privateParameters, configurations) {\n        try {\n            this.environment.utils.trace(\"DeleteColumn.execute\");\n            const project = publicParameters.project;\n            const authenticator = new this.environment.auth.Authenticator(this.environment, project);\n            const authentication = await authenticator.authenticate(configurations.authorization);\n            const authorizator = new this.environment.auth.Authorizator(this.environment, project);\n            const authorization = await authorizator.authorize(authentication);\n            const hasAuthorization = await authorization.forOperation(\n                publicParameters.operation\n            );\n            if (!hasAuthorization) {\n                throw new Error(\"User is not allowed to «delete-column»\");\n            }\n            // @TODO: apply protectors\n            const { table, column } = privateParameters;\n            if (!this.environment.utils.check.that(project).isStringMatchingRegex(/^[A-Za-z0-9\\.\\-\\_]+$/g)) {\n                throw new Error(\"Parameter «project» must be a non-empty string based only on letters, numbers, '.', '-' and '_' in order to «delete-row»\");\n            }\n            if (!this.environment.utils.check.that(table).isStringMatchingRegex(/^[A-Za-z0-9\\.\\-\\_]+$/g)) {\n                throw new Error(\"Parameter «table» must be a non-empty string based only on letters, numbers, '.', '-' and '_' in order to «delete-column»\");\n            }\n            if (!this.environment.utils.check.that(column).isStringMatchingRegex(/^[A-Za-z0-9\\.\\-\\_]+$/g)) {\n                throw new Error(\"Parameter «column» must be a non-empty string based only on letters, numbers, '.', '-' and '_' in order to «delete-column»\");\n            }\n            await this.environment.database.TransactionManager.block(project + \"/project.json\", async (unblock, unblockFailing) => {\n                try {\n                    const { projectPath, projectData } = await this.environment.database.Project.initialize(project, \"delete-column\");\n                    if (!(table in projectData.schema.tables)) {\n                        throw new Error(\"Parameter «table» must exist as table in schema in order to «delete-column»\");\n                    }\n                    if (!(column in projectData.schema.tables[table].columns)) {\n                        throw new Error(\"Parameter «column» must exist as column in schema in order to «delete-column»\");\n                    }\n                    delete projectData.schema.tables[table].columns[column];\n                    await this.environment.utils.dehydrateJSON(projectPath, projectData);\n                    unblock();\n                } catch (error) {\n                    unblockFailing(error);\n                }\n            });\n            // @TODO: apply triggers\n            return { message: \"Operation «delete-column» successfully achieved\", table, column };\n        } catch (error) {\n            this.environment.utils.debugError(\"DeleteColumn.execute\", error, true);\n        }\n    }\n\n}\n\nmodule.exports = DeleteColumn;";
fs.writeFileSync(node_50, node_contents_50, "utf8");

const node_51 = path.resolve(baseDirectory, ".", "src", "classes", "database", "DeleteProject.js");
const node_contents_51 = "class DeleteProject {\n\n    constructor(environment) {\n        this.environment = environment;\n    }\n\n    async execute(publicParameters, privateParameters, configurations) {\n        try {\n            this.environment.utils.trace(\"DeleteProject.execute\");\n            ////////////////////////////////\n            // 1. Authorize operation:\n            const user = this.environment.settings.ADMINISTRATOR_USER;\n            const password = this.environment.settings.ADMINISTRATOR_PASSWORD;\n            if (privateParameters.user !== user) {\n                throw new Error(\"Specified user does not correspond to administrator in order to «delete-project»\");\n            }\n            if (privateParameters.password !== password) {\n                throw new Error(\"Specified password does not correspond to administrator in order to «delete-project»\");\n            }\n            ////////////////////////////////\n            // 2. Execute operation:\n            ////////////////////////////////\n            // 2.1. Validate parameters\n            const project = privateParameters.project;\n            if (!this.environment.utils.check.that(project).isStringMatchingRegex(/^[A-Za-z0-9\\.\\-\\_]+$/g)) {\n                throw new Error(\"Parameter «project» must be a non-empty string based only on letters, numbers, '.' and '-' in order to «create-project»\");\n            }\n            const { projectPath } = new this.environment.database.Project(project, \"delete-project\");\n            const projectDirectory = require(\"path\").dirname(projectPath);\n            const projectExists = await this.environment.utils.fileExists(projectDirectory);\n            if (!projectExists) {\n                throw new Error(\"Project «\" + project + \"» cannot be deleted because it does not exist\");\n            }\n            ////////////////////////////////\n            // 2.2. Delete recursively files & folders\n            await this.environment.utils.deleteDirectory(projectDirectory, true);\n            ////////////////////////////////\n            // 3. Respond:\n            return { message: \"Operation «delete-project» successfully achieved\", project };\n        } catch (error) {\n            this.environment.utils.debugError(\"DeleteProject.execute\", error, true);\n        }\n    }\n\n}\n\nmodule.exports = DeleteProject;";
fs.writeFileSync(node_51, node_contents_51, "utf8");

const node_52 = path.resolve(baseDirectory, ".", "src", "classes", "database", "DeleteProtector.js");
const node_contents_52 = "class DeleteProtector {\n\n    constructor(environment) {\n        this.environment = environment;\n    }\n\n    async execute(publicParameters, privateParameters, configurations) {\n        try {\n            this.environment.utils.trace(\"DeleteProtector.execute\");\n            const project = publicParameters.project;\n            const authenticator = new this.environment.auth.Authenticator(this.environment, project);\n            const authentication = await authenticator.authenticate(configurations.authorization);\n            const authorizator = new this.environment.auth.Authorizator(this.environment, project);\n            const authorization = await authorizator.authorize(authentication);\n            const hasAuthorization = await authorization.forOperation(\n                publicParameters.operation\n            );\n            if (!hasAuthorization) {\n                throw new Error(\"User is not allowed to «delete-protector»\");\n            }\n            // @TODO: apply protectors\n            const { table } = privateParameters;\n            const { protector_new_name = undefined, protector_name, protector_type, parameters: parametersOriginal } = privateParameters;\n            if (!this.environment.utils.check.that(project).isStringMatchingRegex(/^[A-Za-z0-9\\.\\-\\_]+$/g)) {\n                throw new Error(\"Parameter «project» must be a non-empty string based only on letters, numbers, '.', '-' and '_' in order to «delete-protector»\");\n            }\n            if (!this.environment.utils.check.that(table).isStringMatchingRegex(/^[A-Za-z0-9\\.\\-\\_]+$/g)) {\n                throw new Error(\"Parameter «table» must be a non-empty string based only on letters, numbers, '.', '-' and '_' in order to «delete-protector»\");\n            }\n            if (!this.environment.utils.check.that(protector_name).isString()) {\n                throw new Error(\"Parameter «protector_name» must be a string in order to «delete-protector»\");\n            }\n            await this.environment.database.TransactionManager.block(project + \"/project.json\", async (unblock, unblockFailing) => {\n                try {\n                    const { projectPath, projectData } = await this.environment.database.Project.initialize(project, \"delete-table\");\n                    if (!(table in projectData.schema.tables)) {\n                        throw new Error(\"Parameter «table» must exist as table in schema in order to «delete-protector»\");\n                    }\n                    const tableProtectors = projectData.schema.tables[table].attributes.hasProtectors || [];\n                    const coincidingProtectors = tableProtectors.filter(protector => protector.name === protector_name);\n                    if (this.environment.utils.check.that(coincidingProtectors.length).equals(0)) {\n                        throw new Error(\"Parameter «protector_name» must exist as table protector name in order to «delete-protector»\");\n                    }\n                    if (!this.environment.utils.check.that(coincidingProtectors.length).equals(1)) {\n                        throw new Error(\"Parameter «protector_name» must be unique as table protector name in order to «delete-protector»\");\n                    }\n                    if (!(\"hasProtectors\" in projectData.schema.tables[table].attributes)) {\n                        projectData.schema.tables[table].attributes.hasProtectors = [];\n                    }\n                    projectData.schema.tables[table].attributes.hasProtectors = projectData.schema.tables[table].attributes.hasProtectors.filter(protector => protector.name !== protector_name);\n                    await this.environment.utils.dehydrateJSON(projectPath, projectData);\n                    unblock();\n                } catch (error) {\n                    unblockFailing(error);\n                }\n            });\n            // @TODO: apply triggers\n            return { message: \"Operation «delete-protector» successfully achieved\", project };\n        } catch (error) {\n            this.environment.utils.debugError(\"DeleteProtector.execute\", error, true);\n        }\n    }\n\n}\n\nmodule.exports = DeleteProtector;";
fs.writeFileSync(node_52, node_contents_52, "utf8");

const node_53 = path.resolve(baseDirectory, ".", "src", "classes", "database", "DeleteRow.js");
const node_contents_53 = "class DeleteRow {\n\n    constructor(environment) {\n        this.environment = environment;\n    }\n\n    async execute(publicParameters, privateParameters, configurations) {\n        try {\n            this.environment.utils.trace(\"DeleteRow.execute\");\n            const project = publicParameters.project;\n            const authenticator = new this.environment.auth.Authenticator(this.environment, project);\n            const authentication = await authenticator.authenticate(configurations.authorization);\n            const authorizator = new this.environment.auth.Authorizator(this.environment, project);\n            const authorization = await authorizator.authorize(authentication);\n            const hasAuthorization = await authorization.forOperation(\n                publicParameters.operation,\n                privateParameters.table,\n                privateParameters.id\n            );\n            if (!hasAuthorization) {\n                throw new Error(\"User is not allowed to «delete-row»\");\n            }\n            // @TODO: apply protectors\n            const { table, id } = privateParameters;\n            if (!this.environment.utils.check.that(project).isStringMatchingRegex(/^[A-Za-z0-9\\.\\-\\_]+$/g)) {\n                throw new Error(\"Parameter «project» must be a non-empty string based only on letters, numbers, '.', '-' and '_' in order to «delete-row»\");\n            }\n            if (!this.environment.utils.check.that(table).isStringMatchingRegex(/^[A-Za-z0-9\\.\\-\\_]+$/g)) {\n                throw new Error(\"Parameter «table» must be a non-empty string based only on letters, numbers, '.', '-' and '_' in order to «delete-row»\");\n            }\n            if (typeof id === \"number\") {\n                // @OK\n            } else if (!this.environment.utils.check.that(id).isStringMatchingRegex(/^[0-9]+$/g)) {\n                throw new Error(\"Parameter «id» must be a number in order to «delete-row»\");\n            }\n            const { projectData } = await this.environment.database.Project.initialize(project, \"delete-row\");\n            // @STEP: A) if main table is an externalized table:\n            if (this.environment.utils.check.that(projectData).itsProperty([\"schema\", \"tables\", table, \"attributes\", \"isExternalizedBy\"], undefined).isObject()) {\n                const { host: externalHost, project: externalProject, table: externalTable } = projectData.schema.tables[table].attributes.isExternalizedBy;\n                const response = await this.environment.server.Requester.request(\"POST\", externalHost, {\n                    ...publicParameters,\n                    project: externalProject,\n                    operation: \"delete\",\n                }, {\n                    ...privateParameters,\n                    table: externalTable,\n                }, {\n                    authorization: configurations.authorization\n                }, false, false);\n                if (response.response.status === \"error\") {\n                    throw new Error(response.response.error.message);\n                }\n                return response.response.data;\n            }\n            // @STEP: B) if main table is a local table:\n            let deletedItem = undefined;\n            await this.environment.database.TransactionManager.block(project + \"/\" + table + \".json\", async (unblock, unblockFailing) => {\n                try {\n                    this.environment.utils.trace(\"DeleteRow.execute:transaction#1\");\n                    const tablePath = this.environment.utils.resolveFromSrc(\"data/projects/\" + project + \"/data/\" + table + \".json\");\n                    const tableDB = await this.environment.utils.hydrateJSON(tablePath);\n                    if (!(id in tableDB.data)) {\n                        throw new Error(\"Parameter «id» must refer to an existing «\" + table + \"» identifier in order to «delete-row»\");\n                    }\n                    // @TOTEST: check secondary table reference integrity\n                    const allTables = projectData.schema.tables;\n                    const allTablesIds = Object.keys(allTables);\n                    for(let indexTables = 0; indexTables < allTablesIds.length; indexTables++) {\n                        const secondaryTableId = allTablesIds[indexTables];\n                        const secondaryTableColumn = allTables[secondaryTableId].columns;\n                        const secondaryTableColumnIds = Object.keys(secondaryTableColumn);\n                        CheckingColumns:\n                        for(let indexColumns = 0; indexColumns < secondaryTableColumnIds.length; indexColumns++) {\n                            const secondaryColumnId = secondaryTableColumnIds[indexColumns];\n                            const secondaryColumn = secondaryTableColumn[secondaryColumnId];\n                            const isReferenceOf = secondaryColumn.attributes.isReferenceOf;\n                            if(isReferenceOf === table) {\n                                // @STEP: B.A) if secondary table is an externalized table:\n                                if (this.environment.utils.check.that(projectData).itsProperty([\"schema\", \"tables\", secondaryTableId, \"attributes\", \"isExternalizedBy\"], undefined).isObject()) {\n                                    const { host: externalHost, project: externalProject, table: externalTable } = projectData.schema.tables[secondaryTableId].attributes.isExternalizedBy;\n                                    if (secondaryColumn.attributes.isType === \"list\") {\n                                        const responseList = await this.environment.server.Requester.request(\"GET\", externalHost, {\n                                            ...publicParameters,\n                                            project: externalProject,\n                                            table: externalTable,\n                                            operation: \"select\",\n                                            where: JSON.stringify([[secondaryColumnId, \"has\", id]]),\n                                        }, {}, {\n                                            authorization: configurations.authorization\n                                        }, false, false);\n                                        if (responseList.response.status === \"error\") {\n                                            throw new Error(responseList.response.error.message);\n                                        }\n                                        if (responseList.response.data.items.length !== 0) {\n                                            throw new Error(\"Row cannot be deleted because «\" + secondaryTableId + \".\" + secondaryColumnId + \"» as list on id «\" + responseList.response.data.items[0].id + \"» contains an externalized reference to it and at least \" + responseList.response.data.items.length + \" items more also contain externalized references to this item\");\n                                        }\n                                    } else if (secondaryColumn.attributes.isType === \"object\") {\n                                        const responseObject = await this.environment.server.Requester.request(\"GET\", externalHost, {\n                                            ...publicParameters,\n                                            project: externalProject,\n                                            table: externalTable,\n                                            operation: \"select\",\n                                            where: JSON.stringify([[secondaryColumnId, \"=\", id]]),\n                                        }, {}, {\n                                            authorization: configurations.authorization\n                                        }, false, false);\n                                        if (responseObject.response.status === \"error\") {\n                                            throw new Error(responseObject.response.error.message);\n                                        }\n                                        if (responseObject.response.data.items.length !== 0) {\n                                            throw new Error(\"Row cannot be deleted because «\" + secondaryTableId + \".\" + secondaryColumnId + \"» as object on id «\" + responseObject.response.data.items[0].id + \"» contains an externalized reference to it and at least \" + responseObject.response.data.items.length + \" items more also contain externalized references to this item.\");\n                                        }\n                                    }\n                                    continue CheckingColumns;\n                                }\n                                // @STEP: B.B) if secondary table is a local table:\n                                const secondaryTablePath = this.environment.utils.resolveFromSrc(\"data/projects/\" + project + \"/data/\" + isReferenceOf + \".json\");\n                                const secondaryTableDB = await this.environment.utils.hydrateJSON(secondaryTablePath);\n                                const secondaryTableData = secondaryTableDB.data;\n                                const secondaryTableIds = Object.keys(secondaryTableData);\n                                CheckingItems:\n                                for(let indexItems = 0; indexItems < secondaryTableIds.length; indexItems++) {\n                                    const secondaryTableId = secondaryTableIds[indexItems];\n                                    const secondaryItem = secondaryTableData[secondaryTableId];\n                                    if (secondaryColumn.attributes.isType === \"list\") {\n                                        if (!Array.isArray(secondaryItem[secondaryColumnId])) {\n                                            continue CheckingItems;\n                                        }\n                                        const containsItem = secondaryItem[secondaryColumnId].indexOf(id) !== -1;\n                                        if(containsItem) {\n                                            throw new Error(\"Row cannot be deleted because «\" + secondaryTableId + \".\" + secondaryColumnId + \"» on id «\" + secondaryTableId + \"» contains a reference to it\");\n                                        }\n                                    } else if (secondaryColumn.attributes.isType === \"object\") {\n                                        const isItem = secondaryItem[secondaryColumnId] === id;\n                                        if(isItem) {\n                                            throw new Error(\"Row cannot be deleted because «\" + secondaryTableId + \".\" + secondaryColumnId + \"» on id «\" + secondaryTableId + \"» refers to it\");\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    deletedItem = tableDB.data[id];\n                    delete tableDB.data[id];\n                    await this.environment.utils.dehydrateJSON(tablePath, tableDB);\n                    unblock();\n                } catch (error) {\n                    unblockFailing(error);\n                }\n            });\n            // @TODO: apply triggers\n            return { message: \"Operation «delete-row» successfully achieved\", table, id: deletedItem.id, item: deletedItem };\n        } catch (error) {\n            this.environment.utils.debugError(\"DeleteRow.execute\", error, true);\n        }\n    }\n\n}\n\nmodule.exports = DeleteRow;";
fs.writeFileSync(node_53, node_contents_53, "utf8");

const node_54 = path.resolve(baseDirectory, ".", "src", "classes", "database", "DeleteTable.js");
const node_contents_54 = "class DeleteTable {\n\n    constructor(environment) {\n        this.environment = environment;\n    }\n\n    async execute(publicParameters, privateParameters, configurations) {\n        try {\n            this.environment.utils.trace(\"DeleteTable.execute\");\n            const project = publicParameters.project;\n            const authenticator = new this.environment.auth.Authenticator(this.environment, project);\n            const authentication = await authenticator.authenticate(configurations.authorization);\n            const authorizator = new this.environment.auth.Authorizator(this.environment, project);\n            const authorization = await authorizator.authorize(authentication);\n            const hasAuthorization = await authorization.forOperation(\n                publicParameters.operation\n            );\n            if (!hasAuthorization) {\n                throw new Error(\"User is not allowed to «delete-table»\");\n            }\n            // @TODO: apply protectors\n            const { table } = privateParameters;\n            if (!this.environment.utils.check.that(table).isStringMatchingRegex(/^[A-Za-z0-9\\.\\-\\_]+$/g)) {\n                throw new Error(\"Parameter «table» must be a non-empty string based only on letters, numbers, '.', '-' and '_' in order to «delete-table»\");\n            }\n            const { projectPath, projectData } = await this.environment.database.Project.initialize(project, \"delete-table\");\n            await this.environment.database.TransactionManager.block(project + \"/project.json\", async (unblock, unblockFailing) => {\n                try {\n                    if (!(table in projectData.schema.tables)) {\n                        throw new Error(\"Parameter «table» must exist as table in schema in order to «delete-table»\");\n                    }\n                    delete projectData.schema.tables[table];\n                    await this.environment.utils.dehydrateJSON(projectPath, projectData);\n                    const tablePath = this.environment.utils.resolveFromSrc(\"data/projects/\" + project + \"/data/\" + table + \".json\");\n                    await this.environment.utils.deleteFile(tablePath);\n                    unblock();\n                } catch (error) {\n                    unblockFailing(error);\n                }\n            });\n            // @TODO: apply triggers\n            return { message: \"Operation «delete-table» successfully achieved\" };\n        } catch (error) {\n            this.environment.utils.debugError(\"DeleteTable.execute\", error, true);\n        }\n    }\n\n}\n\nmodule.exports = DeleteTable;";
fs.writeFileSync(node_54, node_contents_54, "utf8");

const node_55 = path.resolve(baseDirectory, ".", "src", "classes", "database", "GetFile.js");
const node_contents_55 = "const fs = require(\"fs\");\n\nclass GetFile {\n\n    constructor(environment) {\n        this.environment = environment;\n    }\n\n    async execute(publicParameters, privateParameters, configurations, originalResponse) {\n        try {\n            this.environment.utils.trace(\"GetFile.execute\");\n            const project = publicParameters.project;\n            const authenticator = new this.environment.auth.Authenticator(this.environment, project);\n            const authentication = await authenticator.authenticate(configurations.authorization);\n            const authorizator = new this.environment.auth.Authorizator(this.environment, project);\n            const authorization = await authorizator.authorize(authentication);\n            const hasAuthorization = await authorization.forOperation(\n                publicParameters.operation,\n                privateParameters.table,\n                privateParameters.id\n            );\n            if (!hasAuthorization) {\n                throw new Error(\"User is not allowed to «get-file»\");\n            }\n            // @TODO: apply protectors\n            const { table, column, columnIndex = undefined } = publicParameters;\n            let { id = \"0\" } = publicParameters;\n            if (!this.environment.utils.check.that(table).isStringMatchingRegex(/^[A-Za-z0-9\\.\\-\\_]+$/g)) {\n                throw new Error(\"Required parameter «table» to be a non-empty string based only on letters, numbers, '.', '-' and '_' in order to «get-file»\");\n            }\n            if (typeof id === \"number\") {\n                // @OK\n            } else if (!this.environment.utils.check.that(id).isStringMatchingRegex(/^[0-9]+$/g)) {\n                throw new Error(\"Required parameter «id» to be a number in order to «get-file»\");\n            }\n            if (!this.environment.utils.check.that(column).isStringMatchingRegex(/^[A-Za-z0-9\\.\\-\\_]+$/g)) {\n                throw new Error(\"Required parameter «column» to be a non-empty string based only on letters, numbers, '.', '-' and '_' in order to «get-file»\");\n            }\n            if(typeof columnIndex === \"undefined\") {\n                // @OK\n            } else if (typeof columnIndex === \"number\") {\n                // @OK\n            } else if (!this.environment.utils.check.that(id).isStringMatchingRegex(/^[0-9]+$/g)) {\n                throw new Error(\"Required parameter «id» to be a number in order to «get-file»\");\n            }\n            if(typeof id === \"string\") {\n                id = parseInt(id);\n            }\n            const { projectData } = await this.environment.database.Project.initialize(project, \"get-file\");\n            const tableSchema = projectData.schema.tables[table];\n            if (!this.environment.utils.check.that(tableSchema).itsProperty([ \"columns\", column, \"attributes\", \"isType\"], undefined).isOneOf([\"file\", \"image\"])) {\n                this.environment.utils.debug(tableSchema.columns[column].attributes.isType);\n                throw new Error(\"Required parameter «table» and «column» to refer to a schema column that is type «file» or «image» in order to «get-file»\");\n            }\n            const protectorHandler = await this.environment.database.ProtectorHandler.initialize(this.environment, publicParameters, privateParameters, configurations, authentication, projectData);\n            await protectorHandler.applyOnBeforeViewProtectors({ projectData });\n            const selectOperation = new this.environment.database.SelectRows(this.environment);\n            const selectResponse = await selectOperation.execute({\n                project,\n                table,\n                where: JSON.stringify([[ \"id\", \"=\", id ]])\n            }, {}, configurations);\n            if(selectResponse.items.length === 0) {\n                throw new Error(\"Required parameter «id» to refer to a «table» (\" + table + \") identifier in order to «get-file»\");\n            } else if(selectResponse.items.length !== 1) {\n                throw new Error(\"Parameter parameter «id» to not belong to a corrupted data item. Please, contact the administrator of the server.\");\n            }\n            const selectedProperty = selectResponse.items[0][column];\n            if (!this.environment.utils.check.that(selectedProperty).isStringMatchingRegex(/^[A-Za-z0-9\\-\\.\\_]+/g)) {\n                throw new Error(\"Required property «\" + column + \"» (\" + selectedProperty + \") from item «\" + table + \"» on identifier «\" + id + \"» to only be composed by letters, numbers and «-», «.» and «_» in order to «get-file»\")\n            }\n            // @TODO: apply triggers\n            const targetItem = selectResponse.items[0];\n            const targetPath = this.environment.utils.resolveFromSrc(targetItem[column]);\n            const targetReader = fs.createReadStream(targetPath);\n            originalResponse.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n            originalResponse.setHeader(\"Access-Control-Allow-Headers\", \"*\");\n            originalResponse.setHeader(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, PATCH, DELETE, OPTIONS\");\n            return targetReader.pipe(originalResponse);\n        } catch (error) {\n            this.environment.utils.debugError(\"GetFile.execute\", error, true);\n        }\n    }\n\n    dispatchResult(project, table, column, id, item) {\n        try {\n        } catch(error) {\n            \n        }\n    }\n\n}\n\nmodule.exports = GetFile;";
fs.writeFileSync(node_55, node_contents_55, "utf8");

const node_56 = path.resolve(baseDirectory, ".", "src", "classes", "database", "InsertRow.js");
const node_contents_56 = "class InsertRow {\n\n    constructor(environment) {\n        this.environment = environment;\n    }\n\n    async execute(publicParameters, privateParameters, configurations) {\n        try {\n            this.environment.utils.trace(\"InsertRow.execute\");\n            const project = publicParameters.project;\n            const authenticator = new this.environment.auth.Authenticator(this.environment, project);\n            const authentication = await authenticator.authenticate(configurations.authorization);\n            const authorizator = new this.environment.auth.Authorizator(this.environment, project);\n            const authorization = await authorizator.authorize(authentication);\n            const hasAuthorization = await authorization.forOperation(\n                publicParameters.operation,\n                privateParameters.table,\n                privateParameters.value\n            );\n            if (!hasAuthorization) {\n                throw new Error(\"User is not allowed to «insert-row»\");\n            }\n            const { projectData } = await this.environment.database.Project.initialize(project, \"insert-row\");\n            const protectorHandler = await this.environment.database.ProtectorHandler.initialize(this.environment, publicParameters, privateParameters, configurations, authentication, projectData);\n            const { table, value } = privateParameters;\n            const valueParsed = JSON.parse(value);\n            if (!this.environment.utils.check.that(table).isStringMatchingRegex(/^[A-Za-z0-9\\.\\-\\_]+$/g)) {\n                throw new Error(\"Parameter «table» must be a non-empty string based only on letters, numbers, '.', '-' and '_' in order to «insert-row»\");\n            }\n            // @STEP: A) if it is an externalized table:\n            if (this.environment.utils.check.that(projectData).itsProperty([\"schema\", \"tables\", table, \"attributes\", \"isExternalizedBy\"], undefined).isObject()) {\n                const { host: externalHost, project: externalProject, table: externalTable } = projectData.schema.tables[table].attributes.isExternalizedBy;\n                const response = await this.environment.server.Requester.request(\"POST\", externalHost, {\n                    ...publicParameters,\n                    project: externalProject,\n                    operation: \"insert\",\n                }, {\n                    ...privateParameters,\n                    table: externalTable\n                }, {\n                    authorization: configurations.authorization\n                }, false, false);\n                if (response.response.status === \"error\") {\n                    throw new Error(response.response.error.message);\n                }\n                return response.response.data;\n            }\n            // @STEP: B) if it is a local table:\n            delete valueParsed.id;\n            let valueFixed = undefined;\n            await this.environment.database.TransactionManager.block(project + \"/\" + table + \".json\", async (unblock, unblockFailing) => {\n                try {\n                    this.environment.utils.trace(\"InsertRow.execute:transaction#1\");\n                    const tablePath = this.environment.utils.resolveFromSrc(\"data/projects/\" + project + \"/data/\" + table + \".json\");\n                    const tableDB = await this.environment.utils.hydrateJSON(tablePath);\n                    await protectorHandler.applyOnBeforePersistProtectors({ value: valueParsed, projectData });\n                    valueFixed = await this.environment.utils.check.that(valueParsed).followsSchemaOf(projectData, table, tableDB.data, \"insert\", project, configurations.authorization, authentication, this.environment);\n                    const nextId = tableDB.id++;\n                    valueFixed.id = nextId;\n                    tableDB.data[nextId] = valueFixed;\n                    await this.environment.utils.dehydrateJSON(tablePath, tableDB);\n                    unblock();\n                } catch(error) {\n                    unblockFailing(error);\n                }\n            });\n            const response = {\n                message: \"Operation «insert-row» successfully achieved\",\n                table,\n                id: valueFixed.id,\n                item: valueFixed\n            };\n            await protectorHandler.applyOnAfterPersistProtectors(response, { value: valueFixed });\n            // @TODO: apply triggers\n            return response;\n        } catch (error) {\n            this.environment.utils.debugError(\"InsertRow.execute\", error, true);\n        }\n    }\n\n}\n\nmodule.exports = InsertRow;";
fs.writeFileSync(node_56, node_contents_56, "utf8");

const node_57 = path.resolve(baseDirectory, ".", "src", "classes", "database", "Login.js");
const node_contents_57 = "class Login {\n\n    constructor(environment) {\n        this.environment = environment;\n    }\n\n    async execute(publicParameters, privateParameters, configurations) {\n        try {\n            this.environment.utils.trace(\"Login.execute\");\n            ////////////////////////////////\n            // 1. Execute operation:\n            ////////////////////////////////\n            // 1.1. Validate parameters\n            const { project } = publicParameters;\n            const { user: userOrEmail, password } = privateParameters;\n            if (!this.environment.utils.check.that(project).isStringMatchingRegex(/^[A-Za-z0-9\\.\\-\\_]+$/g)) {\n                throw new Error(\"Parameter «project» must follow the proper format in order to «login»\");\n            }\n            ////////////////////////////////\n            // 1.2. Create session (or return current)\n            ////////////////////////////////\n            // 1.2.A. Respond by externalized auth system:\n            const { projectData } = await this.environment.database.Project.initialize(project, \"login\");\n            if (this.environment.utils.check.that(projectData).itsProperty([\"schema\", \"attributes\", \"isAuthenticatedBy\"], undefined).isObject()) {\n                const { url: authURL, project: authProjectId } = projectData.schema.attributes.isAuthenticatedBy;\n                const response = await this.environment.server.Requester.request(\"POST\", authURL, {\n                    project: authProjectId,\n                    operation: \"login\"\n                }, {\n                    user: userOrEmail,\n                    password\n                }, {}, false, false);\n                if(response.response.status === \"error\") {\n                    throw new Error(response.response.error.message);\n                }\n                return response.response.data;\n            }\n            ////////////////////////////////\n            // 1.2.B. Respond by self auth system:\n            const usersPath = this.environment.utils.resolveFromSrc(\"data/projects/\" + project + \"/data/users.json\");\n            const sessionsPath = this.environment.utils.resolveFromSrc(\"data/projects/\" + project + \"/data/sessions.json\");\n            const users = await this.environment.utils.hydrateJSON(usersPath);\n            const matchedUsers = Object.values(users.data).filter(user => ((user.name === userOrEmail) || (user.email === userOrEmail)) && user.password === password);\n            if(matchedUsers.length !== 1) {\n                throw new Error(\"User was not found in order to «login»\");\n            }\n            const [ matchedUser ] = matchedUsers;\n            let session = undefined;\n            let isRetaken = false;\n            await this.environment.database.TransactionManager.block(project + \"/sessions.json\", async (unblock, unblockFailing) => {\n                try {\n                    const sessions = await this.environment.utils.hydrateJSON(sessionsPath);\n                    const matchedSessions = Object.values(sessions.data).filter(session => session.user === matchedUser.id);\n                    const isRetaken = matchedSessions.length !== 0;\n                    const sessionToken = isRetaken ? matchedSessions[0].token : this.environment.utils.generateRandomString(100);\n                    const id = isRetaken ? matchedSessions[0].id : sessions.id++;\n                    session = { id, user: matchedUser.id, token: sessionToken };\n                    sessions.data[id] = session;\n                    await this.environment.utils.dehydrateJSON(sessionsPath, sessions);\n                    const authenticator = new this.environment.auth.Authenticator(this.environment, project);\n                    const authentication = await authenticator.authenticate(sessionToken);\n                    delete authentication.user.password;\n                    delete authentication.user.created_at;\n                    delete authentication.user.updated_at;\n                    session.authentication = {\n                        user: authentication.user,\n                        groups: authentication.groups,\n                        privileges: authentication.privileges\n                    };\n                    unblock();\n                } catch(error) {\n                    unblockFailing(error);\n                }\n            });\n            ////////////////////////////////\n            // 2. Respond:\n            return { message: \"Operation «login» successfully achieved\", session, taken: isRetaken };\n        } catch (error) {\n            this.environment.utils.debugError(\"Login.execute\", error, true);\n        }\n    }\n\n}\n\nmodule.exports = Login;";
fs.writeFileSync(node_57, node_contents_57, "utf8");

const node_58 = path.resolve(baseDirectory, ".", "src", "classes", "database", "Logout.js");
const node_contents_58 = "class Logout {\n\n    constructor(environment) {\n        this.environment = environment;\n    }\n\n    async execute(publicParameters, privateParameters, configurations) {\n        try {\n            this.environment.utils.trace(\"Logout.execute\");\n            ////////////////////////////////\n            // 1. Execute operation:\n            ////////////////////////////////\n            // 1.1. Validate parameters\n            const { project } = publicParameters;\n            const { authorization: token } = configurations;\n            if (!this.environment.utils.check.that(project).isStringMatchingRegex(/^[A-Za-z0-9\\.\\-\\_]+$/g)) {\n                throw new Error(\"Parameter «project» must follow the proper format in order to «logout»\");\n            }\n            if (!this.environment.utils.check.that(token).hasLengthOf(100)) {\n                throw new Error(\"Parameter «token» is not correct in order to «logout»\");\n            }\n            ////////////////////////////////\n            // 1.2. Destroy session\n            ////////////////////////////////\n            // 1.2.A. Respond by externalized auth system:\n            const { projectData } = await this.environment.database.Project.initialize(project, \"login\");\n            if (this.environment.utils.check.that(projectData).itsProperty([\"schema\", \"attributes\", \"isAuthenticatedBy\"], undefined).isObject()) {\n                const { url: authURL, project: authProjectId } = projectData.schema.attributes.isAuthenticatedBy;\n                const response = await this.environment.server.Requester.request(\"POST\", authURL, {\n                    project: authProjectId,\n                    operation: \"logout\"\n                }, {}, {\n                    authorization: token\n                }, false, false);\n                if (response.response.status === \"error\") {\n                    throw new Error(response.response.error.message);\n                }\n                return response.response.data;\n            }\n            ////////////////////////////////\n            // 1.2.B. Respond by self auth system:\n            await this.environment.database.TransactionManager.block(project + \"/sessions.json\", async (unblock, unblockFailing) => {\n                try {\n                    const sessionsPath = this.environment.utils.resolveFromSrc(\"data/projects/\" + project + \"/data/sessions.json\");\n                    const sessions = await this.environment.utils.hydrateJSON(sessionsPath);\n                    const matchedSessions = Object.values(sessions.data).filter(session => session.token === token);\n                    if (matchedSessions.length === 0) {\n                        throw new Error(\"Session was not found in order to «logout»\");\n                    }\n                    delete sessions.data[matchedSessions[0].id];\n                    await this.environment.utils.dehydrateJSON(sessionsPath, sessions);\n                    unblock();\n                } catch (error) {\n                    unblockFailing(error);\n                }\n            });\n            ////////////////////////////////\n            // 2. Respond:\n            return { message: \"Operation «logout» successfully achieved\" };\n        } catch (error) {\n            this.environment.utils.debugError(\"Logout.execute\", error, true);\n        }\n    }\n\n}\n\nmodule.exports = Logout;";
fs.writeFileSync(node_58, node_contents_58, "utf8");

const node_59 = path.resolve(baseDirectory, ".", "src", "classes", "database", "Process.js");
const node_contents_59 = "class Process {\n\n    constructor(environment) {\n        this.environment = environment;\n    }\n\n    async execute(publicParameters, privateParameters, configurations) {\n        try {\n            this.environment.utils.trace(\"Process.execute\");\n            const { project, process: processParameter = \"\" } = publicParameters;\n            const { authorization: token } = configurations;\n            if (!this.environment.utils.check.that(project).isStringMatchingRegex(/^[A-Za-z0-9\\.\\-\\_]+$/g)) {\n                throw new Error(\"Parameter «project» must follow the proper format in order to «process»\");\n            }\n            if (!this.environment.utils.check.that(token).hasLengthOf(100)) {\n                throw new Error(\"Parameter «token» is not correct in order to «process»\");\n            }\n            const { projectData } = await this.environment.database.Project.initialize(project, \"process\");\n            if(Object.keys(projectData.schema.attributes.hasEnabledProcesses).indexOf(processParameter) === -1) {\n                throw new Error(\"Required parameter «process» to be an identifiable process\");\n            }\n            if(projectData.schema.attributes.hasEnabledProcesses[processParameter] !== true) {\n                throw new Error(\"Required parameter «process» to refer to an enabled process\");\n            }\n            let response = undefined;\n            switch (processParameter) {\n                case \"\": {\n                    throw new Error(\"Required parameter «process» to be specified\");\n                }\n                case \"restologia.official.org/common/ping\": {\n                    response = await require(__dirname + \"/process/\" + \"restologia.official.org/common/ping/index.js\").call(this.environment, publicParameters, privateParameters, configurations);\n                    break;\n                }\n                case \"restologia.official.org/common/os\": {\n                    response = await require(__dirname + \"/process/\" + \"restologia.official.org/common/os/index.js\").call(this.environment, publicParameters, privateParameters, configurations);\n                    break;\n                }\n                ////>>>> INSERT_PROCESSES_LAST_CASE_CLAUSE_HERE <<<<////\n                default: {\n                    throw new Error(\"Required parameter «process» to be an identifiable process\");\n                }\n            }\n            return { message: \"Operation «process» successfully achieved\", ...response };\n        } catch (error) {\n            this.environment.utils.debugError(\"Process.execute\", error, true);\n        }\n    }\n\n    static selfUpdate(environment) {\n        delete require.cache[__dirname + \"/Process.js\"];\n        environment.database.Process = require(__dirname + \"/Process.js\");\n    }\n\n}\n\nmodule.exports = Process;";
fs.writeFileSync(node_59, node_contents_59, "utf8");

const node_60 = path.resolve(baseDirectory, ".", "src", "classes", "database", "Project.js");
const node_contents_60 = "const utils = require(__dirname + \"/../Utils.js\");\n\nclass Project {\n\n    static initialize(...args) {\n        return (new this(...args)).initialize();\n    }\n\n    constructor(projectId, operation = \"initialize-project\") {\n        this.projectId = projectId;\n        this.operation = operation;\n        this.projectPath = utils.resolveFromSrc(\"data/projects/\" + this.projectId + \"/project.json\");\n        this.projectData = undefined;\n    }\n\n    initialize() {\n        if(this.projectData) {\n            return this;\n        }\n        if(!utils.check.that(this.projectId).isStringMatchingRegex(/^[A-Za-z0-9\\.\\-\\_]+$/g)) {\n            throw new Error(\"Parameter «project» must be a non-empty string based only on letters, numbers, '.', '-' and '_' in order to «\" + this.operation + \"»\");\n        }\n        return utils.hydrateJSON(this.projectPath).then(projectData => {\n            this.projectData = projectData;\n            return this;\n        });\n    }\n\n}\n\nmodule.exports = Project;";
fs.writeFileSync(node_60, node_contents_60, "utf8");

const node_61 = path.resolve(baseDirectory, ".", "src", "classes", "database", "ProtectorHandler.js");
const node_contents_61 = "class ProtectorHandler {\n\n    static initialize(environment, ...args) {\n        const protectorHandler = new this(environment);\n        return protectorHandler.initializeProtectors(...args);\n    }\n\n    constructor(environment) {\n        this.environment = environment;\n        this.protectors = undefined;\n        this.projectId = undefined;\n        this.projectData = undefined;\n        this.publicParameters = undefined;\n        this.privateParameters = undefined;\n        this.configurations = undefined;\n    }\n    \n    async initializeProtectors(publicParameters, privateParameters, configurations, authentication, projectData) {\n        try {\n            /////////////////////////////////////////////////////\n            this.authentication = authentication;\n            this.publicParameters = publicParameters;\n            this.privateParameters = privateParameters;\n            this.configurations = configurations;\n            this.authentication = authentication;\n            this.projectData = projectData;\n            const project = publicParameters.project;\n            if (!this.environment.utils.check.that(project).isStringMatchingRegex(/^[A-Za-z0-9\\.\\-\\_]+$/g)) {\n                throw new Error(\"Parameter «project» must be a non-empty string based only on letters, numbers, '.', '-' and '_' in order to «getProtectors»\");\n            }\n            const operation = publicParameters.operation;\n            this.projectId = project;\n            this.projectData = projectData;\n            let protectorsDefinitions = [];\n            switch (operation) {\n                case \"select\": {\n                    const table = publicParameters.table;\n                    const tableAttributes = projectData.schema.tables[table].attributes;\n                    if (\"hasProtectors\" in tableAttributes) {\n                        protectorsDefinitions = tableAttributes.hasProtectors;\n                    }\n                    break;\n                }\n                case \"insert\":\n                case \"update\":\n                case \"delete\": {\n                    const table = privateParameters.table;\n                    const tableAttributes = projectData.schema.tables[table].attributes;\n                    if (\"hasProtectors\" in tableAttributes) {\n                        protectorsDefinitions = tableAttributes.hasProtectors;\n                    }\n                    break;\n                }\n                case \"add-table\":\n                case \"add-column\":\n                case \"add-protector\":\n                case \"update-table\":\n                case \"update-column\":\n                case \"update-protector\":\n                case \"delete-table\":\n                case \"delete-column\":\n                case \"delete-protector\": {\n                    protectorsDefinitions = projectData.schema.operations.alterSchema.hasProtectors;\n                    break;\n                }\n            }\n            /////////////////////////////////////////////////////\n            const protectors = [];\n            for (let indexProtectors = 0; indexProtectors < protectorsDefinitions.length; indexProtectors++) {\n                const protectorDefinition = protectorsDefinitions[indexProtectors];\n                if (!this.environment.utils.check.that(protectorDefinition.id).isStringMatchingRegex(/^[A-Za-z0-9\\.\\-\\_]+$/g)) {\n                    throw new Error(\"Setting «protector.id» must be a non-empty string based only on letters, numbers, '.', '-' and '_' in order to «getProtectors»\");\n                }\n                const ProtectorClass = require(__dirname + \"/protectors/\" + protectorDefinition.id);\n                const protector = new ProtectorClass(this.environment, protectorDefinition);\n                protectors.push(protector);\n            }\n            this.protectors = protectors;\n            return this;\n        } catch(error) {\n            this.environment.utils.debugError(\"ProtectorHandler.applyProtectors\", error, true);\n        }\n    }\n    \n    async applyOnBeforeViewProtectors(extra = {}, ...others) {\n        try {\n            for(let indexProtector = 0; indexProtector < this.protectors.length; indexProtector++) {\n                const protector = this.protectors[indexProtector];\n                await protector.onBeforeView(this.publicParameters, this.privateParameters, this.configurations, this.authentication, extra, ...others);\n            }\n        } catch(error) {\n            this.environment.utils.debugError(\"ProtectorHandler.applyOnBeforeViewProtectors\", error, true);\n        }    \n    }\n    \n    async applyOnBeforePersistProtectors(extra = {}, ...others) {\n        try {\n            for (let indexProtector = 0; indexProtector < this.protectors.length; indexProtector++) {\n                const protector = this.protectors[indexProtector];\n                await protector.onBeforePersist(this.publicParameters, this.privateParameters, this.configurations, this.authentication, extra, ...others);\n            }\n        } catch(error) {\n            this.environment.utils.debugError(\"ProtectorHandler.applyOnBeforePersistProtectors\", error, true);\n        }\n    }\n    \n    async applyOnAfterViewProtectors(extra = {}, ...others) {\n        try {\n            for (let indexProtector = 0; indexProtector < this.protectors.length; indexProtector++) {\n                const protector = this.protectors[indexProtector];\n                await protector.onAfterView(this.publicParameters, this.privateParameters, this.configurations, this.authentication, extra, ...others);\n            }\n        } catch(error) {\n            this.environment.utils.debugError(\"ProtectorHandler.applyOnAfterViewProtectors\", error, true);\n        }    \n    }\n    \n    async applyOnAfterPersistProtectors(extra = {}, ...others) {\n        try {\n            for (let indexProtector = 0; indexProtector < this.protectors.length; indexProtector++) {\n                const protector = this.protectors[indexProtector];\n                await protector.onAfterPersist(this.publicParameters, this.privateParameters, this.configurations, this.authentication, extra, ...others);\n            }\n        } catch(error) {\n            this.environment.utils.debugError(\"ProtectorHandler.applyOnAfterPersistProtectors\", error, true);\n        }\n    }\n\n}\n\nmodule.exports = ProtectorHandler;";
fs.writeFileSync(node_61, node_contents_61, "utf8");

const node_62 = path.resolve(baseDirectory, ".", "src", "classes", "database", "SelectRows.js");
const node_contents_62 = "const AVAILABLE_WHERE_OPERATIONS = [\"=\", \"!=\", \"<\", \"<=\", \">\", \">=\", \"=null\", \"!=null\", \"has\", \"!has\", \"in\", \"!in\"];\n\nclass SelectRows {\n\n    constructor(environment) {\n        this.environment = environment;\n    }\n\n    async execute(publicParameters, privateParameters, configurations) {\n        try {\n            this.environment.utils.trace(\"SelectRows.execute\");\n            const project = publicParameters.project;\n            const authenticator = new this.environment.auth.Authenticator(this.environment, project);\n            const authentication = await authenticator.authenticate(configurations.authorization);\n            const authorizator = new this.environment.auth.Authorizator(this.environment, project);\n            const authorization = await authorizator.authorize(authentication);\n            const hasAuthorization = await authorization.forOperation(\n                publicParameters.operation,\n                publicParameters.table,\n                publicParameters.where,\n                publicParameters.sort,\n                publicParameters.paginate\n            );\n            if (!hasAuthorization) {\n                throw new Error(\"User is not allowed to «select-rows»\");\n            }\n            // @TODO: apply protectors\n            const { projectData } = await this.environment.database.Project.initialize(project, \"select-rows\");\n            const { table } = publicParameters;\n            if (!this.environment.utils.check.that(table).isStringMatchingRegex(/^[A-Za-z0-9\\.\\-\\_]+$/g)) {\n                throw new Error(\"Parameter «table» must be a non-empty string based only on letters, numbers, '.', '-' and '_' in order to «select-rows»\");\n            }\n            let where = JSON.parse(publicParameters.where || \"[]\");\n            let sort = JSON.parse(publicParameters.sort || \"[]\");\n            let paginate = JSON.parse(publicParameters.paginate || \"[]\");\n            if (!this.environment.utils.check.that(where).isArray()) {\n                throw new Error(\"Parameter «where» must be a JSON array or omitted in order to «select-rows»\");\n            }\n            if (!this.environment.utils.check.that(sort).isArray()) {\n                throw new Error(\"Parameter «sort» must be a JSON array or omitted in order to «select-rows»\");\n            }\n            if (!this.environment.utils.check.that(paginate).isArray()) {\n                throw new Error(\"Parameter «paginate» must be a JSON array or omitted in order to «select-rows»\");\n            }\n            const tablePath = this.environment.utils.resolveFromSrc(\"data/projects/\" + project + \"/data/\" + table + \".json\");\n            const tableDB = await this.environment.utils.hydrateJSON(tablePath);\n            const tableSchema = projectData.schema.tables[table];\n            const protectorHandler = await this.environment.database.ProtectorHandler.initialize(this.environment, publicParameters, privateParameters, configurations, authentication, projectData);\n            await protectorHandler.applyOnBeforeViewProtectors({ projectData });\n            where = JSON.parse(publicParameters.where || \"[]\");\n            sort = JSON.parse(publicParameters.sort || \"[]\");\n            paginate = JSON.parse(publicParameters.paginate || \"[]\");\n            const allItems = Object.values(tableDB.data);\n            // @STEP: if it is an externalized table:\n            if (this.environment.utils.check.that(projectData).itsProperty([\"schema\", \"tables\", table, \"attributes\", \"isExternalizedBy\"], undefined).isObject()) {\n                const { host: externalHost, project: externalProject, table: externalTable } = projectData.schema.tables[table].attributes.isExternalizedBy;\n                const response = await this.environment.server.Requester.request(\"GET\", externalHost, {\n                    ...publicParameters,\n                    project: externalProject,\n                    operation: \"select\",\n                    table: externalTable,\n                }, privateParameters, {\n                    authorization: configurations.authorization\n                }, false, false);\n                if (response.response.status === \"error\") {\n                    throw new Error(response.response.error.message);\n                }\n                return response.response.data;\n            }\n            // @STEP: if it is suboperation 'hasIds':\n            let suboperation = publicParameters.suboperation || undefined;\n            if (suboperation === \"hasIds\") {\n                const allIds = publicParameters.ids.split(\",\").map(id => parseInt(id));\n                const missingIds = [];\n                // this.environment.utils.dieStringify(allIds, allItems);\n                for(let index = 0; index < allIds.length; index++) {\n                    const id = allIds[index];\n                    let isMissingItem = true;\n                    for(let index = 0; index < allItems.length; index++) {\n                        const item = allItems[index];\n                        if(item.id === id) {\n                            isMissingItem = false;\n                        }\n                    }\n                    if(isMissingItem) {\n                        missingIds.push(id);\n                    }\n                }\n                return {\n                    message: \"Operation «select-rows.has-ids» successfully achieved\",\n                    table,\n                    missingIds,\n                }\n            }\n            let matchedItems = [];\n            // @STEP: apply where:\n            if(!where.length) {\n                matchedItems = allItems;\n            } else {\n                FilteringRows:\n                for(let indexRows = 0; indexRows < allItems.length; indexRows++) {\n                    const item = allItems[indexRows];\n                    let isAcceptedRow = true;\n                    ApplyingWheres:\n                    for(let indexWhereRules = 0; indexWhereRules < where.length; indexWhereRules++) {\n                        const whereRule = where[indexWhereRules];\n                        if(!Array.isArray(whereRule)) {\n                            throw new Error(\"Parameter «where» in index «\" + indexWhereRules + \"» must be an array of arrays\");\n                        } else if (whereRule.length !== 2 && whereRule.length !== 3 && whereRule.length !== 4) {\n                            throw new Error(\"Parameter «where» in index «\" + indexWhereRules + \"» does not have 2, 3 or 4 elements\");\n                        }\n                        let [ subject, operation, object = undefined, isType = \"string\" ] = whereRule;\n                        const tableColumns = projectData.schema.tables[table].columns;\n                        if(AVAILABLE_WHERE_OPERATIONS.indexOf(operation) === -1) {\n                            throw new Error(\"Parameter «where» in index «\" + indexWhereRules + \"» must be a valid operator\");\n                        } else if (typeof subject !== \"string\") {\n                            throw new Error(\"Parameter «where» in index «\" + indexWhereRules + \"» has 3 elements but element 1 is not a string\");\n                        } else if (subject === \"id\") {\n                            // @OK\n                        } else if (!(subject in tableColumns)) {\n                            throw new Error(\"Parameter «where» in index «\" + indexWhereRules + \"» has 3 elements but element 1 is not a valid column of «\" + table + \"»\");\n                        }\n                        if(isType === \"json\") {\n                            object = JSON.parse(object);\n                        }\n                        if(operation === \"=null\") {\n                            if(!(subject in item)) {\n                                continue ApplyingWheres;\n                            } else if(item[subject] === null) {\n                                continue ApplyingWheres;\n                            } else {\n                                isAcceptedRow = false;\n                                break ApplyingWheres;\n                            }\n                        } else if(operation === \"!=null\") {\n                            if (!(subject in item)) {\n                                continue ApplyingWheres;\n                            } else if (item[subject] === null) {\n                                continue ApplyingWheres;\n                            } else {\n                                isAcceptedRow = false;\n                                break ApplyingWheres;\n                            }\n                        } else if(whereRule.length < 3) {\n                            throw new Error(\"Parameter «where» in index «\" + indexWhereRules + \"» does not have 3 elements for operation «\" + operation + \"»\");\n                        }\n                        if(operation === \"=\") {\n                            if(item[subject] === object) {\n                                continue ApplyingWheres;\n                            } else {\n                                isAcceptedRow = false;\n                                break ApplyingWheres;\n                            }\n                        } else if (operation === \"!=\") {\n                            if (item[subject] !== object) {\n                                continue ApplyingWheres;\n                            } else {\n                                isAcceptedRow = false;\n                                break ApplyingWheres;\n                            }\n                        } else if (operation === \"<\") {\n                            if (item[subject] < object) {\n                                continue ApplyingWheres;\n                            } else {\n                                isAcceptedRow = false;\n                                break ApplyingWheres;\n                            }\n                        } else if (operation === \"<=\") {\n                            if (item[subject] <= object) {\n                                continue ApplyingWheres;\n                            } else {\n                                isAcceptedRow = false;\n                                break ApplyingWheres;\n                            }\n                        } else if (operation === \">\") {\n                            if (item[subject] > object) {\n                                continue ApplyingWheres;\n                            } else {\n                                isAcceptedRow = false;\n                                break ApplyingWheres;\n                            }\n                        } else if (operation === \">=\") {\n                            if (item[subject] >= object) {\n                                continue ApplyingWheres;\n                            } else {\n                                isAcceptedRow = false;\n                                break ApplyingWheres;\n                            }\n                        } else if (operation === \"has\") {\n                            if (item[subject].indexOf(object) !== -1) {\n                                continue ApplyingWheres;\n                            } else {\n                                isAcceptedRow = false;\n                                break ApplyingWheres;\n                            }\n                        } else if (operation === \"!has\") {\n                            if (item[subject].indexOf(object) === -1) {\n                                continue ApplyingWheres;\n                            } else {\n                                isAcceptedRow = false;\n                                break ApplyingWheres;\n                            }\n                        } else if (operation === \"in\") {\n                            if (object.indexOf(item[subject]) !== -1) {\n                                continue ApplyingWheres;\n                            } else {\n                                isAcceptedRow = false;\n                                break ApplyingWheres;\n                            }\n                        } else if (operation === \"!in\") {\n                            if (object.indexOf(item[subject]) === -1) {\n                                continue ApplyingWheres;\n                            } else {\n                                isAcceptedRow = false;\n                                break ApplyingWheres;\n                            }\n                        }\n                    }\n                    if(isAcceptedRow) {\n                        matchedItems.push(item);\n                    }\n                }\n            }\n            // @STEP: apply sort:\n            let sortedItems = matchedItems;\n            if(sort.length) {\n                const sanitizedSort = [];\n                for(let indexSortRules = 0; indexSortRules < sort.length; indexSortRules++) {\n                    const sortRuleOriginal = sort[indexSortRules];\n                    if (typeof sortRuleOriginal !== \"string\") {\n                        throw new Error(\"Parameter «sort» in index «\" + indexSortRules + \"» must be a string\");\n                    }\n                    const isDescendent = sortRuleOriginal.startsWith(\"!\");\n                    const sortColumn = isDescendent ? sortRuleOriginal.substr(1) : sortRuleOriginal;\n                    if(sortColumn !== \"id\") {\n                        if (!(sortColumn in projectData.schema.tables[table].columns)) {\n                            throw new Error(\"Parameter «sort» in index «\" + indexSortRules + \"» must be a valid column\");\n                        }\n                    }\n                    sanitizedSort.push([ sortColumn, isDescendent ? \"desc\" : \"asc\" ]);\n                }\n                sortedItems = matchedItems.sort(function(itemA, itemB) {\n                    SortingItems:\n                    for(let indexSortRules = 0; indexSortRules < sanitizedSort.length; indexSortRules++) {\n                        const [ column, sense ] = sanitizedSort[indexSortRules];\n                        const itemAHasColumn = (column in itemA) && (itemA[column] !== null);\n                        const itemBHasColumn = (column in itemB) && (itemB[column] !== null);\n                        if((!itemAHasColumn) && (!itemBHasColumn)) {\n                            continue SortingItems;\n                        }\n                        if (sense === \"asc\") {\n                            // @NOTE: NULLs and Undefineds always at the bottom\n                            if(!itemBHasColumn) {\n                                return -1;\n                            } else if(!itemAHasColumn) {\n                                return 1;\n                            } else if(itemB[column] < itemA[column]) {\n                                return 1;\n                            } else if (itemA[column] < itemB[column]) {\n                                return -1;\n                            }\n                        } else if (sense === \"desc\") {\n                            // @NOTE: NULLs and Undefineds always at the bottom\n                            if (!itemBHasColumn) {\n                                return -1;\n                            } else if (!itemAHasColumn) {\n                                return 1;\n                            } else if (itemB[column] < itemA[column]) {\n                                return -1;\n                            } else if (itemA[column] < itemB[column]) {\n                                return 1;\n                            }\n                        }\n                    }\n                    return -1;\n                });\n            }\n            // @STEP: apply paginate:\n            let paginatedResults = sortedItems;\n            if(paginate.length) {\n                const [ page = 1, items = 20 ] = paginate;\n                let currentPage = 1;\n                paginatedResults = [];\n                PaginatingRows:\n                for (let indexRows = 0; indexRows < sortedItems.length; indexRows++) {\n                    const item = sortedItems[indexRows];\n                    if(page === 0) {\n                        // @OK\n                        paginatedResults.push(item);\n                        continue PaginatingRows;\n                    }\n                    if(page === currentPage) {\n                        paginatedResults.push(item);\n                    }\n                    if(((indexRows+1) % items) === 0) {\n                        currentPage++;\n                    }\n                    if(currentPage > page) {\n                        break PaginatingRows;\n                    }\n                }\n            } else {\n                paginatedResults = paginatedResults.slice(0, 20);\n            }\n            // @TODO: apply triggers\n            const response = {\n                message: \"Operation «select-rows» successfully achieved\",\n                table,\n                structure: tableSchema,\n                items: paginatedResults,\n                total: matchedItems.length,\n                pagination: paginate.length ? paginate : [ 1, 20 ]\n            };\n            await protectorHandler.applyOnAfterViewProtectors(response, { results: paginatedResults });\n            return response;\n        } catch (error) {\n            this.environment.utils.debugError(\"SelectRows.execute\", error, true);\n        }\n    }\n\n}\n\nmodule.exports = SelectRows;";
fs.writeFileSync(node_62, node_contents_62, "utf8");

const node_63 = path.resolve(baseDirectory, ".", "src", "classes", "database", "SetFile.js");
const node_contents_63 = "class SetFile {\n\n    constructor(environment) {\n        this.environment = environment;\n    }\n\n    async execute(publicParameters, privateParameters, configurations, originalRequest) {\n        try {\n            this.environment.utils.trace(\"SetFile.execute\");\n            const project = publicParameters.project;\n            const authenticator = new this.environment.auth.Authenticator(this.environment, project);\n            const authentication = await authenticator.authenticate(configurations.authorization);\n            const authorizator = new this.environment.auth.Authorizator(this.environment, project);\n            const authorization = await authorizator.authorize(authentication);\n            const hasAuthorization = await authorization.forOperation(\n                publicParameters.operation,\n                publicParameters.table,\n                publicParameters.id,\n                publicParameters.column\n            );\n            if (!hasAuthorization) {\n                throw new Error(\"User is not allowed to «set-file»\");\n            }\n            this.environment.utils.trace(\"SetFile.execute:lookingForRow\");\n            const { table, column } = publicParameters;\n            if (!this.environment.utils.check.that(table).isStringMatchingRegex(/^[A-Za-z0-9\\.\\-\\_]+$/g)) {\n                throw new Error(\"Parameter «table» must be a non-empty string based only on letters, numbers, '.', '-' and '_' in order to «set-file»\");\n            }\n            if (!this.environment.utils.check.that(column).isStringMatchingRegex(/^[A-Za-z0-9\\.\\-\\_]+$/g)) {\n                throw new Error(\"Parameter «column» must be a non-empty string based only on letters, numbers, '.', '-' and '_' in order to «set-file»\");\n            }\n            let { id = '0' } = publicParameters;\n            if(typeof id === \"string\") {\n                id = parseInt(id);\n            }\n            const selectOperation = new this.environment.database.SelectRows(this.environment);\n            const selectResponse = await selectOperation.execute({\n                project,\n                table,\n                where: JSON.stringify([[ \"id\", \"=\", id ]])\n            }, privateParameters, configurations);\n            if (!selectResponse.items.length) {\n                throw new Error(\"Cannot find row identified by «id» (\" + id + \":\" + typeof(id) + \") in «table» (\" + table + \") in order to «set-file»\");\n            }\n            const [ firstMatched ] = selectResponse.items;\n            this.environment.utils.trace(\"SetFile.execute:rowFound\");\n            const { projectData } = await this.environment.database.Project.initialize(project, \"set-file\");\n            const allowedTypes = [\"file\", \"image\"];\n            if (!this.environment.utils.check.that(projectData).itsProperty([\"schema\", \"tables\", table, \"columns\", column, \"attributes\", \"isType\"], undefined).isOneOf(allowedTypes)) {\n                throw new Error(\"Required parameter «column» (\" + column + \") to match a column in schema that is of type «\" + allowedTypes.join(\"» or «\") + \"» in order «set-file»\")\n            }\n            this.environment.utils.trace(\"SetFile.execute:rowValidated\");\n            const multipartParser = new this.environment.server.MultipartParser(this.environment);\n            const details = await multipartParser.parseRequest(originalRequest);\n            this.environment.utils.trace(\"SetFile.execute:dataParsed\");\n            const { files, fields } = details;\n            const fileKeys = Object.keys(files);\n            if (fileKeys.length === 0) {\n                throw new Error(\"Required parameter «files» in form to be more than 0 in order to «set-file»\");\n            } else if(fileKeys.length > 1) {\n                throw new Error(\"Required parameter «files» in form to not be more than 1 in order to «set-file»\");\n            }\n            const uploadUid = this.environment.utils.generateRandomString(10);\n            const updateOperation = new this.environment.database.UpdateRow(this.environment);\n            const fileKey = Object.keys(files)[0];\n            const value = Object.assign({}, { [column]: null });\n            CopyingFile: {\n                const fileMetadata = files[fileKey];\n                if (typeof fileMetadata.info.filename !== \"string\") {\n                    break CopyingFile;\n                }\n                const fileOrigin = fileMetadata.temporaryPath;\n                const filenameSanitized = fileMetadata.info.filename.substr(0, 100).replace(/[^a-zA-Z0-9\\.\\-]/g, \"x\");\n                const fileDate = this.environment.utils.fromDateToString(new Date(), true).replace(/[\\/\\: ]/g, \"\");\n                const fileDestination = this.environment.utils.resolveFromSrc(\"./data/projects/\" + project + \"/files/file-column.on-\" + fileDate + \".column-\" + table + \".\" + id + column + \".uid-\" + uploadUid + \".as-\" + filenameSanitized);\n                if (!this.environment.utils.check.that(filenameSanitized).isStringMatchingRegex(/^[A-Za-z0-9\\-\\.\\_]+/g)) {\n                    throw new Error(\"Required parameter «filename» (\" + filenameSanitized + \") to only be composed by letters, numbers and «-», «.» and «_» in order to «set-file»\");\n                }\n                await this.environment.utils.copyFile(fileOrigin, fileDestination);\n                delete details.files[fileKey].temporaryPath;\n                details.files[fileKey].uploadPath = fileOrigin.replace(this.environment.settings.PROJECT_SRC + \"/\", \"./\");\n                details.files[fileKey].columnPath = fileDestination.replace(this.environment.settings.PROJECT_SRC + \"/\", \"./\");\n                value[column] = details.files[fileKey].columnPath;\n                this.environment.utils.trace(\"SetFile.execute:fileDumped\");\n            }\n            this.environment.utils.trace(\"SetFile.execute:allFilesDumped\");\n            const updateResponse = await updateOperation.execute({\n                project,\n            }, {\n                table,\n                id,\n                value: JSON.stringify(value),\n            }, configurations);\n            this.environment.utils.trace(\"SetFile.execute:rowUpdated\");\n            // @TODO: apply protectors\n            // @TODO........\n            // @TODO........\n            // @TODO........\n            // @TODO........\n            // @TODO: apply triggers\n            const response = {\n                message: \"Operation «set-file» successfully achieved\",\n                details\n            }\n            return response;\n        } catch (error) {\n            this.environment.utils.debugError(\"SetFile.execute\", error, true);\n        }\n    }\n\n}\n\nmodule.exports = SetFile;";
fs.writeFileSync(node_63, node_contents_63, "utf8");

const node_64 = path.resolve(baseDirectory, ".", "src", "classes", "database", "TransactionManager.js");
const node_contents_64 = "class TransactionsList {\n\n    constructor() {\n        this.operations = [];\n    }\n\n    push(transaction) {\n        let wasEmpty = this.operations.length === 0;\n        this.operations.push(transaction);\n        if(wasEmpty) this.dispatching();\n    }\n\n    dispatching() {\n        if(this.operations.length !== 0) {\n            const transaction = this.operations[0];\n            const [callback, dispatchedOk, dispatchedFailed ] = transaction;\n            callback((data) => {\n                this.operations.shift();\n                dispatchedOk(data);\n                this.dispatching();\n            }, (error) => {\n                this.operations.shift();\n                dispatchedFailed(error);\n                this.dispatching();\n            });\n        }\n    }\n\n}\n\nclass Transactor {\n\n    constructor() {\n        this.transactions = new TransactionsList();\n    }\n\n    block(callback) {\n        return new Promise((ok, fail) => {\n            this.transactions.push([\n                callback,\n                ok,\n                fail,\n            ]);\n        });\n    }\n\n}\n\nclass TransactionManager {\n\n    static get Transactor() {\n        return Transactor;\n    }\n\n    static get TransactionsList() {\n        return TransactionsList;\n    }\n\n    constructor() {\n        this.resources = {};\n    }\n\n    block(resourceId, callback) {\n        if(!(resourceId in this.resources)) {\n            this.resources[resourceId] = new Transactor();\n        }\n        return this.resources[resourceId].block(callback);\n    }\n\n}\n\nmodule.exports = new TransactionManager();";
fs.writeFileSync(node_64, node_contents_64, "utf8");

const node_65 = path.resolve(baseDirectory, ".", "src", "classes", "database", "UpdateColumn.js");
const node_contents_65 = "class UpdateColumn {\n\n    constructor(environment) {\n        this.environment = environment;\n    }\n\n    async execute(publicParameters, privateParameters, configurations) {\n        try {\n            this.environment.utils.trace(\"UpdateColumn.execute\");\n            const project = publicParameters.project;\n            const authenticator = new this.environment.auth.Authenticator(this.environment, project);\n            const authentication = await authenticator.authenticate(configurations.authorization);\n            const authorizator = new this.environment.auth.Authorizator(this.environment, project);\n            const authorization = await authorizator.authorize(authentication);\n            const hasAuthorization = await authorization.forOperation(\n                publicParameters.operation\n            );\n            if (!hasAuthorization) {\n                throw new Error(\"User is not allowed to «update-column»\");\n            }\n            // @TODO: apply protectors\n            const { table, column, attributes: attributesOriginal = \"{}\", properties: propertiesOriginal = \"{}\" } = privateParameters;\n            if (!this.environment.utils.check.that(project).isStringMatchingRegex(/^[A-Za-z0-9\\.\\-\\_]+$/g)) {\n                throw new Error(\"Parameter «project» must be a non-empty string based only on letters, numbers, '.', '-' and '_' in order to «delete-row»\");\n            }\n            if (!this.environment.utils.check.that(table).isStringMatchingRegex(/^[A-Za-z0-9\\.\\-\\_]+$/g)) {\n                throw new Error(\"Parameter «table» must be a non-empty string based only on letters, numbers, '.', '-' and '_' in order to «update-column»\");\n            }\n            if (!this.environment.utils.check.that(column).isStringMatchingRegex(/^[A-Za-z0-9\\.\\-\\_]+$/g)) {\n                throw new Error(\"Parameter «column» must be a non-empty string based only on letters, numbers, '.', '-' and '_' in order to «update-column»\");\n            }\n            if (!this.environment.utils.check.that(attributesOriginal).isString()) {\n                throw new Error(\"Parameter «attributes» must be a string or omitted in order to «update-column»\");\n            }\n            if (!this.environment.utils.check.that(propertiesOriginal).isString()) {\n                throw new Error(\"Parameter «properties» must be a string or omitted in order to «update-column»\");\n            }\n            const attributes = JSON.parse(attributesOriginal);\n            const properties = JSON.parse(propertiesOriginal);\n            if (!this.environment.utils.check.that(attributes).isObject()) {\n                throw new Error(\"Parameter «attributes» must be a JSON object or omitted in order to «update-column»\");\n            }\n            if (!this.environment.utils.check.that(properties).isObject()) {\n                throw new Error(\"Parameter «properties» must be a JSON object or omitted in order to «update-column»\");\n            }\n            await this.environment.database.TransactionManager.block(project + \"/project.json\", async (unblock, unblockFailing) => {\n                try {\n                    const { projectPath, projectData } = await this.environment.database.Project.initialize(project, \"update-column\");\n                    if (!(table in projectData.schema.tables)) {\n                        throw new Error(\"Parameter «table» must exist as table in schema in order to «update-column»\");\n                    }\n                    if (!(column in projectData.schema.tables[table].columns)) {\n                        throw new Error(\"Parameter «column» must exist as column in schema in order to «update-column»\");\n                    }\n                    projectData.schema.tables[table].columns[column] = {\n                        attributes: Object.assign({}, this.environment.database.constructor.DEFAULT_COLUMN_ATTRIBUTES, projectData.schema.tables[table].columns[column].attributes, attributes),\n                        properties: Object.assign({}, this.environment.database.constructor.DEFAULT_COLUMN_PROPERTIES, projectData.schema.tables[table].columns[column].properties, properties),\n                    };\n                    await this.environment.utils.dehydrateJSON(projectPath, projectData);\n                    unblock();\n                } catch (error) {\n                    unblockFailing(error);\n                }\n            });\n            // @TODO: apply triggers\n            return { message: \"Operation «update-column» successfully achieved\", table, column };\n        } catch (error) {\n            this.environment.utils.debugError(\"UpdateColumn.execute\", error, true);\n        }\n    }\n\n}\n\nmodule.exports = UpdateColumn;";
fs.writeFileSync(node_65, node_contents_65, "utf8");

const node_66 = path.resolve(baseDirectory, ".", "src", "classes", "database", "UpdateProtector.js");
const node_contents_66 = "class UpdateProtector {\n\n    constructor(environment) {\n        this.environment = environment;\n    }\n\n    async execute(publicParameters, privateParameters, configurations) {\n        try {\n            this.environment.utils.trace(\"UpdateProtector.execute\");\n            const project = publicParameters.project;\n            const authenticator = new this.environment.auth.Authenticator(this.environment, project);\n            const authentication = await authenticator.authenticate(configurations.authorization);\n            const authorizator = new this.environment.auth.Authorizator(this.environment, project);\n            const authorization = await authorizator.authorize(authentication);\n            const hasAuthorization = await authorization.forOperation(\n                publicParameters.operation\n            );\n            if (!hasAuthorization) {\n                throw new Error(\"User is not allowed to «update-protector»\");\n            }\n            // @TODO: apply protectors\n            const { table } = privateParameters;\n            const { protector_new_name = undefined, protector_name, protector_type, parameters: parametersOriginal } = privateParameters;\n            if (!this.environment.utils.check.that(project).isStringMatchingRegex(/^[A-Za-z0-9\\.\\-\\_]+$/g)) {\n                throw new Error(\"Parameter «project» must be a non-empty string based only on letters, numbers, '.', '-' and '_' in order to «update-protector»\");\n            }\n            if (!this.environment.utils.check.that(table).isStringMatchingRegex(/^[A-Za-z0-9\\.\\-\\_]+$/g)) {\n                throw new Error(\"Parameter «table» must be a non-empty string based only on letters, numbers, '.', '-' and '_' in order to «update-protector»\");\n            }\n            if (!this.environment.utils.check.that(parametersOriginal).isString()) {\n                throw new Error(\"Parameter «parameters» must be a string in order to «update-protector»\");\n            }\n            if ((!this.environment.utils.check.that(protector_new_name)) && (!this.environment.utils.check.that(protector_new_name).isStringMatchingRegex(/^[A-Za-z0-9\\.\\-\\_]+$/g))) {\n                throw new Error(\"Parameter «protector_new_name» must be ommited or a string based only on letters, numbers, '.', '-' and '_' in order to «update-protector»\");\n            }\n            if (!this.environment.utils.check.that(protector_type).isStringMatchingRegex(/^[A-Za-z0-9\\.\\-\\_]+$/g)) {\n                throw new Error(\"Parameter «protector_type» must be ommited or a string based only on letters, numbers, '.', '-' and '_' in order to «update-protector»\");\n            }\n            if (!this.environment.utils.check.that(protector_name).isString()) {\n                throw new Error(\"Parameter «protector_name» must be a string in order to «update-protector»\");\n            }\n            const parameters = JSON.parse(parametersOriginal);\n            if (!this.environment.utils.check.that(parameters).isObject()) {\n                throw new Error(\"Parameter «parameters» must be a JSON object in order to «update-protector»\");\n            }\n            await this.environment.database.TransactionManager.block(project + \"/project.json\", async (unblock, unblockFailing) => {\n                try {\n                    const { projectPath, projectData } = await this.environment.database.Project.initialize(project, \"update-table\");\n                    if (!(table in projectData.schema.tables)) {\n                        throw new Error(\"Parameter «table» must exist as table in schema in order to «update-protector»\");\n                    }\n                    const tableProtectors = projectData.schema.tables[table].attributes.hasProtectors || [];\n                    const coincidingProtectors = tableProtectors.filter(protector => protector.name === protector_name);\n                    if (this.environment.utils.check.that(coincidingProtectors.length).equals(0)) {\n                        throw new Error(\"Parameter «protector_name» must exist as table protector name in order to «update-protector»\");\n                    }\n                    if (!this.environment.utils.check.that(coincidingProtectors.length).equals(1)) {\n                        throw new Error(\"Parameter «protector_name» must be unique as table protector name in order to «update-protector»\");\n                    }\n                    const availableProtectorIdsBrute = await this.environment.utils.listDirectory(__dirname + \"/protectors\");\n                    const availableProtectorIds = availableProtectorIdsBrute.filter(protector => protector.endsWith(\".js\")).map(protector => protector.replace(/\\.js$/g, \"\"));\n                    if (availableProtectorIds.indexOf(protector_type) === -1) {\n                        throw new Error(\"Parameter «parameter_type» must match a valid protector type in order to «update-protector»\");\n                    }\n                    const protectorClass = require(__dirname + \"/protectors/\" + protector_type + \".js\");\n                    await protectorClass.checkSettings(parameters, projectData, table, \"update-protector\");\n                    if (!(\"hasProtectors\" in projectData.schema.tables[table].attributes)) {\n                        projectData.schema.tables[table].attributes.hasProtectors = [];\n                    }\n                    projectData.schema.tables[table].attributes.hasProtectors = projectData.schema.tables[table].attributes.hasProtectors.map(protector => {\n                        if(protector.name !== protector_name) {\n                            return protector;\n                        }\n                        return {\n                            id: protector_type,\n                            fixed: false,\n                            name: protector_new_name,\n                            parameters,\n                        };\n                    });\n                    await this.environment.utils.dehydrateJSON(projectPath, projectData);\n                    unblock();\n                } catch (error) {\n                    unblockFailing(error);\n                }\n            });\n            // @TODO: apply triggers\n            return { message: \"Operation «update-protector» successfully achieved\", project };\n        } catch (error) {\n            this.environment.utils.debugError(\"UpdateProtector.execute\", error, true);\n        }\n    }\n\n}\n\nmodule.exports = UpdateProtector;";
fs.writeFileSync(node_66, node_contents_66, "utf8");

const node_67 = path.resolve(baseDirectory, ".", "src", "classes", "database", "UpdateRow.js");
const node_contents_67 = "class UpdateRow {\n\n    constructor(environment) {\n        this.environment = environment;\n    }\n\n    async execute(publicParameters, privateParameters, configurations) {\n        try {\n            this.environment.utils.trace(\"UpdateRow.execute\");\n            const project = publicParameters.project;\n            const authenticator = new this.environment.auth.Authenticator(this.environment, project);\n            const authentication = await authenticator.authenticate(configurations.authorization);\n            const authorizator = new this.environment.auth.Authorizator(this.environment, project);\n            const authorization = await authorizator.authorize(authentication);\n            const hasAuthorization = await authorization.forOperation(\n                publicParameters.operation,\n                privateParameters.table,\n                privateParameters.id,\n                privateParameters.value\n            );\n            if (!hasAuthorization) {\n                throw new Error(\"User is not allowed to «update-row»\");\n            }\n            // @TODO: apply protectors\n            const { table, id, value } = privateParameters;\n            if (!this.environment.utils.check.that(project).isStringMatchingRegex(/^[A-Za-z0-9\\.\\-\\_]+$/g)) {\n                throw new Error(\"Parameter «project» must be a non-empty string based only on letters, numbers, '.', '-' and '_' in order to «update-row»\");\n            }\n            if (!this.environment.utils.check.that(table).isStringMatchingRegex(/^[A-Za-z0-9\\.\\-\\_]+$/g)) {\n                throw new Error(\"Parameter «table» must be a non-empty string based only on letters, numbers, '.', '-' and '_' in order to «update-row»\");\n            }\n            if (!this.environment.utils.check.that(id).isInteger()) {\n                throw new Error(\"Parameter «id» must be an integer number in order to «update-row»\");\n            }\n            const originalValueParsed = JSON.parse(value);\n            const { projectData } = await this.environment.database.Project.initialize(project, \"update-row\");\n            // @STEP: A) if it is an externalized table:\n            if (this.environment.utils.check.that(projectData).itsProperty([\"schema\", \"tables\", table, \"attributes\", \"isExternalizedBy\"], undefined).isObject()) {\n                const { host: externalHost, project: externalProject, table: externalTable } = projectData.schema.tables[table].attributes.isExternalizedBy;\n                const response = await this.environment.server.Requester.request(\"POST\", externalHost, {\n                    ...publicParameters,\n                    project: externalProject,\n                    operation: \"update\",\n                }, {\n                    ...privateParameters,\n                    table: externalTable\n                }, {\n                    authorization: configurations.authorization\n                }, false, false);\n                if (response.response.status === \"error\") {\n                    throw new Error(response.response.error.message);\n                }\n                return response.response.data;\n            }\n            // @STEP: B) if it is a local table:\n            const protectorErrors = [];\n            let valueFixed = undefined;\n            const protectorHandler = await this.environment.database.ProtectorHandler.initialize(this.environment, publicParameters, privateParameters, configurations, authentication, projectData);\n            await this.environment.database.TransactionManager.block(project + \"/\" + table + \".json\", async (unblock, unblockFailing) => {\n                try {\n                    this.environment.utils.trace(\"UpdateRow.execute:transaction#1\");\n                    const tablePath = this.environment.utils.resolveFromSrc(\"data/projects/\" + project + \"/data/\" + table + \".json\");\n                    const tableDB = await this.environment.utils.hydrateJSON(tablePath);\n                    if(!(id in tableDB.data)) {\n                        throw new Error(\"Parameter «id» must refer to an existing «\" + table + \"» identifier in order to «update-row»\");\n                    }\n                    const valuePrevious = tableDB.data[id];\n                    let valueParsed = Object.assign({}, valuePrevious, originalValueParsed, { id });\n                    await protectorHandler.applyOnBeforePersistProtectors({ value: valueParsed, protectorErrors });\n                    valueParsed = Object.assign({}, valuePrevious, valueParsed, { id });\n                    valueFixed = await this.environment.utils.check.that(valueParsed).followsSchemaOf(projectData, table, tableDB.data, \"update\", project, configurations.authorization, authentication, this.environment);\n                    tableDB.data[id] = valueFixed;\n                    await this.environment.utils.dehydrateJSON(tablePath, tableDB);\n                    unblock();\n                } catch (error) {\n                    unblockFailing(error);\n                }\n            });\n            const response = {\n                message: \"Operation «update-row» successfully achieved\",\n                table,\n                // id: valueFixed.id,\n                item: valueFixed,\n                protectorErrors,\n            };\n            await protectorHandler.applyOnAfterPersistProtectors(response, { value: valueFixed });\n            return response;\n        } catch (error) {\n            this.environment.utils.debugError(\"UpdateRow.execute\", error, true);\n        }\n    }\n\n}\n\nmodule.exports = UpdateRow;";
fs.writeFileSync(node_67, node_contents_67, "utf8");

const node_68 = path.resolve(baseDirectory, ".", "src", "classes", "database", "UpdateTable.js");
const node_contents_68 = "class UpdateTable {\n\n    constructor(environment) {\n        this.environment = environment;\n    }\n\n    async execute(publicParameters, privateParameters, configurations) {\n        try {\n            this.environment.utils.trace(\"UpdateTable.execute\");\n            const project = publicParameters.project;\n            const authenticator = new this.environment.auth.Authenticator(this.environment, project);\n            const authentication = await authenticator.authenticate(configurations.authorization);\n            const authorizator = new this.environment.auth.Authorizator(this.environment, project);\n            const authorization = await authorizator.authorize(authentication);\n            const hasAuthorization = await authorization.forOperation(\n                publicParameters.operation\n            );\n            if (!hasAuthorization) {\n                throw new Error(\"User is not allowed to «update-table»\");\n            }\n            // @TODO: apply protectors\n            const { table, attributes: attributesOriginal = \"{}\", properties: propertiesOriginal = \"{}\" } = privateParameters;\n            if (!this.environment.utils.check.that(project).isStringMatchingRegex(/^[A-Za-z0-9\\.\\-\\_]+$/g)) {\n                throw new Error(\"Parameter «project» must be a non-empty string based only on letters, numbers, '.', '-' and '_' in order to «delete-row»\");\n            }\n            if (!this.environment.utils.check.that(table).isStringMatchingRegex(/^[A-Za-z0-9\\.\\-\\_]+$/g)) {\n                throw new Error(\"Parameter «table» must be a non-empty string based only on letters, numbers, '.', '-' and '_' in order to «update-table»\");\n            }\n            if (!this.environment.utils.check.that(attributesOriginal).isString()) {\n                throw new Error(\"Parameter «attributes» must be a string or omitted in order to «update-table»\");\n            }\n            if (!this.environment.utils.check.that(propertiesOriginal).isString()) {\n                throw new Error(\"Parameter «properties» must be a string or omitted in order to «update-table»\");\n            }\n            const attributes = JSON.parse(attributesOriginal);\n            const properties = JSON.parse(propertiesOriginal);\n            if (!this.environment.utils.check.that(attributes).isObject()) {\n                throw new Error(\"Parameter «attributes» must be a JSON object or omitted in order to «update-table»\");\n            }\n            if (!this.environment.utils.check.that(properties).isObject()) {\n                throw new Error(\"Parameter «properties» must be a JSON object or omitted in order to «update-table»\");\n            }\n            await this.environment.database.TransactionManager.block(project + \"/project.json\", async (unblock, unblockFailing) => {\n                try {\n                    const { projectPath, projectData } = await this.environment.database.Project.initialize(project, \"update-table\");\n                    if (!(table in projectData.schema.tables)) {\n                        throw new Error(\"Parameter «table» must exist as table in schema in order to «update-table»\");\n                    }\n                    delete attributes.hasProtectors;\n                    projectData.schema.tables[table] = {\n                        attributes: Object.assign({}, this.environment.database.constructor.DEFAULT_TABLE_ATTRIBUTES, projectData.schema.tables[table].attributes, attributes),\n                        properties: Object.assign({}, this.environment.database.constructor.DEFAULT_TABLE_PROPERTIES, projectData.schema.tables[table].properties, properties),\n                        columns: projectData.schema.tables[table].columns\n                    };\n                    await this.environment.utils.dehydrateJSON(projectPath, projectData);\n                    unblock();\n                } catch (error) {\n                    unblockFailing(error);\n                }\n            });\n            // @TODO: apply triggers\n            return { message: \"Operation «update-table» successfully achieved\", table };\n        } catch (error) {\n            this.environment.utils.debugError(\"UpdateTable.execute\", error, true);\n        }\n    }\n\n}\n\nmodule.exports = UpdateTable;";
fs.writeFileSync(node_68, node_contents_68, "utf8");

const node_69 = path.resolve(baseDirectory, ".", "src", "classes", "database", "ViewSchema.js");
const node_contents_69 = "class ViewSchema {\n\n    constructor(environment) {\n        this.environment = environment;\n    }\n\n    async execute(publicParameters, privateParameters, configurations) {\n        try {\n            this.environment.utils.trace(\"ViewSchema.execute\");\n            const project = publicParameters.project;\n            const authenticator = new this.environment.auth.Authenticator(this.environment, project);\n            const authentication = await authenticator.authenticate(configurations.authorization);\n            const authorizator = new this.environment.auth.Authorizator(this.environment, project);\n            const authorization = await authorizator.authorize(authentication);\n            const hasAuthorization = await authorization.forOperation(\n                publicParameters.operation\n            );\n            if (!hasAuthorization) {\n                throw new Error(\"User is not allowed to «view-schema»\");\n            }\n            // @TODO: apply protectors\n            if (!this.environment.utils.check.that(project).isStringMatchingRegex(/^[A-Za-z0-9\\.\\-\\_]+$/g)) {\n                throw new Error(\"Parameter «project» must be a non-empty string based only on letters, numbers, '.', '-' and '_' in order to «delete-row»\");\n            }\n            const { projectData } = await this.environment.database.Project.initialize(project, \"view-schema\");\n            const schema = projectData.schema;\n            // @TODO: apply triggers\n            return { message: \"Operation «view-schema» successfully achieved\", schema };\n        } catch (error) {\n            this.environment.utils.debugError(\"ViewSchema.execute\", error, true);\n        }\n    }\n\n}\n\nmodule.exports = ViewSchema;";
fs.writeFileSync(node_69, node_contents_69, "utf8");

const node_70 = path.resolve(baseDirectory, ".", "src", "classes", "database", "defaults");
fs.mkdirSync(node_70);

const node_71 = path.resolve(baseDirectory, ".", "src", "classes", "database", "defaults", "groups.json");
const node_contents_71 = "{\n    \"id\": 2,\n    \"data\": {\n        \"1\": {\n            \"id\": 1,\n            \"name\": \"administrator\",\n            \"description\": \"It is the first and main group of any project.\",\n            \"privileges\": [1]\n        }\n    }\n}";
fs.writeFileSync(node_71, node_contents_71, "utf8");

const node_72 = path.resolve(baseDirectory, ".", "src", "classes", "database", "defaults", "privileges.json");
const node_contents_72 = "{\n    \"id\": 2,\n    \"data\": {\n        \"1\": {\n            \"id\": 1,\n            \"name\": \"to administrate\",\n            \"description\": \"It is the first and main privilege of any project.\"\n        }\n    }\n}";
fs.writeFileSync(node_72, node_contents_72, "utf8");

const node_73 = path.resolve(baseDirectory, ".", "src", "classes", "database", "defaults", "project.json");
const node_contents_73 = "{\n    \"schema\": {\n        \"attributes\": {\n            \"hasEnabledProcesses\": {\n                \"restologia.official.org/common/os\": false,\n                \"restologia.official.org/common/ping\": true\n            }\n        },\n        \"tables\": {\n            \"users\": {\n                \"attributes\": {\n                    \"hasDescription\": \"It stores users that can log into the app.\",\n                    \"hasProtectors\": [{\n                        \"id\": \"ForbidItemPersister\",\n                        \"fixed\": true,\n                        \"parameters\": {\n                            \"Allowed user column\": \"id\",\n                            \"Allowed privileges\": \"to administrate\"\n                        }\n                    }, {\n                        \"id\": \"ForbidItemViewer\",\n                        \"fixed\": true,\n                        \"parameters\": {\n                            \"Allowed user column\": \"id\",\n                            \"Allowed privileges\": \"to administrate\"\n                        }\n                    }, {\n                        \"id\": \"ForbidFieldsViewer\",\n                        \"fixed\": true,\n                        \"parameters\": {\n                            \"Forbid fields\": \"password\",\n                            \"Allowed user column\": null,\n                            \"Allowed privileges\": null\n                        }\n                    }, {\n                        \"id\": \"ForbidFieldsPersister\",\n                        \"fixed\": true,\n                        \"parameters\": {\n                            \"Forbid fields\": \"groups,privileges\",\n                            \"Allowed user column\": null,\n                            \"Allowed privileges\": \"to administrate\"\n                        }\n                    }]\n                },\n                \"columns\": {\n                    \"name\": {\n                        \"attributes\": {\n                            \"isUnique\": true,\n                            \"isType\": \"string\",\n                            \"isSubtype\": null,\n                            \"isEncrypted\": false,\n                            \"isReferenceOf\": null,\n                            \"isNullable\": false,\n                            \"hasDefault\": null,\n                            \"hasMinimum\": 6,\n                            \"hasMaximum\": 100,\n                            \"hasPattern\": \"^[A-Za-z0-9\\\\-_$\\\\.]$\",\n                            \"hasPatternErrorMessage\": \"Parameter «users.name» only allows letters, numbers, '-', '_', '$' and '.'\",\n                            \"hasDescription\": \"It represents the name of the user\"\n                        }\n                    },\n                    \"password\": {\n                        \"attributes\": {\n                            \"isUnique\": false,\n                            \"isType\": \"string\",\n                            \"isSubtype\": \"password\",\n                            \"isEncrypted\": true,\n                            \"isReferenceOf\": null,\n                            \"isNullable\": false,\n                            \"hasDefault\": null,\n                            \"hasMinimum\": 6,\n                            \"hasMaximum\": 100,\n                            \"hasPattern\": false,\n                            \"hasPatternErrorMessage\": false,\n                            \"hasDescription\": \"It represents the password of the user\"\n                        }\n                    },\n                    \"email\": {\n                        \"attributes\": {\n                            \"isUnique\": true,\n                            \"isType\": \"string\",\n                            \"isSubtype\": \"email\",\n                            \"isEncrypted\": false,\n                            \"isReferenceOf\": null,\n                            \"isNullable\": false,\n                            \"hasDefault\": null,\n                            \"hasMinimum\": 5,\n                            \"hasMaximum\": 100,\n                            \"hasPattern\": false,\n                            \"hasPatternErrorMessage\": false,\n                            \"hasDescription\": \"It represents the email of the user\"\n                        }\n                    },\n                    \"profile_image\": {\n                        \"attributes\": {\n                            \"isUnique\": false,\n                            \"isType\": \"image\",\n                            \"isSubtype\": null,\n                            \"isEncrypted\": false,\n                            \"isReferenceOf\": null,\n                            \"isNullable\": true,\n                            \"hasDefault\": null,\n                            \"hasMinimum\": 5,\n                            \"hasMaximum\": 100,\n                            \"hasPattern\": false,\n                            \"hasPatternErrorMessage\": false,\n                            \"hasDescription\": \"It represents the image of the user\"\n                        }\n                    },\n                    \"groups\": {\n                        \"attributes\": {\n                            \"isUnique\": false,\n                            \"isType\": \"list\",\n                            \"isSubtype\": null,\n                            \"isEncrypted\": false,\n                            \"isReferenceOf\": \"groups\",\n                            \"isNullable\": true,\n                            \"hasDefault\": [],\n                            \"hasDescription\": \"It represents the groups that the user belongs to\"\n                        }\n                    },\n                    \"privileges\": {\n                        \"attributes\": {\n                            \"isUnique\": false,\n                            \"isType\": \"list\",\n                            \"isSubtype\": null,\n                            \"isEncrypted\": false,\n                            \"isReferenceOf\": \"privileges\",\n                            \"isNullable\": true,\n                            \"hasDefault\": [],\n                            \"hasDescription\": \"It represents the privileges that the user owns by itself and not by belonging to a group\"\n                        }\n                    },\n                    \"created_at\": {\n                        \"attributes\": {\n                            \"isUnique\": false,\n                            \"isType\": \"time\",\n                            \"isSubtype\": \"on_created\",\n                            \"isEncrypted\": false,\n                            \"isReferenceOf\": null,\n                            \"isNullable\": true,\n                            \"hasDefault\": null,\n                            \"hasMinimum\": false,\n                            \"hasMaximum\": false,\n                            \"hasDescription\": \"It represents the moment the user was created\"\n                        }\n                    },\n                    \"updated_at\": {\n                        \"attributes\": {\n                            \"isUnique\": false,\n                            \"isType\": \"time\",\n                            \"isSubtype\": \"on_updated\",\n                            \"isEncrypted\": false,\n                            \"isReferenceOf\": null,\n                            \"isNullable\": true,\n                            \"hasDefault\": null,\n                            \"hasMinimum\": false,\n                            \"hasMaximum\": false,\n                            \"hasDescription\": \"It represents the moment the user was lastly updated\"\n                        }\n                    }\n                }\n            },\n            \"groups\": {\n                \"attributes\": {\n                    \"hasDescription\": \"It stores groups that users can belong to.\",\n                    \"hasProtectors\": [{\n                        \"id\": \"ForbidItemPersister\",\n                        \"fixed\": true,\n                        \"parameters\": {\n                            \"Allowed user column\": null,\n                            \"Allowed privileges\": \"to administrate\"\n                        }\n                    }]\n                },\n                \"columns\": {\n                    \"name\": {\n                        \"attributes\": {\n                            \"isUnique\": true,\n                            \"isType\": \"string\",\n                            \"isSubtype\": null,\n                            \"isEncrypted\": false,\n                            \"isReferenceOf\": null,\n                            \"isNullable\": false,\n                            \"hasDefault\": null,\n                            \"hasMinimum\": 1,\n                            \"hasMaximum\": 100,\n                            \"hasPattern\": false,\n                            \"hasPatternErrorMessage\": false,\n                            \"hasDescription\": \"It represents the name of the group\"\n                        }\n                    },\n                    \"description\": {\n                        \"attributes\": {\n                            \"isUnique\": false,\n                            \"isType\": \"string\",\n                            \"isSubtype\": null,\n                            \"isEncrypted\": false,\n                            \"isReferenceOf\": null,\n                            \"isNullable\": false,\n                            \"hasDefault\": null,\n                            \"hasMinimum\": 1,\n                            \"hasMaximum\": 1000,\n                            \"hasPattern\": false,\n                            \"hasPatternErrorMessage\": false,\n                            \"hasDescription\": \"It represents the description of the group\"\n                        }\n                    },\n                    \"privileges\": {\n                        \"attributes\": {\n                            \"isUnique\": false,\n                            \"isType\": \"list\",\n                            \"isSubtype\": null,\n                            \"isEncrypted\": false,\n                            \"isReferenceOf\": \"privileges\",\n                            \"isNullable\": true,\n                            \"hasDefault\": [],\n                            \"hasDescription\": \"It represents the privileges the group has by itself\"\n                        }\n                    },\n                    \"created_at\": {\n                        \"attributes\": {\n                            \"isUnique\": false,\n                            \"isType\": \"time\",\n                            \"isSubtype\": \"on_created\",\n                            \"isEncrypted\": false,\n                            \"isReferenceOf\": null,\n                            \"isNullable\": true,\n                            \"hasDefault\": null,\n                            \"hasMinimum\": false,\n                            \"hasMaximum\": false,\n                            \"hasDescription\": \"It represents the moment the session was created\"\n                        }\n                    },\n                    \"updated_at\": {\n                        \"attributes\": {\n                            \"isUnique\": false,\n                            \"isType\": \"time\",\n                            \"isSubtype\": \"on_updated\",\n                            \"isEncrypted\": false,\n                            \"isReferenceOf\": null,\n                            \"isNullable\": true,\n                            \"hasDefault\": null,\n                            \"hasMinimum\": false,\n                            \"hasMaximum\": false,\n                            \"hasDescription\": \"It represents the moment the session was lastly updated\"\n                        }\n                    }\n                }\n            },\n            \"privileges\": {\n                \"attributes\": {\n                    \"hasDescription\": \"It stores privileges that users and groups can own.\",\n                    \"hasProtectors\": [{\n                        \"id\": \"ForbidItemPersister\",\n                        \"fixed\": true,\n                        \"parameters\": {\n                            \"Allowed user column\": null,\n                            \"Allowed privileges\": \"to administrate\"\n                        }\n                    }]\n                },\n                \"columns\": {\n                    \"name\": {\n                        \"attributes\": {\n                            \"isUnique\": true,\n                            \"isType\": \"string\",\n                            \"isSubtype\": null,\n                            \"isEncrypted\": false,\n                            \"isReferenceOf\": null,\n                            \"isNullable\": false,\n                            \"hasDefault\": null,\n                            \"hasMinimum\": 1,\n                            \"hasMaximum\": 100,\n                            \"hasPattern\": false,\n                            \"hasPatternErrorMessage\": false,\n                            \"hasDescription\": \"It represents the name of the privilege\"\n                        }\n                    },\n                    \"description\": {\n                        \"attributes\": {\n                            \"isUnique\": false,\n                            \"isType\": \"string\",\n                            \"isSubtype\": null,\n                            \"isEncrypted\": false,\n                            \"isReferenceOf\": null,\n                            \"isNullable\": false,\n                            \"hasDefault\": null,\n                            \"hasMinimum\": 1,\n                            \"hasMaximum\": 1000,\n                            \"hasPattern\": false,\n                            \"hasPatternErrorMessage\": false,\n                            \"hasDescription\": \"It represents the description of the privilege\"\n                        }\n                    },\n                    \"created_at\": {\n                        \"attributes\": {\n                            \"isUnique\": false,\n                            \"isType\": \"time\",\n                            \"isSubtype\": \"on_created\",\n                            \"isEncrypted\": false,\n                            \"isReferenceOf\": null,\n                            \"isNullable\": true,\n                            \"hasDefault\": null,\n                            \"hasMinimum\": false,\n                            \"hasMaximum\": false,\n                            \"hasDescription\": \"It represents the moment the privilege was created\"\n                        }\n                    },\n                    \"updated_at\": {\n                        \"attributes\": {\n                            \"isUnique\": false,\n                            \"isType\": \"time\",\n                            \"isSubtype\": \"on_updated\",\n                            \"isEncrypted\": false,\n                            \"isReferenceOf\": null,\n                            \"isNullable\": true,\n                            \"hasDefault\": null,\n                            \"hasMinimum\": false,\n                            \"hasMaximum\": false,\n                            \"hasDescription\": \"It represents the moment the privilege was lastly updated\"\n                        }\n                    }\n                }\n            },\n            \"sessions\": {\n                \"attributes\": {\n                    \"hasDescription\": \"It stores alive user sessions of the app.\",\n                    \"hasProtectors\": [{\n                        \"id\": \"ForbidItemPersister\",\n                        \"fixed\": true,\n                        \"parameters\": {\n                            \"Allowed user column\": null,\n                            \"Allowed privileges\": \"to administrate\"\n                        }\n                    }, {\n                        \"id\": \"ForbidItemViewer\",\n                        \"fixed\": true,\n                        \"parameters\": {\n                            \"Forbid fields\": \"token\",\n                            \"Allowed user column\": \"user\",\n                            \"Allowed privileges\": \"to administrate\"\n                        }\n                    }, {\n                        \"id\": \"ForbidFieldsViewer\",\n                        \"fixed\": true,\n                        \"parameters\": {\n                            \"Forbid fields\": \"token\",\n                            \"Allowed user column\": null,\n                            \"Allowed privileges\": \"to administrate\"\n                        }\n                    }]\n                },\n                \"columns\": {\n                    \"user\": {\n                        \"attributes\": {\n                            \"isUnique\": true,\n                            \"isType\": \"object\",\n                            \"isSubtype\": null,\n                            \"isEncrypted\": false,\n                            \"isReferenceOf\": \"users\",\n                            \"isNullable\": false,\n                            \"hasDefault\": null,\n                            \"hasDescription\": \"It represents the user that belongs this session to\"\n                        }\n                    },\n                    \"token\": {\n                        \"attributes\": {\n                            \"isUnique\": false,\n                            \"isType\": \"string\",\n                            \"isSubtype\": \"token\",\n                            \"isEncrypted\": false,\n                            \"isReferenceOf\": null,\n                            \"isNullable\": false,\n                            \"hasDefault\": null,\n                            \"hasMinimum\": 100,\n                            \"hasMaximum\": 100,\n                            \"hasPattern\": false,\n                            \"hasPatternErrorMessage\": false,\n                            \"hasDescription\": \"It represents the token this session uses to authenticate itself\"\n                        }\n                    },\n                    \"created_at\": {\n                        \"attributes\": {\n                            \"isUnique\": false,\n                            \"isType\": \"time\",\n                            \"isSubtype\": \"on_created\",\n                            \"isEncrypted\": false,\n                            \"isReferenceOf\": null,\n                            \"isNullable\": false,\n                            \"hasDefault\": null,\n                            \"hasDescription\": \"It represents the moment the session was created\"\n                        }\n                    },\n                    \"updated_at\": {\n                        \"attributes\": {\n                            \"isUnique\": false,\n                            \"isType\": \"time\",\n                            \"isSubtype\": \"on_updated\",\n                            \"isEncrypted\": false,\n                            \"isReferenceOf\": null,\n                            \"isNullable\": false,\n                            \"hasDefault\": null,\n                            \"hasDescription\": \"It represents the moment the session was lastly updated\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}";
fs.writeFileSync(node_73, node_contents_73, "utf8");

const node_74 = path.resolve(baseDirectory, ".", "src", "classes", "database", "defaults", "sessions.json");
const node_contents_74 = "{\n    \"id\": 1,\n    \"data\": {}\n}";
fs.writeFileSync(node_74, node_contents_74, "utf8");

const node_75 = path.resolve(baseDirectory, ".", "src", "classes", "database", "defaults", "users.json");
const node_contents_75 = "{\n    \"id\": 2,\n    \"data\": {\n        \"1\": {\n            \"id\": 1,\n            \"name\": null,\n            \"password\": null,\n            \"email\": null,\n            \"created_at\": \"0000/00/00 00:00:00.000\",\n            \"updated_at\": \"0000/00/00 00:00:00.000\"\n        }\n    }\n}";
fs.writeFileSync(node_75, node_contents_75, "utf8");

const node_76 = path.resolve(baseDirectory, ".", "src", "classes", "database", "process");
fs.mkdirSync(node_76);

const node_77 = path.resolve(baseDirectory, ".", "src", "classes", "database", "process", "restologia.official.org");
fs.mkdirSync(node_77);

const node_78 = path.resolve(baseDirectory, ".", "src", "classes", "database", "process", "restologia.official.org", "common");
fs.mkdirSync(node_78);

const node_79 = path.resolve(baseDirectory, ".", "src", "classes", "database", "process", "restologia.official.org", "common", "os");
fs.mkdirSync(node_79);

const node_80 = path.resolve(baseDirectory, ".", "src", "classes", "database", "process", "restologia.official.org", "common", "os", "index.js");
const node_contents_80 = "const os = require(\"os\");\n\nmodule.exports = async function (publicParameters, privateParameters, configurations) {\n    try {\n        return {\n            operation: \"restologia.official.org/common/os\",\n            information: {\n                hostname: os.hostname(),\n                platform: os.platform(),\n                architecture: os.arch(),\n                type: os.type(),\n                release: os.release(),\n                endianness: os.endianness(),\n                totalmem: os.totalmem(),\n                tmpdir: os.tmpdir(),\n                homedir: os.homedir(),\n                userInfo: os.userInfo(),\n                cpus: os.cpus(),\n                networkInterfaces: os.networkInterfaces(),\n            }\n        }\n    } catch (error) {\n        throw error;\n    }\n};";
fs.writeFileSync(node_80, node_contents_80, "utf8");

const node_81 = path.resolve(baseDirectory, ".", "src", "classes", "database", "process", "restologia.official.org", "common", "ping");
fs.mkdirSync(node_81);

const node_82 = path.resolve(baseDirectory, ".", "src", "classes", "database", "process", "restologia.official.org", "common", "ping", "index.js");
const node_contents_82 = "module.exports = async function(publicParameters, privateParameters, configurations) {\n    try {\n        return {\n            operation: \"restologia.official.org/common/ping\",\n            ping: true,\n            pong: true\n        };\n    } catch(error) {\n        throw error;\n    }\n};";
fs.writeFileSync(node_82, node_contents_82, "utf8");

const node_83 = path.resolve(baseDirectory, ".", "src", "classes", "database", "protectors");
fs.mkdirSync(node_83);

const node_84 = path.resolve(baseDirectory, ".", "src", "classes", "database", "protectors", "ForbidFieldsPersister.js");
const node_contents_84 = "const Persister = require(__dirname + \"/defaults/Persister.js\");\n\nclass ForbidFieldsPersister extends Persister {\n\n    static getDetails() {\n        return {\n            uid: \"ForbidFieldsPersister\",\n            name: \"Forbid fields persister\",\n            project: null,\n            description: \"This persister forbids users by default to persist the fields specified on «Forbid fields» setting.\",\n            usage: \"You need to pass a setting called «Forbid fields» specifying the columns (as comma-separated string) of the targeted table that will be hidden on any select. Optionally, you can set on the «Allowed privileges» setting specifying the privileges (as comma-separated string) that, when acquired, will allow the user to persist the hidden fields anyway (by default: 'to administrate').\",\n            parameters: [{\n                name: \"Allowed user column\",\n                type: \"String\",\n                default: null,\n                description: \"Name of the column that, when matches the «user.id» of the authentication, will allow to persist the forbidden fields.\",\n                required: false,\n            }, {\n                name: \"Allowed privileges\",\n                type: \"String\",\n                default: \"to administrate\",\n                description: \"Name of the privileges, by comma-separated values, that will allow to persist the forbidden fields.\",\n                required: false,\n            }, {\n                name: \"Forbid fields\",\n                type: \"String\",\n                default: null,\n                description: \"Name of the columns, by comma-separated values, that will not be enabled to insert or update unless some conditions are met.\",\n                required: true,\n            }]\n        };\n    }\n\n    static checkSettings(settings, projectData, table, operation) {\n        if (typeof settings !== \"object\") {\n            throw new Error(\"Required protector settings to be an object in order to apply «ForbidFieldsPersister» protector\");\n        }\n        const allowedProperties = [\"Allowed user column\", \"Allowed privileges\", \"Forbid fields\"];\n        const allProperties = Object.keys(settings);\n        CheckingProperties:\n        for (let indexProperty = 0; indexProperty < allProperties.length; indexProperty++) {\n            const oneProperty = allProperties[indexProperty];\n            if (allowedProperties.indexOf(oneProperty) === -1) {\n                throw new Error(\"Required protector settings to contain only allowed properties but «\" + oneProperty + \"» is not allowed\");\n            }\n        }\n        const allColumns = Object.keys(projectData.schema.tables[table].columns);\n        CheckingAllowedUserColumn:\n        if (\"Allowed user column\" in settings) {\n            const userColumn = settings[\"Allowed user column\"];\n            if (userColumn === null) {\n                break CheckingAllowedUserColumn;\n            }\n            if (typeof userColumn !== \"string\") {\n                throw new Error(\"Required protector setting «Allowed user column» to be a string, null or omitted in order to apply «ForbidFieldsPersister» protector\");\n            }\n            if (allColumns.indexOf(userColumn) === -1) {\n                throw new Error(\"Required protector setting «Allowed user column» to be a valid column in order to apply «ForbidFieldsPersister» protector\");\n            }\n        }\n        CheckingForbiddenFields:\n        if (\"Forbid fields\" in settings) {\n            const forbiddenFieldsText = settings[\"Forbid fields\"];\n            if (forbiddenFieldsText === null) {\n                break CheckingForbiddenFields;\n            }\n            if (typeof forbiddenFieldsText !== \"string\") {\n                throw new Error(\"Required protector setting «Forbid fields» to be a string, null or omitted in order to apply «ForbidFieldsPersister» protector\");\n            }\n            const forbiddenFields = forbiddenFieldsText.split(\",\");\n            for(let indexForbiddenField = 0; indexForbiddenField < forbiddenFields.length; indexForbiddenField++) {\n                const forbiddenField = forbiddenFields[indexForbiddenField];\n                if (allColumns.indexOf(forbiddenField) === -1) {\n                    throw new Error(\"Required protector setting «Forbid fields» to be a comma-separated string of valid columns in order to apply «ForbidFieldsPersister» protector\");\n                }\n            }\n        }\n        CheckingAllowedPrivileges:\n        if (\"Allowed privileges\" in settings) {\n            const allowedPrivileges = settings[\"Allowed privileges\"];\n            if (typeof allowedPrivileges !== \"string\") {\n                throw new Error(\"Required protector setting «Allowed privileges» to be a string in order to apply «ForbidFieldsPersister» protector\");\n            }\n        }\n    }\n\n    constructor(environment, settings) {\n        super(environment, settings);\n        this.uid = \"ForbidFieldsPersister\";\n    }\n\n    async onBeforePersist(publicParameters, privateParameters, configurations, authentication, extra) {\n        try {\n            this.environment.utils.trace(\"ForbidFieldsPersister.onBeforePersist\");\n            const { parameters } = this.settings;\n            const { value } = extra;\n            if(!(\"protectorErrors\" in extra)) {\n                extra.protectorErrors = [];\n            }\n            const forbiddenFieldsText = parameters[\"Forbid fields\"] || undefined;\n            const forbiddenFields = typeof forbiddenFieldsText === \"string\" ? forbiddenFieldsText.split(\",\") : [];\n            const userColumn = parameters[\"Allowed user column\"] || undefined;\n            const allowedPrivileges = parameters[\"Allowed privileges\"] || undefined;\n            let isAllowedByPrivilege = false;\n            CheckingByPrivileges:\n            if ((typeof allowedPrivileges === \"string\") && allowedPrivileges.length) {\n                isAllowedByPrivilege = false;\n                const allAllowedPrivileges = allowedPrivileges.split(\",\");\n                const userPrivileges = authentication.privileges;\n                for (let indexPrivilege = 0; indexPrivilege < allAllowedPrivileges.length; indexPrivilege++) {\n                    const allowedPrivilege = allAllowedPrivileges[indexPrivilege];\n                    for (let indexUserPrivileges = 0; indexUserPrivileges < userPrivileges.length; indexUserPrivileges++) {\n                        const userPrivilege = userPrivileges[indexUserPrivileges];\n                        if (userPrivilege.name === allowedPrivilege) {\n                            isAllowedByPrivilege = true;\n                            break CheckingByPrivileges;\n                        }\n                    }\n                }\n            }\n            this.environment.utils.log(authentication);\n            this.environment.utils.log(\"ForbidFieldsPersister.onBeforePersist:\", isAllowedByPrivilege ? \"allowed by privilege\" : \"not allowed by privilege\");\n            CheckingByUserColumn:\n            if (!isAllowedByPrivilege) {\n                if ((typeof userColumn === \"string\") && userColumn.length) {\n                    if (value[userColumn] !== authentication.user.id) {\n                        for (let indexFields = 0; indexFields < forbiddenFields.length; indexFields++) {\n                            const forbiddenField = forbiddenFields[indexFields];\n                            delete extra.value[forbiddenField];\n                            extra.protectorErrors.push({ field: forbiddenField, error: \"Cannot persist it\" });\n                        }\n                    }\n                } else {\n                    for (let indexFields = 0; indexFields < forbiddenFields.length; indexFields++) {\n                        const forbiddenField = forbiddenFields[indexFields];\n                        delete extra.value[forbiddenField];\n                        extra.protectorErrors.push({ field: forbiddenField, error: \"Cannot persist it\" });\n                    }\n                }\n            }\n        } catch (error) {\n            this.environment.utils.debugError(\"ForbidFieldsPersister.onBeforePersist\", error, true);\n        }\n    }\n\n    async onAfterPersist(publicParameters, privateParameters, configurations, authentication, response, extra) {\n        try {\n            this.environment.utils.trace(\"ForbidFieldsPersister.onAfterPersist\");\n            // @TODO: ...\n            // throw new Error(\"Method «ForbidFieldsPersister.onAfterPersist» must be overriden\");\n        } catch (error) {\n            this.environment.utils.debugError(\"ForbidFieldsPersister.onAfterPersist\", error, true);\n        }\n    }\n\n}\n\nmodule.exports = ForbidFieldsPersister;";
fs.writeFileSync(node_84, node_contents_84, "utf8");

const node_85 = path.resolve(baseDirectory, ".", "src", "classes", "database", "protectors", "ForbidFieldsViewer.js");
const node_contents_85 = "const Viewer = require(__dirname + \"/defaults/Viewer.js\");\n\nclass ForbidFieldsViewer extends Viewer {\n\n    static getDetails() {\n        return {\n            uid: \"ForbidFieldsViewer\",\n            name: \"Forbid fields viewer\",\n            project: null,\n            description: \"This viewer forbids users by default to view the fields specified on «Forbid fields» setting.\",\n            usage: \"You need to pass a setting called «Forbid fields» specifying the columns (as comma-separated string) of the targeted table that will be hidden on any select. Optionally, you can set on the «Allowed privileges» setting specifying the privileges (as comma-separated string) that, when acquired, will allow the user to view the hidden fields anyway (by default: 'to administrate').\",\n            parameters: [{\n                name: \"Allowed user column\",\n                type: \"String\",\n                default: null,\n                description: \"Name of the column that, when matches the «user.id» of the authentication, will allow to view the forbidden fields.\",\n                required: false,\n            }, {\n                name: \"Allowed privileges\",\n                type: \"String\",\n                default: \"to administrate\",\n                description: \"Name of the privileges, by comma-separated values, that will allow to view the forbidden fields.\",\n                required: false,\n            }, {\n                name: \"Forbid fields\",\n                type: \"String\",\n                default: null,\n                description: \"Name of the columns, by comma-separated values, that will be hidden on every select.\",\n                required: true,\n            }]\n        };\n    }\n\n    static checkSettings(settings, projectData, table, operation) {\n        if (typeof settings !== \"object\") {\n            throw new Error(\"Required protector settings to be an object in order to apply «ForbidFieldsViewer» protector\");\n        }\n        const allowedProperties = [\"Allowed user column\", \"Allowed privileges\", \"Forbid fields\"];\n        const allProperties = Object.keys(settings);\n        CheckingProperties:\n        for (let indexProperty = 0; indexProperty < allProperties.length; indexProperty++) {\n            const oneProperty = allProperties[indexProperty];\n            if (allowedProperties.indexOf(oneProperty) === -1) {\n                throw new Error(\"Required protector settings to contain only allowed properties but «\" + oneProperty + \"» is not allowed\");\n            }\n        }\n        const allColumns = Object.keys(projectData.schema.tables[table].columns);\n        CheckingAllowedUserColumn:\n        if (\"Allowed user column\" in settings) {\n            const userColumn = settings[\"Allowed user column\"];\n            if (userColumn === null) {\n                break CheckingAllowedUserColumn;\n            }\n            if (typeof userColumn !== \"string\") {\n                throw new Error(\"Required protector setting «Allowed user column» to be a string, null or omitted in order to apply «ForbidFieldsViewer» protector\");\n            }\n            if (allColumns.indexOf(userColumn) === -1) {\n                throw new Error(\"Required protector setting «Allowed user column» to be a valid column in order to apply «ForbidFieldsViewer» protector\");\n            }\n        }\n        CheckingForbiddenFields:\n        if (\"Forbid fields\" in settings) {\n            const forbiddenFieldsText = settings[\"Forbid fields\"];\n            if (forbiddenFieldsText === null) {\n                break CheckingForbiddenFields;\n            }\n            if (typeof forbiddenFieldsText !== \"string\") {\n                throw new Error(\"Required protector setting «Forbid fields» to be a string, null or omitted in order to apply «ForbidFieldsViewer» protector\");\n            }\n            const forbiddenFields = forbiddenFieldsText.split(\",\");\n            for (let indexForbiddenField = 0; indexForbiddenField < forbiddenFields.length; indexForbiddenField++) {\n                const forbiddenField = forbiddenFields[indexForbiddenField];\n                if (allColumns.indexOf(forbiddenField) === -1) {\n                    throw new Error(\"Required protector setting «Forbid fields» to be a comma-separated string of valid columns in order to apply «ForbidFieldsViewer» protector\");\n                }\n            }\n        }\n        CheckingAllowedPrivileges:\n        if (\"Allowed privileges\" in settings) {\n            const allowedPrivileges = settings[\"Allowed privileges\"];\n            if (typeof allowedPrivileges !== \"string\") {\n                throw new Error(\"Required protector setting «Allowed privileges» to be a string in order to apply «ForbidFieldsViewer» protector\");\n            }\n        }\n    }\n\n    constructor(environment, settings) {\n        super(environment, settings);\n        this.uid = \"ForbidFieldsViewer\";\n    }\n\n    async onBeforeView(publicParameters, privateParameters, configurations, authentication, extra) {\n        try {\n            this.environment.utils.trace(\"ForbidFieldsViewer.onBeforeView\");\n            // @OK!\n        } catch (error) {\n            this.environment.utils.debugError(\"ForbidFieldsViewer.onBeforeView\", error, true);\n        }\n    }\n\n    async onAfterView(publicParameters, privateParameters, configurations, authentication, response, extra) {\n        try {\n            this.environment.utils.trace(\"ForbidFieldsViewer.onAfterView\");\n            const { parameters } = this.settings;\n            const { protectorErrors = [] } = extra;\n            const forbiddenFieldsText = parameters[\"Forbid fields\"] || undefined;\n            const forbiddenFields = typeof forbiddenFieldsText === \"string\" ? forbiddenFieldsText.split(\",\") : [];\n            const userColumn = parameters[\"Allowed user column\"] || undefined;\n            const allowedPrivileges = parameters[\"Allowed privileges\"] || undefined;\n            let isAllowedByPrivilege = false;\n            CheckingByPrivileges:\n            if ((typeof allowedPrivileges === \"string\") && allowedPrivileges.length) {\n                isAllowedByPrivilege = false;\n                const allAllowedPrivileges = allowedPrivileges.split(\",\");\n                const userPrivileges = authentication.privileges;\n                for (let indexPrivilege = 0; indexPrivilege < allAllowedPrivileges.length; indexPrivilege++) {\n                    const allowedPrivilege = allAllowedPrivileges[indexPrivilege];\n                    for (let indexUserPrivileges = 0; indexUserPrivileges < userPrivileges.length; indexUserPrivileges++) {\n                        const userPrivilege = userPrivileges[indexUserPrivileges];\n                        if (userPrivilege.name === allowedPrivilege) {\n                            isAllowedByPrivilege = true;\n                            break CheckingByPrivileges;\n                        }\n                    }\n                }\n            }\n            CheckingByUserColumn:\n            if (!isAllowedByPrivilege) {\n                if((typeof userColumn === \"string\") && userColumn.length) {\n                    for(let indexItem = 0; indexItem < response.items.length; indexItem++) {\n                        const responseItem = response.items[indexItem];\n                        if(responseItem[userColumn] !== authentication.user.id) {\n                            for (let indexFields = 0; indexFields < forbiddenFields.length; indexFields++) {\n                                const forbiddenField = forbiddenFields[indexFields];\n                                delete response.items[indexItem][forbiddenField];\n                                // protectorErrors.push({ id: response.items[indexItem].id, field: forbiddenField, error: \"Cannot view it\" });\n                            }\n                        }\n                    }\n                } else if((typeof userColumn !== \"string\") || (userColumn.length === 0)) {\n                    for (let indexItem = 0; indexItem < response.items.length; indexItem++) {\n                        const responseItem = response.items[indexItem];\n                        for (let indexFields = 0; indexFields < forbiddenFields.length; indexFields++) {\n                            const forbiddenField = forbiddenFields[indexFields];\n                            delete response.items[indexItem][forbiddenField];\n                            // protectorErrors.push({ id: response.items[indexItem].id, field: forbiddenField, error: \"Cannot view it\" });\n                        }\n                    }\n                }\n            }\n        } catch (error) {\n            this.environment.utils.debugError(\"ForbidFieldsViewer.onAfterView\", error, true);\n        }\n    }\n\n}\n\nmodule.exports = ForbidFieldsViewer;";
fs.writeFileSync(node_85, node_contents_85, "utf8");

const node_86 = path.resolve(baseDirectory, ".", "src", "classes", "database", "protectors", "ForbidItemPersister.js");
const node_contents_86 = "const Persister = require(__dirname + \"/defaults/Persister.js\");\n\nclass ForbidItemPersister extends Persister {\n\n    static getDetails() {\n        return {\n            uid: \"ForbidItemPersister\",\n            name: \"Forbid item persister\",\n            project: null,\n            description: \"This protector forbids users by default to persist items.\",\n            usage: \"You can specify the privileges that will allow the operation (by default: 'to administrate'). You can also specify the columns that, when match the «user.id» of the authentication, will allow the operation.\",\n            parameters: [{\n                name: \"Allowed user column\",\n                type: \"String\",\n                default: null,\n                description: \"Name of the column that, when matches the «user.id» of the authentication, will allow to persist the item.\",\n                required: false,\n            }, {\n                name: \"Allowed privileges\",\n                type: \"String\",\n                default: \"to administrate\",\n                description: \"Name of the privileges, by comma-separated values, that will allow to persist the item.\",\n                required: false,\n            }],\n        };\n    }\n\n    static checkSettings(settings, projectData, table, operation) {\n        if (typeof settings !== \"object\") {\n            throw new Error(\"Required protector settings to be an object in order to apply «ForbidItemPersister» protector\");\n        }\n        const allowedProperties = [ \"Allowed user column\", \"Allowed privileges\" ];\n        const allProperties = Object.keys(settings);\n        CheckingProperties:\n        for(let indexProperty = 0; indexProperty < allProperties.length; indexProperty++) {\n            const oneProperty = allProperties[indexProperty];\n            if(allowedProperties.indexOf(oneProperty) === -1) {\n                throw new Error(\"Required protector settings to contain only allowed properties but «\" + oneProperty + \"» is not allowed\");\n            }\n        }\n        CheckingAllowedUserColumn:\n        if (\"Allowed user column\" in settings) {\n            const userColumn = settings[\"Allowed user column\"];\n            if (userColumn === null) {\n                break CheckingAllowedUserColumn;\n            }\n            if (typeof userColumn !== \"string\") {\n                throw new Error(\"Required protector setting «Allowed user column» to be a string, null or omitted in order to apply «ForbidItemPersister» protector\");\n            }\n            const allColumns = Object.keys(projectData.schema.tables[table].columns);\n            if(allColumns.indexOf(userColumn) === -1) {\n                throw new Error(\"Required protector setting «Allowed user column» to be a valid column in order to apply «ForbidItemPersister» protector\");\n            }\n        }\n        CheckingAllowedPrivileges:\n        if (\"Allowed privileges\" in settings) {\n            const allowedPrivileges = settings[\"Allowed privileges\"];\n            if(typeof allowedPrivileges !== \"string\") {\n                throw new Error(\"Required protector setting «Allowed privileges» to be a string in order to apply «ForbidItemPersister» protector\");\n            }\n        }\n    }\n\n    constructor(environment, settings) {\n        super(environment, settings);\n        this.uid = \"ForbidItemPersister\";\n    }\n\n    async onBeforePersist(publicParameters, privateParameters, configurations, authentication, extra) {\n        try {\n            this.environment.utils.trace(\"ForbidItemPersister.onBeforePersist\");\n            const { value } = extra;\n            const { parameters } = this.settings;\n            const userColumn = parameters[\"Allowed user column\"];\n            const allowedPrivileges = parameters[\"Allowed privileges\"];\n            let isAllowedByUserColumn = false;\n            CheckingByUserColumn:\n            if (typeof userColumn === \"string\") {\n                isAllowedByUserColumn = false;\n                if ((userColumn in value) && (value[userColumn] === authentication.user.id)) {\n                    isAllowedByUserColumn = true;\n                    break CheckingByUserColumn;\n                }\n            }\n            let isAllowedByPrivilege = true;\n            CheckingByPrivileges:\n            if((typeof allowedPrivileges === \"string\") && allowedPrivileges.length) {\n                isAllowedByPrivilege = false;\n                const allAllowedPrivileges = allowedPrivileges.split(\",\");\n                const userPrivileges = authentication.privileges;\n                for(let indexPrivilege = 0; indexPrivilege < allAllowedPrivileges.length; indexPrivilege++) {\n                    const allowedPrivilege = allAllowedPrivileges[indexPrivilege];\n                    for(let indexUserPrivileges = 0; indexUserPrivileges < userPrivileges.length; indexUserPrivileges++) {\n                        const userPrivilege = userPrivileges[indexUserPrivileges];\n                        if(userPrivilege.name === allowedPrivilege) {\n                            isAllowedByPrivilege = true;\n                            break CheckingByPrivileges;\n                        }\n                    }\n                }\n            }\n            const isAllowed = isAllowedByUserColumn || isAllowedByPrivilege;\n            if(!isAllowed) {\n                throw new Error(\"Persistence is not allowed by some unmet conditions on «\" + publicParameters.operation + \"» of item «\" + value.id + \"» of table «\" + privateParameters.table + \"»\");\n            }\n        } catch (error) {\n            this.environment.utils.debugError(\"ForbidItemPersister.onBeforePersist\", error, true);\n        }\n    }\n\n    async onAfterPersist(publicParameters, privateParameters, configurations, authentication, response, extra) {\n        try {\n            this.environment.utils.trace(\"ForbidItemPersister.onAfterPersist\");\n            // @OK!\n        } catch (error) {\n            this.environment.utils.debugError(\"ForbidItemPersister.onAfterPersist\", error, true);\n        }\n    }\n\n}\n\nmodule.exports = ForbidItemPersister;";
fs.writeFileSync(node_86, node_contents_86, "utf8");

const node_87 = path.resolve(baseDirectory, ".", "src", "classes", "database", "protectors", "ForbidItemViewer.js");
const node_contents_87 = "const Viewer = require(__dirname + \"/defaults/Viewer.js\");\n\nclass ForbidItemViewer extends Viewer {\n\n    static getDetails() {\n        return {\n            uid: \"ForbidItemViewer\",\n            name: \"Forbid item viewer\",\n            project: null,\n            description: \"This protector forbids users by default to view items.\",\n            usage: \"You can specify the privileges that will allow the operation (by default: 'to administrate'). You can also specify the columns that, when match the «user.id» of the authentication, will allow the operation.\",\n            parameters: [{\n                name: \"Allowed user column\",\n                type: \"String\",\n                default: null,\n                description: \"Name of the column that, when matches the «user.id» of the authentication, will allow to view the item.\",\n                required: false,\n            }, {\n                name: \"Allowed privileges\",\n                type: \"String\",\n                default: \"to administrate\",\n                description: \"Name of the privileges, by comma-separated values, that will allow to view any items.\",\n                required: false,\n            }],\n        };\n    }\n\n    static checkSettings(settings, projectData, table, operation) {\n        if (typeof settings !== \"object\") {\n            throw new Error(\"Required protector settings to be an object in order to apply «ForbidItemViewer» protector\");\n        }\n        const allowedProperties = [\"Allowed user column\", \"Allowed privileges\"];\n        const allProperties = Object.keys(settings);\n        CheckingProperties:\n        for (let indexProperty = 0; indexProperty < allProperties.length; indexProperty++) {\n            const oneProperty = allProperties[indexProperty];\n            if (allowedProperties.indexOf(oneProperty) === -1) {\n                throw new Error(\"Required protector settings to contain only allowed properties but «\" + oneProperty + \"» is not allowed\");\n            }\n        }\n        CheckingAllowedUserColumn:\n        if (\"Allowed user column\" in settings) {\n            const userColumn = settings[\"Allowed user column\"];\n            if (userColumn === null) {\n                break CheckingAllowedUserColumn;\n            }\n            if (typeof userColumn !== \"string\") {\n                throw new Error(\"Required protector setting «Allowed user column» to be a string, null or omitted in order to apply «ForbidItemViewer» protector\");\n            }\n            const allColumns = Object.keys(projectData.schema.tables[table].columns);\n            if (allColumns.indexOf(userColumn) === -1) {\n                throw new Error(\"Required protector setting «Allowed user column» to be a valid column in order to apply «ForbidItemViewer» protector\");\n            }\n        }\n        CheckingAllowedPrivileges:\n        if (\"Allowed privileges\" in settings) {\n            const allowedPrivileges = settings[\"Allowed privileges\"];\n            if (typeof allowedPrivileges !== \"string\") {\n                throw new Error(\"Required protector setting «Allowed privileges» to be a string in order to apply «ForbidItemViewer» protector\");\n            }\n        }\n    }\n\n    constructor(environment, settings) {\n        super(environment, settings);\n        this.uid = \"ForbidItemViewer\";\n    }\n\n    async onBeforeView(publicParameters, privateParameters, configurations, authentication, extra) {\n        try {\n            this.environment.utils.trace(\"ForbidItemViewer.onBeforeView\");\n            const { value } = extra;\n            const { parameters } = this.settings;\n            const userColumn = parameters[\"Allowed user column\"] || undefined;\n            const allowedPrivileges = parameters[\"Allowed privileges\"] || undefined;\n            let isAllowedByPrivilege = false;\n            CheckingByPrivileges:\n            if ((typeof allowedPrivileges === \"string\") && allowedPrivileges.length) {\n                isAllowedByPrivilege = false;\n                const allAllowedPrivileges = allowedPrivileges.split(\",\");\n                const userPrivileges = authentication.privileges;\n                for (let indexPrivilege = 0; indexPrivilege < allAllowedPrivileges.length; indexPrivilege++) {\n                    const allowedPrivilege = allAllowedPrivileges[indexPrivilege];\n                    for (let indexUserPrivileges = 0; indexUserPrivileges < userPrivileges.length; indexUserPrivileges++) {\n                        const userPrivilege = userPrivileges[indexUserPrivileges];\n                        if (userPrivilege.name === allowedPrivilege) {\n                            isAllowedByPrivilege = true;\n                            break CheckingByPrivileges;\n                        }\n                    }\n                }\n            }\n            CheckingByUserColumn:\n            if ((!isAllowedByPrivilege) && (typeof userColumn === \"string\") && userColumn.length) {\n                if (!(\"where\" in publicParameters)) {\n                    Object.assign(publicParameters, { where: JSON.stringify([[userColumn, \"=\", authentication.user.id]]) });\n                } else if (Array.isArray(publicParameters.where)) {\n                    publicParameters.where.push([userColumn, \"=\", authentication.user.id]);\n                    Object.assign(publicParameters, { where: JSON.stringify(publicParameters.where) });\n                } else if (typeof publicParameters.where === \"string\") {\n                    const where = JSON.parse(publicParameters.where);\n                    if (!Array.isArray(where)) {\n                        throw new Error(\"Parameter «where» must be a JSON array in order to apply «forbid-item-viewer» protector on table «\" + publicParameters.table + \"»\");\n                    }\n                    where.push([userColumn, \"=\", authentication.user.id]);\n                    Object.assign(publicParameters, { where: JSON.stringify(where) });\n                }\n            }\n        } catch (error) {\n            this.environment.utils.debugError(\"ForbidItemViewer.onBeforeView\", error, true);\n        }\n    }\n\n    async onAfterView(publicParameters, privateParameters, configurations, authentication, response, extra) {\n        try {\n            this.environment.utils.trace(\"ForbidItemViewer.onAfterView\");\n            // @OK!\n        } catch (error) {\n            this.environment.utils.debugError(\"ForbidItemViewer.onAfterView\", error, true);\n        }\n    }\n\n}\n\nmodule.exports = ForbidItemViewer;";
fs.writeFileSync(node_87, node_contents_87, "utf8");

const node_88 = path.resolve(baseDirectory, ".", "src", "classes", "database", "protectors", "defaults");
fs.mkdirSync(node_88);

const node_89 = path.resolve(baseDirectory, ".", "src", "classes", "database", "protectors", "defaults", "Persister.js");
const node_contents_89 = "const Protector = require(__dirname + \"/Protector.js\");\n\nclass Persister extends Protector {\n\n    static getDetails() {\n        return {\n            uid: \"Persister\",\n            name: \"Default persister\",\n            description: \"This persister is the parent of any persister and it is not thought to be used as it is.\",\n            usage: \"This persister does nothing but to throw errors on persist methods.\",\n        };\n    }\n\n    constructor(environment, settings = {}) {\n        super(environment, settings);\n        this.uid = \"defaults/Persister\";\n    }\n\n    onBeforeView() {\n        return undefined;\n    }\n\n    onAfterView() {\n        return undefined;\n    }\n\n}\n\nmodule.exports = Persister;";
fs.writeFileSync(node_89, node_contents_89, "utf8");

const node_90 = path.resolve(baseDirectory, ".", "src", "classes", "database", "protectors", "defaults", "Protector.js");
const node_contents_90 = "class Protector {\n\n    static getDetails() {\n        return {\n            uid: \"Protector\",\n            name: \"Default protector\",\n            description: \"This protector is the parent of any protector (viewer or persister) and it is not thought to be used as it is.\",\n            usage: \"This protector does nothing but throw errors.\",\n        };\n    }\n\n    constructor(environment, settings = {}) {\n        this.environment = environment;\n        this.settings = settings;\n        this.uid = \"defaults/Protector\";\n    }\n\n    async onBeforeView(publicParameters, privateParameters, configurations, authentication, ...others) {\n        try {\n            throw new Error(\"Method «Protector.onBeforeView» must be overriden\");\n        } catch(error) {\n            this.environment.utils.debugError(\"Protector.onBeforeView\", error, true);\n        }\n    }\n\n    async onAfterView(publicParameters, privateParameters, configurations, authentication, ...others) {\n        try {\n            throw new Error(\"Method «Protector.onAfterView» must be overriden\");\n        } catch(error) {\n            this.environment.utils.debugError(\"Protector.onAfterView\", error, true);\n        }\n    }\n\n    async onBeforePersist(publicParameters, privateParameters, configurations, authentication, ...others) {\n        try {\n            throw new Error(\"Method «Protector.onBeforePersist» must be overriden\");\n        } catch(error) {\n            this.environment.utils.debugError(\"Protector.onBeforePersist\", error, true);\n        }\n    }\n\n    async onAfterPersist(publicParameters, privateParameters, configurations, authentication, ...others) {\n        try {\n            throw new Error(\"Method «Protector.onAfterPersist» must be overriden\");\n        } catch(error) {\n            this.environment.utils.debugError(\"Protector.onAfterPersist\", error, true);\n        }\n    }\n\n}\n\nmodule.exports = Protector;";
fs.writeFileSync(node_90, node_contents_90, "utf8");

const node_91 = path.resolve(baseDirectory, ".", "src", "classes", "database", "protectors", "defaults", "Viewer.js");
const node_contents_91 = "const Protector = require(__dirname + \"/Protector.js\");\n\nclass Viewer extends Protector {\n\n    static getDetails() {\n        return {\n            uid: \"Viewer\",\n            name: \"Default viewer\",\n            description: \"This viewer is the parent of any viewer and it is not thought to be used as it is.\",\n            usage: \"This viewer does nothing but to throw errors on view methods.\",\n        };\n    }\n\n    constructor(environment, settings = {}) {\n        super(environment, settings);\n        this.uid = \"defaults/Viewer\";\n    }\n\n    onBeforePersist() {\n        return undefined;\n    }\n\n    onAfterPersist() {\n        return undefined;\n    }\n\n}\n\nmodule.exports = Viewer;";
fs.writeFileSync(node_91, node_contents_91, "utf8");

const node_92 = path.resolve(baseDirectory, ".", "src", "classes", "server");
fs.mkdirSync(node_92);

const node_93 = path.resolve(baseDirectory, ".", "src", "classes", "server", "MultipartParser.js");
const node_contents_93 = "const fs = require(\"fs\");\nconst path = require(\"path\");\nconst busboy = require(__dirname + \"/dependencies/busboy/lib/index.js\");\n\nclass MultipartParser {\n\n    constructor(environment) {\n        this.environment = environment;\n    }\n\n    async parseRequest(originalRequest) {\n        try {\n            this.environment.utils.trace(\"MultipartParser.parseRequest\");\n            const busboyInstance = busboy({ headers: originalRequest.headers });\n            //////////////////////\n            const fieldsInfo = {};\n            let okFieldsPromise = this.environment.utils.noop;\n            let failFieldsPromise = this.environment.utils.noop;\n            const fieldsPromise = new Promise((ok, fail) => {\n                this.environment.utils.trace(\"MultipartParser.parseRequest:filesPromise\");\n                okFieldsPromise = ok;\n                failFieldsPromise = fail;\n            });\n            busboyInstance.on(\"field\", (name, value, info) => {\n                this.environment.utils.trace(\"MultipartParser.parseRequest:fieldsPromise:field\");\n                fieldsInfo[name] = { name, value, info };\n            });\n            busboyInstance.on(\"close\", () => {\n                this.environment.utils.trace(\"MultipartParser.parseRequest:fieldsPromise:close\");\n                return okFieldsPromise(fieldsInfo);\n            });\n            busboyInstance.on(\"error\", error => {\n                this.environment.utils.trace(\"MultipartParser.parseRequest:fieldsPromise:error\");\n                return failFieldsPromise(error);\n            });\n            //////////////////////\n            const filesInfo = [];\n            const onFileWrite = async (name, stream, info) => {\n                try {\n                    const fileStreamReader = stream;\n                    const fileDate = this.environment.utils.fromDateToString(new Date(), true).replace(/[\\/ \\:]/g, \"\");\n                    if (typeof info.filename === \"undefined\") {\n                        return;\n                    }\n                    const fileExtensionOriginal = path.extname(info.filename);\n                    const fileExtension = fileExtensionOriginal.substr(1);\n                    const uid = this.environment.utils.generateRandomString(10).toUpperCase();\n                    const filenameSanitized = info.filename.substr(0,100).replace(/[^a-zA-Z0-9\\.\\-]/g, \"x\");\n                    const filePath = this.environment.utils.resolveFromSrc(`classes/server/uploads/file-upload.on-${fileDate}.uid-${uid}.as-${filenameSanitized}`);\n                    const fileStreamWriter = fs.createWriteStream(filePath, { flags: \"w\" });\n                    filesInfo.push({ name, info, temporaryPath: filePath })\n                    const promiseForFileWritten = new Promise((ok, fail) => {\n                        try {\n                            this.environment.utils.trace(\"MultipartParser.parseRequest:writingFile\");\n                            let isSuccess = false;\n                            fileStreamWriter.on(\"close\", () => {\n                                this.environment.utils.trace(\"MultipartParser.parseRequest:writingFile:close\");\n                                isSuccess = true;\n                                return ok({ filePath });\n                            });\n                            fileStreamWriter.on(\"error\", error => {\n                                this.environment.utils.trace(\"MultipartParser.parseRequest:writingFile:error\");\n                                return fail(error);\n                            });\n                            setTimeout(() => {\n                                if (!isSuccess) {\n                                    return fail(new Error(\"Required file upload to take less than 5 seconds\"));\n                                }\n                            }, 5 * 1000);\n                        } catch (error) {\n                            this.environment.utils.debugError(\"MultipartParser.parseRequest\", error, true);\n                            return fail(error);\n                        }\n                    });\n                    fileStreamReader.pipe(fileStreamWriter);\n                    await promiseForFileWritten;\n                } catch(error) {\n                    this.environment.utils.debugError(\"MultipartParser.parseRequest:onFileWrite\", error, true);\n                }\n            }\n            let okFilesPromise = this.environment.utils.noop;\n            let failFilesPromise = this.environment.utils.noop;\n            const filesPromise = new Promise((ok, fail) => {\n                this.environment.utils.trace(\"MultipartParser.parseRequest:filesPromise\");\n                okFilesPromise = ok;\n                failFilesPromise = fail;\n            });\n            busboyInstance.on(\"close\", () => {\n                this.environment.utils.trace(\"MultipartParser.parseRequest:filesPromise:close\");\n                return okFilesPromise(filesInfo);\n            });\n            busboyInstance.on(\"error\", error => {\n                this.environment.utils.trace(\"MultipartParser.parseRequest:filesPromise:error\");\n                return failFilesPromise(error);\n            });\n            busboyInstance.on(\"file\", async (name, stream, info = {}) => {\n                try {\n                    this.environment.utils.trace(\"MultipartParser.parseRequest:filesPromise:file\");\n                    // this.environment.utils.debug({ name, info });\n                    stream.on(\"data\", (data) => {\n                        this.environment.utils.trace(\"MultipartParser.parseRequest:filesPromise:file:data\");\n                    });\n                    stream.on(\"close\", () => {\n                        this.environment.utils.trace(\"MultipartParser.parseRequest:filesPromise:file:close\");\n                    });\n                    busboyInstance.on(\"error\", error => {\n                        this.environment.utils.trace(\"MultipartParser.parseRequest:filesPromise:file:error\");\n                        return failFilesPromise(error);\n                    });\n                    await onFileWrite(name, stream, info);\n                } catch (error) {\n                    this.environment.utils.debugError(\"MultipartParser.parseRequest\")\n                    return failFilesPromise(error);\n                }\n            });\n            originalRequest.pipe(busboyInstance);\n            const [ fields, files ] = await Promise.all([ fieldsPromise, filesPromise ]);\n            this.environment.utils.trace(\"MultipartParser.parseRequet:dataParsed\");\n            // this.environment.utils.debug({ fields, files });\n            return { fields, files };\n        } catch(error) {\n            this.environment.utils.debugError(\"MultipartParser.parseRequest\", error, true);\n        }\n    }\n\n}\n\nmodule.exports = MultipartParser;";
fs.writeFileSync(node_93, node_contents_93, "utf8");

const node_94 = path.resolve(baseDirectory, ".", "src", "classes", "server", "Request.js");
const node_contents_94 = "const url = require(\"url\");\n\nclass Request {\n\n    constructor(originalRequest, environment) {\n        this.originalRequest = originalRequest;\n        this.environment = environment;\n        this.environment.utils.trace(\"Request.constructor\");\n    }\n\n    async digest() {\n        try {\n            this.environment.utils.trace(\"Request.digest\");\n            this.getParameters = url.parse(this.originalRequest.url, true).query;\n            if (this.originalRequest.method === \"POST\") {\n                if (this.getParameters.operation === \"set-file\") {\n                    this.postParameters = this.originalRequest.body;\n                } else {\n                    const bodyData = await new Promise((ok, fail) => {\n                        let body = \"\";\n                        this.originalRequest.on(\"data\", chunk => {\n                            body += chunk;\n                        });\n                        this.originalRequest.on(\"error\", error => {\n                            return fail(error);\n                        });\n                        this.originalRequest.on(\"end\", () => {\n                            return ok(body);\n                        });\n                    });\n                    this.postParameters = JSON.parse(bodyData);\n                }\n            } else {\n                this.postParameters = this.getParameters;\n            }\n            this.httpHeaders = this.originalRequest.headers;\n            if(!(\"authorization\" in this.httpHeaders)) {\n                if (\"authorization\" in (this.postParameters || {})) {\n                    this.httpHeaders.authorization = this.postParameters.authorization;\n                } else if(\"authorization\" in this.getParameters) {\n                    this.httpHeaders.authorization = this.getParameters.authorization;\n                }\n            }\n        } catch(error) {\n            this.environment.utils.debugError(\"Request.digest\", error);\n        }\n    }\n\n}\n\nmodule.exports = Request;";
fs.writeFileSync(node_94, node_contents_94, "utf8");

const node_95 = path.resolve(baseDirectory, ".", "src", "classes", "server", "Requester.js");
const node_contents_95 = "const url = require(\"url\");\nconst http = require(\"http\");\nconst querystring = require(\"querystring\");\n\nclass Requester {\n\n    /**\n     * @param {String} method HTTP method of the request, so: 'GET', 'POST', 'PUT' or 'DELETE'\n     * @param {String} targetURL URL the request is addressed to.\n     * @param {Object} publicParameters Querystring parameters.\n     * @param {Object} privateParameters Body parameters (only for POST requests)\n     * @param {Object} headers HTTP headers of the request\n     * @param {Boolean} propagateErrors If true, the error will be propagated. Default: true.\n     * @param {Boolean} printResults If true, the results will be logged by console. Default: true.\n     * @param {String} debugMessage Message printed by console before sending the request\n     * @returns {Promise:Object} response Object representing the response\n     */\n    static request(method, targetURL, publicParameters = {}, privateParameters = {}, headers = {}, propagateErrors = true, printResults = true, debugMessage = false) {\n        return new Promise(function (ok, fail) {\n            if (debugMessage) {\n                console.log(\"[REQUEST] \" + debugMessage);\n            }\n            let responseMetadata = {};\n            let responseData = undefined;\n            const parsedURL = url.parse(targetURL);\n            const httpRequest = http.request({\n                method: method,\n                protocol: parsedURL.protocol,\n                hostname: parsedURL.hostname,\n                port: parsedURL.port,\n                path: parsedURL.pathname + \"?\" + querystring.encode(publicParameters),\n                headers: headers,\n            }, function (httpResponse) {\n                httpResponse.on(\"data\", function (dataJSON) {\n                    const data = JSON.parse(dataJSON.toString());\n                    responseData = data;\n                });\n                httpResponse.on(\"end\", function () {\n                    if (printResults) {\n                        console.log(\"[REQUEST] \" + JSON.stringify(responseData, null, 2));\n                    }\n                    return ok({ response: responseData, metadata: responseMetadata });\n                });\n            });\n            if (method.toLowerCase() !== \"get\") {\n                const bodyParameters = JSON.stringify(privateParameters);\n                httpRequest.write(bodyParameters);\n            }\n            httpRequest.on(\"error\", function (error) {\n                if (propagateErrors) {\n                    if (printResults) {\n                        console.error(\"Error:\", error);\n                    }\n                    return fail(error);\n                } else {\n                    if (printResults) {\n                        console.log(\"Error (ignored):\", error);\n                    }\n                    return ok(error);\n                }\n            });\n            httpRequest.end();\n        });\n    }\n\n}\n\nmodule.exports = Requester;";
fs.writeFileSync(node_95, node_contents_95, "utf8");

const node_96 = path.resolve(baseDirectory, ".", "src", "classes", "server", "Response.js");
const node_contents_96 = "class Response {\n\n    constructor(originalResponse, request, environment) {\n        this.originalResponse = originalResponse;\n        this.request = request;\n        this.environment = environment;\n        this.environment.utils.trace(\"Response.constructor\");\n    }\n\n    async dispatch() {\n        try {\n            this.environment.utils.trace(\"Response.dispatch\");\n            await this.request.digest();\n            const operationId = this.request.getParameters.operation;\n            if(this.request.originalRequest.method.toLowerCase() === \"options\") {\n                this.originalResponse.setHeader(\"Content-type\", \"application/json\");\n                this.originalResponse.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n                this.originalResponse.setHeader(\"Access-Control-Allow-Headers\", \"*\");\n                this.originalResponse.setHeader(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, PATCH, DELETE, OPTIONS\");\n                this.originalResponse.write(JSON.stringify({ message: \"OK\" }));\n                this.originalResponse.end();\n                return;\n            }\n            switch (operationId) {\n                case \"create-project\": {\n                    this.environment.utils.trace(\"Response.dispatch:createProject\");\n                    const operation = new this.environment.database.CreateProject(this.environment);\n                    const operationResponse = await operation.execute(this.request.getParameters, this.request.postParameters, this.request.httpHeaders);\n                    const formattedResponse = this.environment.utils.formatResponse(operationResponse, this.request.getParameters, this.request.postParameters);\n                    this.originalResponse.setHeader(\"Content-type\", \"application/json\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Headers\", \"*\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, PATCH, DELETE, OPTIONS\");\n                    this.originalResponse.write(JSON.stringify(formattedResponse));\n                    this.originalResponse.end();\n                    return;\n                }\n                case \"delete-project\": {\n                    this.environment.utils.trace(\"Response.dispatch:deleteProject\");\n                    const operation = new this.environment.database.DeleteProject(this.environment);\n                    const operationResponse = await operation.execute(this.request.getParameters, this.request.postParameters, this.request.httpHeaders);\n                    const formattedResponse = this.environment.utils.formatResponse(operationResponse, this.request.getParameters, this.request.postParameters);\n                    this.originalResponse.setHeader(\"Content-type\", \"application/json\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Headers\", \"*\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, PATCH, DELETE, OPTIONS\");\n                    this.originalResponse.write(JSON.stringify(formattedResponse));\n                    this.originalResponse.end();\n                    return;\n                }\n                case \"login\": {\n                    this.environment.utils.trace(\"Response.dispatch:login\");\n                    const operation = new this.environment.database.Login(this.environment);\n                    const operationResponse = await operation.execute(this.request.getParameters, this.request.postParameters, this.request.httpHeaders);\n                    const formattedResponse = this.environment.utils.formatResponse(operationResponse, this.request.getParameters, this.request.postParameters);\n                    this.originalResponse.setHeader(\"Content-type\", \"application/json\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Headers\", \"*\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, PATCH, DELETE, OPTIONS\");\n                    this.originalResponse.write(JSON.stringify(formattedResponse));\n                    this.originalResponse.end();\n                    return;\n                }\n                case \"logout\": {\n                    this.environment.utils.trace(\"Response.dispatch:logout\");\n                    const operation = new this.environment.database.Logout(this.environment);\n                    const operationResponse = await operation.execute(this.request.getParameters, this.request.postParameters, this.request.httpHeaders);\n                    const formattedResponse = this.environment.utils.formatResponse(operationResponse, this.request.getParameters, this.request.postParameters);\n                    this.originalResponse.setHeader(\"Content-type\", \"application/json\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Headers\", \"*\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, PATCH, DELETE, OPTIONS\");\n                    this.originalResponse.write(JSON.stringify(formattedResponse));\n                    this.originalResponse.end();\n                    return;\n                }\n                case \"authenticate\": {\n                    this.environment.utils.trace(\"Response.dispatch:authenticate\");\n                    const operation = new this.environment.database.Authenticate(this.environment);\n                    const operationResponse = await operation.execute(this.request.getParameters, this.request.postParameters, this.request.httpHeaders);\n                    const formattedResponse = this.environment.utils.formatResponse(operationResponse, this.request.getParameters, this.request.postParameters);\n                    this.originalResponse.setHeader(\"Content-type\", \"application/json\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Headers\", \"*\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, PATCH, DELETE, OPTIONS\");\n                    this.originalResponse.write(JSON.stringify(formattedResponse));\n                    this.originalResponse.end();\n                    return;\n                }\n                case \"select\": {\n                    this.environment.utils.trace(\"Response.dispatch:select\");\n                    const operation = new this.environment.database.SelectRows(this.environment);\n                    const operationResponse = await operation.execute(this.request.getParameters, this.request.postParameters, this.request.httpHeaders);\n                    const formattedResponse = this.environment.utils.formatResponse(operationResponse, this.request.getParameters, this.request.postParameters);\n                    this.originalResponse.setHeader(\"Content-type\", \"application/json\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Headers\", \"*\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, PATCH, DELETE, OPTIONS\");\n                    this.originalResponse.write(JSON.stringify(formattedResponse));\n                    this.originalResponse.end();\n                    return;\n                }\n                case \"insert\": {\n                    this.environment.utils.trace(\"Response.dispatch:insert\");\n                    const operation = new this.environment.database.InsertRow(this.environment);\n                    const operationResponse = await operation.execute(this.request.getParameters, this.request.postParameters, this.request.httpHeaders);\n                    const formattedResponse = this.environment.utils.formatResponse(operationResponse, this.request.getParameters, this.request.postParameters);\n                    this.originalResponse.setHeader(\"Content-type\", \"application/json\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Headers\", \"*\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, PATCH, DELETE, OPTIONS\");\n                    this.originalResponse.write(JSON.stringify(formattedResponse));\n                    this.originalResponse.end();\n                    return;\n                }\n                case \"update\": {\n                    this.environment.utils.trace(\"Response.dispatch:update\");\n                    const operation = new this.environment.database.UpdateRow(this.environment);\n                    const operationResponse = await operation.execute(this.request.getParameters, this.request.postParameters, this.request.httpHeaders);\n                    const formattedResponse = this.environment.utils.formatResponse(operationResponse, this.request.getParameters, this.request.postParameters);\n                    this.originalResponse.setHeader(\"Content-type\", \"application/json\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Headers\", \"*\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, PATCH, DELETE, OPTIONS\");\n                    this.originalResponse.write(JSON.stringify(formattedResponse));\n                    this.originalResponse.end();\n                    return;\n                }\n                case \"delete\": {\n                    this.environment.utils.trace(\"Response.dispatch:delete\");\n                    const operation = new this.environment.database.DeleteRow(this.environment);\n                    const operationResponse = await operation.execute(this.request.getParameters, this.request.postParameters, this.request.httpHeaders);\n                    const formattedResponse = this.environment.utils.formatResponse(operationResponse, this.request.getParameters, this.request.postParameters);\n                    this.originalResponse.setHeader(\"Content-type\", \"application/json\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Headers\", \"*\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, PATCH, DELETE, OPTIONS\");\n                    this.originalResponse.write(JSON.stringify(formattedResponse));\n                    this.originalResponse.end();\n                    return;\n                }\n                case \"view-schema\": {\n                    this.environment.utils.trace(\"Response.dispatch:viewSchema\");\n                    const operation = new this.environment.database.ViewSchema(this.environment);\n                    const operationResponse = await operation.execute(this.request.getParameters, this.request.postParameters, this.request.httpHeaders);\n                    const formattedResponse = this.environment.utils.formatResponse(operationResponse, this.request.getParameters, this.request.postParameters);\n                    this.originalResponse.setHeader(\"Content-type\", \"application/json\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Headers\", \"*\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, PATCH, DELETE, OPTIONS\");\n                    this.originalResponse.write(JSON.stringify(formattedResponse));\n                    this.originalResponse.end();\n                    return;\n                }\n                case \"process\": {\n                    this.environment.utils.trace(\"Response.dispatch:process\");\n                    const operation = new this.environment.database.Process(this.environment);\n                    const operationResponse = await operation.execute(this.request.getParameters, this.request.postParameters, this.request.httpHeaders);\n                    const formattedResponse = this.environment.utils.formatResponse(operationResponse, this.request.getParameters, this.request.postParameters);\n                    this.originalResponse.setHeader(\"Content-type\", \"application/json\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Headers\", \"*\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, PATCH, DELETE, OPTIONS\");\n                    this.originalResponse.write(JSON.stringify(formattedResponse));\n                    this.originalResponse.end();\n                    return;\n                }\n                case \"add-table\": {\n                    this.environment.utils.trace(\"Response.dispatch:addTable\");\n                    const operation = new this.environment.database.AddTable(this.environment);\n                    const operationResponse = await operation.execute(this.request.getParameters, this.request.postParameters, this.request.httpHeaders);\n                    const formattedResponse = this.environment.utils.formatResponse(operationResponse, this.request.getParameters, this.request.postParameters);\n                    this.originalResponse.setHeader(\"Content-type\", \"application/json\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Headers\", \"*\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, PATCH, DELETE, OPTIONS\");\n                    this.originalResponse.write(JSON.stringify(formattedResponse));\n                    this.originalResponse.end();\n                    return;\n                }\n                case \"add-column\": {\n                    this.environment.utils.trace(\"Response.dispatch;addColumn\");\n                    const operation = new this.environment.database.AddColumn(this.environment);\n                    const operationResponse = await operation.execute(this.request.getParameters, this.request.postParameters, this.request.httpHeaders);\n                    const formattedResponse = this.environment.utils.formatResponse(operationResponse, this.request.getParameters, this.request.postParameters);\n                    this.originalResponse.setHeader(\"Content-type\", \"application/json\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Headers\", \"*\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, PATCH, DELETE, OPTIONS\");\n                    this.originalResponse.write(JSON.stringify(formattedResponse));\n                    this.originalResponse.end();\n                    return;\n                }\n                case \"add-protector\": {\n                    this.environment.utils.trace(\"Response.dispatch:addProtector\");\n                    const operation = new this.environment.database.AddProtector(this.environment);\n                    const operationResponse = await operation.execute(this.request.getParameters, this.request.postParameters, this.request.httpHeaders);\n                    const formattedResponse = this.environment.utils.formatResponse(operationResponse, this.request.getParameters, this.request.postParameters);\n                    this.originalResponse.setHeader(\"Content-type\", \"application/json\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Headers\", \"*\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, PATCH, DELETE, OPTIONS\");\n                    this.originalResponse.write(JSON.stringify(formattedResponse));\n                    this.originalResponse.end();\n                    return;\n                }\n                case \"update-table\": {\n                    this.environment.utils.trace(\"Response.dispatch:updateTable\");\n                    const operation = new this.environment.database.UpdateTable(this.environment);\n                    const operationResponse = await operation.execute(this.request.getParameters, this.request.postParameters, this.request.httpHeaders);\n                    const formattedResponse = this.environment.utils.formatResponse(operationResponse, this.request.getParameters, this.request.postParameters);\n                    this.originalResponse.setHeader(\"Content-type\", \"application/json\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Headers\", \"*\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, PATCH, DELETE, OPTIONS\");\n                    this.originalResponse.write(JSON.stringify(formattedResponse));\n                    this.originalResponse.end();\n                    return;\n                }\n                case \"update-column\": {\n                    this.environment.utils.trace(\"Response.dispatch:updateColumn\");\n                    const operation = new this.environment.database.UpdateColumn(this.environment);\n                    const operationResponse = await operation.execute(this.request.getParameters, this.request.postParameters, this.request.httpHeaders);\n                    const formattedResponse = this.environment.utils.formatResponse(operationResponse, this.request.getParameters, this.request.postParameters);\n                    this.originalResponse.setHeader(\"Content-type\", \"application/json\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Headers\", \"*\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, PATCH, DELETE, OPTIONS\");\n                    this.originalResponse.write(JSON.stringify(formattedResponse));\n                    this.originalResponse.end();\n                    return;\n                }\n                case \"update-protector\": {\n                    this.environment.utils.trace(\"Response.dispatch:updateProtector\");\n                    const operation = new this.environment.database.UpdateProtector(this.environment);\n                    const operationResponse = await operation.execute(this.request.getParameters, this.request.postParameters, this.request.httpHeaders);\n                    const formattedResponse = this.environment.utils.formatResponse(operationResponse, this.request.getParameters, this.request.postParameters);\n                    this.originalResponse.setHeader(\"Content-type\", \"application/json\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Headers\", \"*\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, PATCH, DELETE, OPTIONS\");\n                    this.originalResponse.write(JSON.stringify(formattedResponse));\n                    this.originalResponse.end();\n                    return;\n                }\n                case \"delete-table\": {\n                    this.environment.utils.trace(\"Response.dispatch:deleteTable\");\n                    const operation = new this.environment.database.DeleteTable(this.environment);\n                    const operationResponse = await operation.execute(this.request.getParameters, this.request.postParameters, this.request.httpHeaders);\n                    const formattedResponse = this.environment.utils.formatResponse(operationResponse, this.request.getParameters, this.request.postParameters);\n                    this.originalResponse.setHeader(\"Content-type\", \"application/json\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Headers\", \"*\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, PATCH, DELETE, OPTIONS\");\n                    this.originalResponse.write(JSON.stringify(formattedResponse));\n                    this.originalResponse.end();\n                    return;\n                }\n                case \"delete-column\": {\n                    this.environment.utils.trace(\"Response.dispatch:deleteColumn\");\n                    const operation = new this.environment.database.DeleteColumn(this.environment);\n                    const operationResponse = await operation.execute(this.request.getParameters, this.request.postParameters, this.request.httpHeaders);\n                    const formattedResponse = this.environment.utils.formatResponse(operationResponse, this.request.getParameters, this.request.postParameters);\n                    this.originalResponse.setHeader(\"Content-type\", \"application/json\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Headers\", \"*\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, PATCH, DELETE, OPTIONS\");\n                    this.originalResponse.write(JSON.stringify(formattedResponse));\n                    this.originalResponse.end();\n                    return;\n                }\n                case \"delete-protector\": {\n                    this.environment.utils.trace(\"Response.dispatch:deleteProtector\");\n                    const operation = new this.environment.database.DeleteProtector(this.environment);\n                    const operationResponse = await operation.execute(this.request.getParameters, this.request.postParameters, this.request.httpHeaders);\n                    const formattedResponse = this.environment.utils.formatResponse(operationResponse, this.request.getParameters, this.request.postParameters);\n                    this.originalResponse.setHeader(\"Content-type\", \"application/json\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Headers\", \"*\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, PATCH, DELETE, OPTIONS\");\n                    this.originalResponse.write(JSON.stringify(formattedResponse));\n                    this.originalResponse.end();\n                    return;\n                }\n                case \"get-file\": {\n                    this.environment.utils.trace(\"Response.dispatch:getFile\");\n                    const operation = new this.environment.database.GetFile(this.environment);\n                    return await operation.execute(this.request.getParameters, this.request.postParameters, this.request.httpHeaders, this.originalResponse);\n                }\n                case \"set-file\": {\n                    this.environment.utils.trace(\"Response.dispatch:setFile\");\n                    const operation = new this.environment.database.SetFile(this.environment);\n                    const operationResponse = await operation.execute(this.request.getParameters, this.request.postParameters, this.request.httpHeaders, this.request.originalRequest);\n                    const formattedResponse = this.environment.utils.formatResponse(operationResponse, this.request.getParameters, this.request.postParameters);\n                    this.originalResponse.setHeader(\"Content-type\", \"application/json\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Headers\", \"*\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, PATCH, DELETE, OPTIONS\");\n                    this.originalResponse.write(JSON.stringify(formattedResponse));\n                    this.originalResponse.end();\n                    return;\n                }\n                default: {\n                    this.environment.utils.trace(\"Response.dispatch:default\");\n                    const baseURL = this.environment.utils.getBaseURL();\n                    this.originalResponse.setHeader(\"Content-type\", \"application/json\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Headers\", \"*\");\n                    this.originalResponse.setHeader(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, PATCH, DELETE, OPTIONS\");\n                    this.originalResponse.write(JSON.stringify(this.environment.utils.formatResponse({\n                        \"message\": \"The specified operation is not identified. The standard help message is served instead.\",\n                        \"help\": {\n                            \"instructions\": [\n                                \"This is a private «HTTP REST API» application endpoint fully served as «JSON HTTP API».\",\n                                \"All the «HTTP REST API» operations are served by the same endpoint: «\" + baseURL + \"»\",\n                                \"The «parameters» that are defined as '*' MUST BE provided by «querystring parameters».\",\n                                \"The «parameters» that are defined as '@@' MUST BE provided by «body parameters».\",\n                                \"The «operations» that DO NOT require «body parameters» MUST BE requested by «GET HTTP requests».\",\n                                \"The «operations» that DO require «body parameters» MUST BE requested by «POST HTTP requests».\",\n                                \"The «body» of the «POST HTTP requests» MUST BE a «stringified JSON».\",\n                                \"The «operations» that require «authentication» are preceded by '!'.\",\n                                \"The «authentication» MUST BE provided by an «HTTP header» of 'authorization' filled with the «session token» provided by the «login operation».\",\n                            ],\n                            \"operations\": {\n                                // Authentication:\n                                \"login\": baseURL + \"?operation=login&user=@@&password=@@\",\n                                \"logout\": \"!\" + baseURL + \"?operation=logout\",\n                                // Data:\n                                \"select\": \"!\" + baseURL + \"?operation=select&project=*&table=*&where=*&sort=*&paginate=*\",\n                                \"insert\": \"!\" + baseURL + \"?operation=insert&project=*&table=@@&value=@@\",\n                                \"update\": \"!\" + baseURL + \"?operation=update&project=*&table=@@&id=@@&value=@@\",\n                                \"delete\": \"!\" + baseURL + \"?operation=delete&project=*&table=@@&id=@@\",\n                                // Schema:\n                                \"view-schema\": \"!\" + baseURL + \"?operation=view-schema&project=*\",\n                                // Schema tables:\n                                \"add-table\": \"!\" + baseURL + \"?operation=add-table&project=*&table=@@&attributes=@@&properties=@@&columns=@@\",\n                                \"update-table\": \"!\" + baseURL + \"?operation=update-table&project=*&table=@@&attributes=@@&properties=@@\",\n                                \"delete-table\": \"!\" + baseURL + \"?operation=delete-table&project=*&table=@@\",\n                                // Schema columns:\n                                \"add-column\": \"!\" + baseURL + \"?operation=add-column&project=*&table=@@&column=@@&attributes=@@&properties=@@\",\n                                \"update-column\": \"!\" + baseURL + \"?operation=update-column&project=*&table=@@&column=@@&attributes=@@&properties=@@\",\n                                \"delete-column\": \"!\" + baseURL + \"?operation=delete-column&project=*&table=@@&column=@@\",\n                                // Table protectors:\n                                \"add-protector\": \"!\" + baseURL + \"?operation=add-protector&project=*&table=@@&protector_position=@@&protector_value=@@\",\n                                \"update-protector\": \"!\" + baseURL + \"?operation=update-protector&project=*&table=@@&protector_position=@@&protector_value=@@\",\n                                \"delete-protector\": \"!\" + baseURL + \"?operation=delete-protector&project=*&table=@@&protector_position=@@&protector_value=@@\",\n                                // Projects:\n                                \"create-project\": \"!\" + baseURL + \"?operation=create-project&project=*&user=@@&password=@@&administrator_name=@@&administrator_email=@@&administrator_password=@@\",\n                                \"delete-project\": \"!\" + baseURL + \"?operation=delete-project&project=*&user=@@&password=@@\",\n                            }\n                        }\n                    })));\n                    this.originalResponse.end();\n                    return;\n                }\n            }\n        } catch(error) {\n            this.environment.utils.debugError(\"Response.dispatch\", error);\n            this.originalResponse.setHeader(\"Content-type\", \"application/json\");\n            this.originalResponse.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n            this.originalResponse.setHeader(\"Access-Control-Allow-Headers\", \"*\");\n            this.originalResponse.setHeader(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, PATCH, DELETE, OPTIONS\");\n            this.originalResponse.write(JSON.stringify(this.environment.utils.formatErrorResponse({\n                \"name\": \"Operation failed error\",\n                \"message\": (typeof error === \"object\") ? error.message : error\n            })));\n            this.originalResponse.end();\n        }\n    }\n\n}\n\nmodule.exports = Response;";
fs.writeFileSync(node_96, node_contents_96, "utf8");

const node_97 = path.resolve(baseDirectory, ".", "src", "classes", "server", "Server.js");
const node_contents_97 = "class Server {\n    \n    constructor(environment) {\n        this.environment = environment;\n        this.environment.utils.trace(\"Server.constructor\");\n        this.staticPath = __dirname + \"/../../app\";\n        this.Requester = require(__dirname + \"/Requester.js\");\n        this.Request = require(__dirname + \"/Request.js\");\n        this.Response = require(__dirname + \"/Response.js\");\n        this.MultipartParser = require(__dirname + \"/MultipartParser.js\");\n        this.utils = require(__dirname + \"/../Utils.js\");\n    }\n\n    async dispatchStaticResources(parsedURL, request, response) {\n        let relativePath = parsedURL.path.replace(\"/app\", \"\");\n        if ((relativePath === \"\") || (relativePath === \"/\")) {\n            relativePath = \"/index.html\";\n        }\n        this.environment.utils.debugRequest(request);\n        if ((relativePath.indexOf(\"..\") !== -1) && (relativePath.indexOf(\"&\") !== -1)) {\n            response.setHeader(\"Content-type\", \"text/plain\");\n            response.write(\"The expression '..' and '&' are never allowed for static requests.\");\n            return response.end();\n        }\n        const stream = this.environment.utils.fsOriginal.createReadStream(this.staticPath + relativePath);\n        stream.on(\"error\", function() {\n            response.setHeader(\"Content-type\", \"text/plain\");\n            response.write(\"The file requested was not found.\");\n            return response.end();\n        });\n        return stream.pipe(response);\n    }\n\n    async start() {\n        try {\n            this.environment.utils.trace(\"Server.start\");\n            this.httpServer = require(\"http\").createServer(async (originalRequest, originalResponse) => {\n                try {\n                    this.environment.utils.trace(\"Server.start:controller\");\n                    this.environment.utils.debugRequest(originalRequest);\n                    if(this.environment.settings.APPLICATION_ENABLED) {\n                        const parsedURL = this.environment.utils.parseURL(originalRequest.url);\n                        if (parsedURL.path.startsWith(\"/app\")) {\n                            return await this.dispatchStaticResources(parsedURL, originalRequest, originalResponse);\n                        }\n                    }\n                    const request = new this.Request(originalRequest, this.environment);\n                    const response = new this.Response(originalResponse, request, this.environment);\n                    await response.dispatch();\n                } catch (error) {\n                    this.environment.utils.debugError(\"Server.start:controller\", error);\n                    originalResponse.setHeader(\"Content-type\", \"application/json\");\n                    originalResponse.write(JSON.stringify(this.environment.utils.formatErrorResponse({\n                        \"name\": \"Operation failed error\",\n                        \"message\": error.message\n                    })));\n                    originalResponse.end();\n                }\n            });\n            await new Promise((ok, fail) => {\n                try {\n                    this.httpServer.listen(this.environment.settings.SERVER_PORT, () => {\n                        this.environment.utils.debugSuccess(\"Server is successfully listening on:\");\n                        const { SERVER_ID, SERVER_PROTOCOL, SERVER_HOST, SERVER_PORT } = this.environment.settings;\n                        this.environment.utils.debugSuccess(\"  » [SERVER ID]  \" + SERVER_ID);\n                        this.environment.utils.debugSuccess(\"  » [SERVER URL] \" + this.environment.utils.getBaseURL());\n                        // this.environment.utils.debugSuccess(\"  » \" + SERVER_PROTOCOL + \"://\" + SERVER_HOST + \":\" + SERVER_PORT + \"/app/restologia-app.1.0.0.html\");\n                        return ok();\n                    });\n                } catch (error) {\n                    return fail(error);\n                }\n            });\n            return this;\n        } catch(error) {\n            this.environment.utils.debugError(\"Server.start\", error);\n        }\n    }\n\n    async stop() {\n        try {\n            if(this.httpServer) {\n                this.httpServer.close();\n            }\n            if(this.httpsServer) {\n                this.httpsServer.close();\n            }\n        } catch(error) {\n            this.environment.utils.debugError(\"Server.stop\", error);\n        }\n    }\n\n}\n\nmodule.exports = Server;";
fs.writeFileSync(node_97, node_contents_97, "utf8");

const node_98 = path.resolve(baseDirectory, ".", "src", "classes", "server", "dependencies");
fs.mkdirSync(node_98);

const node_99 = path.resolve(baseDirectory, ".", "src", "classes", "server", "dependencies", "busboy");
fs.mkdirSync(node_99);

const node_100 = path.resolve(baseDirectory, ".", "src", "classes", "server", "dependencies", "busboy", "LICENSE");
const node_contents_100 = "Copyright Brian White. All rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to\ndeal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\nsell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\nIN THE SOFTWARE.";
fs.writeFileSync(node_100, node_contents_100, "utf8");

const node_101 = path.resolve(baseDirectory, ".", "src", "classes", "server", "dependencies", "busboy", "README.md");
const node_contents_101 = "# Description\n\nA node.js module for parsing incoming HTML form data.\n\nChanges (breaking or otherwise) in v1.0.0 can be found [here](https://github.com/mscdex/busboy/issues/266).\n\n# Requirements\n\n* [node.js](http://nodejs.org/) -- v10.16.0 or newer\n\n\n# Install\n\n    npm install busboy\n\n\n# Examples\n\n* Parsing (multipart) with default options:\n\n```js\nconst http = require('http');\n\nconst busboy = require('busboy');\n\nhttp.createServer((req, res) => {\n  if (req.method === 'POST') {\n    console.log('POST request');\n    const bb = busboy({ headers: req.headers });\n    bb.on('file', (name, file, info) => {\n      const { filename, encoding, mimeType } = info;\n      console.log(\n        `File [${name}]: filename: %j, encoding: %j, mimeType: %j`,\n        filename,\n        encoding,\n        mimeType\n      );\n      file.on('data', (data) => {\n        console.log(`File [${name}] got ${data.length} bytes`);\n      }).on('close', () => {\n        console.log(`File [${name}] done`);\n      });\n    });\n    bb.on('field', (name, val, info) => {\n      console.log(`Field [${name}]: value: %j`, val);\n    });\n    bb.on('close', () => {\n      console.log('Done parsing form!');\n      res.writeHead(303, { Connection: 'close', Location: '/' });\n      res.end();\n    });\n    req.pipe(bb);\n  } else if (req.method === 'GET') {\n    res.writeHead(200, { Connection: 'close' });\n    res.end(`\n      <html>\n        <head></head>\n        <body>\n          <form method=\"POST\" enctype=\"multipart/form-data\">\n            <input type=\"file\" name=\"filefield\"><br />\n            <input type=\"text\" name=\"textfield\"><br />\n            <input type=\"submit\">\n          </form>\n        </body>\n      </html>\n    `);\n  }\n}).listen(8000, () => {\n  console.log('Listening for requests');\n});\n\n// Example output:\n//\n// Listening for requests\n//   < ... form submitted ... >\n// POST request\n// File [filefield]: filename: \"logo.jpg\", encoding: \"binary\", mime: \"image/jpeg\"\n// File [filefield] got 11912 bytes\n// Field [textfield]: value: \"testing! :-)\"\n// File [filefield] done\n// Done parsing form!\n```\n\n* Save all incoming files to disk:\n\n```js\nconst { randomFillSync } = require('crypto');\nconst fs = require('fs');\nconst http = require('http');\nconst os = require('os');\nconst path = require('path');\n\nconst busboy = require('busboy');\n\nconst random = (() => {\n  const buf = Buffer.alloc(16);\n  return () => randomFillSync(buf).toString('hex');\n})();\n\nhttp.createServer((req, res) => {\n  if (req.method === 'POST') {\n    const bb = busboy({ headers: req.headers });\n    bb.on('file', (name, file, info) => {\n      const saveTo = path.join(os.tmpdir(), `busboy-upload-${random()}`);\n      file.pipe(fs.createWriteStream(saveTo));\n    });\n    bb.on('close', () => {\n      res.writeHead(200, { 'Connection': 'close' });\n      res.end(`That's all folks!`);\n    });\n    req.pipe(bb);\n    return;\n  }\n  res.writeHead(404);\n  res.end();\n}).listen(8000, () => {\n  console.log('Listening for requests');\n});\n```\n\n\n# API\n\n## Exports\n\n`busboy` exports a single function:\n\n**( _function_ )**(< _object_ >config) - Creates and returns a new _Writable_ form parser stream.\n\n* Valid `config` properties:\n\n    * **headers** - _object_ - These are the HTTP headers of the incoming request, which are used by individual parsers.\n\n    * **highWaterMark** - _integer_ - highWaterMark to use for the parser stream. **Default:** node's _stream.Writable_ default.\n\n    * **fileHwm** - _integer_ - highWaterMark to use for individual file streams. **Default:** node's _stream.Readable_ default.\n\n    * **defCharset** - _string_ - Default character set to use when one isn't defined. **Default:** `'utf8'`.\n\n    * **defParamCharset** - _string_ - For multipart forms, the default character set to use for values of part header parameters (e.g. filename) that are not extended parameters (that contain an explicit charset). **Default:** `'latin1'`.\n\n    * **preservePath** - _boolean_ - If paths in filenames from file parts in a `'multipart/form-data'` request shall be preserved. **Default:** `false`.\n\n    * **limits** - _object_ - Various limits on incoming data. Valid properties are:\n\n        * **fieldNameSize** - _integer_ - Max field name size (in bytes). **Default:** `100`.\n\n        * **fieldSize** - _integer_ - Max field value size (in bytes). **Default:** `1048576` (1MB).\n\n        * **fields** - _integer_ - Max number of non-file fields. **Default:** `Infinity`.\n\n        * **fileSize** - _integer_ - For multipart forms, the max file size (in bytes). **Default:** `Infinity`.\n\n        * **files** - _integer_ - For multipart forms, the max number of file fields. **Default:** `Infinity`.\n\n        * **parts** - _integer_ - For multipart forms, the max number of parts (fields + files). **Default:** `Infinity`.\n\n        * **headerPairs** - _integer_ - For multipart forms, the max number of header key-value pairs to parse. **Default:** `2000` (same as node's http module).\n\nThis function can throw exceptions if there is something wrong with the values in `config`. For example, if the Content-Type in `headers` is missing entirely, is not a supported type, or is missing the boundary for `'multipart/form-data'` requests.\n\n## (Special) Parser stream events\n\n* **file**(< _string_ >name, < _Readable_ >stream, < _object_ >info) - Emitted for each new file found. `name` contains the form field name. `stream` is a _Readable_ stream containing the file's data. No transformations/conversions (e.g. base64 to raw binary) are done on the file's data. `info` contains the following properties:\n\n    * `filename` - _string_ - If supplied, this contains the file's filename. **WARNING:** You should almost _never_ use this value as-is (especially if you are using `preservePath: true` in your `config`) as it could contain malicious input. You are better off generating your own (safe) filenames, or at the very least using a hash of the filename.\n\n    * `encoding` - _string_ - The file's `'Content-Transfer-Encoding'` value.\n\n    * `mimeType` - _string_ - The file's `'Content-Type'` value.\n\n    **Note:** If you listen for this event, you should always consume the `stream` whether you care about its contents or not (you can simply do `stream.resume();` if you want to discard/skip the contents), otherwise the `'finish'`/`'close'` event will never fire on the busboy parser stream.\n    However, if you aren't accepting files, you can either simply not listen for the `'file'` event at all or set `limits.files` to `0`, and any/all files will be automatically skipped (these skipped files will still count towards any configured `limits.files` and `limits.parts` limits though).\n\n    **Note:** If a configured `limits.fileSize` limit was reached for a file, `stream` will both have a boolean property `truncated` set to `true` (best checked at the end of the stream) and emit a `'limit'` event to notify you when this happens.\n\n* **field**(< _string_ >name, < _string_ >value, < _object_ >info) - Emitted for each new non-file field found. `name` contains the form field name. `value` contains the string value of the field. `info` contains the following properties:\n\n    * `nameTruncated` - _boolean_ - Whether `name` was truncated or not (due to a configured `limits.fieldNameSize` limit)\n\n    * `valueTruncated` - _boolean_ - Whether `value` was truncated or not (due to a configured `limits.fieldSize` limit)\n\n    * `encoding` - _string_ - The field's `'Content-Transfer-Encoding'` value.\n\n    * `mimeType` - _string_ - The field's `'Content-Type'` value.\n\n* **partsLimit**() - Emitted when the configured `limits.parts` limit has been reached. No more `'file'` or `'field'` events will be emitted.\n\n* **filesLimit**() - Emitted when the configured `limits.files` limit has been reached. No more `'file'` events will be emitted.\n\n* **fieldsLimit**() - Emitted when the configured `limits.fields` limit has been reached. No more `'field'` events will be emitted.\n";
fs.writeFileSync(node_101, node_contents_101, "utf8");

const node_102 = path.resolve(baseDirectory, ".", "src", "classes", "server", "dependencies", "busboy", "lib");
fs.mkdirSync(node_102);

const node_103 = path.resolve(baseDirectory, ".", "src", "classes", "server", "dependencies", "busboy", "lib", "index.js");
const node_contents_103 = "const { parseContentType } = require(__dirname + \"/utils.js\");\n\nfunction getInstance(cfg) {\n  const headers = cfg.headers;\n  const conType = parseContentType(headers[\"content-type\"]);\n  if (!conType)\n    throw new Error(\"Malformed content type\");\n\n  for (const type of TYPES) {\n    const matched = type.detect(conType);\n    if (!matched)\n      continue;\n\n    const instanceCfg = {\n      limits: cfg.limits,\n      headers,\n      conType,\n      highWaterMark: undefined,\n      fileHwm: undefined,\n      defCharset: undefined,\n      defParamCharset: undefined,\n      preservePath: false,\n    };\n    if (cfg.highWaterMark)\n      instanceCfg.highWaterMark = cfg.highWaterMark;\n    if (cfg.fileHwm)\n      instanceCfg.fileHwm = cfg.fileHwm;\n    instanceCfg.defCharset = cfg.defCharset;\n    instanceCfg.defParamCharset = cfg.defParamCharset;\n    instanceCfg.preservePath = cfg.preservePath;\n    return new type(instanceCfg);\n  }\n\n  throw new Error(`Unsupported content type: ${headers[\"content-type\"]}`);\n}\n\n// Note: types are explicitly listed here for easier bundling\n// See: https://github.com/mscdex/busboy/issues/121\nconst TYPES = [\n  require(__dirname + \"/types/multipart\"),\n  require(__dirname + \"/types/urlencoded\"),\n].filter(function(typemod) { return typeof typemod.detect === \"function\"; });\n\nmodule.exports = (cfg) => {\n  if (typeof cfg !== \"object\" || cfg === null)\n    cfg = {};\n\n  if (typeof cfg.headers !== \"object\"\n      || cfg.headers === null\n      || typeof cfg.headers[\"content-type\"] !== \"string\") {\n    throw new Error(\"Missing Content-Type\");\n  }\n\n  return getInstance(cfg);\n};\n";
fs.writeFileSync(node_103, node_contents_103, "utf8");

const node_104 = path.resolve(baseDirectory, ".", "src", "classes", "server", "dependencies", "busboy", "lib", "types");
fs.mkdirSync(node_104);

const node_105 = path.resolve(baseDirectory, ".", "src", "classes", "server", "dependencies", "busboy", "lib", "types", "multipart.js");
const node_contents_105 = "'use strict';\n\nconst { Readable, Writable } = require('stream');\n\nconst StreamSearch = require(__dirname + '/../../../streamsearch/lib/sbmh.js');\n\nconst {\n  basename,\n  convertToUTF8,\n  getDecoder,\n  parseContentType,\n  parseDisposition,\n} = require('../utils.js');\n\nconst BUF_CRLF = Buffer.from('\\r\\n');\nconst BUF_CR = Buffer.from('\\r');\nconst BUF_DASH = Buffer.from('-');\n\nfunction noop() {}\n\nconst MAX_HEADER_PAIRS = 2000; // From node\nconst MAX_HEADER_SIZE = 16 * 1024; // From node (its default value)\n\nconst HPARSER_NAME = 0;\nconst HPARSER_PRE_OWS = 1;\nconst HPARSER_VALUE = 2;\nclass HeaderParser {\n  constructor(cb) {\n    this.header = Object.create(null);\n    this.pairCount = 0;\n    this.byteCount = 0;\n    this.state = HPARSER_NAME;\n    this.name = '';\n    this.value = '';\n    this.crlf = 0;\n    this.cb = cb;\n  }\n\n  reset() {\n    this.header = Object.create(null);\n    this.pairCount = 0;\n    this.byteCount = 0;\n    this.state = HPARSER_NAME;\n    this.name = '';\n    this.value = '';\n    this.crlf = 0;\n  }\n\n  push(chunk, pos, end) {\n    let start = pos;\n    while (pos < end) {\n      switch (this.state) {\n        case HPARSER_NAME: {\n          let done = false;\n          for (; pos < end; ++pos) {\n            if (this.byteCount === MAX_HEADER_SIZE)\n              return -1;\n            ++this.byteCount;\n            const code = chunk[pos];\n            if (TOKEN[code] !== 1) {\n              if (code !== 58/* ':' */)\n                return -1;\n              this.name += chunk.latin1Slice(start, pos);\n              if (this.name.length === 0)\n                return -1;\n              ++pos;\n              done = true;\n              this.state = HPARSER_PRE_OWS;\n              break;\n            }\n          }\n          if (!done) {\n            this.name += chunk.latin1Slice(start, pos);\n            break;\n          }\n          // FALLTHROUGH\n        }\n        case HPARSER_PRE_OWS: {\n          // Skip optional whitespace\n          let done = false;\n          for (; pos < end; ++pos) {\n            if (this.byteCount === MAX_HEADER_SIZE)\n              return -1;\n            ++this.byteCount;\n            const code = chunk[pos];\n            if (code !== 32/* ' ' */ && code !== 9/* '\\t' */) {\n              start = pos;\n              done = true;\n              this.state = HPARSER_VALUE;\n              break;\n            }\n          }\n          if (!done)\n            break;\n          // FALLTHROUGH\n        }\n        case HPARSER_VALUE:\n          switch (this.crlf) {\n            case 0: // Nothing yet\n              for (; pos < end; ++pos) {\n                if (this.byteCount === MAX_HEADER_SIZE)\n                  return -1;\n                ++this.byteCount;\n                const code = chunk[pos];\n                if (FIELD_VCHAR[code] !== 1) {\n                  if (code !== 13/* '\\r' */)\n                    return -1;\n                  ++this.crlf;\n                  break;\n                }\n              }\n              this.value += chunk.latin1Slice(start, pos++);\n              break;\n            case 1: // Received CR\n              if (this.byteCount === MAX_HEADER_SIZE)\n                return -1;\n              ++this.byteCount;\n              if (chunk[pos++] !== 10/* '\\n' */)\n                return -1;\n              ++this.crlf;\n              break;\n            case 2: { // Received CR LF\n              if (this.byteCount === MAX_HEADER_SIZE)\n                return -1;\n              ++this.byteCount;\n              const code = chunk[pos];\n              if (code === 32/* ' ' */ || code === 9/* '\\t' */) {\n                // Folded value\n                start = pos;\n                this.crlf = 0;\n              } else {\n                if (++this.pairCount < MAX_HEADER_PAIRS) {\n                  this.name = this.name.toLowerCase();\n                  if (this.header[this.name] === undefined)\n                    this.header[this.name] = [this.value];\n                  else\n                    this.header[this.name].push(this.value);\n                }\n                if (code === 13/* '\\r' */) {\n                  ++this.crlf;\n                  ++pos;\n                } else {\n                  // Assume start of next header field name\n                  start = pos;\n                  this.crlf = 0;\n                  this.state = HPARSER_NAME;\n                  this.name = '';\n                  this.value = '';\n                }\n              }\n              break;\n            }\n            case 3: { // Received CR LF CR\n              if (this.byteCount === MAX_HEADER_SIZE)\n                return -1;\n              ++this.byteCount;\n              if (chunk[pos++] !== 10/* '\\n' */)\n                return -1;\n              // End of header\n              const header = this.header;\n              this.reset();\n              this.cb(header);\n              return pos;\n            }\n          }\n          break;\n      }\n    }\n\n    return pos;\n  }\n}\n\nclass FileStream extends Readable {\n  constructor(opts, owner) {\n    super(opts);\n    this.truncated = false;\n    this._readcb = null;\n    this.once('end', () => {\n      // We need to make sure that we call any outstanding _writecb() that is\n      // associated with this file so that processing of the rest of the form\n      // can continue. This may not happen if the file stream ends right after\n      // backpressure kicks in, so we force it here.\n      this._read();\n      if (--owner._fileEndsLeft === 0 && owner._finalcb) {\n        const cb = owner._finalcb;\n        owner._finalcb = null;\n        // Make sure other 'end' event handlers get a chance to be executed\n        // before busboy's 'finish' event is emitted\n        process.nextTick(cb);\n      }\n    });\n  }\n  _read(n) {\n    const cb = this._readcb;\n    if (cb) {\n      this._readcb = null;\n      cb();\n    }\n  }\n}\n\nconst ignoreData = {\n  push: (chunk, pos) => {},\n  destroy: () => {},\n};\n\nfunction callAndUnsetCb(self, err) {\n  const cb = self._writecb;\n  self._writecb = null;\n  if (err)\n    self.destroy(err);\n  else if (cb)\n    cb();\n}\n\nfunction nullDecoder(val, hint) {\n  return val;\n}\n\nclass Multipart extends Writable {\n  constructor(cfg) {\n    const streamOpts = {\n      autoDestroy: true,\n      emitClose: true,\n      highWaterMark: (typeof cfg.highWaterMark === 'number'\n                      ? cfg.highWaterMark\n                      : undefined),\n    };\n    super(streamOpts);\n\n    if (!cfg.conType.params || typeof cfg.conType.params.boundary !== 'string')\n      throw new Error('Multipart: Boundary not found');\n\n    const boundary = cfg.conType.params.boundary;\n    const paramDecoder = (typeof cfg.defParamCharset === 'string'\n                            && cfg.defParamCharset\n                          ? getDecoder(cfg.defParamCharset)\n                          : nullDecoder);\n    const defCharset = (cfg.defCharset || 'utf8');\n    const preservePath = cfg.preservePath;\n    const fileOpts = {\n      autoDestroy: true,\n      emitClose: true,\n      highWaterMark: (typeof cfg.fileHwm === 'number'\n                      ? cfg.fileHwm\n                      : undefined),\n    };\n\n    const limits = cfg.limits;\n    const fieldSizeLimit = (limits && typeof limits.fieldSize === 'number'\n                            ? limits.fieldSize\n                            : 1 * 1024 * 1024);\n    const fileSizeLimit = (limits && typeof limits.fileSize === 'number'\n                           ? limits.fileSize\n                           : Infinity);\n    const filesLimit = (limits && typeof limits.files === 'number'\n                        ? limits.files\n                        : Infinity);\n    const fieldsLimit = (limits && typeof limits.fields === 'number'\n                         ? limits.fields\n                         : Infinity);\n    const partsLimit = (limits && typeof limits.parts === 'number'\n                        ? limits.parts\n                        : Infinity);\n\n    let parts = -1; // Account for initial boundary\n    let fields = 0;\n    let files = 0;\n    let skipPart = false;\n\n    this._fileEndsLeft = 0;\n    this._fileStream = undefined;\n    this._complete = false;\n    let fileSize = 0;\n\n    let field;\n    let fieldSize = 0;\n    let partCharset;\n    let partEncoding;\n    let partType;\n    let partName;\n    let partTruncated = false;\n\n    let hitFilesLimit = false;\n    let hitFieldsLimit = false;\n\n    this._hparser = null;\n    const hparser = new HeaderParser((header) => {\n      this._hparser = null;\n      skipPart = false;\n\n      partType = 'text/plain';\n      partCharset = defCharset;\n      partEncoding = '7bit';\n      partName = undefined;\n      partTruncated = false;\n\n      let filename;\n      if (!header['content-disposition']) {\n        skipPart = true;\n        return;\n      }\n\n      const disp = parseDisposition(header['content-disposition'][0],\n                                    paramDecoder);\n      if (!disp || disp.type !== 'form-data') {\n        skipPart = true;\n        return;\n      }\n\n      if (disp.params) {\n        if (disp.params.name)\n          partName = disp.params.name;\n\n        if (disp.params['filename*'])\n          filename = disp.params['filename*'];\n        else if (disp.params.filename)\n          filename = disp.params.filename;\n\n        if (filename !== undefined && !preservePath)\n          filename = basename(filename);\n      }\n\n      if (header['content-type']) {\n        const conType = parseContentType(header['content-type'][0]);\n        if (conType) {\n          partType = `${conType.type}/${conType.subtype}`;\n          if (conType.params && typeof conType.params.charset === 'string')\n            partCharset = conType.params.charset.toLowerCase();\n        }\n      }\n\n      if (header['content-transfer-encoding'])\n        partEncoding = header['content-transfer-encoding'][0].toLowerCase();\n\n      if (partType === 'application/octet-stream' || filename !== undefined) {\n        // File\n\n        if (files === filesLimit) {\n          if (!hitFilesLimit) {\n            hitFilesLimit = true;\n            this.emit('filesLimit');\n          }\n          skipPart = true;\n          return;\n        }\n        ++files;\n\n        if (this.listenerCount('file') === 0) {\n          skipPart = true;\n          return;\n        }\n\n        fileSize = 0;\n        this._fileStream = new FileStream(fileOpts, this);\n        ++this._fileEndsLeft;\n        this.emit(\n          'file',\n          partName,\n          this._fileStream,\n          { filename,\n            encoding: partEncoding,\n            mimeType: partType }\n        );\n      } else {\n        // Non-file\n\n        if (fields === fieldsLimit) {\n          if (!hitFieldsLimit) {\n            hitFieldsLimit = true;\n            this.emit('fieldsLimit');\n          }\n          skipPart = true;\n          return;\n        }\n        ++fields;\n\n        if (this.listenerCount('field') === 0) {\n          skipPart = true;\n          return;\n        }\n\n        field = [];\n        fieldSize = 0;\n      }\n    });\n\n    let matchPostBoundary = 0;\n    const ssCb = (isMatch, data, start, end, isDataSafe) => {\nretrydata:\n      while (data) {\n        if (this._hparser !== null) {\n          const ret = this._hparser.push(data, start, end);\n          if (ret === -1) {\n            this._hparser = null;\n            hparser.reset();\n            this.emit('error', new Error('Malformed part header'));\n            break;\n          }\n          start = ret;\n        }\n\n        if (start === end)\n          break;\n\n        if (matchPostBoundary !== 0) {\n          if (matchPostBoundary === 1) {\n            switch (data[start]) {\n              case 45: // '-'\n                // Try matching '--' after boundary\n                matchPostBoundary = 2;\n                ++start;\n                break;\n              case 13: // '\\r'\n                // Try matching CR LF before header\n                matchPostBoundary = 3;\n                ++start;\n                break;\n              default:\n                matchPostBoundary = 0;\n            }\n            if (start === end)\n              return;\n          }\n\n          if (matchPostBoundary === 2) {\n            matchPostBoundary = 0;\n            if (data[start] === 45/* '-' */) {\n              // End of multipart data\n              this._complete = true;\n              this._bparser = ignoreData;\n              return;\n            }\n            // We saw something other than '-', so put the dash we consumed\n            // \"back\"\n            const writecb = this._writecb;\n            this._writecb = noop;\n            ssCb(false, BUF_DASH, 0, 1, false);\n            this._writecb = writecb;\n          } else if (matchPostBoundary === 3) {\n            matchPostBoundary = 0;\n            if (data[start] === 10/* '\\n' */) {\n              ++start;\n              if (parts >= partsLimit)\n                break;\n              // Prepare the header parser\n              this._hparser = hparser;\n              if (start === end)\n                break;\n              // Process the remaining data as a header\n              continue retrydata;\n            } else {\n              // We saw something other than LF, so put the CR we consumed\n              // \"back\"\n              const writecb = this._writecb;\n              this._writecb = noop;\n              ssCb(false, BUF_CR, 0, 1, false);\n              this._writecb = writecb;\n            }\n          }\n        }\n\n        if (!skipPart) {\n          if (this._fileStream) {\n            let chunk;\n            const actualLen = Math.min(end - start, fileSizeLimit - fileSize);\n            if (!isDataSafe) {\n              chunk = Buffer.allocUnsafe(actualLen);\n              data.copy(chunk, 0, start, start + actualLen);\n            } else {\n              chunk = data.slice(start, start + actualLen);\n            }\n\n            fileSize += chunk.length;\n            if (fileSize === fileSizeLimit) {\n              if (chunk.length > 0)\n                this._fileStream.push(chunk);\n              this._fileStream.emit('limit');\n              this._fileStream.truncated = true;\n              skipPart = true;\n            } else if (!this._fileStream.push(chunk)) {\n              if (this._writecb)\n                this._fileStream._readcb = this._writecb;\n              this._writecb = null;\n            }\n          } else if (field !== undefined) {\n            let chunk;\n            const actualLen = Math.min(\n              end - start,\n              fieldSizeLimit - fieldSize\n            );\n            if (!isDataSafe) {\n              chunk = Buffer.allocUnsafe(actualLen);\n              data.copy(chunk, 0, start, start + actualLen);\n            } else {\n              chunk = data.slice(start, start + actualLen);\n            }\n\n            fieldSize += actualLen;\n            field.push(chunk);\n            if (fieldSize === fieldSizeLimit) {\n              skipPart = true;\n              partTruncated = true;\n            }\n          }\n        }\n\n        break;\n      }\n\n      if (isMatch) {\n        matchPostBoundary = 1;\n\n        if (this._fileStream) {\n          // End the active file stream if the previous part was a file\n          this._fileStream.push(null);\n          this._fileStream = null;\n        } else if (field !== undefined) {\n          let data;\n          switch (field.length) {\n            case 0:\n              data = '';\n              break;\n            case 1:\n              data = convertToUTF8(field[0], partCharset, 0);\n              break;\n            default:\n              data = convertToUTF8(\n                Buffer.concat(field, fieldSize),\n                partCharset,\n                0\n              );\n          }\n          field = undefined;\n          fieldSize = 0;\n          this.emit(\n            'field',\n            partName,\n            data,\n            { nameTruncated: false,\n              valueTruncated: partTruncated,\n              encoding: partEncoding,\n              mimeType: partType }\n          );\n        }\n\n        if (++parts === partsLimit)\n          this.emit('partsLimit');\n      }\n    };\n    this._bparser = new StreamSearch(`\\r\\n--${boundary}`, ssCb);\n\n    this._writecb = null;\n    this._finalcb = null;\n\n    // Just in case there is no preamble\n    this.write(BUF_CRLF);\n  }\n\n  static detect(conType) {\n    return (conType.type === 'multipart' && conType.subtype === 'form-data');\n  }\n\n  _write(chunk, enc, cb) {\n    this._writecb = cb;\n    this._bparser.push(chunk, 0);\n    if (this._writecb)\n      callAndUnsetCb(this);\n  }\n\n  _destroy(err, cb) {\n    this._hparser = null;\n    this._bparser = ignoreData;\n    if (!err)\n      err = checkEndState(this);\n    const fileStream = this._fileStream;\n    if (fileStream) {\n      this._fileStream = null;\n      fileStream.destroy(err);\n    }\n    cb(err);\n  }\n\n  _final(cb) {\n    this._bparser.destroy();\n    if (!this._complete)\n      return cb(new Error('Unexpected end of form'));\n    if (this._fileEndsLeft)\n      this._finalcb = finalcb.bind(null, this, cb);\n    else\n      finalcb(this, cb);\n  }\n}\n\nfunction finalcb(self, cb, err) {\n  if (err)\n    return cb(err);\n  err = checkEndState(self);\n  cb(err);\n}\n\nfunction checkEndState(self) {\n  if (self._hparser)\n    return new Error('Malformed part header');\n  const fileStream = self._fileStream;\n  if (fileStream) {\n    self._fileStream = null;\n    fileStream.destroy(new Error('Unexpected end of file'));\n  }\n  if (!self._complete)\n    return new Error('Unexpected end of form');\n}\n\nconst TOKEN = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,\n  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n];\n\nconst FIELD_VCHAR = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n];\n\nmodule.exports = Multipart;\n";
fs.writeFileSync(node_105, node_contents_105, "utf8");

const node_106 = path.resolve(baseDirectory, ".", "src", "classes", "server", "dependencies", "busboy", "lib", "types", "urlencoded.js");
const node_contents_106 = "'use strict';\n\nconst { Writable } = require(\"stream\");\n\nconst { getDecoder } = require(__dirname + \"/../utils.js\");\n\nclass URLEncoded extends Writable {\n  constructor(cfg) {\n    const streamOpts = {\n      autoDestroy: true,\n      emitClose: true,\n      highWaterMark: (typeof cfg.highWaterMark === 'number'\n                      ? cfg.highWaterMark\n                      : undefined),\n    };\n    super(streamOpts);\n\n    let charset = (cfg.defCharset || 'utf8');\n    if (cfg.conType.params && typeof cfg.conType.params.charset === 'string')\n      charset = cfg.conType.params.charset;\n\n    this.charset = charset;\n\n    const limits = cfg.limits;\n    this.fieldSizeLimit = (limits && typeof limits.fieldSize === 'number'\n                           ? limits.fieldSize\n                           : 1 * 1024 * 1024);\n    this.fieldsLimit = (limits && typeof limits.fields === 'number'\n                        ? limits.fields\n                        : Infinity);\n    this.fieldNameSizeLimit = (\n      limits && typeof limits.fieldNameSize === 'number'\n      ? limits.fieldNameSize\n      : 100\n    );\n\n    this._inKey = true;\n    this._keyTrunc = false;\n    this._valTrunc = false;\n    this._bytesKey = 0;\n    this._bytesVal = 0;\n    this._fields = 0;\n    this._key = '';\n    this._val = '';\n    this._byte = -2;\n    this._lastPos = 0;\n    this._encode = 0;\n    this._decoder = getDecoder(charset);\n  }\n\n  static detect(conType) {\n    return (conType.type === 'application'\n            && conType.subtype === 'x-www-form-urlencoded');\n  }\n\n  _write(chunk, enc, cb) {\n    if (this._fields >= this.fieldsLimit)\n      return cb();\n\n    let i = 0;\n    const len = chunk.length;\n    this._lastPos = 0;\n\n    // Check if we last ended mid-percent-encoded byte\n    if (this._byte !== -2) {\n      i = readPctEnc(this, chunk, i, len);\n      if (i === -1)\n        return cb(new Error('Malformed urlencoded form'));\n      if (i >= len)\n        return cb();\n      if (this._inKey)\n        ++this._bytesKey;\n      else\n        ++this._bytesVal;\n    }\n\nmain:\n    while (i < len) {\n      if (this._inKey) {\n        // Parsing key\n\n        i = skipKeyBytes(this, chunk, i, len);\n\n        while (i < len) {\n          switch (chunk[i]) {\n            case 61: // '='\n              if (this._lastPos < i)\n                this._key += chunk.latin1Slice(this._lastPos, i);\n              this._lastPos = ++i;\n              this._key = this._decoder(this._key, this._encode);\n              this._encode = 0;\n              this._inKey = false;\n              continue main;\n            case 38: // '&'\n              if (this._lastPos < i)\n                this._key += chunk.latin1Slice(this._lastPos, i);\n              this._lastPos = ++i;\n              this._key = this._decoder(this._key, this._encode);\n              this._encode = 0;\n              if (this._bytesKey > 0) {\n                this.emit(\n                  'field',\n                  this._key,\n                  '',\n                  { nameTruncated: this._keyTrunc,\n                    valueTruncated: false,\n                    encoding: this.charset,\n                    mimeType: 'text/plain' }\n                );\n              }\n              this._key = '';\n              this._val = '';\n              this._keyTrunc = false;\n              this._valTrunc = false;\n              this._bytesKey = 0;\n              this._bytesVal = 0;\n              if (++this._fields >= this.fieldsLimit) {\n                this.emit('fieldsLimit');\n                return cb();\n              }\n              continue;\n            case 43: // '+'\n              if (this._lastPos < i)\n                this._key += chunk.latin1Slice(this._lastPos, i);\n              this._key += ' ';\n              this._lastPos = i + 1;\n              break;\n            case 37: // '%'\n              if (this._encode === 0)\n                this._encode = 1;\n              if (this._lastPos < i)\n                this._key += chunk.latin1Slice(this._lastPos, i);\n              this._lastPos = i + 1;\n              this._byte = -1;\n              i = readPctEnc(this, chunk, i + 1, len);\n              if (i === -1)\n                return cb(new Error('Malformed urlencoded form'));\n              if (i >= len)\n                return cb();\n              ++this._bytesKey;\n              i = skipKeyBytes(this, chunk, i, len);\n              continue;\n          }\n          ++i;\n          ++this._bytesKey;\n          i = skipKeyBytes(this, chunk, i, len);\n        }\n        if (this._lastPos < i)\n          this._key += chunk.latin1Slice(this._lastPos, i);\n      } else {\n        // Parsing value\n\n        i = skipValBytes(this, chunk, i, len);\n\n        while (i < len) {\n          switch (chunk[i]) {\n            case 38: // '&'\n              if (this._lastPos < i)\n                this._val += chunk.latin1Slice(this._lastPos, i);\n              this._lastPos = ++i;\n              this._inKey = true;\n              this._val = this._decoder(this._val, this._encode);\n              this._encode = 0;\n              if (this._bytesKey > 0 || this._bytesVal > 0) {\n                this.emit(\n                  'field',\n                  this._key,\n                  this._val,\n                  { nameTruncated: this._keyTrunc,\n                    valueTruncated: this._valTrunc,\n                    encoding: this.charset,\n                    mimeType: 'text/plain' }\n                );\n              }\n              this._key = '';\n              this._val = '';\n              this._keyTrunc = false;\n              this._valTrunc = false;\n              this._bytesKey = 0;\n              this._bytesVal = 0;\n              if (++this._fields >= this.fieldsLimit) {\n                this.emit('fieldsLimit');\n                return cb();\n              }\n              continue main;\n            case 43: // '+'\n              if (this._lastPos < i)\n                this._val += chunk.latin1Slice(this._lastPos, i);\n              this._val += ' ';\n              this._lastPos = i + 1;\n              break;\n            case 37: // '%'\n              if (this._encode === 0)\n                this._encode = 1;\n              if (this._lastPos < i)\n                this._val += chunk.latin1Slice(this._lastPos, i);\n              this._lastPos = i + 1;\n              this._byte = -1;\n              i = readPctEnc(this, chunk, i + 1, len);\n              if (i === -1)\n                return cb(new Error('Malformed urlencoded form'));\n              if (i >= len)\n                return cb();\n              ++this._bytesVal;\n              i = skipValBytes(this, chunk, i, len);\n              continue;\n          }\n          ++i;\n          ++this._bytesVal;\n          i = skipValBytes(this, chunk, i, len);\n        }\n        if (this._lastPos < i)\n          this._val += chunk.latin1Slice(this._lastPos, i);\n      }\n    }\n\n    cb();\n  }\n\n  _final(cb) {\n    if (this._byte !== -2)\n      return cb(new Error('Malformed urlencoded form'));\n    if (!this._inKey || this._bytesKey > 0 || this._bytesVal > 0) {\n      if (this._inKey)\n        this._key = this._decoder(this._key, this._encode);\n      else\n        this._val = this._decoder(this._val, this._encode);\n      this.emit(\n        'field',\n        this._key,\n        this._val,\n        { nameTruncated: this._keyTrunc,\n          valueTruncated: this._valTrunc,\n          encoding: this.charset,\n          mimeType: 'text/plain' }\n      );\n    }\n    cb();\n  }\n}\n\nfunction readPctEnc(self, chunk, pos, len) {\n  if (pos >= len)\n    return len;\n\n  if (self._byte === -1) {\n    // We saw a '%' but no hex characters yet\n    const hexUpper = HEX_VALUES[chunk[pos++]];\n    if (hexUpper === -1)\n      return -1;\n\n    if (hexUpper >= 8)\n      self._encode = 2; // Indicate high bits detected\n\n    if (pos < len) {\n      // Both hex characters are in this chunk\n      const hexLower = HEX_VALUES[chunk[pos++]];\n      if (hexLower === -1)\n        return -1;\n\n      if (self._inKey)\n        self._key += String.fromCharCode((hexUpper << 4) + hexLower);\n      else\n        self._val += String.fromCharCode((hexUpper << 4) + hexLower);\n\n      self._byte = -2;\n      self._lastPos = pos;\n    } else {\n      // Only one hex character was available in this chunk\n      self._byte = hexUpper;\n    }\n  } else {\n    // We saw only one hex character so far\n    const hexLower = HEX_VALUES[chunk[pos++]];\n    if (hexLower === -1)\n      return -1;\n\n    if (self._inKey)\n      self._key += String.fromCharCode((self._byte << 4) + hexLower);\n    else\n      self._val += String.fromCharCode((self._byte << 4) + hexLower);\n\n    self._byte = -2;\n    self._lastPos = pos;\n  }\n\n  return pos;\n}\n\nfunction skipKeyBytes(self, chunk, pos, len) {\n  // Skip bytes if we've truncated\n  if (self._bytesKey > self.fieldNameSizeLimit) {\n    if (!self._keyTrunc) {\n      if (self._lastPos < pos)\n        self._key += chunk.latin1Slice(self._lastPos, pos - 1);\n    }\n    self._keyTrunc = true;\n    for (; pos < len; ++pos) {\n      const code = chunk[pos];\n      if (code === 61/* '=' */ || code === 38/* '&' */)\n        break;\n      ++self._bytesKey;\n    }\n    self._lastPos = pos;\n  }\n\n  return pos;\n}\n\nfunction skipValBytes(self, chunk, pos, len) {\n  // Skip bytes if we've truncated\n  if (self._bytesVal > self.fieldSizeLimit) {\n    if (!self._valTrunc) {\n      if (self._lastPos < pos)\n        self._val += chunk.latin1Slice(self._lastPos, pos - 1);\n    }\n    self._valTrunc = true;\n    for (; pos < len; ++pos) {\n      if (chunk[pos] === 38/* '&' */)\n        break;\n      ++self._bytesVal;\n    }\n    self._lastPos = pos;\n  }\n\n  return pos;\n}\n\n/* eslint-disable no-multi-spaces */\nconst HEX_VALUES = [\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n   0,  1,  2,  3,  4,  5,  6,  7,  8,  9, -1, -1, -1, -1, -1, -1,\n  -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n];\n/* eslint-enable no-multi-spaces */\n\nmodule.exports = URLEncoded;\n";
fs.writeFileSync(node_106, node_contents_106, "utf8");

const node_107 = path.resolve(baseDirectory, ".", "src", "classes", "server", "dependencies", "busboy", "lib", "utils.js");
const node_contents_107 = "'use strict';\n\nfunction parseContentType(str) {\n  if (str.length === 0)\n    return;\n\n  const params = Object.create(null);\n  let i = 0;\n\n  // Parse type\n  for (; i < str.length; ++i) {\n    const code = str.charCodeAt(i);\n    if (TOKEN[code] !== 1) {\n      if (code !== 47/* '/' */ || i === 0)\n        return;\n      break;\n    }\n  }\n  // Check for type without subtype\n  if (i === str.length)\n    return;\n\n  const type = str.slice(0, i).toLowerCase();\n\n  // Parse subtype\n  const subtypeStart = ++i;\n  for (; i < str.length; ++i) {\n    const code = str.charCodeAt(i);\n    if (TOKEN[code] !== 1) {\n      // Make sure we have a subtype\n      if (i === subtypeStart)\n        return;\n\n      if (parseContentTypeParams(str, i, params) === undefined)\n        return;\n      break;\n    }\n  }\n  // Make sure we have a subtype\n  if (i === subtypeStart)\n    return;\n\n  const subtype = str.slice(subtypeStart, i).toLowerCase();\n\n  return { type, subtype, params };\n}\n\nfunction parseContentTypeParams(str, i, params) {\n  while (i < str.length) {\n    // Consume whitespace\n    for (; i < str.length; ++i) {\n      const code = str.charCodeAt(i);\n      if (code !== 32/* ' ' */ && code !== 9/* '\\t' */)\n        break;\n    }\n\n    // Ended on whitespace\n    if (i === str.length)\n      break;\n\n    // Check for malformed parameter\n    if (str.charCodeAt(i++) !== 59/* ';' */)\n      return;\n\n    // Consume whitespace\n    for (; i < str.length; ++i) {\n      const code = str.charCodeAt(i);\n      if (code !== 32/* ' ' */ && code !== 9/* '\\t' */)\n        break;\n    }\n\n    // Ended on whitespace (malformed)\n    if (i === str.length)\n      return;\n\n    let name;\n    const nameStart = i;\n    // Parse parameter name\n    for (; i < str.length; ++i) {\n      const code = str.charCodeAt(i);\n      if (TOKEN[code] !== 1) {\n        if (code !== 61/* '=' */)\n          return;\n        break;\n      }\n    }\n\n    // No value (malformed)\n    if (i === str.length)\n      return;\n\n    name = str.slice(nameStart, i);\n    ++i; // Skip over '='\n\n    // No value (malformed)\n    if (i === str.length)\n      return;\n\n    let value = '';\n    let valueStart;\n    if (str.charCodeAt(i) === 34/* '\"' */) {\n      valueStart = ++i;\n      let escaping = false;\n      // Parse quoted value\n      for (; i < str.length; ++i) {\n        const code = str.charCodeAt(i);\n        if (code === 92/* '\\\\' */) {\n          if (escaping) {\n            valueStart = i;\n            escaping = false;\n          } else {\n            value += str.slice(valueStart, i);\n            escaping = true;\n          }\n          continue;\n        }\n        if (code === 34/* '\"' */) {\n          if (escaping) {\n            valueStart = i;\n            escaping = false;\n            continue;\n          }\n          value += str.slice(valueStart, i);\n          break;\n        }\n        if (escaping) {\n          valueStart = i - 1;\n          escaping = false;\n        }\n        // Invalid unescaped quoted character (malformed)\n        if (QDTEXT[code] !== 1)\n          return;\n      }\n\n      // No end quote (malformed)\n      if (i === str.length)\n        return;\n\n      ++i; // Skip over double quote\n    } else {\n      valueStart = i;\n      // Parse unquoted value\n      for (; i < str.length; ++i) {\n        const code = str.charCodeAt(i);\n        if (TOKEN[code] !== 1) {\n          // No value (malformed)\n          if (i === valueStart)\n            return;\n          break;\n        }\n      }\n      value = str.slice(valueStart, i);\n    }\n\n    name = name.toLowerCase();\n    if (params[name] === undefined)\n      params[name] = value;\n  }\n\n  return params;\n}\n\nfunction parseDisposition(str, defDecoder) {\n  if (str.length === 0)\n    return;\n\n  const params = Object.create(null);\n  let i = 0;\n\n  for (; i < str.length; ++i) {\n    const code = str.charCodeAt(i);\n    if (TOKEN[code] !== 1) {\n      if (parseDispositionParams(str, i, params, defDecoder) === undefined)\n        return;\n      break;\n    }\n  }\n\n  const type = str.slice(0, i).toLowerCase();\n\n  return { type, params };\n}\n\nfunction parseDispositionParams(str, i, params, defDecoder) {\n  while (i < str.length) {\n    // Consume whitespace\n    for (; i < str.length; ++i) {\n      const code = str.charCodeAt(i);\n      if (code !== 32/* ' ' */ && code !== 9/* '\\t' */)\n        break;\n    }\n\n    // Ended on whitespace\n    if (i === str.length)\n      break;\n\n    // Check for malformed parameter\n    if (str.charCodeAt(i++) !== 59/* ';' */)\n      return;\n\n    // Consume whitespace\n    for (; i < str.length; ++i) {\n      const code = str.charCodeAt(i);\n      if (code !== 32/* ' ' */ && code !== 9/* '\\t' */)\n        break;\n    }\n\n    // Ended on whitespace (malformed)\n    if (i === str.length)\n      return;\n\n    let name;\n    const nameStart = i;\n    // Parse parameter name\n    for (; i < str.length; ++i) {\n      const code = str.charCodeAt(i);\n      if (TOKEN[code] !== 1) {\n        if (code === 61/* '=' */)\n          break;\n        return;\n      }\n    }\n\n    // No value (malformed)\n    if (i === str.length)\n      return;\n\n    let value = '';\n    let valueStart;\n    let charset;\n    //~ let lang;\n    name = str.slice(nameStart, i);\n    if (name.charCodeAt(name.length - 1) === 42/* '*' */) {\n      // Extended value\n\n      const charsetStart = ++i;\n      // Parse charset name\n      for (; i < str.length; ++i) {\n        const code = str.charCodeAt(i);\n        if (CHARSET[code] !== 1) {\n          if (code !== 39/* '\\'' */)\n            return;\n          break;\n        }\n      }\n\n      // Incomplete charset (malformed)\n      if (i === str.length)\n        return;\n\n      charset = str.slice(charsetStart, i);\n      ++i; // Skip over the '\\''\n\n      //~ const langStart = ++i;\n      // Parse language name\n      for (; i < str.length; ++i) {\n        const code = str.charCodeAt(i);\n        if (code === 39/* '\\'' */)\n          break;\n      }\n\n      // Incomplete language (malformed)\n      if (i === str.length)\n        return;\n\n      //~ lang = str.slice(langStart, i);\n      ++i; // Skip over the '\\''\n\n      // No value (malformed)\n      if (i === str.length)\n        return;\n\n      valueStart = i;\n\n      let encode = 0;\n      // Parse value\n      for (; i < str.length; ++i) {\n        const code = str.charCodeAt(i);\n        if (EXTENDED_VALUE[code] !== 1) {\n          if (code === 37/* '%' */) {\n            let hexUpper;\n            let hexLower;\n            if (i + 2 < str.length\n                && (hexUpper = HEX_VALUES[str.charCodeAt(i + 1)]) !== -1\n                && (hexLower = HEX_VALUES[str.charCodeAt(i + 2)]) !== -1) {\n              const byteVal = (hexUpper << 4) + hexLower;\n              value += str.slice(valueStart, i);\n              value += String.fromCharCode(byteVal);\n              i += 2;\n              valueStart = i + 1;\n              if (byteVal >= 128)\n                encode = 2;\n              else if (encode === 0)\n                encode = 1;\n              continue;\n            }\n            // '%' disallowed in non-percent encoded contexts (malformed)\n            return;\n          }\n          break;\n        }\n      }\n\n      value += str.slice(valueStart, i);\n      value = convertToUTF8(value, charset, encode);\n      if (value === undefined)\n        return;\n    } else {\n      // Non-extended value\n\n      ++i; // Skip over '='\n\n      // No value (malformed)\n      if (i === str.length)\n        return;\n\n      if (str.charCodeAt(i) === 34/* '\"' */) {\n        valueStart = ++i;\n        let escaping = false;\n        // Parse quoted value\n        for (; i < str.length; ++i) {\n          const code = str.charCodeAt(i);\n          if (code === 92/* '\\\\' */) {\n            if (escaping) {\n              valueStart = i;\n              escaping = false;\n            } else {\n              value += str.slice(valueStart, i);\n              escaping = true;\n            }\n            continue;\n          }\n          if (code === 34/* '\"' */) {\n            if (escaping) {\n              valueStart = i;\n              escaping = false;\n              continue;\n            }\n            value += str.slice(valueStart, i);\n            break;\n          }\n          if (escaping) {\n            valueStart = i - 1;\n            escaping = false;\n          }\n          // Invalid unescaped quoted character (malformed)\n          if (QDTEXT[code] !== 1)\n            return;\n        }\n\n        // No end quote (malformed)\n        if (i === str.length)\n          return;\n\n        ++i; // Skip over double quote\n      } else {\n        valueStart = i;\n        // Parse unquoted value\n        for (; i < str.length; ++i) {\n          const code = str.charCodeAt(i);\n          if (TOKEN[code] !== 1) {\n            // No value (malformed)\n            if (i === valueStart)\n              return;\n            break;\n          }\n        }\n        value = str.slice(valueStart, i);\n      }\n\n      value = defDecoder(value, 2);\n      if (value === undefined)\n        return;\n    }\n\n    name = name.toLowerCase();\n    if (params[name] === undefined)\n      params[name] = value;\n  }\n\n  return params;\n}\n\nfunction getDecoder(charset) {\n  let lc;\n  while (true) {\n    switch (charset) {\n      case 'utf-8':\n      case 'utf8':\n        return decoders.utf8;\n      case 'latin1':\n      case 'ascii': // TODO: Make these a separate, strict decoder?\n      case 'us-ascii':\n      case 'iso-8859-1':\n      case 'iso8859-1':\n      case 'iso88591':\n      case 'iso_8859-1':\n      case 'windows-1252':\n      case 'iso_8859-1:1987':\n      case 'cp1252':\n      case 'x-cp1252':\n        return decoders.latin1;\n      case 'utf16le':\n      case 'utf-16le':\n      case 'ucs2':\n      case 'ucs-2':\n        return decoders.utf16le;\n      case 'base64':\n        return decoders.base64;\n      default:\n        if (lc === undefined) {\n          lc = true;\n          charset = charset.toLowerCase();\n          continue;\n        }\n        return decoders.other.bind(charset);\n    }\n  }\n}\n\nconst decoders = {\n  utf8: (data, hint) => {\n    if (data.length === 0)\n      return '';\n    if (typeof data === 'string') {\n      // If `data` never had any percent-encoded bytes or never had any that\n      // were outside of the ASCII range, then we can safely just return the\n      // input since UTF-8 is ASCII compatible\n      if (hint < 2)\n        return data;\n\n      data = Buffer.from(data, 'latin1');\n    }\n    return data.utf8Slice(0, data.length);\n  },\n\n  latin1: (data, hint) => {\n    if (data.length === 0)\n      return '';\n    if (typeof data === 'string')\n      return data;\n    return data.latin1Slice(0, data.length);\n  },\n\n  utf16le: (data, hint) => {\n    if (data.length === 0)\n      return '';\n    if (typeof data === 'string')\n      data = Buffer.from(data, 'latin1');\n    return data.ucs2Slice(0, data.length);\n  },\n\n  base64: (data, hint) => {\n    if (data.length === 0)\n      return '';\n    if (typeof data === 'string')\n      data = Buffer.from(data, 'latin1');\n    return data.base64Slice(0, data.length);\n  },\n\n  other: (data, hint) => {\n    if (data.length === 0)\n      return '';\n    if (typeof data === 'string')\n      data = Buffer.from(data, 'latin1');\n    try {\n      const decoder = new TextDecoder(this);\n      return decoder.decode(data);\n    } catch {}\n  },\n};\n\nfunction convertToUTF8(data, charset, hint) {\n  const decode = getDecoder(charset);\n  if (decode)\n    return decode(data, hint);\n}\n\nfunction basename(path) {\n  if (typeof path !== 'string')\n    return '';\n  for (let i = path.length - 1; i >= 0; --i) {\n    switch (path.charCodeAt(i)) {\n      case 0x2F: // '/'\n      case 0x5C: // '\\'\n        path = path.slice(i + 1);\n        return (path === '..' || path === '.' ? '' : path);\n    }\n  }\n  return (path === '..' || path === '.' ? '' : path);\n}\n\nconst TOKEN = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,\n  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n];\n\nconst QDTEXT = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n];\n\nconst CHARSET = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,\n  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n];\n\nconst EXTENDED_VALUE = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,\n  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n];\n\n/* eslint-disable no-multi-spaces */\nconst HEX_VALUES = [\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n   0,  1,  2,  3,  4,  5,  6,  7,  8,  9, -1, -1, -1, -1, -1, -1,\n  -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n];\n/* eslint-enable no-multi-spaces */\n\nmodule.exports = {\n  basename,\n  convertToUTF8,\n  getDecoder,\n  parseContentType,\n  parseDisposition,\n};\n";
fs.writeFileSync(node_107, node_contents_107, "utf8");

const node_108 = path.resolve(baseDirectory, ".", "src", "classes", "server", "dependencies", "streamsearch");
fs.mkdirSync(node_108);

const node_109 = path.resolve(baseDirectory, ".", "src", "classes", "server", "dependencies", "streamsearch", "LICENSE");
const node_contents_109 = "Copyright Brian White. All rights reserved.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to\r\ndeal in the Software without restriction, including without limitation the\r\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\r\nsell copies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\r\nIN THE SOFTWARE.";
fs.writeFileSync(node_109, node_contents_109, "utf8");

const node_110 = path.resolve(baseDirectory, ".", "src", "classes", "server", "dependencies", "streamsearch", "README.md");
const node_contents_110 = "Description\n===========\n\nstreamsearch is a module for [node.js](http://nodejs.org/) that allows searching a stream using the Boyer-Moore-Horspool algorithm.\n\nThis module is based heavily on the Streaming Boyer-Moore-Horspool C++ implementation by Hongli Lai [here](https://github.com/FooBarWidget/boyer-moore-horspool).\n\n\nRequirements\n============\n\n* [node.js](http://nodejs.org/) -- v10.0.0 or newer\n\n\nInstallation\n============\n\n    npm install streamsearch\n\nExample\n=======\n\n```js\n  const { inspect } = require('util');\n\n  const StreamSearch = require('streamsearch');\n\n  const needle = Buffer.from('\\r\\n');\n  const ss = new StreamSearch(needle, (isMatch, data, start, end) => {\n    if (data)\n      console.log('data: ' + inspect(data.toString('latin1', start, end)));\n    if (isMatch)\n      console.log('match!');\n  });\n\n  const chunks = [\n    'foo',\n    ' bar',\n    '\\r',\n    '\\n',\n    'baz, hello\\r',\n    '\\n world.',\n    '\\r\\n Node.JS rules!!\\r\\n\\r\\n',\n  ];\n  for (const chunk of chunks)\n    ss.push(Buffer.from(chunk));\n\n  // output:\n  //\n  // data: 'foo'\n  // data: ' bar'\n  // match!\n  // data: 'baz, hello'\n  // match!\n  // data: ' world.'\n  // match!\n  // data: ' Node.JS rules!!'\n  // match!\n  // data: ''\n  // match!\n```\n\n\nAPI\n===\n\nProperties\n----------\n\n* **maxMatches** - < _integer_ > - The maximum number of matches. Defaults to `Infinity`.\n\n* **matches** - < _integer_ > - The current match count.\n\n\nFunctions\n---------\n\n* **(constructor)**(< _mixed_ >needle, < _function_ >callback) - Creates and returns a new instance for searching for a _Buffer_ or _string_ `needle`. `callback` is called any time there is non-matching data and/or there is a needle match. `callback` will be called with the following arguments:\n\n  1. `isMatch` - _boolean_ - Indicates whether a match has been found\n\n  2. `data` - _mixed_ - If set, this contains data that did not match the needle.\n\n  3. `start` - _integer_ - The index in `data` where the non-matching data begins (inclusive).\n\n  4. `end` - _integer_ - The index in `data` where the non-matching data ends (exclusive).\n\n  5. `isSafeData` - _boolean_ - Indicates if it is safe to store a reference to `data` (e.g. as-is or via `data.slice()`) or not, as in some cases `data` may point to a Buffer whose contents change over time.\n\n* **destroy**() - _(void)_ - Emits any last remaining unmatched data that may still be buffered and then resets internal state.\n\n* **push**(< _Buffer_ >chunk) - _integer_ - Processes `chunk`, searching for a match. The return value is the last processed index in `chunk` + 1.\n\n* **reset**() - _(void)_ - Resets internal state. Useful for when you wish to start searching a new/different stream for example.\n\n";
fs.writeFileSync(node_110, node_contents_110, "utf8");

const node_111 = path.resolve(baseDirectory, ".", "src", "classes", "server", "dependencies", "streamsearch", "lib");
fs.mkdirSync(node_111);

const node_112 = path.resolve(baseDirectory, ".", "src", "classes", "server", "dependencies", "streamsearch", "lib", "sbmh.js");
const node_contents_112 = "'use strict';\n/*\n  Based heavily on the Streaming Boyer-Moore-Horspool C++ implementation\n  by Hongli Lai at: https://github.com/FooBarWidget/boyer-moore-horspool\n*/\nfunction memcmp(buf1, pos1, buf2, pos2, num) {\n  for (let i = 0; i < num; ++i) {\n    if (buf1[pos1 + i] !== buf2[pos2 + i])\n      return false;\n  }\n  return true;\n}\n\nclass SBMH {\n  constructor(needle, cb) {\n    if (typeof cb !== 'function')\n      throw new Error('Missing match callback');\n\n    if (typeof needle === 'string')\n      needle = Buffer.from(needle);\n    else if (!Buffer.isBuffer(needle))\n      throw new Error(`Expected Buffer for needle, got ${typeof needle}`);\n\n    const needleLen = needle.length;\n\n    this.maxMatches = Infinity;\n    this.matches = 0;\n\n    this._cb = cb;\n    this._lookbehindSize = 0;\n    this._needle = needle;\n    this._bufPos = 0;\n\n    this._lookbehind = Buffer.allocUnsafe(needleLen);\n\n    // Initialize occurrence table.\n    this._occ = [\n      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,\n      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,\n      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,\n      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,\n      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,\n      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,\n      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,\n      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,\n      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,\n      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,\n      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,\n      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,\n      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,\n      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,\n      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,\n      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,\n      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,\n      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,\n      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,\n      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,\n      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,\n      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,\n      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,\n      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,\n      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,\n      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,\n      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,\n      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,\n      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,\n      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,\n      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,\n      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,\n      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,\n      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,\n      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,\n      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,\n      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,\n      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,\n      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,\n      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,\n      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,\n      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,\n      needleLen, needleLen, needleLen, needleLen\n    ];\n\n    // Populate occurrence table with analysis of the needle, ignoring the last\n    // letter.\n    if (needleLen > 1) {\n      for (let i = 0; i < needleLen - 1; ++i)\n        this._occ[needle[i]] = needleLen - 1 - i;\n    }\n  }\n\n  reset() {\n    this.matches = 0;\n    this._lookbehindSize = 0;\n    this._bufPos = 0;\n  }\n\n  push(chunk, pos) {\n    let result;\n    if (!Buffer.isBuffer(chunk))\n      chunk = Buffer.from(chunk, 'latin1');\n    const chunkLen = chunk.length;\n    this._bufPos = pos || 0;\n    while (result !== chunkLen && this.matches < this.maxMatches)\n      result = feed(this, chunk);\n    return result;\n  }\n\n  destroy() {\n    const lbSize = this._lookbehindSize;\n    if (lbSize)\n      this._cb(false, this._lookbehind, 0, lbSize, false);\n    this.reset();\n  }\n}\n\nfunction feed(self, data) {\n  const len = data.length;\n  const needle = self._needle;\n  const needleLen = needle.length;\n\n  // Positive: points to a position in `data`\n  //           pos == 3 points to data[3]\n  // Negative: points to a position in the lookbehind buffer\n  //           pos == -2 points to lookbehind[lookbehindSize - 2]\n  let pos = -self._lookbehindSize;\n  const lastNeedleCharPos = needleLen - 1;\n  const lastNeedleChar = needle[lastNeedleCharPos];\n  const end = len - needleLen;\n  const occ = self._occ;\n  const lookbehind = self._lookbehind;\n\n  if (pos < 0) {\n    // Lookbehind buffer is not empty. Perform Boyer-Moore-Horspool\n    // search with character lookup code that considers both the\n    // lookbehind buffer and the current round's haystack data.\n    //\n    // Loop until\n    //   there is a match.\n    // or until\n    //   we've moved past the position that requires the\n    //   lookbehind buffer. In this case we switch to the\n    //   optimized loop.\n    // or until\n    //   the character to look at lies outside the haystack.\n    while (pos < 0 && pos <= end) {\n      const nextPos = pos + lastNeedleCharPos;\n      const ch = (nextPos < 0\n                  ? lookbehind[self._lookbehindSize + nextPos]\n                  : data[nextPos]);\n\n      if (ch === lastNeedleChar\n          && matchNeedle(self, data, pos, lastNeedleCharPos)) {\n        self._lookbehindSize = 0;\n        ++self.matches;\n        if (pos > -self._lookbehindSize)\n          self._cb(true, lookbehind, 0, self._lookbehindSize + pos, false);\n        else\n          self._cb(true, undefined, 0, 0, true);\n\n        return (self._bufPos = pos + needleLen);\n      }\n\n      pos += occ[ch];\n    }\n\n    // No match.\n\n    // There's too few data for Boyer-Moore-Horspool to run,\n    // so let's use a different algorithm to skip as much as\n    // we can.\n    // Forward pos until\n    //   the trailing part of lookbehind + data\n    //   looks like the beginning of the needle\n    // or until\n    //   pos == 0\n    while (pos < 0 && !matchNeedle(self, data, pos, len - pos))\n      ++pos;\n\n    if (pos < 0) {\n      // Cut off part of the lookbehind buffer that has\n      // been processed and append the entire haystack\n      // into it.\n      const bytesToCutOff = self._lookbehindSize + pos;\n\n      if (bytesToCutOff > 0) {\n        // The cut off data is guaranteed not to contain the needle.\n        self._cb(false, lookbehind, 0, bytesToCutOff, false);\n      }\n\n      self._lookbehindSize -= bytesToCutOff;\n      lookbehind.copy(lookbehind, 0, bytesToCutOff, self._lookbehindSize);\n      lookbehind.set(data, self._lookbehindSize);\n      self._lookbehindSize += len;\n\n      self._bufPos = len;\n      return len;\n    }\n\n    // Discard lookbehind buffer.\n    self._cb(false, lookbehind, 0, self._lookbehindSize, false);\n    self._lookbehindSize = 0;\n  }\n\n  pos += self._bufPos;\n\n  const firstNeedleChar = needle[0];\n\n  // Lookbehind buffer is now empty. Perform Boyer-Moore-Horspool\n  // search with optimized character lookup code that only considers\n  // the current round's haystack data.\n  while (pos <= end) {\n    const ch = data[pos + lastNeedleCharPos];\n\n    if (ch === lastNeedleChar\n        && data[pos] === firstNeedleChar\n        && memcmp(needle, 0, data, pos, lastNeedleCharPos)) {\n      ++self.matches;\n      if (pos > 0)\n        self._cb(true, data, self._bufPos, pos, true);\n      else\n        self._cb(true, undefined, 0, 0, true);\n\n      return (self._bufPos = pos + needleLen);\n    }\n\n    pos += occ[ch];\n  }\n\n  // There was no match. If there's trailing haystack data that we cannot\n  // match yet using the Boyer-Moore-Horspool algorithm (because the trailing\n  // data is less than the needle size) then match using a modified\n  // algorithm that starts matching from the beginning instead of the end.\n  // Whatever trailing data is left after running this algorithm is added to\n  // the lookbehind buffer.\n  while (pos < len) {\n    if (data[pos] !== firstNeedleChar\n        || !memcmp(data, pos, needle, 0, len - pos)) {\n      ++pos;\n      continue;\n    }\n    data.copy(lookbehind, 0, pos, len);\n    self._lookbehindSize = len - pos;\n    break;\n  }\n\n  // Everything until `pos` is guaranteed not to contain needle data.\n  if (pos > 0)\n    self._cb(false, data, self._bufPos, pos < len ? pos : len, true);\n\n  self._bufPos = len;\n  return len;\n}\n\nfunction matchNeedle(self, data, pos, len) {\n  const lb = self._lookbehind;\n  const lbSize = self._lookbehindSize;\n  const needle = self._needle;\n\n  for (let i = 0; i < len; ++i, ++pos) {\n    const ch = (pos < 0 ? lb[lbSize + pos] : data[pos]);\n    if (ch !== needle[i])\n      return false;\n  }\n  return true;\n}\n\nmodule.exports = SBMH;\n";
fs.writeFileSync(node_112, node_contents_112, "utf8");

const node_113 = path.resolve(baseDirectory, ".", "src", "classes", "server", "uploads");
fs.mkdirSync(node_113);

const node_114 = path.resolve(baseDirectory, ".", "src", "classes", "sockets");
fs.mkdirSync(node_114);

const node_115 = path.resolve(baseDirectory, ".", "src", "classes", "sockets", "ChatSocket.js");
const node_contents_115 = "class ChatSocket {\n\n    constructor(environment, server) {\n        this.environment = environment;\n        this.server = server;\n        this.nativeSocket = undefined;\n    }\n\n    start() {\n        this.nativeSocket = 0;\n        return this;\n    }\n\n    isStarted() {\n        return;\n    }\n\n    stop() {\n\n    }\n\n}\n\nmodule.exports = ChatSocket;";
fs.writeFileSync(node_115, node_contents_115, "utf8");

const node_116 = path.resolve(baseDirectory, ".", "src", "data");
fs.mkdirSync(node_116);

const node_117 = path.resolve(baseDirectory, ".", "src", "data", "projects");
fs.mkdirSync(node_117);

const node_118 = path.resolve(baseDirectory, ".", "src", "security");
fs.mkdirSync(node_118);

const node_119 = path.resolve(baseDirectory, ".", "src", "security", "metadata.json");
const node_contents_119 = "{\n    \"RESPONSE_PROTOTYPE\": {\n        \"app\": \"REST application nº 1\",\n        \"version\": \"1.0.0\",\n        \"contact\": {\n            \"name\": \"Carlos Jimeno Hernández\",\n            \"email\": \"carlcarlsonc18@gmail.com\",\n            \"telephone\": \"+34 619982622\"\n        }\n    }\n}";
fs.writeFileSync(node_119, node_contents_119, "utf8");

const node_120 = path.resolve(baseDirectory, ".", "src", "security", "settings.json");
const node_contents_120 = "{\n    \"NODE_ENV\": \"development\",\n    \"SERVER_ID\": \"Default main server\",\n    \"SERVER_PROTOCOL\": \"http\",\n    \"SERVER_HOST\": \"127.0.0.1\",\n    \"SERVER_PORT\": \"9999\",\n    \"APPLICATION_PORT\": \"9998\",\n    \"APPLICATION_ENABLED\": false,\n    \"APPLICATION_NAME\": \"restologia app sample\",\n    \"APPLICATION_VERSION\": \"1.0.1\",\n    \"ADMINISTRATOR_EMAIL\": \"carlcarlsonc18@gmail.com\",\n    \"ADMINISTRATOR_USER\": \"carlosjimenohernandez\",\n    \"ADMINISTRATOR_PASSWORD\": \"Carlos.Jimeno.Hernandez.9876543210\"\n}";
fs.writeFileSync(node_120, node_contents_120, "utf8");

const node_121 = path.resolve(baseDirectory, ".", "src", "start.js");
const node_contents_121 = "module.exports = (function() {\n    try {\n        const Database = require(__dirname + \"/classes/database/Database.js\");\n        const Server = require(__dirname + \"/classes/server/Server.js\");\n        const Auth = require(__dirname + \"/classes/auth/Auth.js\");\n        const ChatSocket = require(__dirname + \"/classes/sockets/ChatSocket.js\");\n        const Environment = require(__dirname + \"/classes/Environment.js\");\n        const metadata = require(__dirname + \"/security/metadata.json\");\n        const settings = Object.assign({}, require(__dirname + \"/security/settings.json\"), { PROJECT_SRC: require(\"path\").resolve(__dirname) });\n        const environment = new Environment(Database, Server, Auth, ChatSocket, metadata, settings);\n        /*\n        console.log(\"[TRACE]     » \" + environment.settings.PROJECT_SRC);\n        console.log(\"[TRACE]     » \" + environment.utils.getBaseURL());\n        //*/\n        return environment.start();\n    } catch (error) {\n        console.log(\"Error on start:\", error.name, error.message, error.stack);\n        return error;\n    }\n})();";
fs.writeFileSync(node_121, node_contents_121, "utf8");

const node_122 = path.resolve(baseDirectory, ".", "test");
fs.mkdirSync(node_122);

const node_123 = path.resolve(baseDirectory, ".", "test", "monolith");
fs.mkdirSync(node_123);

const node_124 = path.resolve(baseDirectory, ".", "test", "monolith", "inrow");
fs.mkdirSync(node_124);

const node_125 = path.resolve(baseDirectory, ".", "test", "monolith", "inrow", "000.Start-server.js");
const node_contents_125 = "module.exports = async function (commonData) {\n    const { requester, utils, tester } = commonData;\n    try {\n\n        tester.startTest(\"Start server\");\n\n        commonData.$environment = await require(__dirname + \"/../../../src/start.js\");\n        commonData.remainStarted = true;\n\n        tester.passTest(\"Start server\");\n\n    } catch (error) {\n        tester.failTest(\"Start server\");\n        throw error;\n    }\n};";
fs.writeFileSync(node_125, node_contents_125, "utf8");

const node_126 = path.resolve(baseDirectory, ".", "test", "monolith", "inrow", "001.Delete-project.js");
const node_contents_126 = "module.exports = async function(commonData) {\n    const { requester, utils, tester } = commonData;\n    try {\n\n        tester.startTest(\"Delete project\");\n        \n        const response01 = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            operation: \"delete-project\",\n        }, {\n            user: \"carlosjimenohernandez\",\n            password: \"Carlos.Jimeno.Hernandez.9876543210\",\n            project: \"Empresa_z\",\n        }, {}, true, true, \"Delete project\");\n\n        // if(!utils.check.that(response01.response.status).equals(\"success\")) throw new Error(0);\n\n        tester.passTest(\"Delete project\");\n\n    } catch(error) {\n        tester.failTest(\"Delete project\");\n        throw error;\n    }\n};";
fs.writeFileSync(node_126, node_contents_126, "utf8");

const node_127 = path.resolve(baseDirectory, ".", "test", "monolith", "inrow", "002.Create-project.js");
const node_contents_127 = "module.exports = async function (commonData) {\n    const { requester, utils, tester } = commonData;\n    try {\n\n        tester.startTest(\"Create project\");\n\n        const response01 = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            operation: \"create-project\",\n        }, {\n            user: \"carlosjimenohernandez\",\n            password: \"Carlos.Jimeno.Hernandez.9876543210\",\n            project: \"Empresa_z\",\n            administrator_name: \"pepito\",\n            administrator_password: \"pepito\",\n            administrator_email: \"pepito@correo.com\",\n        }, {}, true, true, \"Create project\");\n\n        if (!utils.check.that(response01.response.status).equals(\"success\")) throw new Error(0);\n\n        tester.passTest(\"Create project\");\n\n    } catch (error) {\n        tester.failTest(\"Create project\");\n        throw error;\n    }\n};\n";
fs.writeFileSync(node_127, node_contents_127, "utf8");

const node_128 = path.resolve(baseDirectory, ".", "test", "monolith", "inrow", "003.01.Login.js");
const node_contents_128 = "module.exports = async function (commonData) {\n    const { requester, utils, tester } = commonData;\n    try {\n        \n        tester.startTest(\"Login\");\n\n        const response01 = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"login\",\n        }, {\n            user: \"pepito\",\n            password: \"pepito\",\n        }, {}, true, true, \"Login into app\");\n\n        if (!utils.check.that(response01.response.status).equals(\"success\")) throw new Error(0);\n\n        commonData.sessionToken = response01.response.data.session.token;\n\n        const sessionsDB = await utils.hydrateJSON(__dirname + \"/../../../src/data/projects/Empresa_z/data/sessions.json\");\n        if(!utils.check.that(Object.values(sessionsDB.data).filter(session => session.token === commonData.sessionToken).length).equals(1)) throw new Error(1);\n\n        tester.passTest(\"Login\");\n\n    } catch (error) {\n        tester.failTest(\"Login\");\n        throw error;\n    }\n};";
fs.writeFileSync(node_128, node_contents_128, "utf8");

const node_129 = path.resolve(baseDirectory, ".", "test", "monolith", "inrow", "003.02.Authenticate.js");
const node_contents_129 = "module.exports = async function (commonData) {\n    const { requester, utils, tester } = commonData;\n    try {\n        \n        tester.startTest(\"Authenticate\");\n\n        const response01 = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"authenticate\",\n        }, {}, {\n            authorization: commonData.sessionToken\n        }, true, true, \"Get authentication data from app\");\n\n        if (!utils.check.that(response01.response.status).equals(\"success\")) throw new Error(0);\n\n        if (!utils.check.that(typeof response01.response.data.authentication).equals(\"object\")) throw new Error(1);\n        if (!utils.check.that(typeof response01.response.data.authentication.user).equals(\"object\")) throw new Error(2);\n        if (!utils.check.that(typeof response01.response.data.authentication.groups).equals(\"object\")) throw new Error(3);\n        if (!utils.check.that(typeof response01.response.data.authentication.privileges).equals(\"object\")) throw new Error(4);\n        if (!utils.check.that(typeof response01.response.data.authentication.session).equals(\"object\")) throw new Error(5);\n        if (!utils.check.that(typeof response01.response.data.authentication.project).equals(\"string\")) throw new Error(6);\n\n        tester.passTest(\"Authenticate\");\n\n    } catch (error) {\n        tester.failTest(\"Authenticate\");\n        throw error;\n    }\n};";
fs.writeFileSync(node_129, node_contents_129, "utf8");

const node_130 = path.resolve(baseDirectory, ".", "test", "monolith", "inrow", "004.Insert-row.js");
const node_contents_130 = "module.exports = async function (commonData) {\n    const { requester, utils, tester } = commonData;\n    try {\n\n        tester.startTest(\"Insert row\");\n        \n        commonData.insertedData = [];\n\n        const insertResponse01 = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"insert\",\n        }, {\n            table: \"users\", \n            value: JSON.stringify({\n                name: \"123456\",\n                password: \"123456\",\n                email: \"123456\",\n                groups: [],\n                privileges: []\n            }),\n        }, {\n            authorization: commonData.sessionToken,\n        }, true, true, \"Insert data into app\");\n\n        if(!utils.check.that(insertResponse01.response.status).equals(\"success\")) throw new Error(\"01\");\n        commonData.insertedData.push(insertResponse01.response.data.item);\n\n        const insertResponse02 = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"insert\",\n        }, {\n            table: \"users\", \n            value: JSON.stringify({\n                name: \"234567\",\n                password: \"234567\",\n                email: \"234567\",\n                groups: [],\n                privileges: []\n            }),\n        }, {\n            authorization: commonData.sessionToken,\n        }, true, true, \"Insert data into app\");\n\n        if(!utils.check.that(insertResponse02.response.status).equals(\"success\")) throw new Error(\"02\");\n        commonData.insertedData.push(insertResponse02.response.data.item);\n\n        const insertResponse03 = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"insert\",\n        }, {\n            table: \"users\", \n            value: JSON.stringify({\n                name: \"345678\",\n                password: \"345678\",\n                email: \"345678\",\n                groups: [],\n                privileges: []\n            }),\n        }, {\n            authorization: commonData.sessionToken,\n        }, true, true, \"Insert data into app\");\n\n        if(!utils.check.that(insertResponse03.response.status).equals(\"success\")) throw new Error(\"03\");\n        commonData.insertedData.push(insertResponse03.response.data.item);\n\n        const insertResponse04 = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"insert\",\n        }, {\n            table: \"users\", \n            value: JSON.stringify({\n                name: \"456789\",\n                password: \"456789\",\n                email: \"456789\",\n                groups: [],\n                privileges: []\n            }),\n        }, {\n            authorization: commonData.sessionToken,\n        }, true, true, \"Insert data into app\");\n\n        if(!utils.check.that(insertResponse04.response.status).equals(\"success\")) throw new Error(\"04\");\n        commonData.insertedData.push(insertResponse04.response.data.item);\n\n        const insertResponse05 = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"insert\",\n        }, {\n            table: \"users\", \n            value: JSON.stringify({\n                name: \"567890\",\n                password: \"567890\",\n                email: \"567890\",\n                groups: [],\n                privileges: []\n            }),\n        }, {\n            authorization: commonData.sessionToken,\n        }, true, true, \"Insert data into app\");\n\n        if(!utils.check.that(insertResponse05.response.status).equals(\"success\")) throw new Error(\"05\");\n        commonData.insertedData.push(insertResponse05.response.data.item);\n\n        const usersDB = await utils.hydrateJSON(__dirname + \"/../../../src/data/projects/Empresa_z/data/users.json\");\n\n        const userItem01 = usersDB.data[insertResponse01.response.data.item.id];\n        if (!utils.check.that(userItem01.name).equals(\"123456\")) throw new Error(1);\n        if (!utils.check.that(userItem01.password).equals(\"123456\")) throw new Error(2);\n        if (!utils.check.that(userItem01.email).equals(\"123456\")) throw new Error(3);\n        if (!utils.check.that(userItem01.groups).isArray()) throw new Error(4);\n        if (!utils.check.that(userItem01.privileges).isArray()) throw new Error(5);\n\n        const userItem02 = usersDB.data[insertResponse02.response.data.item.id];\n        if (!utils.check.that(userItem02.name).equals(\"234567\")) throw new Error(1);\n        if (!utils.check.that(userItem02.password).equals(\"234567\")) throw new Error(2);\n        if (!utils.check.that(userItem02.email).equals(\"234567\")) throw new Error(3);\n        if (!utils.check.that(userItem02.groups).isArray()) throw new Error(4);\n        if (!utils.check.that(userItem02.privileges).isArray()) throw new Error(5);\n\n        const userItem03 = usersDB.data[insertResponse03.response.data.item.id];\n        if (!utils.check.that(userItem03.name).equals(\"345678\")) throw new Error(1);\n        if (!utils.check.that(userItem03.password).equals(\"345678\")) throw new Error(2);\n        if (!utils.check.that(userItem03.email).equals(\"345678\")) throw new Error(3);\n        if (!utils.check.that(userItem03.groups).isArray()) throw new Error(4);\n        if (!utils.check.that(userItem03.privileges).isArray()) throw new Error(5);\n\n        const userItem04 = usersDB.data[insertResponse04.response.data.item.id];\n        if (!utils.check.that(userItem04.name).equals(\"456789\")) throw new Error(1);\n        if (!utils.check.that(userItem04.password).equals(\"456789\")) throw new Error(2);\n        if (!utils.check.that(userItem04.email).equals(\"456789\")) throw new Error(3);\n        if (!utils.check.that(userItem04.groups).isArray()) throw new Error(4);\n        if (!utils.check.that(userItem04.privileges).isArray()) throw new Error(5);\n\n        const userItem05 = usersDB.data[insertResponse05.response.data.item.id];\n        if (!utils.check.that(userItem05.name).equals(\"567890\")) throw new Error(1);\n        if (!utils.check.that(userItem05.password).equals(\"567890\")) throw new Error(2);\n        if (!utils.check.that(userItem05.email).equals(\"567890\")) throw new Error(3);\n        if (!utils.check.that(userItem05.groups).isArray()) throw new Error(4);\n        if (!utils.check.that(userItem05.privileges).isArray()) throw new Error(5);\n        \n        tester.passTest(\"Insert row\");\n\n    } catch (error) {\n        tester.failTest(\"Insert row\");\n        throw error;\n    }\n};\n";
fs.writeFileSync(node_130, node_contents_130, "utf8");

const node_131 = path.resolve(baseDirectory, ".", "test", "monolith", "inrow", "005.Update-row.js");
const node_contents_131 = "module.exports = async function (commonData) {\n    const { requester, utils, tester } = commonData;\n    try {\n\n        tester.startTest(\"Update row\");\n\n        const updateResponse = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"update\",\n        }, {\n            table: \"users\",\n            id: commonData.insertedData[0].id,\n            value: JSON.stringify({\n                name: \"654321\",\n                password: \"654321\",\n                email: \"654321\",\n                groups: [],\n                privileges: []\n            }),\n        }, {\n            authorization: commonData.sessionToken,\n        }, true, true, \"Update data into app\");\n\n        const usersDB = await utils.hydrateJSON(__dirname + \"/../../../src/data/projects/Empresa_z/data/users.json\");\n        const userItem = usersDB.data[updateResponse.response.data.item.id];\n        if(!utils.check.that(userItem.name).equals(\"654321\")) throw new Error(1);\n        if(!utils.check.that(userItem.password).equals(\"654321\")) throw new Error(2);\n        if(!utils.check.that(userItem.email).equals(\"654321\")) throw new Error(3);\n        if(!utils.check.that(userItem.groups).isArray()) throw new Error(4);\n        if(!utils.check.that(userItem.privileges).isArray()) throw new Error(5);\n\n        tester.passTest(\"Update row\");\n\n    } catch (error) {\n        tester.failTest(\"Update row\");\n        throw error;\n    }\n};";
fs.writeFileSync(node_131, node_contents_131, "utf8");

const node_132 = path.resolve(baseDirectory, ".", "test", "monolith", "inrow", "006.Select-rows.js");
const node_contents_132 = "module.exports = async function (commonData) {\n    const { requester, utils, tester } = commonData;\n    try {\n\n        tester.startTest(\"Select rows\");\n\n        const selectResponse01 = await requester(\"GET\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"select\",\n            table: \"users\",\n            where: \"[]\",\n            sort: \"[]\",\n            paginate: \"[]\",\n        }, {}, {\n            authorization: commonData.sessionToken,\n        }, true, true, \"Select data from app\");\n\n        if (!utils.check.that(selectResponse01.response.status).equals(\"success\")) throw new Error(\"01\");\n        if (!utils.check.that(selectResponse01.response.data.items.length).equals(6)) throw new Error(1);\n\n        const selectResponse02 = await requester(\"GET\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"select\",\n            table: \"users\",\n            where: JSON.stringify([\n                [\"name\", \"=\", \"234567\"]\n            ]),\n            sort: \"[]\",\n            paginate: \"[]\",\n        }, {}, {\n            authorization: commonData.sessionToken,\n        }, true, true, \"Select data from app using «where» with operator « = »\");\n\n        if (!utils.check.that(selectResponse02.response.status).equals(\"success\")) throw new Error(\"02\");\n        if (!utils.check.that(selectResponse02.response.data.items.length).equals(1)) throw new Error(2);\n\n        const selectResponse03 = await requester(\"GET\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"select\",\n            table: \"users\",\n            where: JSON.stringify([\n                [\"name\", \"in\", [\"234567\", \"345678\", \"456789\"]]\n            ]),\n            sort: \"[]\",\n            paginate: \"[]\",\n        }, {}, {\n            authorization: commonData.sessionToken,\n        }, true, true, \"Select data from app using «where» with operator « in »\");\n\n        if (!utils.check.that(selectResponse03.response.status).equals(\"success\")) throw new Error(\"03\");\n        if (!utils.check.that(selectResponse03.response.data.items.length).equals(3)) throw new Error(3);\n\n        const selectResponse04 = await requester(\"GET\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"select\",\n            table: \"users\",\n            where: JSON.stringify([\n                [\"name\", \"in\", [\"234567\", \"345678\", \"456789\"]]\n            ]),\n            sort: JSON.stringify([\"!name\"]),\n            paginate: \"[]\",\n        }, {}, {\n            authorization: commonData.sessionToken,\n        }, true, true, \"Select data from app using «sort»\");\n\n        if (!utils.check.that(selectResponse04.response.data.items[0].name).equals(\"456789\")) throw new Error(4);\n\n        const selectResponse05 = await requester(\"GET\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"select\",\n            table: \"users\",\n            where: JSON.stringify([\n                [\"name\", \"in\", [\"234567\", \"345678\", \"456789\"]]\n            ]),\n            sort: JSON.stringify([\"!name\"]),\n            paginate: JSON.stringify([ 3, 1 ]),\n        }, {}, {\n            authorization: commonData.sessionToken,\n        }, true, true, \"Select data from app using «paginate»\");\n\n        if (!utils.check.that(selectResponse05.response.data.items[0].name).equals(\"234567\")) throw new Error(5);\n        if (!utils.check.that(selectResponse05.response.data.structure).isObject()) throw new Error(6);\n        \n\n        tester.passTest(\"Select rows\");\n\n    } catch (error) {\n        tester.failTest(\"Select rows\");\n        throw error;\n    }\n};";
fs.writeFileSync(node_132, node_contents_132, "utf8");

const node_133 = path.resolve(baseDirectory, ".", "test", "monolith", "inrow", "007.Delete-row.js");
const node_contents_133 = "module.exports = async function (commonData) {\n    const { requester, utils, tester } = commonData;\n    try {\n\n        tester.startTest(\"Delete row\");\n\n        const deleteResponse = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"delete\",\n        }, {\n            table: \"users\",\n            id: commonData.insertedData[0].id,\n        }, {\n            authorization: commonData.sessionToken,\n        }, true, true, \"Delete data from app\");\n\n        const usersDB = await utils.hydrateJSON(__dirname + \"/../../../src/data/projects/Empresa_z/data/users.json\");\n        if(!utils.check.that(deleteResponse.response.data.item.id in usersDB.data).equals(false)) throw new Error(1);\n\n        tester.passTest(\"Delete row\");\n\n    } catch (error) {\n        tester.failTest(\"Delete row\");\n        throw error;\n    }\n};";
fs.writeFileSync(node_133, node_contents_133, "utf8");

const node_134 = path.resolve(baseDirectory, ".", "test", "monolith", "inrow", "008.Add-table.js");
const node_contents_134 = "module.exports = async function (commonData) {\n    const { requester, utils, tester } = commonData;\n    try {\n\n        tester.startTest(\"Add table\");\n\n        const addTableResponse01 = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"add-table\",\n        }, {\n            table: \"products\",\n            attributes: JSON.stringify({\n                hasDescription: \"It represents prototypes of products stored in the database\"\n            }),\n            properties: JSON.stringify({}),\n        }, {\n            authorization: commonData.sessionToken,\n        }, true, true, \"Add schema table to app\");\n\n        const projectData = await utils.hydrateJSON(__dirname + \"/../../../src/data/projects/Empresa_z/project.json\");\n        if (!utils.check.that(addTableResponse01.response.data.message).equals(\"Operation «add-table» successfully achieved\")) throw new Error(1);\n        if (!utils.check.that(projectData.schema.tables.products).isObject()) throw new Error(2);\n        if (!utils.check.that(projectData.schema.tables.products.attributes.hasDescription).equals(\"It represents prototypes of products stored in the database\")) throw new Error(3);\n\n        tester.passTest(\"Add table\");\n\n    } catch (error) {\n        tester.failTest(\"Add table\");\n        throw error;\n    }\n};";
fs.writeFileSync(node_134, node_contents_134, "utf8");

const node_135 = path.resolve(baseDirectory, ".", "test", "monolith", "inrow", "009.Add-column.js");
const node_contents_135 = "module.exports = async function (commonData) {\n    const { requester, utils, tester } = commonData;\n    try {\n\n        tester.startTest(\"Add column\");\n\n        const addColumnResponse01 = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"add-column\",\n        }, {\n            table: \"products\",\n            column: \"name\",\n            attributes: JSON.stringify({\n                hasDescription: \"It represents the common name of the product\"\n            }),\n            properties: JSON.stringify({}),\n        }, {\n            authorization: commonData.sessionToken,\n        }, true, true, \"Add schema column to app\");\n\n        if (!utils.check.that(addColumnResponse01.response.data.message).equals(\"Operation «add-column» successfully achieved\")) throw new Error(1);\n\n        const addColumnResponse02 = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"add-column\",\n        }, {\n            table: \"products\",\n            column: \"uid\",\n            attributes: JSON.stringify({\n                hasDescription: \"It represents the unique identifier of the product\"\n            }),\n            properties: JSON.stringify({}),\n        }, {\n            authorization: commonData.sessionToken,\n        }, true, true, \"Add schema column to app\");\n\n        if (!utils.check.that(addColumnResponse02.response.data.message).equals(\"Operation «add-column» successfully achieved\")) throw new Error(2);\n\n        const addColumnResponse03 = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"add-column\",\n        }, {\n            table: \"products\",\n            column: \"price\",\n            attributes: JSON.stringify({\n                hasDescription: \"It represents the base price of the product\"\n            }),\n            properties: JSON.stringify({}),\n        }, {\n            authorization: commonData.sessionToken,\n        }, true, true, \"Add schema column to app\");\n\n        if (!utils.check.that(addColumnResponse03.response.data.message).equals(\"Operation «add-column» successfully achieved\")) throw new Error(3);\n\n        const addColumnResponse04 = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"add-column\",\n        }, {\n            table: \"products\",\n            column: \"notes\",\n            attributes: JSON.stringify({\n                hasDescription: \"It represents notes that the administrator wants to keep about each product\"\n            }),\n            properties: JSON.stringify({}),\n        }, {\n            authorization: commonData.sessionToken,\n        }, true, true, \"Add schema column to app\");\n\n        if (!utils.check.that(addColumnResponse04.response.data.message).equals(\"Operation «add-column» successfully achieved\")) throw new Error(4);\n\n        const projectData = await utils.hydrateJSON(__dirname + \"/../../../src/data/projects/Empresa_z/project.json\");\n        \n        if (!utils.check.that(projectData.schema.tables.products.columns.name.attributes.hasDescription).equals(\"It represents the common name of the product\")) throw new Error(2);\n        if (!utils.check.that(projectData.schema.tables.products.columns.uid.attributes.hasDescription).equals(\"It represents the unique identifier of the product\")) throw new Error(3);\n        if (!utils.check.that(projectData.schema.tables.products.columns.price.attributes.hasDescription).equals(\"It represents the base price of the product\")) throw new Error(4);\n\n        tester.passTest(\"Add column\");\n\n    } catch (error) {\n        tester.failTest(\"Add column\");\n        throw error;\n    }\n};";
fs.writeFileSync(node_135, node_contents_135, "utf8");

const node_136 = path.resolve(baseDirectory, ".", "test", "monolith", "inrow", "010.Update-column.js");
const node_contents_136 = "module.exports = async function (commonData) {\n    const { requester, utils, tester } = commonData;\n    try {\n\n        tester.startTest(\"Update column\");\n\n        const updateColumnResponse01 = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"update-column\",\n        }, {\n            table: \"products\",\n            column: \"name\",\n            attributes: JSON.stringify({\n                hasDescription: \"It represents the common name of the product in human terms\"\n            }),\n            properties: JSON.stringify({}),\n        }, {\n            authorization: commonData.sessionToken,\n        }, true, true, \"Update schema column from app\");\n\n        const projectData = await utils.hydrateJSON(__dirname + \"/../../../src/data/projects/Empresa_z/project.json\");\n        \n        if (!utils.check.that(updateColumnResponse01.response.data.message).equals(\"Operation «update-column» successfully achieved\")) throw new Error(1);\n        if (!utils.check.that(projectData.schema.tables.products.columns.name.attributes.hasDescription).equals(\"It represents the common name of the product in human terms\")) throw new Error(2);\n\n        tester.passTest(\"Update column\");\n\n    } catch (error) {\n        tester.failTest(\"Update column\");\n        throw error;\n    }\n};";
fs.writeFileSync(node_136, node_contents_136, "utf8");

const node_137 = path.resolve(baseDirectory, ".", "test", "monolith", "inrow", "011.Update-table.js");
const node_contents_137 = "module.exports = async function (commonData) {\n    const { requester, utils, tester } = commonData;\n    try {\n\n        tester.startTest(\"Update table\");\n\n        const updateTableResponse01 = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"update-table\",\n        }, {\n            table: \"products\",\n            attributes: JSON.stringify({\n                hasDescription: \"It represents prototypes of products\"\n            }),\n            properties: JSON.stringify({}),\n        }, {\n            authorization: commonData.sessionToken,\n        }, true, true, \"Update schema table from app\");\n\n        const projectData = await utils.hydrateJSON(__dirname + \"/../../../src/data/projects/Empresa_z/project.json\");\n\n        if (!utils.check.that(updateTableResponse01.response.data.message).equals(\"Operation «update-table» successfully achieved\")) throw new Error(1);\n        if (!utils.check.that(projectData.schema.tables.products.attributes.hasDescription).equals(\"It represents prototypes of products\")) throw new Error(2);\n\n        tester.passTest(\"Update table\");\n\n    } catch (error) {\n        tester.failTest(\"Update table\");\n        throw error;\n    }\n};";
fs.writeFileSync(node_137, node_contents_137, "utf8");

const node_138 = path.resolve(baseDirectory, ".", "test", "monolith", "inrow", "012.Delete-column.js");
const node_contents_138 = "module.exports = async function (commonData) {\n    const { requester, utils, tester } = commonData;\n    try {\n\n        tester.startTest(\"Delete column\");\n\n        const deleteColumnResponse01 = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"delete-column\",\n        }, {\n            table: \"products\",\n            column: \"uid\",\n        }, {\n            authorization: commonData.sessionToken,\n        }, true, true, \"Delete schema column from app\");\n\n        const projectData = await utils.hydrateJSON(__dirname + \"/../../../src/data/projects/Empresa_z/project.json\");\n\n        if (!utils.check.that(deleteColumnResponse01.response.data.message).equals(\"Operation «delete-column» successfully achieved\")) throw new Error(1);\n        if (!utils.check.that(\"uid\" in projectData.schema.tables.products.columns).equals(false)) throw new Error(2);\n\n        tester.passTest(\"Delete column\");\n\n    } catch (error) {\n        tester.failTest(\"Delete column\");\n        throw error;\n    }\n};";
fs.writeFileSync(node_138, node_contents_138, "utf8");

const node_139 = path.resolve(baseDirectory, ".", "test", "monolith", "inrow", "013.Delete-table.js");
const node_contents_139 = "module.exports = async function (commonData) {\n    const { requester, utils, tester } = commonData;\n    try {\n\n        tester.startTest(\"Delete table\");\n\n        const addTableResponse01 = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"add-table\",\n        }, {\n            table: \"products2\",\n            attributes: JSON.stringify({\n                hasDescription: \"It represents prototypes of products2 stored in the database\"\n            }),\n            properties: JSON.stringify({}),\n        }, {\n            authorization: commonData.sessionToken,\n        }, true, true, \"Add schema table to app\");\n\n        if (!utils.check.that(addTableResponse01.response.data.message).equals(\"Operation «add-table» successfully achieved\")) throw new Error(\"01.0\");\n        let projectData = await utils.hydrateJSON(__dirname + \"/../../../src/data/projects/Empresa_z/project.json\");\n        if (!utils.check.that(\"products2\" in projectData.schema.tables).equals(true)) throw new Error(\"01.1\");\n\n        const deleteTableResponse02 = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"delete-table\",\n        }, {\n            table: \"products2\",\n        }, {\n            authorization: commonData.sessionToken,\n        }, true, true, \"Delete schema table from app\");\n\n\n        if (!utils.check.that(deleteTableResponse02.response.data.message).equals(\"Operation «delete-table» successfully achieved\")) throw new Error(\"02.0\");\n        projectData = await utils.hydrateJSON(__dirname + \"/../../../src/data/projects/Empresa_z/project.json\");\n        if (!utils.check.that(\"products2\" in projectData.schema.tables).equals(false)) throw new Error(\"02.1\");\n\n        tester.passTest(\"Delete table\");\n\n    } catch (error) {\n        tester.failTest(\"Delete table\");\n        throw error;\n    }\n};";
fs.writeFileSync(node_139, node_contents_139, "utf8");

const node_140 = path.resolve(baseDirectory, ".", "test", "monolith", "inrow", "014.View-schema.js");
const node_contents_140 = "module.exports = async function (commonData) {\n    const { requester, utils, tester } = commonData;\n    try {\n\n        tester.startTest(\"View schema\");\n\n        const viewSchemaResponse01 = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"view-schema\",\n        }, {}, {\n            authorization: commonData.sessionToken,\n        }, true, true, \"View app schema\");\n\n        const projectData = await utils.hydrateJSON(__dirname + \"/../../../src/data/projects/Empresa_z/project.json\");\n        const schemaTablesLength = Object.keys(projectData.schema.tables).length;\n        const responseTablesLength = Object.keys(viewSchemaResponse01.response.data.schema.tables).length;\n        \n        if (!utils.check.that(schemaTablesLength).equals(responseTablesLength)) throw new Error(1);\n\n        tester.passTest(\"View schema\");\n\n    } catch (error) {\n        tester.failTest(\"View schema\");\n        throw error;\n    }\n};";
fs.writeFileSync(node_140, node_contents_140, "utf8");

const node_141 = path.resolve(baseDirectory, ".", "test", "monolith", "inrow", "015.Set-file.js");
const node_contents_141 = "module.exports = async function (commonData) {\n    const { requester, utils, tester } = commonData;\n    try {\n\n        tester.startTest(\"Set file\");\n\n        // Tested on browser\n        \n        tester.passTest(\"Set file\");\n\n    } catch (error) {\n        tester.failTest(\"Set file\");\n        throw error;\n    }\n};";
fs.writeFileSync(node_141, node_contents_141, "utf8");

const node_142 = path.resolve(baseDirectory, ".", "test", "monolith", "inrow", "016.Get-file.js");
const node_contents_142 = "module.exports = async function (commonData) {\n    const { requester, utils, tester } = commonData;\n    try {\n\n        tester.startTest(\"Get file\");\n\n\n\n        tester.passTest(\"Get file\");\n\n    } catch (error) {\n        tester.failTest(\"Get file\");\n        throw error;\n    }\n};";
fs.writeFileSync(node_142, node_contents_142, "utf8");

const node_143 = path.resolve(baseDirectory, ".", "test", "monolith", "inrow", "031.Protectors.js");
const node_contents_143 = "module.exports = async function (commonData) {\n    const { requester, utils, tester } = commonData;\n    try {\n\n        tester.startTest(\"Protectors\");\n        ///////////////////////////////////////////////////////////////////////////\n        // ForbidItemPersister Test \n        ///////////////////////////////////////////////////////////////////////////\n        const loginResponse01 = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"login\",\n        }, {\n            user: \"345678\",\n            password: \"345678\",\n        }, {}, true, true, \"Protectors test: 1. login ok\");\n\n        if(!utils.check.that(loginResponse01.response.status).equals(\"success\")) throw new Error(\"01.0\");\n\n        const userId01 = loginResponse01.response.data.session.user;\n        const token01 = loginResponse01.response.data.session.token;\n\n        commonData.userSessionToken = token01;\n\n        if(!utils.check.that(token01.length).equals(100)) throw new Error(\"01.1\");\n\n        ///////////////////////////////////////////////////////////////////////////\n        const insertResponse02 = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"insert\",\n        }, {\n            table: \"users\",\n            value: JSON.stringify({\n                name: \"xxx.123\",\n                password: \"xxx.123\",\n                email: \"xxx123@abc.org\"\n            })\n        }, {\n            authorization: commonData.sessionToken,\n        }, true, true, \"Protectors test: 2. Forbid item persister on users table\");\n\n        if (!utils.check.that(insertResponse02.response.status).equals(\"success\")) throw new Error(\"02.0\");\n        if (!utils.check.that(insertResponse02.response.data.item.name).equals(\"xxx.123\")) throw new Error(\"02.1\");\n\n        ///////////////////////////////////////////////////////////////////////////\n        const insertResponse03 = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"insert\",\n        }, {\n            table: \"users\",\n            value: JSON.stringify({\n                name: \"xxx.234\",\n                password: \"xxx.234\",\n                email: \"xxx234@abc.org\"\n            })\n        }, {\n            authorization: token01,\n        }, true, true, \"Protectors test: 3. Forbid item persister on users table\");\n\n        if (!utils.check.that(insertResponse03.response.status).equals(\"error\")) throw new Error(\"03.0\");\n\n        ///////////////////////////////////////////////////////////////////////////\n        const insertResponse04 = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"insert\",\n        }, {\n            table: \"sessions\",\n            value: JSON.stringify({\n                user: 3,\n                token: utils.generateRandomString(100),\n            })\n        }, {\n            authorization: commonData.sessionToken,\n        }, true, true, \"Protectors test: 4. Forbid item persister on sessions table\");\n\n        if (!utils.check.that(insertResponse04.response.status).equals(\"success\")) throw new Error(\"04.0\");\n        if (!utils.check.that(insertResponse04.response.data.item.user).equals(3)) throw new Error(\"04.1\");\n\n        ///////////////////////////////////////////////////////////////////////////\n        const insertResponse05 = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"insert\",\n        }, {\n            table: \"sessions\",\n            value: JSON.stringify({\n                user: 5,\n                token: utils.generateRandomString(100),\n            })\n        }, {\n            authorization: token01,\n        }, true, true, \"Protectors test: 5. Forbid item persister on sessions table\");\n\n        if (!utils.check.that(insertResponse05.response.status).equals(\"error\")) throw new Error(\"05.0\");\n\n        ///////////////////////////////////////////////////////////////////////////\n        // ForbidItemViewer Test \n        ///////////////////////////////////////////////////////////////////////////\n        const selectResponse06 = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"select\",\n            table: \"sessions\",\n            where: \"[]\",\n            sort: \"[]\",\n            paginate: \"[]\",\n        }, {\n        }, {\n            authorization: token01,\n        }, true, true, \"Protectors test: 6. Forbid item viewer on sessions table\");\n\n        if (!utils.check.that(selectResponse06.response.status).equals(\"success\")) throw new Error(\"06.0\");\n        if (!utils.check.that(selectResponse06.response.data.items.length).equals(1)) throw new Error(\"06.1\");\n        if (!utils.check.that(selectResponse06.response.data.items[0].user).equals(userId01)) throw new Error(\"06.2\");\n\n        ///////////////////////////////////////////////////////////////////////////\n        // ForbidFieldsViewer Test \n        ///////////////////////////////////////////////////////////////////////////\n        const selectResponse07 = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"select\",\n            table: \"users\",\n            where: \"[]\",\n            sort: \"[]\",\n            paginate: \"[]\",\n        }, {\n        }, {\n            authorization: token01,\n        }, true, true, \"Protectors test: 7. Forbid item viewer on users table + Forbid fields viewer on users table for password field\");\n\n        if (!utils.check.that(selectResponse07.response.status).equals(\"success\")) throw new Error(\"07.0\");\n        if (!utils.check.that(selectResponse07.response.data.items.length).equals(1)) throw new Error(\"07.1\");\n        if (!utils.check.that(selectResponse07.response.data.items[0].id).equals(userId01)) throw new Error(\"07.2\");\n        if (!utils.check.that(selectResponse07.response.data.items[0].name).equals(\"345678\")) throw new Error(\"07.3\");\n        if (!utils.check.that(\"password\" in selectResponse07.response.data.items[0]).equals(false)) throw new Error(\"07.4\");\n\n        ///////////////////////////////////////////////////////////////////////////\n        const selectResponse08 = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"select\",\n            table: \"sessions\",\n            where: \"[]\",\n            sort: \"[]\",\n            paginate: \"[]\",\n        }, {\n        }, {\n            authorization: token01,\n        }, true, true, \"Protectors test: 8. Forbid item viewer on sessions table + Forbid fields viewer on sessions table for token field\");\n\n        if (!utils.check.that(selectResponse08.response.status).equals(\"success\")) throw new Error(\"08.0\");\n        if (!utils.check.that(selectResponse08.response.data.items.length).equals(1)) throw new Error(\"08.1\");\n        if (!utils.check.that(selectResponse08.response.data.items[0].user).equals(userId01)) throw new Error(\"08.2\");\n        if (!utils.check.that(\"token\" in selectResponse08.response.data.items[0]).equals(false)) throw new Error(\"08.3\");\n        \n        ///////////////////////////////////////////////////////////////////////////\n        // ForbidFieldsPersister Test \n        ///////////////////////////////////////////////////////////////////////////\n        const updateResponse09 = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"update\",\n        }, {\n            table: \"users\",\n            id: userId01,\n            value: JSON.stringify({\n                id: userId01,\n                groups: [1],\n                privileges: [1]\n            })\n        }, {\n            authorization: token01,\n        }, true, true, \"Protectors test: 9. Forbid fields persister on users table for groups and privileges fields\");\n\n        if (!utils.check.that(updateResponse09.response.status).equals(\"success\")) throw new Error(\"09.0\");\n        if (!utils.check.that(updateResponse09.response.data.item.groups.length).equals(0)) throw new Error(\"09.1\");\n        if (!utils.check.that(updateResponse09.response.data.item.privileges.length).equals(0)) throw new Error(\"09.2\");\n\n        const updateResponse10 = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"update\",\n        }, {\n            table: \"users\",\n            id: userId01,\n            value: JSON.stringify({\n                id: userId01,\n                groups: [1],\n                privileges: [1]\n            })\n        }, {\n            authorization: commonData.sessionToken,\n        }, true, true, \"Protectors test: 10. Forbid fields persister on users table for groups and privileges fields (should allow)\");\n\n        if (!utils.check.that(updateResponse10.response.status).equals(\"success\")) throw new Error(\"10.0\");\n        if (!utils.check.that(updateResponse10.response.data.item.id).equals(userId01)) throw new Error(\"10.1\");\n\n        const usersDB = await utils.hydrateJSON(__dirname + \"/../../../src/data/projects/Empresa_z/data/users.json\");\n        \n        if (!utils.check.that(usersDB.data[userId01].groups.length).equals(1)) throw new Error(\"10.2\");\n        if (!utils.check.that(usersDB.data[userId01].privileges.length).equals(1)) throw new Error(\"10.3\");\n        if (!utils.check.that(usersDB.data[userId01].groups[0]).equals(1)) throw new Error(\"10.4\");\n        if (!utils.check.that(usersDB.data[userId01].privileges[0]).equals(1)) throw new Error(\"10.5\");\n\n        usersDB.data[userId01].groups = [];\n        usersDB.data[userId01].privileges = [];\n\n        await utils.dehydrateJSON(__dirname + \"/../../../src/data/projects/Empresa_z/data/users.json\", usersDB);\n\n        tester.passTest(\"Protectors\");\n\n    } catch (error) {\n        tester.failTest(\"Protectors\");\n        throw error;\n    }\n};";
fs.writeFileSync(node_143, node_contents_143, "utf8");

const node_144 = path.resolve(baseDirectory, ".", "test", "monolith", "inrow", "032.Protectors-crud.js");
const node_contents_144 = "module.exports = async function (commonData) {\n    const { requester, utils, tester } = commonData;\n    try {\n\n        tester.startTest(\"Protectors CRUD\");\n        ///////////////////////////////////////////////////////////////////////////\n        // Add protector Test \n        ///////////////////////////////////////////////////////////////////////////\n        const addProtectorResponse01 = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"add-protector\",\n        }, {\n            table: \"products\",\n            protector_name: \"Only admin updates notes\",\n            protector_type: \"ForbidFieldsPersister\",\n            parameters: JSON.stringify({\n                \"Forbid fields\": \"notes\",\n                \"Allowed user column\": null,\n                \"Allowed privileges\": \"to administrate\"\n            })\n        }, {\n            authorization: commonData.sessionToken,\n        }, true, true, \"Protectors CRUD test: 1. add «forbid-fields-persister» protector to «products.notes» to allow only admin to alter this column\");\n\n        if (!utils.check.that(addProtectorResponse01.response.status).equals(\"success\")) throw new Error(\"01.0\");\n        if (!utils.check.that(addProtectorResponse01.response.data.message).equals(\"Operation «add-protector» successfully achieved\")) throw new Error(\"01.1\");\n\n        const insertResponse02 = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"insert\",\n        }, {\n            table: \"products\",\n            value: JSON.stringify({\n                name: \"Random product 001\",\n                price: \"100€\",\n                notes: \"These are some allowed notes made by the admin.\"\n            })\n        }, {\n            authorization: commonData.sessionToken,\n        }, true, true, \"Protectors CRUD test: 2. checking «add-protector» worked by allowing persistence\");\n\n        if (!utils.check.that(insertResponse02.response.status).equals(\"success\")) throw new Error(\"02.0\");\n        \n        const insertResponse03 = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"insert\",\n        }, {\n            table: \"products\",\n            value: JSON.stringify({\n                name: \"Random product 002\",\n                price: \"200€\",\n                notes: \"These are some not allowed notes made by some user.\"\n            })\n        }, {\n            authorization: commonData.userSessionToken,\n        }, true, true, \"Protectors CRUD test: 3. checking «add-protector» worked by forbiding persistence\");\n        \n        if (!utils.check.that(insertResponse03.response.status).equals(\"success\")) throw new Error(\"03.0\");\n        if (!utils.check.that(insertResponse03.response.data.item.name).equals(\"Random product 002\")) throw new Error(\"03.1\");\n        if (!utils.check.that(insertResponse03.response.data.item.price).equals(\"200€\")) throw new Error(\"03.2\");\n        if (!utils.check.that(insertResponse03.response.data.item.notes).isUndefined()) throw new Error(\"03.3\");\n\n        const productItemId = insertResponse03.response.data.item.id;\n\n        ///////////////////////////////////////////////////////////////////////////\n        // Update protector Test \n        ///////////////////////////////////////////////////////////////////////////\n        const updateProtectorResponse04 = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"update-protector\",\n        }, {\n            table: \"products\",\n            protector_type: \"ForbidFieldsPersister\",\n            protector_name: \"Only admin updates notes\",\n            protector_new_name: \"Only admin updates notes and price\",\n            parameters: JSON.stringify({\n                \"Forbid fields\": \"notes,price\",\n                \"Allowed user column\": null,\n                \"Allowed privileges\": \"to administrate\"\n            })\n        }, {\n            authorization: commonData.sessionToken,\n        }, true, true, \"Protectors CRUD test: 4. update previous protector to also apply to «products.price»\");\n\n        if (!utils.check.that(updateProtectorResponse04.response.status).equals(\"success\")) throw new Error(\"04.0\");\n        if (!utils.check.that(updateProtectorResponse04.response.data.message).equals(\"Operation «update-protector» successfully achieved\")) throw new Error(\"04.1\");\n        \n        const updateResponse05 = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"update\",\n        }, {\n            table: \"products\",\n            id: productItemId,\n            value: JSON.stringify({\n                name: \"Random product 002 (modified)\",\n                price: \"300€\",\n                notes: \"These are some NOT allowed notes made by some user.\"\n            })\n        }, {\n            authorization: commonData.userSessionToken,\n        }, true, true, \"Protectors CRUD test: 5. checking «update-protector» worked by forbiding persistence\");\n\n        if (!utils.check.that(updateResponse05.response.status).equals(\"success\")) throw new Error(\"05.0\");\n        if (!utils.check.that(updateResponse05.response.data.item.name).equals(\"Random product 002 (modified)\")) throw new Error(\"05.1\");\n        if (!utils.check.that(updateResponse05.response.data.item.price).equals(\"200€\")) throw new Error(\"05.2\");\n        if (!utils.check.that(updateResponse05.response.data.item.notes).isUndefined()) throw new Error(\"05.3\");\n        if (!utils.check.that(updateResponse05.response.data.protectorErrors).isArray()) throw new Error(\"05.4\");\n        if (!utils.check.that(updateResponse05.response.data.protectorErrors.length).equals(2)) throw new Error(\"05.5\");\n\n        ///////////////////////////////////////////////////////////////////////////\n        // Delete protectors Test \n        ///////////////////////////////////////////////////////////////////////////\n        const viewSchemaResponse06 = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"view-schema\",\n        }, {}, {\n            authorization: commonData.sessionToken,\n        }, true, true, \"View app schema\");\n\n        const projectData2 = await utils.hydrateJSON(__dirname + \"/../../../src/data/projects/Empresa_z/project.json\");\n        const schemaTablesLength2 = Object.keys(projectData2.schema.tables).length;\n        const responseTablesLength2 = Object.keys(viewSchemaResponse06.response.data.schema.tables).length;\n\n        if (!utils.check.that(schemaTablesLength2).equals(responseTablesLength2)) throw new Error(\"06.0\");\n        if (!utils.check.that(viewSchemaResponse06.response.data.schema.tables.products.attributes.hasProtectors.length).equals(1)) throw new Error(\"06.1\");\n\n        const deleteProtectorResponse07 = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"delete-protector\",\n        }, {\n            table: \"products\",\n            protector_name: \"Only admin updates notes and price\"\n        }, {\n            authorization: commonData.sessionToken,\n        }, true, true, \"Protectors CRUD test: 6. delete previous protector\");\n\n        if (!utils.check.that(deleteProtectorResponse07.response.status).equals(\"success\")) throw new Error(\"04.0\");\n        if (!utils.check.that(deleteProtectorResponse07.response.data.message).equals(\"Operation «delete-protector» successfully achieved\")) throw new Error(\"07.1\");\n\n        const updateResponse08 = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"update\",\n        }, {\n            table: \"products\",\n            id: productItemId,\n            value: JSON.stringify({\n                name: \"Random product 002 (modified again)\",\n                price: \"300€\",\n                notes: \"These are some allowed notes made by some user.\"\n            })\n        }, {\n            authorization: commonData.userSessionToken,\n        }, true, true, \"Protectors CRUD test: 7. checking «delete-protector» worked by allowing every persistence\");\n\n        if (!utils.check.that(updateResponse08.response.status).equals(\"success\")) throw new Error(\"08.0\");\n        if (!utils.check.that(updateResponse08.response.data.item.name).equals(\"Random product 002 (modified again)\")) throw new Error(\"08.1\");\n        if (!utils.check.that(updateResponse08.response.data.item.price).equals(\"300€\")) throw new Error(\"08.2\");\n        if (!utils.check.that(updateResponse08.response.data.item.notes).equals(\"These are some allowed notes made by some user.\")) throw new Error(\"08.3\");\n        \n        ///////////////////////////////////////////////////////////////////////////\n        // View protectors Test \n        ///////////////////////////////////////////////////////////////////////////\n\n\n        const viewSchemaResponse09 = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"view-schema\",\n        }, {}, {\n            authorization: commonData.sessionToken,\n        }, true, true, \"View app schema\");\n\n        const projectData = await utils.hydrateJSON(__dirname + \"/../../../src/data/projects/Empresa_z/project.json\");\n        const schemaTablesLength = Object.keys(projectData.schema.tables).length;\n        const responseTablesLength = Object.keys(viewSchemaResponse09.response.data.schema.tables).length;\n\n        if (!utils.check.that(schemaTablesLength).equals(responseTablesLength)) throw new Error(\"09.0\");\n        if (!utils.check.that(viewSchemaResponse09.response.data.schema.tables.products.attributes.hasProtectors.length).equals(0)) throw new Error(\"09.1\");\n\n\n        tester.passTest(\"Protectors CRUD\");\n\n    } catch (error) {\n        tester.failTest(\"Protectors CRUD\");\n        throw error;\n    }\n};";
fs.writeFileSync(node_144, node_contents_144, "utf8");

const node_145 = path.resolve(baseDirectory, ".", "test", "monolith", "inrow", "033.Authorized-operations.js");
const node_contents_145 = "module.exports = async function (commonData) {\n    const { requester, utils, tester } = commonData;\n    try {\n\n        tester.startTest(\"Authorized operations\");\n\n        tester.passTest(\"Authorized operations\");\n\n    } catch (error) {\n        tester.failTest(\"Authorized operations\");\n        throw error;\n    }\n};";
fs.writeFileSync(node_145, node_contents_145, "utf8");

const node_146 = path.resolve(baseDirectory, ".", "test", "monolith", "inrow", "034.Data-safe.js");
const node_contents_146 = "module.exports = async function (commonData) {\n    const { requester, utils, tester } = commonData;\n    try {\n\n        tester.startTest(\"Data-safe\");\n\n        tester.passTest(\"Data-safe\");\n\n    } catch (error) {\n        tester.failTest(\"Data-safe\");\n        throw error;\n    }\n};";
fs.writeFileSync(node_146, node_contents_146, "utf8");

const node_147 = path.resolve(baseDirectory, ".", "test", "monolith", "inrow", "035.Core-safe.js");
const node_contents_147 = "module.exports = async function (commonData) {\n    const { requester, utils, tester } = commonData;\n    try {\n\n        tester.startTest(\"Core-safe\");\n\n        tester.passTest(\"Core-safe\");\n\n    } catch (error) {\n        tester.failTest(\"Core-safe\");\n        throw error;\n    }\n};";
fs.writeFileSync(node_147, node_contents_147, "utf8");

const node_148 = path.resolve(baseDirectory, ".", "test", "monolith", "inrow", "040.Processes.js");
const node_contents_148 = "module.exports = async function (commonData) {\n    const { requester, utils, tester } = commonData;\n    try {\n\n        tester.startTest(\"Processes\");\n\n        const accessProcesses01 = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"process\",\n            process: \"restologia.official.org/common/ping\"\n        }, {}, {\n            authorization: commonData.sessionToken,\n        }, true, true, \"Process is accessible when it is enabled\");\n\n        // utils.dieStringify(accessProcesses01.response);\n\n        if (!utils.check.that(accessProcesses01.response.status).equals(\"success\")) throw new Error(\"01.0\");\n        if (!utils.check.that(accessProcesses01.response.data.message).equals(\"Operation «process» successfully achieved\")) throw new Error(\"01.1\");\n        if (!utils.check.that(accessProcesses01.response.data.operation).equals(\"restologia.official.org/common/ping\")) throw new Error(\"01.2\");\n\n        const accessProcesses02 = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"process\",\n            process: \"restologia.official.org/common/os\"\n        }, {}, {\n            authorization: commonData.sessionToken,\n        }, true, true, \"Process is NOT accessible when it is NOT enabled\");\n\n        if (!utils.check.that(accessProcesses02.response.status).equals(\"error\")) throw new Error(\"02.0\");\n        if (!utils.check.that(accessProcesses02.response.error.message).equals(\"Required parameter «process» to refer to an enabled process\")) throw new Error(\"02.1\");\n\n        const accessProcesses03 = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"process\",\n            process: \"restologia.official.org/common/unexistent\"\n        }, {}, {\n            authorization: commonData.sessionToken,\n        }, true, true, \"Process is NOT accessible when it is DOES NOT exist\");\n\n        if (!utils.check.that(accessProcesses03.response.status).equals(\"error\")) throw new Error(\"03.0\");\n        if (!utils.check.that(accessProcesses03.response.error.message).equals(\"Required parameter «process» to be an identifiable process\")) throw new Error(\"03.1\");\n\n        tester.passTest(\"Processes\");\n\n    } catch (error) {\n        tester.failTest(\"Processes\");\n        throw error;\n    }\n};";
fs.writeFileSync(node_148, node_contents_148, "utf8");

const node_149 = path.resolve(baseDirectory, ".", "test", "monolith", "inrow", "101.Prepare-e-shop.js");
const node_contents_149 = "module.exports = async function (commonData) {\n    const { requester, utils, tester } = commonData;\n    try {\n\n        tester.startTest(\"Prepare e-shop\");\n\n        const addTableResponse01 = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"add-table\",\n        }, {\n            table: \"charts\",\n            attributes: JSON.stringify({\n                hasDescription: \"It represents charts of users\"\n            }),\n            properties: JSON.stringify({}),\n        }, {\n            authorization: commonData.sessionToken,\n        }, true, true, \"Prepare e-shop: add «charts» table\");\n\n        if (!utils.check.that(addTableResponse01.response.data.message).equals(\"Operation «add-table» successfully achieved\")) throw new Error(\"1.0\");\n\n        const addColumnResponse01 = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"add-column\",\n        }, {\n            table: \"charts\",\n            column: \"user\",\n            attributes: JSON.stringify({\n                isUnique: true,\n                isType: \"object\",\n                isSubtype: null,\n                isEncrypted: false,\n                isReferenceOf: \"users\",\n                isNullable: false,\n                hasDefault: null,\n                hasMinimum: false,\n                hasMaximum: false,\n                hasPattern: false,\n                hasPatternErrorMessage: false,\n                hasDescription: \"It represents charts of users\"\n            }),\n            properties: JSON.stringify({}),\n        }, {\n            authorization: commonData.sessionToken,\n        }, true, true, \"Prepare e-shop: add «charts.user» column\");\n\n        if (!utils.check.that(addColumnResponse01.response.data.message).equals(\"Operation «add-column» successfully achieved\")) throw new Error(\"2.0\");\n\n        const addColumnResponse02 = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"add-column\",\n        }, {\n            table: \"charts\",\n            column: \"details\",\n            attributes: JSON.stringify({\n                isUnique: false,\n                isType: \"string\",\n                isSubtype: null,\n                isEncrypted: false,\n                isReferenceOf: null,\n                isNullable: true,\n                hasDefault: \"\",\n                hasMinimum: false,\n                hasMaximum: false,\n                hasPattern: false,\n                hasPatternErrorMessage: false,\n                hasDescription: \"It represents notes attached to the charts of users\"\n            }),\n            properties: JSON.stringify({}),\n        }, {\n            authorization: commonData.sessionToken,\n        }, true, true, \"Prepare e-shop: add «charts.details» column\");\n\n        if (!utils.check.that(addColumnResponse02.response.data.message).equals(\"Operation «add-column» successfully achieved\")) throw new Error(\"3.0\");\n\n        const addTableResponse02 = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"add-table\",\n        }, {\n            table: \"products_of_charts\",\n            attributes: JSON.stringify({\n                hasDescription: \"It represents products assigned to charts of users\"\n            }),\n            properties: JSON.stringify({}),\n        }, {\n            authorization: commonData.sessionToken,\n        }, true, true, \"Prepare e-shop: add «products_of_charts» table\");\n\n        if (!utils.check.that(addTableResponse02.response.data.message).equals(\"Operation «add-table» successfully achieved\")) throw new Error(\"4.0\");\n\n        const addColumnResponse03 = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"add-column\",\n        }, {\n            table: \"products_of_charts\",\n            column: \"chart\",\n            attributes: JSON.stringify({\n                isUnique: false,\n                isType: \"object\",\n                isSubtype: null,\n                isEncrypted: false,\n                isReferenceOf: \"charts\",\n                isNullable: false,\n                hasDefault: null,\n                hasMinimum: false,\n                hasMaximum: false,\n                hasPattern: false,\n                hasPatternErrorMessage: false,\n                hasDescription: \"It represents the chart to which the product belongs to\"\n            }),\n            properties: JSON.stringify({}),\n        }, {\n            authorization: commonData.sessionToken,\n        }, true, true, \"Prepare e-shop: add «products_of_charts.chart» column\");\n\n        if (!utils.check.that(addColumnResponse03.response.data.message).equals(\"Operation «add-column» successfully achieved\")) throw new Error(\"5.0\");\n\n        const addColumnResponse04 = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n            project: \"Empresa_z\",\n            operation: \"add-column\",\n        }, {\n            table: \"products_of_charts\",\n            column: \"product\",\n            attributes: JSON.stringify({\n                isUnique: false,\n                isType: \"object\",\n                isSubtype: null,\n                isEncrypted: false,\n                isReferenceOf: \"products\",\n                isNullable: false,\n                hasDefault: null,\n                hasMinimum: false,\n                hasMaximum: false,\n                hasPattern: false,\n                hasPatternErrorMessage: false,\n                hasDescription: \"It represents the product added into the chart\"\n            }),\n            properties: JSON.stringify({}),\n        }, {\n            authorization: commonData.sessionToken,\n        }, true, true, \"Prepare e-shop: add «products_of_charts.product» column\");\n\n        if (!utils.check.that(addColumnResponse04.response.data.message).equals(\"Operation «add-column» successfully achieved\")) throw new Error(\"6.0\");\n\n        tester.passTest(\"Prepare e-shop\");\n\n    } catch (error) {\n        tester.failTest(\"Prepare e-shop\");\n        throw error;\n    }\n};";
fs.writeFileSync(node_149, node_contents_149, "utf8");

const node_150 = path.resolve(baseDirectory, ".", "test", "monolith", "inrow", "200.Performance-on-insert-row.js");
const node_contents_150 = "module.exports = async function (commonData) {\n    const { requester, utils, tester } = commonData;\n    try {\n\n        tester.startTest(\"Performance on insert row\");\n        \n        /*/\n        return tester.passTest(\"Performance on insert row\");\n        //*/\n\n        const started = new Date();\n\n        console.log(\"Proceeding to test performance. Please, wait...\");\n        const insertions = [];\n        for(let index = 0; index < (100); index++) {\n            await requester(\"POST\", \"http://127.0.0.1:9999\", {\n                project: \"Empresa_z\",\n                operation: \"insert\",\n            }, {\n                table: \"users\",\n                value: JSON.stringify({\n                    name: \"user.\" + index,\n                    password: \"user.\" + index,\n                    email: \"usermail@\" + index + \".org\",\n                    groups: [],\n                    privileges: []\n                }),\n            }, {\n                authorization: commonData.sessionToken,\n            }, true, false, false);\n        }\n        console.log(\"Performance tested successfully.\");\n\n        const tookMilliseconds = new Date() - started;\n        const tookSeconds = tookMilliseconds / 100;\n\n        console.log(\"It took \" + tookSeconds + \" to insert 100 rows\");\n        console.log(\"This means an average speed of \" + (tookSeconds / 100) + \" seconds per row\");\n        console.log(\"This means an average speed of \" + Math.round(100 / tookSeconds) + \" rows per seconds\");\n\n        tester.passTest(\"Performance on insert row\");\n\n    } catch (error) {\n        tester.failTest(\"Performance on insert row\");\n        throw error;\n    }\n};";
fs.writeFileSync(node_150, node_contents_150, "utf8");

const node_151 = path.resolve(baseDirectory, ".", "test", "monolith", "inrow", "900.Logout.js");
const node_contents_151 = "module.exports = async function (commonData) {\n    const { requester, utils, tester } = commonData;\n    try {\n\n        tester.startTest(\"Logout\");\n        \n        if(!commonData.remainStarted) {\n            const response01 = await requester(\"POST\", \"http://127.0.0.1:9999\", {\n                project: \"Empresa_z\",\n                operation: \"logout\",\n            }, {}, {\n                authorization: commonData.sessionToken,\n            }, true, true, \"Logout from app\");\n\n            if (!utils.check.that(response01.response.status).equals(\"success\")) throw new Error(1);\n        }\n        \n\n        tester.passTest(\"Logout\");\n\n    } catch (error) {\n        tester.failTest(\"Logout\");\n        throw error;\n    }\n};\n";
fs.writeFileSync(node_151, node_contents_151, "utf8");

const node_152 = path.resolve(baseDirectory, ".", "test", "monolith", "inrow", "990.Stop-server.js");
const node_contents_152 = "const querystring = require(\"querystring\");\n\nmodule.exports = async function (commonData) {\n    const { requester, utils, tester, $environment } = commonData;\n    try {\n\n        tester.startTest(\"Stop server\");\n\n        if(!commonData.remainStarted) {\n            await $environment.server.stop();\n        } else {\n            setTimeout(() => {\n                const urlParameters = querystring.encode({\n                    project: \"Empresa_z\",\n                    authorization: commonData.sessionToken,\n                    operation: \"process\",\n                    process: \"restologia.official.org/common/os\"\n                }).toString();\n                console.log($environment.utils.getBaseURL() + \"?\" + urlParameters);\n            }, 1000 * 0.5);\n        }\n\n        tester.passTest(\"Stop server\");\n\n    } catch (error) {\n        tester.failTest(\"Stop server\");\n        throw error;\n    }\n};\n";
fs.writeFileSync(node_152, node_contents_152, "utf8");

const node_153 = path.resolve(baseDirectory, ".", "test", "monolith", "inrow", "991.Clean-projects.js");
const node_contents_153 = "module.exports = async function (commonData) {\n    const { requester, utils, tester, $environment } = commonData;\n    try {\n\n        tester.startTest(\"Clean projects\");\n\n        if(!commonData.remainStarted) {\n            require(\"fs\").rmdirSync(__dirname + \"/../../../src/data/projects/Empresa_z\", { recursive: true });\n        }\n\n        tester.passTest(\"Clean projects\");\n\n    } catch (error) {\n        tester.failTest(\"Clean projects\");\n        throw error;\n    }\n};\n";
fs.writeFileSync(node_153, node_contents_153, "utf8");

const node_154 = path.resolve(baseDirectory, ".", "test", "monolith.js");
const node_contents_154 = "const main = async function() {\n    const commonData = require(__dirname + \"/utilities.js\");\n    const { tester } = commonData;\n    try {\n        /////////////////////////////////////////////////////////////////////\n        // Start server:\n        await require(__dirname + \"/monolith/inrow/000.Start-server.js\")(commonData);\n        // Project:\n        await require(__dirname + \"/monolith/inrow/001.Delete-project.js\")(commonData);\n        await require(__dirname + \"/monolith/inrow/002.Create-project.js\")(commonData);\n        // Login:\n        await require(__dirname + \"/monolith/inrow/003.01.Login.js\")(commonData);\n        await require(__dirname + \"/monolith/inrow/003.02.Authenticate.js\")(commonData);\n        // Data:\n        await require(__dirname + \"/monolith/inrow/004.Insert-row.js\")(commonData);\n        await require(__dirname + \"/monolith/inrow/005.Update-row.js\")(commonData);\n        await require(__dirname + \"/monolith/inrow/006.Select-rows.js\")(commonData);\n        await require(__dirname + \"/monolith/inrow/007.Delete-row.js\")(commonData);\n        // Schema:\n        await require(__dirname + \"/monolith/inrow/008.Add-table.js\")(commonData);\n        await require(__dirname + \"/monolith/inrow/009.Add-column.js\")(commonData);\n        await require(__dirname + \"/monolith/inrow/010.Update-column.js\")(commonData);\n        await require(__dirname + \"/monolith/inrow/011.Update-table.js\")(commonData);\n        await require(__dirname + \"/monolith/inrow/012.Delete-column.js\")(commonData);\n        await require(__dirname + \"/monolith/inrow/013.Delete-table.js\")(commonData);\n        await require(__dirname + \"/monolith/inrow/014.View-schema.js\")(commonData);\n        await require(__dirname + \"/monolith/inrow/015.Set-file.js\")(commonData);\n        await require(__dirname + \"/monolith/inrow/016.Get-file.js\")(commonData);\n        // Miscelaneous:\n        await require(__dirname + \"/monolith/inrow/031.Protectors.js\")(commonData);\n        await require(__dirname + \"/monolith/inrow/032.Protectors-crud.js\")(commonData);\n        await require(__dirname + \"/monolith/inrow/033.Authorized-operations.js\")(commonData);\n        await require(__dirname + \"/monolith/inrow/034.Data-safe.js\")(commonData);\n        await require(__dirname + \"/monolith/inrow/035.Core-safe.js\")(commonData);\n        // Miscelaneous:\n        await require(__dirname + \"/monolith/inrow/040.Processes.js\")(commonData);\n        // Examples:\n        await require(__dirname + \"/monolith/inrow/101.Prepare-e-shop.js\")(commonData);\n        // Performance:\n        await require(__dirname + \"/monolith/inrow/200.Performance-on-insert-row.js\")(commonData);\n        // Logout:\n        await require(__dirname + \"/monolith/inrow/900.Logout.js\")(commonData);\n        // Stop server:\n        await require(__dirname + \"/monolith/inrow/990.Stop-server.js\")(commonData);\n        // Clean projects:\n        await require(__dirname + \"/monolith/inrow/991.Clean-projects.js\")(commonData);\n        /////////////////////////////////////////////////////////////////////\n        tester.printResults();\n        /////////////////////////////////////////////////////////////////////\n    } catch(error) {\n        tester.printResults();\n        console.log();\n        console.log(\"The error that made tests crash was this one:\");\n        console.log();\n        console.log(error);\n        console.log();\n    }\n};\n\nmain();";
fs.writeFileSync(node_154, node_contents_154, "utf8");

const node_155 = path.resolve(baseDirectory, ".", "test", "network");
fs.mkdirSync(node_155);

const node_156 = path.resolve(baseDirectory, ".", "test", "network", "001.Deployment--prev.js");
const node_contents_156 = "const { una_red_de_servidores_http_rest_automaticos } = require(__dirname + \"/../../api.js\");\n\nmodule.exports = async commonData => {\n    try {\n        const { requester, utils, tester } = commonData;\n        tester.startTest(\"Deployment\");\n\n        await require(__dirname + \"/Deployment.js\")(una_red_de_servidores_http_rest_automaticos);\n        const red = await una_red_de_servidores_http_rest_automaticos(async ($red_de_servidores_rest) => {\n            try {\n                await $red_de_servidores_rest.execute({\n                    comando: \"addConfigurations\",\n                    directorioBase: __dirname + \"/red_uno\",\n                });\n                await $red_de_servidores_rest.execute({\n                    comando: \"addServer\",\n                    directorio: \"./identificacion\",\n                    resetear: true,\n                    configuracion: {\n                        SERVER_ID: \"Identificacion\",\n                        SERVER_PORT: 9950,\n                        ADMINISTRATOR_USER: \"superadmin\",\n                        ADMINISTRATOR_PASSWORD: \"superadmin.123456\"\n                    }\n                });\n                await $red_de_servidores_rest.execute({\n                    comando: \"addServer\",\n                    directorio: \"./productos\",\n                    resetear: true,\n                    configuracion: {\n                        SERVER_ID: \"Productos\",\n                        SERVER_PORT: 9951\n                    }\n                });\n                await $red_de_servidores_rest.execute({\n                    comando: \"addServer\",\n                    directorio: \"./carritos\",\n                    resetear: true,\n                    configuracion: {\n                        SERVER_ID: \"Carritos\",\n                        SERVER_PORT: 9952\n                    }\n                });\n                await $red_de_servidores_rest.execute({\n                    comando: \"startServers\",\n                    servidores: [\"Identificacion\", \"Productos\", \"Carritos\"]\n                });\n                await $red_de_servidores_rest.execute({\n                    comando: \"addProject\",\n                    proyecto: \"Identificacion\",\n                    servidor: [\"Identificacion\"],\n                    autentificador: null,\n                    configuraciones: {\n                        administrator_name: \"auth_admin\",\n                        administrator_password: \"auth_admin\",\n                        administrator_email: \"auth_admin@email.com\"\n                    }\n                });\n                await $red_de_servidores_rest.execute({\n                    comando: \"addProject\",\n                    proyecto: \"Productos\",\n                    servidor: [\"Productos\"],\n                    autentificador: [\"Identificacion\", \"Identificacion\"],\n                    configuraciones: {\n                        administrator_name: \"productos_admin\",\n                        administrator_password: \"productos_admin\",\n                        administrator_email: \"productos_admin@email.com\"\n                    }\n                });\n                await $red_de_servidores_rest.execute({\n                    comando: \"addProject\",\n                    proyecto: \"Carritos\",\n                    servidor: [\"Carritos\"],\n                    autentificador: [\"Identificacion\", \"Identificacion\"],\n                    configuraciones: {\n                        administrator_name: \"carritos_admin\",\n                        administrator_password: \"carritos_admin\",\n                        administrator_email: \"carritos_admin@email.com\"\n                    }\n                });\n                await $red_de_servidores_rest.execute({\n                    comando: \"addTable\",\n                    proyecto: [\"Carritos\", \"Carritos\"],\n                    tabla: \"users\",\n                    configuraciones: {\n                        attributes: {\n                            isExternalizedBy: {\n                                host: \"http://127.0.0.1:9950\",\n                                project: \"Identificacion\",\n                                table: \"users\",\n                            }\n                        },\n                    }\n                });\n                await $red_de_servidores_rest.execute({\n                    comando: \"addTable\",\n                    proyecto: [\"Carritos\", \"Carritos\"],\n                    tabla: \"carritos\",\n                    configuraciones: {\n                        attributes: {},\n                        columns: {\n                            propietario: {\n                                isUnique: false,\n                                isType: \"object\",\n                                isSubtype: null,\n                                isEncrypted: false,\n                                isReferenceOf: \"users\",\n                                isNullable: false,\n                                hasDefault: [],\n                                hasDescription: \"Representa el propietario de cada carrito\"\n                            }\n                        }\n                    }\n                });\n                await $red_de_servidores_rest.execute({\n                    comando: \"addTable\",\n                    proyecto: [\"Carritos\", \"Carritos\"],\n                    tabla: \"cupones_prototipo\",\n                    configuraciones: {\n                        attributes: {},\n                        columns: {\n                            nombre: {\n                                isUnique: false,\n                                isType: \"string\",\n                                isSubtype: null,\n                                isEncrypted: false,\n                                isReferenceOf: null,\n                                isNullable: true,\n                                hasDefault: null,\n                                hasMinimum: 0,\n                                hasMaximum: 200,\n                                hasPattern: false,\n                                hasPatternErrorMessage: false,\n                                hasDescription: \"Representa el nombre que identifica a un prototipo de cupón\"\n                            },\n                            descripcion: {\n                                isUnique: false,\n                                isType: \"string\",\n                                isSubtype: null,\n                                isEncrypted: false,\n                                isReferenceOf: null,\n                                isNullable: true,\n                                hasDefault: null,\n                                hasMinimum: 0,\n                                hasMaximum: 200,\n                                hasPattern: false,\n                                hasPatternErrorMessage: false,\n                                hasDescription: \"Representa la descripción de un tipo de cupón\"\n                            }\n                        }\n                    }\n                });\n                await $red_de_servidores_rest.execute({\n                    comando: \"addTable\",\n                    proyecto: [\"Carritos\", \"Carritos\"],\n                    tabla: \"cupones\",\n                    configuraciones: {\n                        attributes: {},\n                        columns: {\n                            cupon_prototipo: {\n                                isUnique: false,\n                                isType: \"object\",\n                                isSubtype: null,\n                                isEncrypted: false,\n                                isReferenceOf: \"cupones_prototipo\",\n                                isNullable: false,\n                                hasDefault: [],\n                                hasDescription: \"Representa el prototipo de cupón de un cupón\"\n                            },\n                            detalles: {\n                                isUnique: false,\n                                isType: \"string\",\n                                isSubtype: null,\n                                isEncrypted: false,\n                                isReferenceOf: null,\n                                isNullable: true,\n                                hasDefault: null,\n                                hasMinimum: 0,\n                                hasMaximum: 200,\n                                hasPattern: false,\n                                hasPatternErrorMessage: false,\n                                hasDescription: \"Representa detalles asociados a un cupón\"\n                            }\n                        }\n                    }\n                });\n                await $red_de_servidores_rest.execute({\n                    comando: \"addTable\",\n                    proyecto: [\"Carritos\", \"Carritos\"],\n                    tabla: \"productos_de_carrito\",\n                    configuraciones: {\n                        attributes: {},\n                        columns: {\n                            carrito: {\n                                isUnique: false,\n                                isType: \"object\",\n                                isSubtype: null,\n                                isEncrypted: false,\n                                isReferenceOf: \"carritos\",\n                                isNullable: false,\n                                hasDefault: [],\n                                hasDescription: \"Representa los productos de un carrito\"\n                            },\n                            cupones: {\n                                isUnique: false,\n                                isType: \"list\",\n                                isSubtype: null,\n                                isEncrypted: false,\n                                isReferenceOf: \"cupones\",\n                                isNullable: true,\n                                hasDefault: [],\n                                hasDescription: \"Representa cupones asociados a un carrito\"\n                            },\n                            detalles: {\n                                isUnique: false,\n                                isType: \"string\",\n                                isSubtype: null,\n                                isEncrypted: false,\n                                isReferenceOf: null,\n                                isNullable: true,\n                                hasDefault: null,\n                                hasMinimum: 0,\n                                hasMaximum: 1000,\n                                hasPattern: false,\n                                hasPatternErrorMessage: false,\n                                hasDescription: \"Representa detalles de un carrito\"\n                            }\n                        }\n                    }\n                });\n                await $red_de_servidores_rest.execute({\n                    comando: \"addTable\",\n                    proyecto: [\"Identificacion\", \"Identificacion\"],\n                    tabla: \"correos\",\n                    configuraciones: {\n                        attributes: {},\n                        columns: {\n                            nombre: {\n                                attributes: {}\n                            },\n                            en_origen: {\n                                attributes: {}\n                            },\n                            en_destino: {\n                                attributes: {}\n                            },\n                            en_copia: {\n                                attributes: {}\n                            }\n                        }\n                    }\n                });\n                await $red_de_servidores_rest.execute({\n                    comando: \"addProcess\",\n                    proyectos: [[\"Carritos\", \"Carritos\"]],\n                    nombre: \"restologia.test.org/Carritos/add-product-to-chart\",\n                    ruta: \"restologia.test.org/Carritos/add-product-to-chart.js\",\n                    proceso: async function(publicParameters, privateParameters, configurations) {\n                        try {\n                            return { message: \"Successfully added product to chart!\" };\n                        } catch(error) {\n                            return { error: error.message };\n                        }\n                    }\n                });\n                tester.passTest(\"Deployment\");\n            } catch (error) {\n                tester.failTest(\"Deployment\");\n                throw error;\n            }\n        });\n\n        return red;\n\n    } catch (error) {\n        console.log(error);\n        throw error;\n    }\n};";
fs.writeFileSync(node_156, node_contents_156, "utf8");

const node_157 = path.resolve(baseDirectory, ".", "test", "network", "001.Deployment.js");
const node_contents_157 = "const { una_red_de_servidores_http_rest_automaticos } = require(__dirname + \"/../../api.js\");\n\nmodule.exports = async commonData => {\n    const { requester, utils, tester } = commonData;\n    try {\n        require(\"child_process\").execSync(\"calo ./test/network/Deployment.calo\", {\n            cwd: __dirname + \"/../..\",\n            stdio: [process.stdin, process.stdout, process.stderr]\n        });\n        tester.startTest(\"Deployment\");\n        const ff = function(direc, ...args) {\n            return una_red_de_servidores_http_rest_automaticos(...args);\n        };\n        const deploymentResult = require(__dirname + \"/Deployment.js\")(ff, tester)\n        const deployed = await deploymentResult;\n        tester.passTest(\"Deployment\");\n        return deployed;\n        const red = await una_red_de_servidores_http_rest_automaticos(async ($red_de_servidores_rest) => {\n            try {\n                await $red_de_servidores_rest.execute({\n                    comando: \"addConfigurations\",\n                    directorioBase: __dirname + \"/red_uno\",\n                });\n                await $red_de_servidores_rest.execute({\n                    comando: \"addServer\",\n                    directorio: \"./identificacion\",\n                    resetear: true,\n                    configuracion: {\n                        SERVER_ID: \"Identificacion\",\n                        SERVER_PORT: 9950,\n                        ADMINISTRATOR_USER: \"superadmin\",\n                        ADMINISTRATOR_PASSWORD: \"superadmin.123456\"\n                    }\n                });\n                await $red_de_servidores_rest.execute({\n                    comando: \"addServer\",\n                    directorio: \"./productos\",\n                    resetear: true,\n                    configuracion: {\n                        SERVER_ID: \"Productos\",\n                        SERVER_PORT: 9951\n                    }\n                });\n                await $red_de_servidores_rest.execute({\n                    comando: \"addServer\",\n                    directorio: \"./carritos\",\n                    resetear: true,\n                    configuracion: {\n                        SERVER_ID: \"Carritos\",\n                        SERVER_PORT: 9952\n                    }\n                });\n                await $red_de_servidores_rest.execute({\n                    comando: \"startServers\",\n                    servidores: [\"Identificacion\", \"Productos\", \"Carritos\"]\n                });\n                await $red_de_servidores_rest.execute({\n                    comando: \"addProject\",\n                    proyecto: \"Identificacion\",\n                    servidor: [\"Identificacion\"],\n                    autentificador: null,\n                    configuraciones: {\n                        administrator_name: \"auth_admin\",\n                        administrator_password: \"auth_admin\",\n                        administrator_email: \"auth_admin@email.com\"\n                    }\n                });\n                await $red_de_servidores_rest.execute({\n                    comando: \"addProject\",\n                    proyecto: \"Productos\",\n                    servidor: [\"Productos\"],\n                    autentificador: [\"Identificacion\", \"Identificacion\"],\n                    configuraciones: {\n                        administrator_name: \"productos_admin\",\n                        administrator_password: \"productos_admin\",\n                        administrator_email: \"productos_admin@email.com\"\n                    }\n                });\n                await $red_de_servidores_rest.execute({\n                    comando: \"addProject\",\n                    proyecto: \"Carritos\",\n                    servidor: [\"Carritos\"],\n                    autentificador: [\"Identificacion\", \"Identificacion\"],\n                    configuraciones: {\n                        administrator_name: \"carritos_admin\",\n                        administrator_password: \"carritos_admin\",\n                        administrator_email: \"carritos_admin@email.com\"\n                    }\n                });\n                await $red_de_servidores_rest.execute({\n                    comando: \"addTable\",\n                    proyecto: [\"Carritos\", \"Carritos\"],\n                    tabla: \"users\",\n                    configuraciones: {\n                        attributes: {\n                            isExternalizedBy: {\n                                host: \"http://127.0.0.1:9950\",\n                                project: \"Identificacion\",\n                                table: \"users\",\n                            }\n                        },\n                    }\n                });\n                await $red_de_servidores_rest.execute({\n                    comando: \"addTable\",\n                    proyecto: [\"Carritos\", \"Carritos\"],\n                    tabla: \"carritos\",\n                    configuraciones: {\n                        attributes: {},\n                        columns: {\n                            propietario: {\n                                isUnique: false,\n                                isType: \"object\",\n                                isSubtype: null,\n                                isEncrypted: false,\n                                isReferenceOf: \"users\",\n                                isNullable: false,\n                                hasDefault: [],\n                                hasDescription: \"Representa el propietario de cada carrito\"\n                            }\n                        }\n                    }\n                });\n                await $red_de_servidores_rest.execute({\n                    comando: \"addTable\",\n                    proyecto: [\"Carritos\", \"Carritos\"],\n                    tabla: \"cupones_prototipo\",\n                    configuraciones: {\n                        attributes: {},\n                        columns: {\n                            nombre: {\n                                isUnique: false,\n                                isType: \"string\",\n                                isSubtype: null,\n                                isEncrypted: false,\n                                isReferenceOf: null,\n                                isNullable: true,\n                                hasDefault: null,\n                                hasMinimum: 0,\n                                hasMaximum: 200,\n                                hasPattern: false,\n                                hasPatternErrorMessage: false,\n                                hasDescription: \"Representa el nombre que identifica a un prototipo de cupón\"\n                            },\n                            descripcion: {\n                                isUnique: false,\n                                isType: \"string\",\n                                isSubtype: null,\n                                isEncrypted: false,\n                                isReferenceOf: null,\n                                isNullable: true,\n                                hasDefault: null,\n                                hasMinimum: 0,\n                                hasMaximum: 200,\n                                hasPattern: false,\n                                hasPatternErrorMessage: false,\n                                hasDescription: \"Representa la descripción de un tipo de cupón\"\n                            }\n                        }\n                    }\n                });\n                await $red_de_servidores_rest.execute({\n                    comando: \"addTable\",\n                    proyecto: [\"Carritos\", \"Carritos\"],\n                    tabla: \"cupones\",\n                    configuraciones: {\n                        attributes: {},\n                        columns: {\n                            cupon_prototipo: {\n                                isUnique: false,\n                                isType: \"object\",\n                                isSubtype: null,\n                                isEncrypted: false,\n                                isReferenceOf: \"cupones_prototipo\",\n                                isNullable: false,\n                                hasDefault: [],\n                                hasDescription: \"Representa el prototipo de cupón de un cupón\"\n                            },\n                            detalles: {\n                                isUnique: false,\n                                isType: \"string\",\n                                isSubtype: null,\n                                isEncrypted: false,\n                                isReferenceOf: null,\n                                isNullable: true,\n                                hasDefault: null,\n                                hasMinimum: 0,\n                                hasMaximum: 200,\n                                hasPattern: false,\n                                hasPatternErrorMessage: false,\n                                hasDescription: \"Representa detalles asociados a un cupón\"\n                            }\n                        }\n                    }\n                });\n                await $red_de_servidores_rest.execute({\n                    comando: \"addTable\",\n                    proyecto: [\"Carritos\", \"Carritos\"],\n                    tabla: \"productos_de_carrito\",\n                    configuraciones: {\n                        attributes: {},\n                        columns: {\n                            carrito: {\n                                isUnique: false,\n                                isType: \"object\",\n                                isSubtype: null,\n                                isEncrypted: false,\n                                isReferenceOf: \"carritos\",\n                                isNullable: false,\n                                hasDefault: [],\n                                hasDescription: \"Representa los productos de un carrito\"\n                            },\n                            cupones: {\n                                isUnique: false,\n                                isType: \"list\",\n                                isSubtype: null,\n                                isEncrypted: false,\n                                isReferenceOf: \"cupones\",\n                                isNullable: true,\n                                hasDefault: [],\n                                hasDescription: \"Representa cupones asociados a un carrito\"\n                            },\n                            detalles: {\n                                isUnique: false,\n                                isType: \"string\",\n                                isSubtype: null,\n                                isEncrypted: false,\n                                isReferenceOf: null,\n                                isNullable: true,\n                                hasDefault: null,\n                                hasMinimum: 0,\n                                hasMaximum: 1000,\n                                hasPattern: false,\n                                hasPatternErrorMessage: false,\n                                hasDescription: \"Representa detalles de un carrito\"\n                            }\n                        }\n                    }\n                });\n                await $red_de_servidores_rest.execute({\n                    comando: \"addTable\",\n                    proyecto: [\"Identificacion\", \"Identificacion\"],\n                    tabla: \"correos\",\n                    configuraciones: {\n                        attributes: {},\n                        columns: {\n                            nombre: {\n                                attributes: {}\n                            },\n                            en_origen: {\n                                attributes: {}\n                            },\n                            en_destino: {\n                                attributes: {}\n                            },\n                            en_copia: {\n                                attributes: {}\n                            }\n                        }\n                    }\n                });\n                await $red_de_servidores_rest.execute({\n                    comando: \"addProcess\",\n                    proyectos: [[\"Carritos\", \"Carritos\"]],\n                    nombre: \"restologia.test.org/Carritos/add-product-to-chart\",\n                    ruta: \"restologia.test.org/Carritos/add-product-to-chart.js\",\n                    proceso: async function(publicParameters, privateParameters, configurations) {\n                        try {\n                            return { message: \"Successfully added product to chart!\" };\n                        } catch(error) {\n                            return { error: error.message };\n                        }\n                    }\n                });\n                tester.passTest(\"Deployment\");\n            } catch (error) {\n                tester.failTest(\"Deployment\");\n                throw error;\n            }\n        });\n\n        return red;\n\n    } catch (error) {\n        console.log(error);\n        throw error;\n    }\n};";
fs.writeFileSync(node_157, node_contents_157, "utf8");

const node_158 = path.resolve(baseDirectory, ".", "test", "network", "002.Compile-app.js");
const node_contents_158 = "module.exports = async commonData => {\n    const { requester, utils, tester } = commonData;\n    try {\n        tester.startTest(\"Compile-app\");\n        // @TODO...\n        try {\n            require(\"child_process\").execSync(\"calo ./test/network/red_dos/statics/src/app/app.calo\", {\n                cwd: __dirname + \"/../..\",\n                stdio: [process.stdin, process.stdout, process.stderr ]\n            });\n        } catch (error) {\n            tester.failTest(\"Compile-app\");\n            console.log(error);\n            throw error;\n        }\n        tester.passTest(\"Compile-app\");\n    } catch (error) {\n        tester.failTest(\"Compile-app\");\n        throw error;\n    }\n};";
fs.writeFileSync(node_158, node_contents_158, "utf8");

const node_159 = path.resolve(baseDirectory, ".", "test", "network", "003.Endpoints.js");
const node_contents_159 = "module.exports = async commonData => {\n    const { requester, utils, tester } = commonData;\n    try {\n        tester.startTest(\"Endpoints\");\n        // @TODO...\n        const settingsJson = JSON.parse(require(\"fs\").readFileSync(__dirname + \"/red_dos/statics/src/security/settings.json\").toString());\n        const appUrl = `${settingsJson.SERVER_PROTOCOL}://${settingsJson.SERVER_HOST}:${settingsJson.APPLICATION_PORT}/restologia-app.1.0.0.html`;\n        setTimeout(() => console.log(appUrl), 1000 * 1);\n        tester.passTest(\"Endpoints\");\n    } catch (error) {\n        tester.failTest(\"Endpoints\");\n        throw error;\n    }\n};";
fs.writeFileSync(node_159, node_contents_159, "utf8");

const node_160 = path.resolve(baseDirectory, ".", "test", "network", "Deployment.calo");
const node_contents_160 = "Hago require(\"fs\").rmdirSync(__dirname + \"/red_dos_prototipo\", { recursive: true }).\n\nAsigno module.exports como una función con (ff) donde {\n\n    Creo Castelog como {}.\n    Asigno Castelog.metodos como {}.\n    Asigno Castelog.metodos.una_red_de_servidores_http_rest_automaticos como ff.\n    Creo datos como {}.\n\n    Retorno una red de servidores HTTP REST automáticos en ruta __dirname + \"/red_dos_prototipo\" donde {\n\n        ###################\n        # Configuraciones #\n        ###################\n        Establezco configuración con {\n            directorioBase: __dirname + \"/red_dos\"\n        }.\n        \n        ##############\n        # Servidores #\n        ##############\n        Instalo un servidor en \"./identificacion\" configurado con {\n            SERVER_ID: \"Identificacion\",\n            SERVER_PROTOCOL: \"http\",\n            SERVER_HOST: \"127.0.0.1\",\n            SERVER_PORT: 9900,\n            ADMINISTRATOR_USER: \"superadmin\",\n            ADMINISTRATOR_PASSWORD: \"superadmin.123456\"\n        }.\n        Instalo un servidor en \"./productos\" configurado con {\n            SERVER_ID: \"Productos\",\n            SERVER_PROTOCOL: \"http\",\n            SERVER_HOST: \"127.0.0.1\",\n            SERVER_PORT: 9901\n        }.\n        Instalo un servidor en \"./carritos\" configurado con {\n            SERVER_ID: \"Carritos\",\n            SERVER_PROTOCOL: \"http\",\n            SERVER_HOST: \"127.0.0.1\",\n            SERVER_PORT: 9902\n        }.\n        Instalo un servidor en \"./proveedores\" configurado con {\n            SERVER_ID: \"Proveedores\",\n            SERVER_PROTOCOL: \"http\",\n            SERVER_HOST: \"127.0.0.1\",\n            SERVER_PORT: 9903\n        }.\n\n        ######################################\n        # Ficheros y directorios de servidor #\n        ######################################\n        Agrego fichero en servidor \"Identificacion\" con origen __dirname + \"/red_dos_data/roots/identificacion/README.md\" con destino \"./README.md\".\n        Agrego fichero en servidor \"Proveedores\" con origen __dirname + \"/red_dos_data/roots/proveedores/README.md\" con destino \"./README.md\".\n        Agrego fichero en servidor \"Carritos\" con origen __dirname + \"/red_dos_data/roots/carritos/README.md\" con destino \"./README.md\".\n        Agrego fichero en servidor \"Productos\" con origen __dirname + \"/red_dos_data/roots/productos/README.md\" con destino \"./README.md\".\n        \n        #############\n        # Ejecución #\n        #############\n        Inicio servidores [ [\"Identificacion\"], [\"Productos\"], [\"Carritos\"], [\"Proveedores\"] ].\n\n        ########################################\n        # Ficheros y directorios de aplicación #\n        ########################################\n        Agrego fichero en aplicación con origen __dirname + \"/red_dos_data/roots/statics/README.md\" con destino \"./README.md\".\n\n        #############\n        # Proyectos #\n        #############\n        Agrego un proyecto llamado \"Identificacion\" en servidor [\"Identificacion\"] autentificado por sí mismo configurado con {\n            administrator_name: \"auth_admin\",\n            administrator_password: \"auth_admin\",\n            administrator_email: \"auth_admin@email.com\"\n        }.\n        Agrego un proyecto llamado \"Productos\" en servidor [\"Productos\"] autentificado por proyecto [\"Identificacion\", \"Identificacion\"] configurado con {}.\n        Agrego un proyecto llamado \"Carritos\" en servidor [\"Carritos\"] autentificado por proyecto [\"Identificacion\", \"Identificacion\"] configurado con {}.\n        Agrego un proyecto llamado \"Proveedores\" en servidor [\"Proveedores\"] autentificado por proyecto [\"Identificacion\", \"Identificacion\"] configurado con {}.\n\n        ######################################\n        # Ficheros y directorios de proyecto #\n        ######################################\n        Agrego fichero en proyecto [\"Identificacion\", \"Identificacion\"] con origen __dirname + \"/red_dos_data/roots/identificacion/identificacion/README.md\" con destino \"./README.md\".\n        Agrego fichero en proyecto [\"Proveedores\", \"Proveedores\"] con origen __dirname + \"/red_dos_data/roots/proveedores/proveedores/README.md\" con destino \"./README.md\".\n        Agrego fichero en proyecto [\"Carritos\", \"Carritos\"] con origen __dirname + \"/red_dos_data/roots/carritos/carritos/README.md\" con destino \"./README.md\".\n        Agrego fichero en proyecto [\"Productos\", \"Productos\"] con origen __dirname + \"/red_dos_data/roots/productos/productos/README.md\" con destino \"./README.md\".\n        Agrego fichero en proyecto [\"Productos\", \"Productos\"] con origen __dirname + \"/red_dos_data/roots/productos/productos/files/nodejs.png\" con destino \"./files/file-column.on-00000000000000.000.column-imagenes.uid-Xxxxxxxx00.as-nodejs.png\".\n\n        ##########\n        # Tablas #\n        ##########\n\n        ### IDENTIFICACION ###\n        Agrego una tabla llamada \"correos\" en proyecto [\"Identificacion\", \"Identificacion\"] configurada con {\n            attributes: {},\n            columns: {\n                nombre: {\n                    attributes: {}\n                },\n                en_origen: {\n                    attributes: {}\n                },\n                en_destino: {\n                    attributes: {}\n                },\n                en_copia: {\n                    attributes: {}\n                },\n                fichero_adjunto: {\n                    attributes: {\n                        isType: \"file\"\n                    }\n                }\n            }\n        }.\n\n        ### PROVEEDORES ###\n        Agrego una tabla llamada \"proveedores\" en proyecto [\"Proveedores\", \"Proveedores\"] configurada con {\n            attributes: {},\n            columns: {\n                nombre: {\n                    attributes: {\n                        isType: \"text\",\n                        isUnique: true\n                    }\n                },\n                telefono: {\n                    attributes: {\n                        isType: \"text\"\n                    }\n                },\n                cuentas_sociales: {\n                    attributes: {\n                        isType: \"text\",\n                        isMultipleRows: true\n                    }\n                }\n            }\n        }.\n        Agrego una tabla llamada \"pedidos\" en proyecto [\"Proveedores\", \"Proveedores\"] configurada con {\n            attributes: {},\n            columns: {\n                titulo: {\n                    attributes: {\n                        isType: \"text\"\n                    }\n                },\n                pedido_en_texto: {\n                    attributes: {\n                        isType: \"text\",\n                        hasMultipleRows: true\n                    }\n                },\n                proveedor: {\n                    attributes: {\n                        isType: \"object\",\n                        isReferenceOf: \"proveedores\"\n                    }\n                },\n                fecha_de_peticion: {\n                    attributes: {\n                        isType: \"time\"\n                    }\n                },\n                fecha_de_resolucion: {\n                    attributes: {\n                        isType: \"time\",\n                        hasDefault: null\n                    }\n                }\n            }\n        }.\n\n        ### PRODUCTOS ###\n        Agrego una tabla llamada \"proveedores\" en proyecto [\"Productos\", \"Productos\"] configurada con {\n            attributes: {\n                isExternalizedBy: {\n                    host: \"http://127.0.0.1:9903\",\n                    project: \"Proveedores\",\n                    table: \"proveedores\"\n                }\n            }\n        }.\n        Agrego una tabla llamada \"imagenes\" en proyecto [\"Productos\", \"Productos\"] configurada con {\n            attributes: {},\n            columns: {\n                titulo: {\n                    attributes: {\n                        isType: \"text\"\n                    }\n                },\n                imagen: {\n                    attributes: {\n                        isType: \"image\"\n                    }\n                },\n                detalles: {\n                    attributes: {\n                        isType: \"text\",\n                        hasMultipleRows: true\n                    }\n                }\n            }\n        }.\n        Agrego una tabla llamada \"productos\" en proyecto [\"Productos\", \"Productos\"] configurada con {\n            attributes: {},\n            columns: {\n                nombre: {\n                    attributes: {\n                        isType: \"text\"\n                    }\n                },\n                precio: {\n                    attributes: {\n                        isType: \"number\"\n                    }\n                },\n                moneda_de_precio: {\n                    attributes: {\n                        isType: \"text\"\n                    }\n                },\n                caracteristicas_tecnicas: {\n                    attributes: {\n                        isType: \"text\",\n                        hasMultipleRows: true\n                    }\n                },\n                estado: {\n                    attributes: {\n                        isType: \"option\",\n                        hasOptions: [{\n                            label: \"En almacén\",\n                            value: \"en almacen\"\n                        }, {\n                            label: \"Por encargo\",\n                            value: \"por encargo\"\n                        }, {\n                            label: \"Agotado\",\n                            value: \"agotado\"\n                        }],\n                        hasDefault: \"por encargo\"\n                    }\n                },\n                detalles_de_estado_en_almacen: {\n                    attributes: {\n                        isType: \"text\",\n                        hasMultipleRows: true,\n                        hasOptionConditions: [[\n                            [\"estado\", \"=\", \"en almacen\"]\n                        ]],\n                        hasDefault: \"\"\n                    }\n                },\n                detalles_de_estado_por_encargo: {\n                    attributes: {\n                        isType: \"text\",\n                        hasMultipleRows: true,\n                        hasOptionConditions: [[\n                            [\"estado\", \"=\", \"por encargo\"]\n                        ]],\n                        hasDefault: \"\"\n                    }\n                },\n                detalles_de_estado_agotado: {\n                    attributes: {\n                        isType: \"text\",\n                        hasMultipleRows: true,\n                        hasOptionConditions: [[\n                            [\"estado\", \"=\", \"agotado\"]\n                        ]],\n                        hasDefault: \"\"\n                    }\n                },\n                detalles: {\n                    attributes: {\n                        isType: \"text\",\n                        hasMultipleRows: true\n                    }\n                },\n                imagenes: {\n                    attributes: {\n                        isType: \"list\",\n                        isReferenceOf: \"imagenes\"\n                    }\n                }\n            }\n        }.\n\n        ### CARRITOS ###\n        Agrego una tabla llamada \"users\" en proyecto [\"Carritos\", \"Carritos\"] configurada con {\n            attributes: {\n                isExternalizedBy: {\n                    host: \"http://127.0.0.1:9900\",\n                    project: \"Identificacion\",\n                    table: \"users\"\n                }\n            }\n        }.\n        Agrego una tabla llamada \"productos\" en proyecto [\"Carritos\", \"Carritos\"] configurada con {\n            attributes: {\n                isExternalizedBy: {\n                    host: \"http://127.0.0.1:9901\",\n                    project: \"Productos\",\n                    table: \"productos\"\n                }\n            }\n        }.\n        Agrego una tabla llamada \"cupones_prototipo\" en proyecto [\"Carritos\", \"Carritos\"] configurada con {\n            attributes: {},\n            columns: {\n                nombre: {\n                    attributes: {\n                        isType: \"text\",\n                        isUnique: true\n                    }\n                }\n            }\n        }.\n        Agrego una tabla llamada \"cupones\" en proyecto [\"Carritos\", \"Carritos\"] configurada con {\n            attributes: {},\n            columns: {\n                prototipo: {\n                    attributes: {\n                        isType: \"object\",\n                        isReferenceOf: \"cupones_prototipo\"\n                    }\n                }\n            }\n        }.\n        Agrego una tabla llamada \"carritos\" en proyecto [\"Carritos\", \"Carritos\"] configurada con {\n            attributes: {},\n            columns: {\n                propietario: {\n                    attributes: {\n                        isType: \"object\",\n                        isReferenceOf: \"users\",\n                        isUnique: true\n                    }\n                },\n                cupones_asociados: {\n                    attributes: {\n                        isType: \"list\",\n                        isReferenceOf: \"cupones\"\n                    }\n                },\n                productos_de_carrito: {\n                    attributes: {\n                        isType: \"list\",\n                        isReferenceOf: \"productos_de_carrito\"\n                    }\n                }\n            }\n        }.\n        Agrego una tabla llamada \"productos_de_carrito\" en proyecto [\"Carritos\", \"Carritos\"] configurada con {\n            attributes: {},\n            columns: {\n                propietario: {\n                    attributes: {\n                        isType: \"object\",\n                        isReferenceOf: \"users\",\n                        isSelfUserId: true\n                    }\n                },\n                producto: {\n                    attributes: {\n                        isType: \"object\",\n                        isReferenceOf: \"productos\"\n                    }\n                },\n                unidades: {\n                    attributes: {\n                        isType: \"number\",\n                        hasMinimum: 1,\n                        hasDefault: 1\n                    }\n                },\n                comentarios_del_comprador: {\n                    attributes: {\n                        isType: \"text\",\n                        hasMultipleRows: true\n                    }\n                },\n                comentarios_del_vendedor: {\n                    attributes: {\n                        isType: \"text\",\n                        hasMultipleRows: true\n                    }\n                }\n            }\n        }.\n\n        ############\n        # Procesos #\n        ############\n        Agrego un proceso llamado \"restologia.test.org/Correos/enviar-correo\" con ruta \"restologia.test.org/Correos/enviar-correo.js\" en proyectos [[ \"Identificacion\", \"Identificacion\" ]] basado en una función donde retorno { correo: \"enviado\" }.\n\n        #########\n        # Datos #\n        #########\n        Agrego datos en proyecto [\"Identificacion\", \"Identificacion\"] en tabla \"users\" a partir de require(__dirname + \"/red_dos_data/users.json\").\n        Agrego datos en proyecto [\"Identificacion\", \"Identificacion\"] en tabla \"groups\" a partir de require(__dirname + \"/red_dos_data/groups.json\").\n        Agrego datos en proyecto [\"Identificacion\", \"Identificacion\"] en tabla \"privileges\" a partir de require(__dirname + \"/red_dos_data/privileges.json\").\n        Agrego datos en proyecto [\"Proveedores\", \"Proveedores\"] en tabla \"proveedores\" a partir de require(__dirname + \"/red_dos_data/proveedores.json\").\n        Agrego datos en proyecto [\"Productos\", \"Productos\"] en tabla \"productos\" a partir de require(__dirname + \"/red_dos_data/productos.json\").\n        Agrego datos en proyecto [\"Productos\", \"Productos\"] en tabla \"imagenes\" a partir de require(__dirname + \"/red_dos_data/imagenes.json\").\n        Agrego datos en proyecto [\"Carritos\", \"Carritos\"] en tabla \"carritos\" a partir de require(__dirname + \"/red_dos_data/carritos.json\").\n        Agrego datos en proyecto [\"Carritos\", \"Carritos\"] en tabla \"productos_de_carrito\" a partir de require(__dirname + \"/red_dos_data/productos_de_carrito.json\").\n\n    } en errores {\n        \n        Imprimo error.\n        Lanzo error.\n    }.\n}.";
fs.writeFileSync(node_160, node_contents_160, "utf8");

const node_161 = path.resolve(baseDirectory, ".", "test", "network", "ejemplo.calo");
const node_contents_161 = "Importo API nativa.\n\nCreo red como una red de servidores HTTP REST automáticos en ruta __dirname + \"/red_dos_prototipo\" donde {\n\n    ###################\n    # Configuraciones #\n    ###################\n    Establezco configuración con {\n        Propiedad directorioBase como __dirname + \"/red_dos\".\n    }.\n    \n    ##############\n    # Servidores #\n    ##############\n    Instalo un servidor en \"./identificacion\" configurado con {\n        Propiedad SERVER_ID como \"Identificacion\".\n        Propiedad SERVER_PORT como 9900.\n        Propiedad ADMINISTRATOR_USER como \"superadmin\".\n        Propiedad ADMINISTRATOR_PASSWORD como \"superadmin.123456\".\n    }.\n    Instalo un servidor en \"./productos\" configurado con {\n        Propiedad SERVER_ID como \"Productos\".\n        Propiedad SERVER_PORT como 9901.\n    }.\n    Instalo un servidor en \"./carritos\" configurado con {\n        Propiedad SERVER_ID como \"Carritos\".\n        Propiedad SERVER_PORT como 9902.\n    }.\n\n    #############\n    # Ejecución #\n    #############\n    Inicio servidores [ [\"Identificacion\"], [\"Productos\"], [\"Carritos\"] ].\n\n    #############\n    # Proyectos #\n    #############\n    Agrego un proyecto llamado \"Identificacion\" en servidor [\"Identificacion\"] autentificado por sí mismo configurado con {\n        Propiedad administrator_name como \"auth_admin\".\n        Propiedad administrator_password como \"auth_admin\".\n        Propiedad administrator_email como \"auth_admin@email.com\".\n    }.\n    Agrego un proyecto llamado \"Productos\" en servidor [\"Productos\"] autentificado por proyecto [\"Identificacion\", \"Identificacion\"] configurado con {}.\n    Agrego un proyecto llamado \"Carritos\" en servidor [\"Carritos\"] autentificado por proyecto [\"Identificacion\", \"Identificacion\"] configurado con {}.\n\n    ##########\n    # Tablas #\n    ##########\n    Agrego una tabla llamada \"correos\" en proyecto [\"Identificacion\", \"Identificacion\"] configurada con {\n        Propiedad attributes como {}.\n        Propiedad columns como {\n            Propiedad nombre como {\n                Propiedad attributes como {}.\n            }.\n            Propiedad en_origen como {\n                Propiedad attributes como {}.\n            }.\n            Propiedad en_destino como {\n                Propiedad attributes como {}.\n            }.\n            Propiedad en_copia como {\n                Propiedad attributes como {}.\n            }.\n        }.\n    }.\n\n    ############\n    # Procesos #\n    ############\n    Agrego un proceso llamado \"restologia.test.org/Correos/enviar-correo\"\n        con ruta \"restologia.test.org/Correos/enviar-correo.js\"\n        en proyectos [[ \"Identificacion\", \"Identificacion\" ]]\n        basado en una función donde retorno { correo: \"enviado\" }.\n\n} en errores lanzo error.";
fs.writeFileSync(node_161, node_contents_161, "utf8");

const node_162 = path.resolve(baseDirectory, ".", "test", "network", "red_dos");
fs.mkdirSync(node_162);

const node_163 = path.resolve(baseDirectory, ".", "test", "network", "red_dos_data");
fs.mkdirSync(node_163);

const node_164 = path.resolve(baseDirectory, ".", "test", "network", "red_dos_data", "carritos.json");
const node_contents_164 = "[]";
fs.writeFileSync(node_164, node_contents_164, "utf8");

const node_165 = path.resolve(baseDirectory, ".", "test", "network", "red_dos_data", "groups.json");
const node_contents_165 = "[]";
fs.writeFileSync(node_165, node_contents_165, "utf8");

const node_166 = path.resolve(baseDirectory, ".", "test", "network", "red_dos_data", "imagenes.json");
const node_contents_166 = "[{\n    \"id\": 1,\n    \"titulo\": \"Imagen 1\",\n    \"imagen\": \"./data/projects/Productos/files/file-column.on-00000000000000.000.column-imagenes_de_producto.uid-Xxxxxxxx00.as-nodejs.png\",\n    \"detalles\": \"\"\n}, {\n    \"id\": 2,\n    \"titulo\": \"Imagen 2\",\n    \"imagen\": \"./data/projects/Productos/files/file-column.on-00000000000000.000.column-imagenes_de_producto.uid-Xxxxxxxx00.as-nodejs.png\",\n    \"detalles\": \"\"\n}, {\n    \"id\": 3,\n    \"titulo\": \"Imagen 3\",\n    \"imagen\": \"./data/projects/Productos/files/file-column.on-00000000000000.000.column-imagenes_de_producto.uid-Xxxxxxxx00.as-nodejs.png\",\n    \"detalles\": \"\"\n}, {\n    \"id\": 4,\n    \"titulo\": \"Imagen 4\",\n    \"imagen\": \"./data/projects/Productos/files/file-column.on-00000000000000.000.column-imagenes_de_producto.uid-Xxxxxxxx00.as-nodejs.png\",\n    \"detalles\": \"\"\n}, {\n    \"id\": 5,\n    \"titulo\": \"Imagen 5\",\n    \"imagen\": \"./data/projects/Productos/files/file-column.on-00000000000000.000.column-imagenes_de_producto.uid-Xxxxxxxx00.as-nodejs.png\",\n    \"detalles\": \"\"\n}, {\n    \"id\": 6,\n    \"titulo\": \"Imagen 6\",\n    \"imagen\": \"./data/projects/Productos/files/file-column.on-00000000000000.000.column-imagenes_de_producto.uid-Xxxxxxxx00.as-nodejs.png\",\n    \"detalles\": \"\"\n}, {\n    \"id\": 7,\n    \"titulo\": \"Imagen 7\",\n    \"imagen\": \"./data/projects/Productos/files/file-column.on-00000000000000.000.column-imagenes_de_producto.uid-Xxxxxxxx00.as-nodejs.png\",\n    \"detalles\": \"\"\n}, {\n    \"id\": 8,\n    \"titulo\": \"Imagen 8\",\n    \"imagen\": \"./data/projects/Productos/files/file-column.on-00000000000000.000.column-imagenes_de_producto.uid-Xxxxxxxx00.as-nodejs.png\",\n    \"detalles\": \"\"\n}, {\n    \"id\": 9,\n    \"titulo\": \"Imagen 9\",\n    \"imagen\": \"./data/projects/Productos/files/file-column.on-00000000000000.000.column-imagenes_de_producto.uid-Xxxxxxxx00.as-nodejs.png\",\n    \"detalles\": \"\"\n}, {\n    \"id\": 10,\n    \"titulo\": \"Imagen 10\",\n    \"imagen\": \"./data/projects/Productos/files/file-column.on-00000000000000.000.column-imagenes_de_producto.uid-Xxxxxxxx00.as-nodejs.png\",\n    \"detalles\": \"\"\n}, {\n    \"id\": 11,\n    \"titulo\": \"Imagen 11\",\n    \"imagen\": \"./data/projects/Productos/files/file-column.on-00000000000000.000.column-imagenes_de_producto.uid-Xxxxxxxx00.as-nodejs.png\",\n    \"detalles\": \"\"\n}, {\n    \"id\": 12,\n    \"titulo\": \"Imagen 12\",\n    \"imagen\": \"./data/projects/Productos/files/file-column.on-00000000000000.000.column-imagenes_de_producto.uid-Xxxxxxxx00.as-nodejs.png\",\n    \"detalles\": \"\"\n}, {\n    \"id\": 13,\n    \"titulo\": \"Imagen 13\",\n    \"imagen\": \"./data/projects/Productos/files/file-column.on-00000000000000.000.column-imagenes_de_producto.uid-Xxxxxxxx00.as-nodejs.png\",\n    \"detalles\": \"\"\n}, {\n    \"id\": 14,\n    \"titulo\": \"Imagen 14\",\n    \"imagen\": \"./data/projects/Productos/files/file-column.on-00000000000000.000.column-imagenes_de_producto.uid-Xxxxxxxx00.as-nodejs.png\",\n    \"detalles\": \"\"\n}, {\n    \"id\": 15,\n    \"titulo\": \"Imagen 15\",\n    \"imagen\": \"./data/projects/Productos/files/file-column.on-00000000000000.000.column-imagenes_de_producto.uid-Xxxxxxxx00.as-nodejs.png\",\n    \"detalles\": \"\"\n}, {\n    \"id\": 16,\n    \"titulo\": \"Imagen 16\",\n    \"imagen\": \"./data/projects/Productos/files/file-column.on-00000000000000.000.column-imagenes_de_producto.uid-Xxxxxxxx00.as-nodejs.png\",\n    \"detalles\": \"\"\n}, {\n    \"id\": 17,\n    \"titulo\": \"Imagen 17\",\n    \"imagen\": \"./data/projects/Productos/files/file-column.on-00000000000000.000.column-imagenes_de_producto.uid-Xxxxxxxx00.as-nodejs.png\",\n    \"detalles\": \"\"\n}, {\n    \"id\": 18,\n    \"titulo\": \"Imagen 18\",\n    \"imagen\": \"./data/projects/Productos/files/file-column.on-00000000000000.000.column-imagenes_de_producto.uid-Xxxxxxxx00.as-nodejs.png\",\n    \"detalles\": \"\"\n}, {\n    \"id\": 19,\n    \"titulo\": \"Imagen 19\",\n    \"imagen\": \"./data/projects/Productos/files/file-column.on-00000000000000.000.column-imagenes_de_producto.uid-Xxxxxxxx00.as-nodejs.png\",\n    \"detalles\": \"\"\n}, {\n    \"id\": 20,\n    \"titulo\": \"Imagen 20\",\n    \"imagen\": \"./data/projects/Productos/files/file-column.on-00000000000000.000.column-imagenes_de_producto.uid-Xxxxxxxx00.as-nodejs.png\",\n    \"detalles\": \"\"\n}, {\n    \"id\": 21,\n    \"titulo\": \"Imagen 21\",\n    \"imagen\": \"./data/projects/Productos/files/file-column.on-00000000000000.000.column-imagenes_de_producto.uid-Xxxxxxxx00.as-nodejs.png\",\n    \"detalles\": \"\"\n}]";
fs.writeFileSync(node_166, node_contents_166, "utf8");

const node_167 = path.resolve(baseDirectory, ".", "test", "network", "red_dos_data", "ok copy.calo");
const node_contents_167 = "";
fs.writeFileSync(node_167, node_contents_167, "utf8");

const node_168 = path.resolve(baseDirectory, ".", "test", "network", "red_dos_data", "ok.calo");
const node_contents_168 = "Asigno module.exports como una superquery con esquema Vue.prototype.$rest.schema con cliente Vue.prototype.$rest.client donde {\n    Creo usuarios como ~ una query que selecciona a \"users\" cuyo \"name\" | es igual que | \"auth_admin\".\n    Creo carritos como ~ una query que selecciona a \"carritos\" cuyo \"propietario\" | está contenido en | usuarios siendo \n      @aplanado { por: \"id\" }\n      @@[true, \"aplanado\", { por: \"id\" }]\n      @@@[\n        [false, \"expandido\", { modo: \"ids\", ruta: \"*\", datos: productos_de_carrito }],\n        [false, \"expandido\", { modo: \"ids\", ruta: \"*/carrito\", datos: carritos }]\n      ].\n    Creo cupones como ~ una query que selecciona a \"cupones\" cuyo \"id\" | está contenido en | carritos siendo @aplanado { por: \"cupones_asociados\", en: 0 }.\n    Creo cupones_prototipo como ~ una query que selecciona a \"cupones_prototipo\" cuyo \"id\" | está contenido en | cupones siendo @aplanado { por: \"prototipo\" }.\n    Creo productos_de_carrito como ~ una query que selecciona a \"productos_de_carrito\" cuyo \"carrito\" | está contenido en | carritos siendo @aplanado { por: \"id\" }.\n    Creo productos como ~ una query que selecciona a \"productos\" cuyo \"carrito\" | está contenido en | productos_de_carrito siendo @aplanado { por: \"productos\" }.\n    Creo imagenes como ~ una query que selecciona a \"imagenes\" cuyo \"id\" | está contenido en | productos siendo @aplanado { por: \"imagenes\" }.\n    Hago x siendo \n      ~ @binario([0,1],[0,1],[0,1],[0,1])\n        @@[true, 'binario',[0,1,1],[1,0,0]]\n        @@@[[true, 'binario',[0,1,0,0],[1,1,0,0]]].\n    Retorno productos_de_carrito siendo @expandido [\n      { modo: \"ids\", ruta: \"*\", datos: productos_de_carrito },\n      { modo: \"ids\", ruta: \"*/carrito\", datos: carritos },\n      { modo: \"ids\", ruta: \"*/carrito/cupones_asociados/*\", datos: cupones },\n      { modo: \"ids\", ruta: \"*/carrito/cupones_asociados/*/prototipo\", datos: cupones_prototipo },\n      { modo: \"ids\", ruta: \"*/productos/*\", datos: productos_de_carritos },\n      { modo: \"ids\", ruta: \"*/productos/*/producto\", datos: productos },\n      { modo: \"ids\", ruta: \"*/productos/*/producto/imagenes/*\", datos: imagenes }\n    ].\n}.\nCreo subitems_ids como base siendo {\n  @forzado {a:[\"app\", \"author\"],ser:\"allnulled\"}\n  @accedido {por:[\"datos\",\"items\"],defecto:[]}\n  @mapeado {por: una función con (item) donde retorno item.subitems}\n  @aplanado {niveles:1}\n  @deduplicado\n  @comprobado {para:[\"app\",\"author\"], que: item es tipo texto}\n}.\nSi estoy en entorno de \"testing\" {\n  Hago un test llamado \"Test de superquery\" donde {\n    Compruebo que 5 es igual que 5 lanzando un nuevo Error(\"Nunca debe ocurrir esto\").\n  } en errores lanzo error.\n  Hago un test llamado \"Test de query\" donde {\n    Compruebo que 5 es igual que 5 lanzando un nuevo Error(\"Nunca debe ocurrir esto\").\n  } en errores lanzo error.\n  Hago un test llamado \"Test unitario\" donde {\n    Compruebo que 5 es igual que 5 lanzando un nuevo Error(\"Nunca debe ocurrir esto\").\n  } en errores lanzo error.\n  Hago un testeo que en menos de 5 segundos pase [ \"Test de superquery\", \"Test de query\", \"Test unitario\" ] en errores lanzo error.\n}.\n\nHago (un servidor http a partir de un servidor de websockets configurado con { port: 9050 } donde {\n  Añado evento \"mensaje enviado\" como una función donde retorno 500.\n  Añado evento \"mensaje recibido\" como una función donde retorno 600.\n  Añado evento \"apagar aplicación\" como una función donde retorno 400.\n}).listen(8081).\n\n\n\n\nDefino una forma de ser llamada \"sanitizado\" como una función con (input) donde {\n  Retorno input.\n},\n\nImprimo \"Un mensaje\".\n\nHago un cliente web de websockets configurado con {} desde una función con (cliente) donde {\n  Añado evento \"connect\" en cliente cliente como una función con (websocket) donde {\n    Añado evento \"mensaje_enviado\" en socket websocket como una función donde retorno 700.\n    Añado evento \"mensaje_recibido\" en socket websocket como una función donde retorno 700.\n    Añado evento \"mensaje_leido\" en socket websocket como una función donde retorno 700.\n  }.\n  Añado evento websocket \"disconnect\" en websocket como una función donde {\n    \n  }.\n}.\n\nCreo clienteNode como un cliente node.js de websockets configurado con {} donde {\n\n}.\n\n";
fs.writeFileSync(node_168, node_contents_168, "utf8");

const node_169 = path.resolve(baseDirectory, ".", "test", "network", "red_dos_data", "okk.calo");
const node_contents_169 = "importo api nativa.\n\nhago un hecho ~ donde {\n    creo raiz como __dirname + \"/raiz\".\n    elimino ~ recursivamente directorio raiz.\n    genero ~ directorio raiz.\n    genero ~ directorio raiz + \"/src\".\n    genero ~ directorio raiz + \"/test\".\n    inicio ~ proyecto npm desde directorio raiz con {\n        propiedad name como \"proyecto-okk\".\n        propiedad version como \"1.0.2\".\n        propiedad dependencies como {\n            propiedad \"websocket\" como \"^1.0.2\".\n        }.\n        propiedad main como \"./main.js\".\n        propiedad scripts como {\n            propiedad [\"build:calo\"] como \"calo ./main.calo test/test.calo\".\n            propiedad [\"test\"] como \"node test/test.js\".\n        }.\n        propiedad license como \"wtfpl\".\n    }.\n    hago ~ una espera de 1 segundos.\n    genero ~ fichero raiz + \"/main.js\" con contenido un código en js donde {\n        exporto como módulo es5 un módulo es5 importado de ruta __dirname + \"/src/index.js\".\n    }.\n    genero ~ fichero raiz + \"/src/index.js\" con contenido un código en js donde {\n        exporto como módulo es5 una promesa con (dato) donde {\n            #\n        }.\n    }.\n    genero ~ fichero raiz + \"/test/test.js\" con contenido un código en js donde {\n        importo api nativa.\n        imprimo un hecho ~ donde {\n            hago un testeo que en menos de 4 segundos pase [\"Test inicial\", \"Test final\"].\n            hago ~ un test llamado \"Test inicial\" donde {\n                @POR-OK!\n            }.\n            hago ~ un test llamado \"Test final\" donde {\n                @POR-OK!\n            }.\n        }.\n    }.\n    ejecuto ~ comando de consola \"npm install\" desde directorio raiz.\n    ejecuto ~ comando de consola \"npm run test\" desde directorio raiz.\n    retorno \"¡Despliegue exitoso!\".\n} en errores imprimo error.";
fs.writeFileSync(node_169, node_contents_169, "utf8");

const node_170 = path.resolve(baseDirectory, ".", "test", "network", "red_dos_data", "okkk.calo");
const node_contents_170 = "Importo API nativa.\nAsigno una global llamada \"entorno\" como \"testing\".\nCreo incr como una función con (parametro) donde retorno parametro + 1.\nSi estoy en entorno de \"testing\" hago un hecho ~ donde {\n    Hago un testeo que en menos de 4 segundos pase [ \"Test inicio\" ].\n    Hago ~ un test llamado \"Test inicio\" donde {\n        Compruebo que incr(50) es igual que 51 lanzando un nuevo Error(\"Función incr no suma 1 (1)\").\n        Compruebo que incr(100) es igual que 101 lanzando un nuevo Error(\"Función incr no suma 1 (2)\").\n        Compruebo que incr(\"ok\") es igual que \"ok1\" lanzando un nuevo Error(\"Función incr no suma 1 (3)\").\n    }.\n}.\nImprimo un código en texto donde defino x como {} siendo @escameado { ohh: \"pam\" } @turguntuleado {} @obliviantado {}.\nImprimo un código en js donde defino x como {} siendo @escameadillo @pardealidillo.\nImprimo un código en texto donde defino x como {} siendo @escameado { ohh: \"pam\" } @turguntuleado {} @obliviantado {}.";
fs.writeFileSync(node_170, node_contents_170, "utf8");

const node_171 = path.resolve(baseDirectory, ".", "test", "network", "red_dos_data", "okkkk.calo");
const node_contents_171 = "En proceso X {\n    Redefino una global llamada \"entorno\" como \"testing\".\n    Defino constante incr como una función con (parametro) donde retorno parametro + 1.\n    Si estoy en entorno de \"testing\" hago un hecho ~ donde {\n        Hago un testeo que en menos de 4 segundos pase [ \"Test inicio\" ].\n        Hago ~ un test llamado \"Test inicio\" donde {\n            Compruebo que incr(50) es igual que 51 lanzando un nuevo Error(\"Función incr no suma 1 (1)\").\n            Compruebo que incr(100) es igual que 101 lanzando un nuevo Error(\"Función incr no suma 1 (2)\").\n            Compruebo que incr(\"ok\") es igual que \"ok1\" lanzando un nuevo Error(\"Función incr no suma 1 (3)\").\n        }.\n    }.\n}.";
fs.writeFileSync(node_171, node_contents_171, "utf8");

const node_172 = path.resolve(baseDirectory, ".", "test", "network", "red_dos_data", "privileges.json");
const node_contents_172 = "[]";
fs.writeFileSync(node_172, node_contents_172, "utf8");

const node_173 = path.resolve(baseDirectory, ".", "test", "network", "red_dos_data", "productos.json");
const node_contents_173 = "[{\n    \"id\": 1,\n    \"nombre\": \"Producto 1\",\n    \"detalles\": \"El mismísimo Producto 1.\",\n    \"precio\": 501,\n    \"moneda_de_precio\": \"euros\",\n    \"caracteristicas_tecnicas\": \"...\",\n    \"estado\": \"en almacen\",\n    \"detalles_de_estado_en_almacen\": \"\",\n    \"detalles_de_estado_agotado\": \"\",\n    \"detalles_de_estado_por_encargo\": \"\",\n    \"imagenes_de_producto\": [1,2,3]\n}, {\n    \"id\": 2,\n    \"nombre\": \"Producto 2\",\n    \"detalles\": \"El mismísimo Producto 2.\",\n    \"precio\": 502,\n    \"moneda_de_precio\": \"euros\",\n    \"caracteristicas_tecnicas\": \"...\",\n    \"estado\": \"en almacen\",\n    \"detalles_de_estado_en_almacen\": \"\",\n    \"detalles_de_estado_agotado\": \"\",\n    \"detalles_de_estado_por_encargo\": \"\",\n    \"imagenes_de_producto\": [4,5]\n}, {\n    \"id\": 3,\n    \"nombre\": \"Producto 3\",\n    \"detalles\": \"El mismísimo Producto 3.\",\n    \"precio\": 503,\n    \"moneda_de_precio\": \"euros\",\n    \"caracteristicas_tecnicas\": \"...\",\n    \"estado\": \"en almacen\",\n    \"detalles_de_estado_en_almacen\": \"\",\n    \"detalles_de_estado_agotado\": \"\",\n    \"detalles_de_estado_por_encargo\": \"\",\n    \"imagenes_de_producto\": [6,7]\n}, {\n    \"id\": 4,\n    \"nombre\": \"Producto 4\",\n    \"detalles\": \"El mismísimo Producto 4.\",\n    \"precio\": 504,\n    \"moneda_de_precio\": \"euros\",\n    \"caracteristicas_tecnicas\": \"...\",\n    \"estado\": \"en almacen\",\n    \"detalles_de_estado_en_almacen\": \"\",\n    \"detalles_de_estado_agotado\": \"\",\n    \"detalles_de_estado_por_encargo\": \"\",\n    \"imagenes_de_producto\": [8]\n}, {\n    \"id\": 5,\n    \"nombre\": \"Producto 5\",\n    \"detalles\": \"El mismísimo Producto 5.\",\n    \"precio\": 505,\n    \"moneda_de_precio\": \"euros\",\n    \"caracteristicas_tecnicas\": \"...\",\n    \"estado\": \"en almacen\",\n    \"detalles_de_estado_en_almacen\": \"\",\n    \"detalles_de_estado_agotado\": \"\",\n    \"detalles_de_estado_por_encargo\": \"\",\n    \"imagenes_de_producto\": []\n}, {\n    \"id\": 6,\n    \"nombre\": \"Producto 6\",\n    \"detalles\": \"El mismísimo Producto 6.\",\n    \"precio\": 506,\n    \"moneda_de_precio\": \"euros\",\n    \"caracteristicas_tecnicas\": \"...\",\n    \"estado\": \"en almacen\",\n    \"detalles_de_estado_en_almacen\": \"\",\n    \"detalles_de_estado_agotado\": \"\",\n    \"detalles_de_estado_por_encargo\": \"\",\n    \"imagenes_de_producto\": []\n}, {\n    \"id\": 7,\n    \"nombre\": \"Producto 7\",\n    \"detalles\": \"El mismísimo Producto 7.\",\n    \"precio\": 507,\n    \"moneda_de_precio\": \"euros\",\n    \"caracteristicas_tecnicas\": \"...\",\n    \"estado\": \"en almacen\",\n    \"detalles_de_estado_en_almacen\": \"\",\n    \"detalles_de_estado_agotado\": \"\",\n    \"detalles_de_estado_por_encargo\": \"\",\n    \"imagenes_de_producto\": []\n}, {\n    \"id\": 8,\n    \"nombre\": \"Producto 8\",\n    \"detalles\": \"El mismísimo Producto 8.\",\n    \"precio\": 508,\n    \"moneda_de_precio\": \"euros\",\n    \"caracteristicas_tecnicas\": \"...\",\n    \"estado\": \"en almacen\",\n    \"detalles_de_estado_en_almacen\": \"\",\n    \"detalles_de_estado_agotado\": \"\",\n    \"detalles_de_estado_por_encargo\": \"\",\n    \"imagenes_de_producto\": []\n}, {\n    \"id\": 9,\n    \"nombre\": \"Producto 9\",\n    \"detalles\": \"El mismísimo Producto 9.\",\n    \"precio\": 509,\n    \"moneda_de_precio\": \"euros\",\n    \"caracteristicas_tecnicas\": \"...\",\n    \"estado\": \"en almacen\",\n    \"detalles_de_estado_en_almacen\": \"\",\n    \"detalles_de_estado_agotado\": \"\",\n    \"detalles_de_estado_por_encargo\": \"\",\n    \"imagenes_de_producto\": []\n}, {\n    \"id\": 10,\n    \"nombre\": \"Producto 10\",\n    \"detalles\": \"El mismísimo Producto 10.\",\n    \"precio\": 510,\n    \"moneda_de_precio\": \"euros\",\n    \"caracteristicas_tecnicas\": \"...\",\n    \"estado\": \"en almacen\",\n    \"detalles_de_estado_en_almacen\": \"\",\n    \"detalles_de_estado_agotado\": \"\",\n    \"detalles_de_estado_por_encargo\": \"\",\n    \"imagenes_de_producto\": []\n}, {\n    \"id\": 11,\n    \"nombre\": \"Producto 11\",\n    \"detalles\": \"El mismísimo Producto 11.\",\n    \"precio\": 511,\n    \"moneda_de_precio\": \"euros\",\n    \"caracteristicas_tecnicas\": \"...\",\n    \"estado\": \"en almacen\",\n    \"detalles_de_estado_en_almacen\": \"\",\n    \"detalles_de_estado_agotado\": \"\",\n    \"detalles_de_estado_por_encargo\": \"\",\n    \"imagenes_de_producto\": []\n}, {\n    \"id\": 12,\n    \"nombre\": \"Producto 12\",\n    \"detalles\": \"El mismísimo Producto 12.\",\n    \"precio\": 512,\n    \"moneda_de_precio\": \"euros\",\n    \"caracteristicas_tecnicas\": \"...\",\n    \"estado\": \"en almacen\",\n    \"detalles_de_estado_en_almacen\": \"\",\n    \"detalles_de_estado_agotado\": \"\",\n    \"detalles_de_estado_por_encargo\": \"\",\n    \"imagenes_de_producto\": []\n}, {\n    \"id\": 13,\n    \"nombre\": \"Producto 13\",\n    \"detalles\": \"El mismísimo Producto 13.\",\n    \"precio\": 513,\n    \"moneda_de_precio\": \"euros\",\n    \"caracteristicas_tecnicas\": \"...\",\n    \"estado\": \"en almacen\",\n    \"detalles_de_estado_en_almacen\": \"\",\n    \"detalles_de_estado_agotado\": \"\",\n    \"detalles_de_estado_por_encargo\": \"\",\n    \"imagenes_de_producto\": []\n}, {\n    \"id\": 14,\n    \"nombre\": \"Producto 14\",\n    \"detalles\": \"El mismísimo Producto 14.\",\n    \"precio\": 514,\n    \"moneda_de_precio\": \"euros\",\n    \"caracteristicas_tecnicas\": \"...\",\n    \"estado\": \"en almacen\",\n    \"detalles_de_estado_en_almacen\": \"\",\n    \"detalles_de_estado_agotado\": \"\",\n    \"detalles_de_estado_por_encargo\": \"\",\n    \"imagenes_de_producto\": []\n}, {\n    \"id\": 15,\n    \"nombre\": \"Producto 15\",\n    \"detalles\": \"El mismísimo Producto 15.\",\n    \"precio\": 515,\n    \"moneda_de_precio\": \"euros\",\n    \"caracteristicas_tecnicas\": \"...\",\n    \"estado\": \"en almacen\",\n    \"detalles_de_estado_en_almacen\": \"\",\n    \"detalles_de_estado_agotado\": \"\",\n    \"detalles_de_estado_por_encargo\": \"\",\n    \"imagenes_de_producto\": []\n}, {\n    \"id\": 16,\n    \"nombre\": \"Producto 16\",\n    \"detalles\": \"El mismísimo Producto 16.\",\n    \"precio\": 516,\n    \"moneda_de_precio\": \"euros\",\n    \"caracteristicas_tecnicas\": \"...\",\n    \"estado\": \"en almacen\",\n    \"detalles_de_estado_en_almacen\": \"\",\n    \"detalles_de_estado_agotado\": \"\",\n    \"detalles_de_estado_por_encargo\": \"\",\n    \"imagenes_de_producto\": []\n}, {\n    \"id\": 17,\n    \"nombre\": \"Producto 17\",\n    \"detalles\": \"El mismísimo Producto 17.\",\n    \"precio\": 517,\n    \"moneda_de_precio\": \"euros\",\n    \"caracteristicas_tecnicas\": \"...\",\n    \"estado\": \"en almacen\",\n    \"detalles_de_estado_en_almacen\": \"\",\n    \"detalles_de_estado_agotado\": \"\",\n    \"detalles_de_estado_por_encargo\": \"\",\n    \"imagenes_de_producto\": []\n}, {\n    \"id\": 18,\n    \"nombre\": \"Producto 18\",\n    \"detalles\": \"El mismísimo Producto 18.\",\n    \"precio\": 518,\n    \"moneda_de_precio\": \"euros\",\n    \"caracteristicas_tecnicas\": \"...\",\n    \"estado\": \"en almacen\",\n    \"detalles_de_estado_en_almacen\": \"\",\n    \"detalles_de_estado_agotado\": \"\",\n    \"detalles_de_estado_por_encargo\": \"\",\n    \"imagenes_de_producto\": []\n}, {\n    \"id\": 19,\n    \"nombre\": \"Producto 19\",\n    \"detalles\": \"El mismísimo Producto 19.\",\n    \"precio\": 519,\n    \"moneda_de_precio\": \"euros\",\n    \"caracteristicas_tecnicas\": \"...\",\n    \"estado\": \"en almacen\",\n    \"detalles_de_estado_en_almacen\": \"\",\n    \"detalles_de_estado_agotado\": \"\",\n    \"detalles_de_estado_por_encargo\": \"\",\n    \"imagenes_de_producto\": []\n}, {\n    \"id\": 20,\n    \"nombre\": \"Producto 20\",\n    \"detalles\": \"El mismísimo Producto 20.\",\n    \"precio\": 520,\n    \"moneda_de_precio\": \"euros\",\n    \"caracteristicas_tecnicas\": \"...\",\n    \"estado\": \"en almacen\",\n    \"detalles_de_estado_en_almacen\": \"\",\n    \"detalles_de_estado_agotado\": \"\",\n    \"detalles_de_estado_por_encargo\": \"\",\n    \"imagenes_de_producto\": []\n}, {\n    \"id\": 21,\n    \"nombre\": \"Producto 21\",\n    \"detalles\": \"El mismísimo Producto 21.\",\n    \"precio\": 521,\n    \"moneda_de_precio\": \"euros\",\n    \"caracteristicas_tecnicas\": \"...\",\n    \"estado\": \"en almacen\",\n    \"detalles_de_estado_en_almacen\": \"\",\n    \"detalles_de_estado_agotado\": \"\",\n    \"detalles_de_estado_por_encargo\": \"\",\n    \"imagenes_de_producto\": []\n}]";
fs.writeFileSync(node_173, node_contents_173, "utf8");

const node_174 = path.resolve(baseDirectory, ".", "test", "network", "red_dos_data", "productos_de_carrito.json");
const node_contents_174 = "[]";
fs.writeFileSync(node_174, node_contents_174, "utf8");

const node_175 = path.resolve(baseDirectory, ".", "test", "network", "red_dos_data", "proveedores.json");
const node_contents_175 = "[{\n    \"nombre\": \"Proveedor 1\",\n    \"telefono\": \"601 602 601\",\n    \"cuentas_sociales\": \"proveedor1@proveedor1.com\"\n}, {\n    \"nombre\": \"Proveedor 2\",\n    \"telefono\": \"601 602 602\",\n    \"cuentas_sociales\": \"proveedor2@proveedor2.com\"\n}, {\n    \"nombre\": \"Proveedor 3\",\n    \"telefono\": \"601 602 603\",\n    \"cuentas_sociales\": \"proveedor3@proveedor3.com\"\n}, {\n    \"nombre\": \"Proveedor 4\",\n    \"telefono\": \"601 602 604\",\n    \"cuentas_sociales\": \"proveedor4@proveedor4.com\"\n}, {\n    \"nombre\": \"Proveedor 5\",\n    \"telefono\": \"601 602 605\",\n    \"cuentas_sociales\": \"proveedor5@proveedor5.com\"\n}, {\n    \"nombre\": \"Proveedor 6\",\n    \"telefono\": \"601 602 606\",\n    \"cuentas_sociales\": \"proveedor6@proveedor6.com\"\n}, {\n    \"nombre\": \"Proveedor 7\",\n    \"telefono\": \"601 602 607\",\n    \"cuentas_sociales\": \"proveedor7@proveedor7.com\"\n}]";
fs.writeFileSync(node_175, node_contents_175, "utf8");

const node_176 = path.resolve(baseDirectory, ".", "test", "network", "red_dos_data", "raiz");
fs.mkdirSync(node_176);

const node_177 = path.resolve(baseDirectory, ".", "test", "network", "red_dos_data", "raiz", "package.json");
const node_contents_177 = "{\n    \"name\": \"proyecto-okk\",\n    \"version\": \"1.0.2\",\n    \"description\": \"\",\n    \"main\": \"./main.js\",\n    \"directories\": {\n        \"test\": \"test\"\n    },\n    \"scripts\": {\n        \"build:calo\": \"calo ./main.calo test/test.calo\",\n        \"test\": \"node test/test.js\"\n    },\n    \"keywords\": [],\n    \"author\": \"\",\n    \"license\": \"wtfpl\",\n    \"dependencies\": {\n        \"websocket\": \"^1.0.2\"\n    }\n}";
fs.writeFileSync(node_177, node_contents_177, "utf8");

const node_178 = path.resolve(baseDirectory, ".", "test", "network", "red_dos_data", "raiz", "src");
fs.mkdirSync(node_178);

const node_179 = path.resolve(baseDirectory, ".", "test", "network", "red_dos_data", "raiz", "test");
fs.mkdirSync(node_179);

const node_180 = path.resolve(baseDirectory, ".", "test", "network", "red_dos_data", "roots");
fs.mkdirSync(node_180);

const node_181 = path.resolve(baseDirectory, ".", "test", "network", "red_dos_data", "roots", "carritos");
fs.mkdirSync(node_181);

const node_182 = path.resolve(baseDirectory, ".", "test", "network", "red_dos_data", "roots", "carritos", "README.md");
const node_contents_182 = "# Subservidor `carritos` - *Carritos*";
fs.writeFileSync(node_182, node_contents_182, "utf8");

const node_183 = path.resolve(baseDirectory, ".", "test", "network", "red_dos_data", "roots", "carritos", "carritos");
fs.mkdirSync(node_183);

const node_184 = path.resolve(baseDirectory, ".", "test", "network", "red_dos_data", "roots", "carritos", "carritos", "README.md");
const node_contents_184 = "# Subproyecto `carritos` - *Carritos@Carritos*";
fs.writeFileSync(node_184, node_contents_184, "utf8");

const node_185 = path.resolve(baseDirectory, ".", "test", "network", "red_dos_data", "roots", "identificacion");
fs.mkdirSync(node_185);

const node_186 = path.resolve(baseDirectory, ".", "test", "network", "red_dos_data", "roots", "identificacion", "README.md");
const node_contents_186 = "# Subservidor `identificacion` - *Identificacion*";
fs.writeFileSync(node_186, node_contents_186, "utf8");

const node_187 = path.resolve(baseDirectory, ".", "test", "network", "red_dos_data", "roots", "identificacion", "identificacion");
fs.mkdirSync(node_187);

const node_188 = path.resolve(baseDirectory, ".", "test", "network", "red_dos_data", "roots", "identificacion", "identificacion", "README.md");
const node_contents_188 = "# Subproyecto `identificacion` - *Identificacion@Identificacion*";
fs.writeFileSync(node_188, node_contents_188, "utf8");

const node_189 = path.resolve(baseDirectory, ".", "test", "network", "red_dos_data", "roots", "productos");
fs.mkdirSync(node_189);

const node_190 = path.resolve(baseDirectory, ".", "test", "network", "red_dos_data", "roots", "productos", "README.md");
const node_contents_190 = "# Subservidor `productos` - *Productos*";
fs.writeFileSync(node_190, node_contents_190, "utf8");

const node_191 = path.resolve(baseDirectory, ".", "test", "network", "red_dos_data", "roots", "productos", "productos");
fs.mkdirSync(node_191);

const node_192 = path.resolve(baseDirectory, ".", "test", "network", "red_dos_data", "roots", "productos", "productos", "README.md");
const node_contents_192 = "# Subproyecto `productos` - *Productos@Productos*";
fs.writeFileSync(node_192, node_contents_192, "utf8");

const node_193 = path.resolve(baseDirectory, ".", "test", "network", "red_dos_data", "roots", "productos", "productos", "files");
fs.mkdirSync(node_193);

const node_194 = path.resolve(baseDirectory, ".", "test", "network", "red_dos_data", "roots", "productos", "productos", "files", "nodejs.png");
const node_contents_194 = "�PNG\r\n\u001a\n\u0000\u0000\u0000\rIHDR\u0000\u0000\u0002\u0000\u0000\u0000\u0002\u0000\b\u0003\u0000\u0000\u0000æ$�\u0000\u0000\u0000\u0003sBIT\b\b\b��O�\u0000\u0000\u0000\u001bPLTEGpL\"�]$�^%�_\"�]\"�](�c\"�]#�]c߰�\u0000\u0000\u0000\btRNS\u0000|O,��\u0013�\u001a��\u0015\u0000\u0000\u000e\\IDATx����z�:\u0012�������\u0004;ǉ�*�4�\u0001����՝l\u0002�*�\f��\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�p��r_��[��2ͭ\u000f\u0006�M�����~�Z\u001f\u0012���>-\f\u0003\u0017��;F�+�\u0016��[��G�������\u000bP\u0007NmZ���\nP\u0007Nk֊��\n�>N\u001c�W��1\u00158�[x���T�lԥ�Z\u0007�\n��l\u001e��L\u0005�b\u000b,�4w�\u0002�`X�i�\u000e�ϸ��0\u0015\u0018�}�aI8�����%�2��;��#�,��X\u0012��X��i�u\b�\n��vU��m��T`\u001c�����8\\�$\u001c����v9m\u0013\u0006��\u00030�}?z|Ƣ�T�s����:�&\u0007\u001d�\u001b�Sj\u0007:b]��\u00170v���\u0014Y�E�\u001f�\u0011[�\u000fx�\u00114P�~_���)��-5���\u0003�6��q\u001c3s�;<����Ʃ\u0000u��c�w�]E�q�\u0015�;ܵ\u001a�5��ݪհ�;ܧ��4����۩�;ܙ��Z��\u001di�y�;܋f\u0015��@\u000fZ���\u000e7�zUNw��\u001e�rt�����[SH\u001d(���X�:tI}�b�\u000e����9,\tk�\u0007�אtj�\u0014�1��dz���82�M��vx�0����6��\u0003���f*p�q:n�\u000e%u �Pgu��\u000ec�oݬS���9�\u0011gV��W��]�צ�\u0015�0����3m��؋*�µף�@�}_\u001b�\u00029NQE�\u000e�\u001am�aI�f:�i�E��o!k�4����3-eV��/˰�y�g\t4\tx1�����;�T`\u001deD;���w���1L\u0005�\u000f[�b\u000e�j\nO\u0005���\u001e.4X���U�;<f�˚��h��i�;L\u0011����a�~�@wx�ѭ\u0018�\u00000��O��\u000e3\u0004x��і~\u001a�p�\u0011.���\u0018����,\tO�W&Q+������$�z\rP\u0016J�(��%a��j�Y\u001e�R��)S��E=��8�l���\u0003�\f��㔜�*�f<\u0017�\u0005^�#��;\u0001�RQtL\u0003\b\u0000\u0001�2\u0002@\u0000\b���\u0018�m���\u001f�4ͅV�\u0004@�*\u0000�t[�Z�v�/�Y�\f\u0002\u0001��\t�|[lϥ.��u*\u0001��\u0006�{���<no����o�\u0007I\u0000��\u0001��U�}�0�\u001e撿;�Fe\u0002 \u0015\f�������lOs:%ܭJ\u0000��\u0001p5�\u0003�(���$\u0000R�\u0000��/���˟\u0010\u0001\u0002 5\f��)ޠ�{W\b��.\u0000IS?��KH\u0000�V\u0001(���?�O\u0000�F\u0001�mFff~қ\u0000Hm\u0002`ۏ�\u0004\u0010\u0000�I\u0000�_�Q\u0013\u0000)�T~2\u0007���o\u001c\u0003\b��8�G\u0007�c\\�i�\u000f\u0002 9���\u0001�J������L\u0000$ǉ<8\u0000���\t��\u0000H��xl\u0000\u0002�Qd\t\u001f9\u0001��N��-\u0000�\u0002p_��}`?n�ۢ�(����c$\u0000R�\u0000�W\u0000��>�\\n��%���7C\u0004@�\u001d\u0000�\u0007y5����\u001eYC?O\u0000��\u0001�\u0007\u0000��\u001d�{\bB��\u0000H�\u0003�}~���w\u000b�\u0002\b�T7\u0000�v�\"���{I� \u0011\u0000�n\u0000�\n\u0010�u������9\u0002 �\r���%mڬ$ 0\r$\u0000R�\u0000�G�\u0007=�%���\u0011\u0000�j\u0000�S��\u001dI�y��\u0006\u0010\u0000�j\u0000�m��'��\u0013\n\r \u0000R�\u0000�/Y򱻋�wBA\u0000��\u0001p�����r��;�\u0010\u0000�}\u0000\u0002\u000b7\u001f�\u0010འ\u0004@�\u001a\u0000��-#\u0000�!���\b��>\u00009\u0017��\u0010�\u0014\u0002 �\u000f@�\b����?@\u0000\u0006\u000e��\u0006��\u0001\u0004@�\u001a\u0000�$0�\u001d�����;~\u0002 �\u000f@�ִ�u\u0000\u0001��A\u0000r6�v�F�B\u0000��\u0001P�\b.:\r�?!D\u0000��\u0001P�\u0007�ؘl��w&���\t�T5\u0000�-��^NK\u0000��\u0001��қ��_\u0014\u0002 �\r�������\u0013l\u0010\u0001��\u0006@�\u0004��=\u001aR\u0000\u0001��\u0006��`؞�������\b�T9\u00001{C�ۃ�f��\b�T9\u0000�Gü9�}\u0001\u0007�\u001d���aʌ\u0007\u0004@�\u001d\u0000�,@�A^\f\b�T=\u0000%6��'�i5�\u0000H�\u0003�y�32\u0005KB�\u0000H�\u0003Pr��5��1\u0004@j\u0010���D�KL\u0006\b��\"\u0000�7\n�x{\f\u0001��\u0004��<���m\"\u0001��\u0004��n�{\u0004L�\u0000\u0001�\u001a\u0005@��!��J\u0012\u0000�q\"+�1d*�e���\"\u0002 �\u000b�\u0011u�}\u0002��\f�\u0001�@�j\u0012\u0000�m\u0000�W\u0006��\u0000�DEj\u001d���\u0019���\u0004@� \u0000_�\u001d`���\r\"��\u0011���ߊ����\u001c\u0001�:\n�ü� ou��\u0006\u0010\u0000��\u0000<m�\u0007!1\t�\"@\u0000�>\u0003�򓄸 x�6%\u0000R�\u0001x�*\r�_@\u0000�Q\u0002�}���\u0002}\u0016@\u0000��\u0002�0O�\u0010�[\u0004\u0010\u0000i�\u0000�f�kC<\u0002\u0001�\u0006\r���y�PV�Y\u0002 �\u001b��a@���\u000e \u0000��\u0001пPV'\u0001\u0004@�\u0018��v[��'��n'��AZ;�\u0000H�\u0002�y#h���>)\u000f\u001ai\u0003\u0001��\u0005��7D�s�\u0007h�\u000b\u0001��\u0005�����\u0010���\u0004��i\u0000rv�}q�\u0002��J\u0000�j\u0001p\u0016�\u0012�D�5�\u0000Hm\u0003Pb!@\u0000��\r@�&��#\u0000Y�\u0005��/\u0015�\u0005:\u0003�$Ъ^\u0000���\u0002�\u0000��%\u0000V�\u0002�����\u0000�ޓ\u0004��^\u0000�\u001d�����\u0015H+ت^\u0000�\u001d���\u001f�\u001a\u001a\u0002 �\u000b���������S\u0000�\u000e6�\u0017\u0000e���Y�{\\Q)\u0001�*\u0006@�}#�\u0019��S��N\u0002 U\f��KlN\u0002�P�u�\u0000H\u0015\u0003�n\u0014��\u0000e�)��D\u0000��\u0001P�\u0006K}�L�'P�}\u0004@�\u0019\u0000}��{� �n/�YY\u0010\u0000�f\u0000���~K�oaA\u0000��\u0001��\u0014�F���y7\u0015��\u001e\u0002 U\r@h��u1�\u000b`�\u0002[ʰ?@��\u0001P��o�7�8_\u0011�����l(;�D�\u001b���F���u5o\u0011འ\u0004@r��C�\f*�C��Ǆ\u0000H�S��;�B\u0002_.\u0011\u0000�q\u000e\u000f~gP��ac\u000e�\u0000H��Pe|8��\u0004��\t\u0004@r�ģ�\u000e>0\u0001l\u0016\u001d�q\u0016\u000f<��\u0004���\u0004@r����\u0007�\u000e�\t��\u0003'\u0000��D�� ��K��\u000f�\u0013\u0000�q&��\u0010R�\fخ#\u0001�Z\u0005�� `x[�\u0003\u0001��\u0005���n���]2\u0001�\u001a\u0006�T\u0004엟\u0000|j\u001a����\u0006qw�\u0010\u0000�q\u0000��\u001b>���D�@\u0000��\u0001x�0&e\u001c�{m�\u0013\u0001�z\b�n6m\u0003����~��\b��K\u0000v��A��6%?PH\u0000��\u0002�4?��Z���~Ǆ��e�]4sG\t\u0002 �\u0017\u0000a�\n�'�B\u0000$�EK}R��f��\u001c\u0015��C��1�J}`{�\u0000�\u001eL��\u0010ksM�\u0012\u0013�\u0000��@�ثp`�{�NJ�\u0001��_?�حt`�\u0003�\t���\u0000h/�h}\\��Oj,ѓ�\u00030k\r�\u0012{U\u000eM����\u0017��\u0000�;\tts��{d��\u0000��=��\u0014 ��\u0012szz\r�V��!o}t����7�T��\u0000������]��]���5ж>�����\u0000�\u0015~\\3���\u0001\b�o�:�]p���mI�\nR�\u0013�-��?����ðk���\u001f�R�D���ި�,\fw內\u0002�_�,\u0000J���o��\u0012��r_f`*�.$���Cx�o��\u000e����N\u0005�\u0003n�\u0017\u0003�3��|�\u0005ӃZ����L�BK?���i�T���<�E\u001f���a�w]�g�6�S��ڏ�_\u0005����L��q���\u001ej�lA����a���?��y³r��V�\u0019���\u000fk>vt\rl�Z��f;��{�.��12�y�m�W�ݎ\u0017c�\n�U�\u0000�c���\u0018�\u0002!�>m�\u0005\f�߬�\u0006>�ڀƥ\u001f�?F��@�\u0001@}u�\u001b��ܩ@�\u0001���Pĝmxɛ\n�\u0018qs��\b3�_�I�p|�}\u000f����i���c��[�m��q�\u000f���}�I����K߷��%��7[���,n*p�����@D\u0004\u000e.��}\u001b1\u0016���]�;�W6?\u001d�r��ۘW����O߷\u0003���){7����}{1�=}׻����vf��M���2����4���������^\u001a}��e\r�\u0014��}��\u0019�!���~:����������\u000f)}���\u000b\u0018Y���\u000e��}�QC5}ߡ)�\u001b��\u0000}ߡy^\u0006l�\u0003,�F\u0016��\u0019>����үO�\u0017�r�}�f\u0019�=c7}���\u001b����*\u0017��\u0002���s�F��\u001cl���ǘ��y�&rou������慄����>�?u���\u0019\u0019���\u0019�?K���j�,�FTl�Y�~�J�_F`�7���e�/?�l�u��?��-G)��X\u0007(���T\u0007���It\u001d��{6Q[O��=!���,�N�X\u0007X����\u000e��;�P\u001d`�wz�[\u0005(����\u0001��U8[����D>>�r��f~�xz�h��Ѡ���N�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00008�L\u000f\u0011�rq\u0016N\u0000\u0000\u0000\u0000IEND�B`�";
fs.writeFileSync(node_194, node_contents_194, "utf8");

const node_195 = path.resolve(baseDirectory, ".", "test", "network", "red_dos_data", "roots", "proveedores");
fs.mkdirSync(node_195);

const node_196 = path.resolve(baseDirectory, ".", "test", "network", "red_dos_data", "roots", "proveedores", "README.md");
const node_contents_196 = "# Subservidor `proveedores` - *Proveedores*";
fs.writeFileSync(node_196, node_contents_196, "utf8");

const node_197 = path.resolve(baseDirectory, ".", "test", "network", "red_dos_data", "roots", "proveedores", "proveedores");
fs.mkdirSync(node_197);

const node_198 = path.resolve(baseDirectory, ".", "test", "network", "red_dos_data", "roots", "proveedores", "proveedores", "README.md");
const node_contents_198 = "# Subproyecto `proveedores` - *Proveedores@Proveedores*";
fs.writeFileSync(node_198, node_contents_198, "utf8");

const node_199 = path.resolve(baseDirectory, ".", "test", "network", "red_dos_data", "roots", "statics");
fs.mkdirSync(node_199);

const node_200 = path.resolve(baseDirectory, ".", "test", "network", "red_dos_data", "roots", "statics", "README.md");
const node_contents_200 = "# Subservidor `statics` ";
fs.writeFileSync(node_200, node_contents_200, "utf8");

const node_201 = path.resolve(baseDirectory, ".", "test", "network", "red_dos_data", "roots", "statics", "components");
fs.mkdirSync(node_201);

const node_202 = path.resolve(baseDirectory, ".", "test", "network", "red_dos_data", "roots", "statics", "components", "ExampleOfComponent.calo");
const node_contents_202 = "# Esto sería un ejemplo de componente";
fs.writeFileSync(node_202, node_contents_202, "utf8");

const node_203 = path.resolve(baseDirectory, ".", "test", "network", "red_dos_data", "users.json");
const node_contents_203 = "[\n    {\n        \"name\": \"usuario_random_1\",\n        \"password\": \"usuario_random_1_password\",\n        \"email\": \"usuario_random_1@email.com\",\n        \"created_at\": \"0000/00/00 00:00:00.000\",\n        \"updated_at\": \"0000/00/00 00:00:00.000\",\n        \"groups\": [],\n        \"privileges\": []\n    },\n    {\n        \"name\": \"usuario_random_2\",\n        \"password\": \"usuario_random_2_password\",\n        \"email\": \"usuario_random_2@email.com\",\n        \"created_at\": \"0000/00/00 00:00:00.000\",\n        \"updated_at\": \"0000/00/00 00:00:00.000\",\n        \"groups\": [],\n        \"privileges\": []\n    },\n    {\n        \"name\": \"usuario_random_3\",\n        \"password\": \"usuario_random_3_password\",\n        \"email\": \"usuario_random_3@email.com\",\n        \"created_at\": \"0000/00/00 00:00:00.000\",\n        \"updated_at\": \"0000/00/00 00:00:00.000\",\n        \"groups\": [],\n        \"privileges\": []\n    },\n    {\n        \"name\": \"usuario_random_4\",\n        \"password\": \"usuario_random_4_password\",\n        \"email\": \"usuario_random_4@email.com\",\n        \"created_at\": \"0000/00/00 00:00:00.000\",\n        \"updated_at\": \"0000/00/00 00:00:00.000\",\n        \"groups\": [],\n        \"privileges\": []\n    },\n    {\n        \"name\": \"usuario_random_5\",\n        \"password\": \"usuario_random_5_password\",\n        \"email\": \"usuario_random_5@email.com\",\n        \"created_at\": \"0000/00/00 00:00:00.000\",\n        \"updated_at\": \"0000/00/00 00:00:00.000\",\n        \"groups\": [],\n        \"privileges\": []\n    },\n    {\n        \"name\": \"usuario_random_6\",\n        \"password\": \"usuario_random_6_password\",\n        \"email\": \"usuario_random_6@email.com\",\n        \"created_at\": \"0000/00/00 00:00:00.000\",\n        \"updated_at\": \"0000/00/00 00:00:00.000\",\n        \"groups\": [],\n        \"privileges\": []\n    }\n]";
fs.writeFileSync(node_203, node_contents_203, "utf8");

const node_204 = path.resolve(baseDirectory, ".", "test", "network", "red_dos_prototipo");
fs.mkdirSync(node_204);

const node_205 = path.resolve(baseDirectory, ".", "test", "network", "red_uno");
fs.mkdirSync(node_205);

const node_206 = path.resolve(baseDirectory, ".", "test", "network.js");
const node_contents_206 = "const main = async function () {\n    const commonData = require(__dirname + \"/utilities.js\");\n    const { tester } = commonData;\n    try {\n        /////////////////////////////////////////////////////////////////////\n        // Start servers network:\n        await require(__dirname + \"/network/001.Deployment.js\")(commonData);\n        await require(__dirname + \"/network/002.Compile-app.js\")(commonData);\n        await require(__dirname + \"/network/003.Endpoints.js\")(commonData);\n        /////////////////////////////////////////////////////////////////////\n        tester.printResults();\n        /////////////////////////////////////////////////////////////////////\n    } catch (error) {\n        tester.printResults();\n        console.log();\n        console.log(\"The error that made tests crash was this one:\");\n        console.log();\n        console.log(error);\n        console.log();\n    }\n};\n\nmain();";
fs.writeFileSync(node_206, node_contents_206, "utf8");

const node_207 = path.resolve(baseDirectory, ".", "test", "pluralith");
fs.mkdirSync(node_207);

const node_208 = path.resolve(baseDirectory, ".", "test", "pluralith", "inrow");
fs.mkdirSync(node_208);

const node_209 = path.resolve(baseDirectory, ".", "test", "pluralith", "inrow", "001.Delete-servers.js");
const node_contents_209 = "module.exports = async function (commonData) {\n    const { requester, utils, tester } = commonData;\n    try {\n\n        tester.startTest(\"Delete servers\");\n\n        try {\n            const authPath = require(\"path\").resolve(__dirname + \"/../../../../servers/auth\");\n            require(\"fs\").rmdirSync(authPath, { recursive: true });\n        } catch(error) {}\n\n        try {\n            const productsPath = require(\"path\").resolve(__dirname + \"/../../../../servers/products\");\n            require(\"fs\").rmdirSync(productsPath, { recursive: true });\n        } catch (error) { }\n\n        try {\n            const chartsPath = require(\"path\").resolve(__dirname + \"/../../../../servers/charts\");\n            require(\"fs\").rmdirSync(chartsPath, { recursive: true });\n        } catch (error) { }\n\n        tester.passTest(\"Delete servers\");\n\n    } catch (error) {\n        tester.failTest(\"Delete servers\");\n        throw error;\n    }\n};\n";
fs.writeFileSync(node_209, node_contents_209, "utf8");

const node_210 = path.resolve(baseDirectory, ".", "test", "pluralith", "inrow", "002.Install-multiple-servers.js");
const node_contents_210 = "module.exports = async function (commonData) {\n    const { requester, utils, tester } = commonData;\n    try {\n\n        tester.startTest(\"Install multiple servers\");\n        \n        const generatorDeProyectos = require(__dirname + \"/../../../generator.js\");\n\n        generatorDeProyectos(__dirname + \"/../../../../servers/auth\");\n        generatorDeProyectos(__dirname + \"/../../../../servers/products\");\n        generatorDeProyectos(__dirname + \"/../../../../servers/charts\");\n\n        if(!utils.check.that(require(\"fs\").existsSync(__dirname + \"/../../../../servers/auth/package.json\")).equals(true)) throw new Error(1);\n        if(!utils.check.that(require(\"fs\").existsSync(__dirname + \"/../../../../servers/products/package.json\")).equals(true)) throw new Error(2);\n        if(!utils.check.that(require(\"fs\").existsSync(__dirname + \"/../../../../servers/charts/package.json\")).equals(true)) throw new Error(3);\n\n        tester.passTest(\"Install multiple servers\");\n\n    } catch (error) {\n        tester.failTest(\"Install multiple servers\");\n        throw error;\n    }\n};\n";
fs.writeFileSync(node_210, node_contents_210, "utf8");

const node_211 = path.resolve(baseDirectory, ".", "test", "pluralith", "inrow", "003.Configure-servers.js");
const node_contents_211 = "module.exports = async function (commonData) {\n    const { requester, utils, tester } = commonData;\n    try {\n\n        tester.startTest(\"Configure servers\");\n\n        const fs = require(\"fs\");\n\n        commonData.serversPath = require(\"path\").resolve(__dirname + \"/../../../../servers\");\n\n        const authSettingsPath = commonData.serversPath + \"/auth/src/security/settings.json\";\n        const productsSettingsPath = commonData.serversPath + \"/products/src/security/settings.json\";\n        const chartsSettingsPath = commonData.serversPath + \"/charts/src/security/settings.json\";\n\n        const authSettings = JSON.parse(fs.readFileSync(authSettingsPath).toString());\n        const productsSettings = JSON.parse(fs.readFileSync(productsSettingsPath).toString());\n        const chartsSettings = JSON.parse(fs.readFileSync(chartsSettingsPath).toString());\n\n        const authSettings2 = Object.assign({}, authSettings, {\n            SERVER_ID: \"Authentication Server\",\n            SERVER_PORT: 9980\n        });\n        const productsSettings2 = Object.assign({}, productsSettings, {\n            SERVER_ID: \"Products Server\",\n            SERVER_PORT: 9981\n        });\n        const chartsSettings2 = Object.assign({}, chartsSettings, {\n            SERVER_ID: \"Charts Server\",\n            SERVER_PORT: 9982\n        });\n\n        require(\"fs\").writeFileSync(authSettingsPath, JSON.stringify(authSettings2), \"utf8\");\n        require(\"fs\").writeFileSync(productsSettingsPath, JSON.stringify(productsSettings2), \"utf8\");\n        require(\"fs\").writeFileSync(chartsSettingsPath, JSON.stringify(chartsSettings2), \"utf8\");\n\n        // await new Promise((ok, fail) => { setTimeout(ok, 3000); });\n\n        const authSettings3 = JSON.parse(fs.readFileSync(authSettingsPath).toString());\n        const productsSettings3 = JSON.parse(fs.readFileSync(productsSettingsPath).toString());\n        const chartsSettings3 = JSON.parse(fs.readFileSync(chartsSettingsPath).toString());\n\n        if (!utils.check.that(authSettings3.SERVER_ID).equals(\"Authentication Server\")) throw new Error(1);\n        if (!utils.check.that(productsSettings3.SERVER_ID).equals(\"Products Server\")) throw new Error(2);\n        if (!utils.check.that(chartsSettings3.SERVER_ID).equals(\"Charts Server\")) throw new Error(3);\n\n        tester.passTest(\"Configure servers\");\n\n    } catch (error) {\n        tester.failTest(\"Configure servers\");\n        throw error;\n    }\n};\n";
fs.writeFileSync(node_211, node_contents_211, "utf8");

const node_212 = path.resolve(baseDirectory, ".", "test", "pluralith", "inrow", "004.Start-servers.js");
const node_contents_212 = "module.exports = async function (commonData) {\n    const { requester, utils, tester } = commonData;\n    try {\n\n        tester.startTest(\"Start servers\");\n\n        commonData.serversPath = require(\"path\").resolve(__dirname + \"/../../../../servers\");\n\n        commonData.$auth = await require(commonData.serversPath + \"/auth/src/start.js\");\n        commonData.$products = await require(commonData.serversPath + \"/products/src/start.js\");\n        commonData.$charts = await require(commonData.serversPath + \"/charts/src/start.js\");\n\n        tester.passTest(\"Start servers\");\n\n    } catch (error) {\n        tester.failTest(\"Start servers\");\n        throw error;\n    }\n};\n";
fs.writeFileSync(node_212, node_contents_212, "utf8");

const node_213 = path.resolve(baseDirectory, ".", "test", "pluralith", "inrow", "005.Create-projects.js");
const node_contents_213 = "module.exports = async function (commonData) {\n    const { requester, utils, tester } = commonData;\n    try {\n\n        tester.startTest(\"Create projects\");\n\n        const response01 = await requester(\"POST\", \"http://127.0.0.1:9980\", {\n            operation: \"create-project\",\n        }, {\n            user: \"carlosjimenohernandez\",\n            password: \"Carlos.Jimeno.Hernandez.9876543210\",\n            project: \"Identification\",\n            administrator_name: \"auth_admin\",\n            administrator_password: \"auth_admin\",\n            administrator_email: \"auth_admin@correo.com\",\n        }, {}, true, true, \"Create project «Identification»\");\n\n        if (!utils.check.that(response01.response.status).equals(\"success\")) throw new Error(1);\n\n        const response02 = await requester(\"POST\", \"http://127.0.0.1:9981\", {\n            operation: \"create-project\",\n        }, {\n            user: \"carlosjimenohernandez\",\n            password: \"Carlos.Jimeno.Hernandez.9876543210\",\n            project: \"Products\",\n            administrator_name: \"products_admin\",\n            administrator_password: \"products_admin\",\n            administrator_email: \"products_admin@correo.com\",\n            schema_attributes: {\n                authentication: {\n                    url: \"http://127.0.0.1:9980\",\n                    project: \"Identification\"\n                }\n            }\n        }, {}, true, true, \"Create project «Identification»\");\n\n        if (!utils.check.that(response02.response.status).equals(\"success\")) throw new Error(2);\n\n        const response03 = await requester(\"POST\", \"http://127.0.0.1:9982\", {\n            operation: \"create-project\",\n        }, {\n            user: \"carlosjimenohernandez\",\n            password: \"Carlos.Jimeno.Hernandez.9876543210\",\n            project: \"Charts\",\n            administrator_name: \"charts_admin\",\n            administrator_password: \"charts_admin\",\n            administrator_email: \"charts_admin@correo.com\",\n            schema_attributes: {\n                authentication: {\n                    url: \"http://127.0.0.1:9980\",\n                    project: \"Identification\"\n                }\n            }\n        }, {}, true, true, \"Create project «Charts»\");\n\n        if (!utils.check.that(response03.response.status).equals(\"success\")) throw new Error(3);\n\n        const productsProjectJson = JSON.parse(require(\"fs\").readFileSync(commonData.serversPath + \"/products/src/data/projects/Products/project.json\").toString());\n        if (!utils.check.that(typeof productsProjectJson.schema.attributes.isAuthenticatedBy).equals(\"object\")) throw new Error(4);\n        if (!utils.check.that(productsProjectJson.schema.attributes.isAuthenticatedBy.url).equals(\"http://127.0.0.1:9980\")) throw new Error(5);\n        if (!utils.check.that(productsProjectJson.schema.attributes.isAuthenticatedBy.project).equals(\"Identification\")) throw new Error(6);\n\n        const chartsProjectJson = JSON.parse(require(\"fs\").readFileSync(commonData.serversPath + \"/charts/src/data/projects/Charts/project.json\").toString());\n        if (!utils.check.that(typeof chartsProjectJson.schema.attributes.isAuthenticatedBy).equals(\"object\")) throw new Error(7);\n        if (!utils.check.that(chartsProjectJson.schema.attributes.isAuthenticatedBy.url).equals(\"http://127.0.0.1:9980\")) throw new Error(8);\n        if (!utils.check.that(chartsProjectJson.schema.attributes.isAuthenticatedBy.project).equals(\"Identification\")) throw new Error(9);\n\n        tester.passTest(\"Create projects\");\n\n    } catch (error) {\n        tester.failTest(\"Create projects\");\n        throw error;\n    }\n};\n";
fs.writeFileSync(node_213, node_contents_213, "utf8");

const node_214 = path.resolve(baseDirectory, ".", "test", "pluralith", "inrow", "006.01.Login-externally.js");
const node_contents_214 = "module.exports = async function (commonData) {\n    const { requester, utils, tester } = commonData;\n    try {\n\n        tester.startTest(\"Login externally\");\n\n        /////////////////////////////////////////////////////////////////////////////////////////\n        // Login auth admin:\n\n        const response01 = await requester(\"POST\", \"http://127.0.0.1:9980\", {\n            operation: \"login\",\n            project: \"Identification\",\n        }, {\n            user: \"auth_admin\",\n            password: \"auth_admin\",\n        }, {}, true, true, \"Login 'auth_admin'\");\n\n        if (!utils.check.that(response01.response.status).equals(\"success\")) throw new Error(1);\n\n        commonData.$authAdminToken = response01.response.data.session.token;\n\n        /////////////////////////////////////////////////////////////////////////////////////////\n        // Create products admin user on auth system:\n\n        const response02_1 = await requester(\"POST\", \"http://127.0.0.1:9980\", {\n            operation: \"insert\",\n            project: \"Identification\",\n        }, {\n            table: \"users\",\n            value: JSON.stringify({\n                name: \"products_admin_external\",\n                password: \"products_admin_external\",\n                email: \"products_admin@correo.com\",\n                groups: [],\n                privileges: []\n            })\n        }, {\n            authorization: commonData.$authAdminToken\n        }, true, true, \"Add 'products_admin' using 'auth_admin' authentication\");\n\n        if (!utils.check.that(response02_1.response.status).equals(\"success\")) throw new Error(\"2.1\");\n\n        /////////////////////////////////////////////////////////////////////////////////////////\n        // Create charts admin user on auth system:\n\n        const response02_2 = await requester(\"POST\", \"http://127.0.0.1:9980\", {\n            operation: \"insert\",\n            project: \"Identification\",\n        }, {\n            table: \"users\",\n            value: JSON.stringify({\n                name: \"charts_admin_external\",\n                password: \"charts_admin_external\",\n                email: \"charts_admin@correo.com\",\n                groups: [],\n                privileges: []\n            })\n        }, {\n            authorization: commonData.$authAdminToken\n        }, true, true, \"Add 'products_admin' using 'auth_admin' authentication\");\n\n        if (!utils.check.that(response02_2.response.status).equals(\"success\")) throw new Error(\"2.2\");\n\n        /////////////////////////////////////////////////////////////////////////////////////////\n        // Login with products admin on Products (so, externally):\n\n        const response03 = await requester(\"POST\", \"http://127.0.0.1:9981\", {\n            operation: \"login\",\n            project: \"Products\",\n        }, {\n            user: \"products_admin_external\",\n            password: \"products_admin_external\",\n        }, {}, true, true, \"Login 'products_admin' (externally)\");\n\n        if (!utils.check.that(response03.response.status).equals(\"success\")) throw new Error(3);\n\n        commonData.$productsAdminToken = response03.response.data.session.token;\n\n        /////////////////////////////////////////////////////////////////////////////////////////\n        // Login with products admin on Products (so, externally):\n\n        const response04 = await requester(\"POST\", \"http://127.0.0.1:9982\", {\n            operation: \"login\",\n            project: \"Charts\",\n        }, {\n            user: \"charts_admin_external\",\n            password: \"charts_admin_external\",\n        }, {}, true, true, \"Login 'charts_admin' (externally)\");\n\n        if (!utils.check.that(response04.response.status).equals(\"success\")) throw new Error(4);\n\n        commonData.$chartsAdminToken = response04.response.data.session.token;\n\n        tester.passTest(\"Login externally\");\n\n    } catch (error) {\n        tester.failTest(\"Login externally\");\n        throw error;\n    }\n};\n";
fs.writeFileSync(node_214, node_contents_214, "utf8");

const node_215 = path.resolve(baseDirectory, ".", "test", "pluralith", "inrow", "006.02.Define-schemas.js");
const node_contents_215 = "module.exports = async function (commonData) {\n    const { requester, utils, tester } = commonData;\n    try {\n\n        tester.startTest(\"Define schemas\");\n\n        ////////////////////////////////////////////////////////////////////////////////////////////\n        // Define «Products.products» table:\n\n        const response01_00 = await requester(\"POST\", \"http://127.0.0.1:9981\", {\n            project: \"Products\",\n            operation: \"add-table\",\n        }, {\n            table: \"products\",\n            attributes: JSON.stringify({}),\n            properties: JSON.stringify({}),\n        }, {\n            authorization: commonData.$authAdminToken,\n        }, true, true, \"Add «products» table on «Products»\");\n\n        if (!utils.check.that(response01_00.response.status).equals(\"success\")) throw new Error(\"1.0\");\n\n        const response01_01 = await requester(\"POST\", \"http://127.0.0.1:9981\", {\n            project: \"Products\",\n            operation: \"add-column\",\n        }, {\n            table: \"products\",\n            column: \"name\",\n            attributes: JSON.stringify({\n                hasDescription: \"The name of the product\"\n            }),\n            properties: JSON.stringify({}),\n        }, {\n            authorization: commonData.$authAdminToken,\n        }, true, true, \"Add «products.*» column on «Products»\");\n\n        if (!utils.check.that(response01_01.response.status).equals(\"success\")) throw new Error(\"1.1\");\n\n        const response01_02 = await requester(\"POST\", \"http://127.0.0.1:9981\", {\n            project: \"Products\",\n            operation: \"add-column\",\n        }, {\n            table: \"products\",\n            column: \"price\",\n            attributes: JSON.stringify({\n                hasDescription: \"The price of the product\"\n            }),\n            properties: JSON.stringify({}),\n        }, {\n            authorization: commonData.$authAdminToken,\n        }, true, true, \"Add «products.*» column on «Products»\");\n\n        if (!utils.check.that(response01_02.response.status).equals(\"success\")) throw new Error(\"1.2\");\n\n        const response01_03 = await requester(\"POST\", \"http://127.0.0.1:9981\", {\n            project: \"Products\",\n            operation: \"add-column\",\n        }, {\n            table: \"products\",\n            column: \"description\",\n            attributes: JSON.stringify({\n                hasDescription: \"The description of the product\"\n            }),\n            properties: JSON.stringify({}),\n        }, {\n            authorization: commonData.$authAdminToken,\n        }, true, true, \"Add «products.*» column on «Products»\");\n\n        if (!utils.check.that(response01_03.response.status).equals(\"success\")) throw new Error(\"1.3\");\n\n        const response01_04 = await requester(\"POST\", \"http://127.0.0.1:9981\", {\n            project: \"Products\",\n            operation: \"add-column\",\n        }, {\n            table: \"products\",\n            column: \"details\",\n            attributes: JSON.stringify({\n                hasDescription: \"The details attached to the product\"\n            }),\n            properties: JSON.stringify({}),\n        }, {\n            authorization: commonData.$authAdminToken,\n        }, true, true, \"Add «products.*» column on «Products»\");\n\n        if (!utils.check.that(response01_04.response.status).equals(\"success\")) throw new Error(\"1.4\");\n\n        const response01_05 = await requester(\"POST\", \"http://127.0.0.1:9981\", {\n            project: \"Products\",\n            operation: \"add-column\",\n        }, {\n            table: \"products\",\n            column: \"categories\",\n            attributes: JSON.stringify({\n                hasDescription: \"The categories associated to the product\"\n            }),\n            properties: JSON.stringify({}),\n        }, {\n            authorization: commonData.$authAdminToken,\n        }, true, true, \"Add «products.*» column on «Products»\");\n\n        if (!utils.check.that(response01_05.response.status).equals(\"success\")) throw new Error(\"1.5\");\n\n        // This binding is to keep external consistency with «Charts.charts.products»:\n\n        const response01_06 = await requester(\"POST\", \"http://127.0.0.1:9981\", {\n            project: \"Products\",\n            operation: \"add-table\",\n        }, {\n            table: \"charts\",\n            attributes: JSON.stringify({\n                isExternalizedBy: {\n                    server: \"Charts Server\",\n                    host: \"http://127.0.0.1:9982\",\n                    project: \"Charts\",\n                    table: \"charts\",\n                }\n            }),\n            properties: JSON.stringify({}),\n        }, {\n            authorization: commonData.$authAdminToken,\n        }, true, true, \"Add «charts» table on «Products»\");\n\n        if (!utils.check.that(response01_06.response.status).equals(\"success\")) throw new Error(\"1.6\");\n\n        const response01_07 = await requester(\"POST\", \"http://127.0.0.1:9981\", {\n            project: \"Products\",\n            operation: \"add-column\",\n        }, {\n            table: \"charts\",\n            column: \"products\",\n            attributes: JSON.stringify({\n                isType: \"list\",\n                isReferenceOf: \"products\"\n            }),\n            properties: JSON.stringify({}),\n        }, {\n            authorization: commonData.$authAdminToken,\n        }, true, true, \"Add «products.*» column on «Products»\");\n\n        if (!utils.check.that(response01_07.response.status).equals(\"success\")) throw new Error(\"1.7\");\n\n        ////////////////////////////////////////////////////////////////////////////////////////////\n        // Define «Charts.products» table:\n\n        let response02 = await requester(\"POST\", \"http://127.0.0.1:9982\", {\n            project: \"Charts\",\n            operation: \"add-table\",\n        }, {\n            table: \"products\",\n            attributes: JSON.stringify({\n                isExternalizedBy: {\n                    server: \"Products Server\",\n                    host: \"http://127.0.0.1:9981\",\n                    project: \"Products\",\n                    table: \"products\",\n                }\n            }),\n            properties: JSON.stringify({}),\n        }, {\n            authorization: commonData.$authAdminToken,\n        }, true, true, \"Add «products» table on «Charts»\");\n\n        if (!utils.check.that(response02.response.status).equals(\"success\")) throw new Error(\"2.0\");\n\n        ////////////////////////////////////////////////////////////////////////////////////////////\n        // Define «Charts.users» table:\n\n        const response03 = await requester(\"POST\", \"http://127.0.0.1:9982\", {\n            project: \"Charts\",\n            operation: \"add-table\",\n        }, {\n            table: \"users\",\n            attributes: JSON.stringify({\n                isExternalizedBy: {\n                    host: \"http://127.0.0.1:9980\",\n                    server: \"Authentication Server\",\n                    project: \"Identification\",\n                    table: \"users\",\n                }\n            }),\n            properties: JSON.stringify({}),\n        }, {\n            authorization: commonData.$authAdminToken,\n        }, true, true, \"Add «users» table on «Charts»\");\n\n        if (!utils.check.that(response03.response.status).equals(\"success\")) throw new Error(\"3.0\");\n        \n        ////////////////////////////////////////////////////////////////////////////////////////////\n        // Define «Charts.charts» table:\n\n        const response04_01 = await requester(\"POST\", \"http://127.0.0.1:9982\", {\n            project: \"Charts\",\n            operation: \"add-table\",\n        }, {\n            table: \"charts\",\n            attributes: JSON.stringify({\n                hasMultipleUniqueKeys: []\n            }),\n            properties: JSON.stringify({}),\n        }, {\n            authorization: commonData.$authAdminToken,\n        }, true, true, \"Add «charts» table on «Charts»\");\n\n        if (!utils.check.that(response04_01.response.status).equals(\"success\")) throw new Error(\"4.1\");\n\n        const response04_02 = await requester(\"POST\", \"http://127.0.0.1:9982\", {\n            project: \"Charts\",\n            operation: \"add-column\",\n        }, {\n            table: \"charts\",\n            column: \"products\",\n            attributes: JSON.stringify({\n                isType: \"list\",\n                isReferenceOf: \"products\",\n                hasDescription: \"The products added to the chart\",\n            }),\n            properties: JSON.stringify({}),\n        }, {\n            authorization: commonData.$authAdminToken,\n        }, true, true, \"Add «charts.*» column on «Charts»\");\n\n        if (!utils.check.that(response04_02.response.status).equals(\"success\")) throw new Error(\"4.2\");\n\n        const response04_03 = await requester(\"POST\", \"http://127.0.0.1:9982\", {\n            project: \"Charts\",\n            operation: \"add-column\",\n        }, {\n            table: \"charts\",\n            column: \"owner\",\n            attributes: JSON.stringify({\n                isType: \"object\",\n                isUnique: true,\n                isReferenceOf: \"users\",\n                hasDescription: \"The user that owns the chart\",\n            }),\n            properties: JSON.stringify({}),\n        }, {\n            authorization: commonData.$authAdminToken,\n        }, true, true, \"Add «charts.*» column on «Charts»\");\n\n        if (!utils.check.that(response04_03.response.status).equals(\"success\")) throw new Error(\"4.3\");\n\n        const response04_04 = await requester(\"POST\", \"http://127.0.0.1:9982\", {\n            project: \"Charts\",\n            operation: \"add-column\",\n        }, {\n            table: \"charts\",\n            column: \"notes\",\n            attributes: JSON.stringify({\n                isType: \"text\",\n                hasDescription: \"Notes associated to the chart\",\n            }),\n            properties: JSON.stringify({}),\n        }, {\n            authorization: commonData.$authAdminToken,\n        }, true, true, \"Add «charts.*» column on «Charts»\");\n\n        if (!utils.check.that(response04_04.response.status).equals(\"success\")) throw new Error(\"4.4\");\n\n        tester.passTest(\"Define schemas\");\n\n    } catch (error) {\n        tester.failTest(\"Define schemas\");\n        throw error;\n    }\n};\n";
fs.writeFileSync(node_215, node_contents_215, "utf8");

const node_216 = path.resolve(baseDirectory, ".", "test", "pluralith", "inrow", "006.03.Fill-schemas.js");
const node_contents_216 = "module.exports = async function (commonData) {\n    const { requester, utils, tester } = commonData;\n    try {\n\n        tester.startTest(\"Fill schemas\");\n\n        ////////////////////////////////////////////////////////////////////////////////////////////\n        // Define «Products.products» table:\n\n        const products = [{\n            name: \"Product one\",\n            price: \"100€\",\n            description: \"The «Product one» is awesome.\",\n            details: \"It is the one.\",\n            categories: \"numbers;one\"\n        }, {\n            name: \"Product two\",\n            price: \"200€\",\n            description: \"The «Product two» is awesome.\",\n            details: \"It is the two.\",\n            categories: \"numbers;two\"\n        }, {\n            name: \"Product three\",\n            price: \"300€\",\n            description: \"The «Product three» is awesome.\",\n            details: \"It is the three.\",\n            categories: \"numbers;three\"\n        }, {\n            name: \"Product four\",\n            price: \"400€\",\n            description: \"The «Product four is awesome.\",\n            details: \"It is the four.\",\n            categories: \"numbers;four\"\n        }, {\n            name: \"Product five\",\n            price: \"500€\",\n            description: \"The «Product five» is awesome.\",\n            details: \"It is the five.\",\n            categories: \"numbers;five\"\n        }];\n\n        for(let index = 0; index < products.length; index++) {\n            const product = products[index];\n\n            const productResponse = await requester(\"POST\", \"http://127.0.0.1:9981\", {\n                project: \"Products\",\n                operation: \"insert\",\n            }, {\n                table: \"products\",\n                value: JSON.stringify(product)\n            }, {\n                authorization: commonData.$productsAdminToken,\n            }, true, true, \"Add «products» to «Products.products»\");\n    \n            if (!utils.check.that(productResponse.response.status).equals(\"success\")) throw new Error(\"1.1\");\n            \n        }\n\n\n        tester.passTest(\"Fill schemas\");\n\n    } catch (error) {\n        tester.failTest(\"Fill schemas\");\n        throw error;\n    }\n};\n";
fs.writeFileSync(node_216, node_contents_216, "utf8");

const node_217 = path.resolve(baseDirectory, ".", "test", "pluralith", "inrow", "007.Authenticate-externally.js");
const node_contents_217 = "module.exports = async function (commonData) {\n    const { requester, utils, tester } = commonData;\n    try {\n\n        tester.startTest(\"Authenticate externally\");\n\n        const response01 = await requester(\"POST\", \"http://127.0.0.1:9981\", {\n            operation: \"authenticate\",\n            project: \"Products\",\n        }, {}, {\n            authorization: commonData.$productsAdminToken\n        }, true, true, \"Authenticate 'products_admin_externally'\");\n\n        if (!utils.check.that(response01.response.status).equals(\"success\")) throw new Error(1);\n\n        if (!utils.check.that(typeof response01.response.data.authentication).equals(\"object\")) throw new Error(1);\n        if (!utils.check.that(typeof response01.response.data.authentication.user).equals(\"object\")) throw new Error(2);\n        if (!utils.check.that(typeof response01.response.data.authentication.groups).equals(\"object\")) throw new Error(3);\n        if (!utils.check.that(typeof response01.response.data.authentication.privileges).equals(\"object\")) throw new Error(4);\n        if (!utils.check.that(typeof response01.response.data.authentication.session).equals(\"object\")) throw new Error(5);\n        if (!utils.check.that(typeof response01.response.data.authentication.project).equals(\"string\")) throw new Error(6);\n\n        tester.passTest(\"Authenticate externally\");\n\n    } catch (error) {\n        tester.failTest(\"Authenticate externally\");\n        throw error;\n    }\n};\n";
fs.writeFileSync(node_217, node_contents_217, "utf8");

const node_218 = path.resolve(baseDirectory, ".", "test", "pluralith", "inrow", "010.View-schema-externally.js");
const node_contents_218 = "module.exports = async function (commonData) {\n    const { requester, utils, tester } = commonData;\n    try {\n\n        tester.startTest(\"View schema externally\");\n\n        const response01 = await requester(\"POST\", \"http://127.0.0.1:9980\", {\n            project: \"Identification\",\n            operation: \"view-schema\",\n        }, {}, {\n            authorization: commonData.$authAdminToken\n        }, true, true, \"View «Identification» schema externally\");\n\n        if (!utils.check.that(response01.response.status).equals(\"success\")) throw new Error(1);\n\n        // @NOTHING as it has no external entities.\n\n        const response02 = await requester(\"POST\", \"http://127.0.0.1:9981\", {\n            project: \"Products\",\n            operation: \"view-schema\",\n        }, {}, {\n            authorization: commonData.$productsAdminToken\n        }, true, true, \"View «Products» schema externally\");\n\n        if (!utils.check.that(response02.response.status).equals(\"success\")) throw new Error(2);\n\n        // @NOTHING as it has no external entities.\n\n        const response03 = await requester(\"POST\", \"http://127.0.0.1:9982\", {\n            project: \"Charts\",\n            operation: \"view-schema\",\n        }, {}, {\n            authorization: commonData.$chartsAdminToken\n        }, true, true, \"View «Charts» schema externally\");\n\n        if (!utils.check.that(response03.response.status).equals(\"success\")) throw new Error(3);\n\n        if (!utils.check.that(response03.response.data.schema.tables.users.attributes.isExternalizedBy).isObject()) throw new Error(4);\n        if (!utils.check.that(response03.response.data.schema.tables.products.attributes.isExternalizedBy).isObject()) throw new Error(5);\n        if (!utils.check.that(response03.response.data.schema.tables.charts).isObject()) throw new Error(6);\n\n        tester.passTest(\"View schema externally\");\n\n    } catch (error) {\n        tester.failTest(\"View schema externally\");\n        throw error;\n    }\n};\n";
fs.writeFileSync(node_218, node_contents_218, "utf8");

const node_219 = path.resolve(baseDirectory, ".", "test", "pluralith", "inrow", "011.Select-externally.js");
const node_contents_219 = "module.exports = async function (commonData) {\n    const { requester, utils, tester } = commonData;\n    try {\n\n        tester.startTest(\"Select externally\");\n\n        const response01 = await requester(\"POST\", \"http://127.0.0.1:9982\", {\n            operation: \"select\",\n            project: \"Charts\",\n            table: \"users\",\n        }, {}, {\n            authorization: commonData.$chartsAdminToken\n        }, true, true, \"Select «Identification» externally\");\n\n        if (!utils.check.that(response01.response.status).equals(\"success\")) throw new Error(\"1.0\");\n        if (!utils.check.that(response01.response.data.items.length).equals(1)) throw new Error(\"1.1\");\n\n        const response02 = await requester(\"POST\", \"http://127.0.0.1:9982\", {\n            operation: \"select\",\n            project: \"Charts\",\n            table: \"products\",\n        }, {}, {\n            authorization: commonData.$chartsAdminToken\n        }, true, true, \"Select «Products» externally\");\n\n        if (!utils.check.that(response02.response.status).equals(\"success\")) throw new Error(\"2.0\");\n        if (!utils.check.that(response02.response.data.items.length).equals(5)) throw new Error(\"2.1\");\n\n        const response03 = await requester(\"POST\", \"http://127.0.0.1:9982\", {\n            operation: \"select\",\n            project: \"Charts\",\n            table: \"charts\",\n        }, {}, {\n            authorization: commonData.$chartsAdminToken\n        }, true, true, \"Select «Charts» externally\");\n\n        if (!utils.check.that(response03.response.status).equals(\"success\")) throw new Error(\"3.0\");\n        if (!utils.check.that(response03.response.data.items.length).equals(0)) throw new Error(\"3.1\");\n\n        tester.passTest(\"Select externally\");\n\n    } catch (error) {\n        tester.failTest(\"Select externally\");\n        throw error;\n    }\n};\n";
fs.writeFileSync(node_219, node_contents_219, "utf8");

const node_220 = path.resolve(baseDirectory, ".", "test", "pluralith", "inrow", "012.Insert-externally.js");
const node_contents_220 = "module.exports = async function (commonData) {\n    const { requester, utils, tester } = commonData;\n    try {\n\n        tester.startTest(\"Insert externally\");\n\n        const response01 = await requester(\"POST\", \"http://127.0.0.1:9982\", {\n            operation: \"insert\",\n            project: \"Charts\",\n        }, {\n            table: \"users\",\n            value: JSON.stringify({\n                name: \"random_user_1\",\n                password: \"random_user_1\",\n                email: \"random_user_1@correo.com\",\n                groups: [],\n                privileges: []\n            })\n        }, {\n            authorization: commonData.$authAdminToken\n        }, true, true, \"Insert «Identification» externally\");\n\n        if (!utils.check.that(response01.response.status).equals(\"success\")) throw new Error(\"1.0\");\n        if (!utils.check.that(response01.response.data.item.id).equals(4)) throw new Error(\"1.1\");\n\n        const response02 = await requester(\"POST\", \"http://127.0.0.1:9982\", {\n            operation: \"insert\",\n            project: \"Charts\",\n        }, {\n            table: \"products\",\n            value: JSON.stringify({\n                name: \"Random Product 1\",\n                price: \"875€\",\n                description: \"This is a random product\",\n                details: \"These are the details of a random product\",\n                categories: \"random; randomness; product\",\n            })\n        }, {\n            authorization: commonData.$authAdminToken\n        }, true, true, \"Insert «Products» externally\");\n\n        if (!utils.check.that(response02.response.status).equals(\"success\")) throw new Error(\"2.0\");\n        if (!utils.check.that(response02.response.data.item.id).isNumber()) throw new Error(\"2.1\");\n        if (!utils.check.that(response02.response.data.item.id).equals(6)) throw new Error(\"2.2\");\n\n        const response03 = await requester(\"POST\", \"http://127.0.0.1:9982\", {\n            operation: \"insert\",\n            project: \"Charts\",\n        }, {\n            table: \"charts\",\n            value: JSON.stringify({\n                owner: response01.response.data.item.id,\n                products: [ 1, 2, 3, 4, 5, response02.response.data.item.id ],\n            })\n        }, {\n            authorization: commonData.$authAdminToken\n        }, true, true, \"Insert «Charts» locally\");\n\n        if (!utils.check.that(response03.response.status).equals(\"success\")) throw new Error(\"3.0\");\n        if (!utils.check.that(response03.response.data.item.owner).equals(4)) throw new Error(\"3.1\");\n        if (!utils.check.that(response03.response.data.item.products).isArray()) throw new Error(\"3.1\");\n        if (!utils.check.that(response03.response.data.item.products.length).equals(6)) throw new Error(\"3.1\");\n\n        commonData.$chartsOwner1Id = response01.response.data.item.id;\n\n        tester.passTest(\"Insert externally\");\n\n    } catch (error) {\n        tester.failTest(\"Insert externally\");\n        throw error;\n    }\n};\n";
fs.writeFileSync(node_220, node_contents_220, "utf8");

const node_221 = path.resolve(baseDirectory, ".", "test", "pluralith", "inrow", "013.Update-externally.js");
const node_contents_221 = "module.exports = async function (commonData) {\n    const { requester, utils, tester } = commonData;\n    try {\n\n        tester.startTest(\"Update externally\");\n\n        const response01 = await requester(\"POST\", \"http://127.0.0.1:9982\", {\n            operation: \"update\",\n            project: \"Charts\",\n        }, {\n            table: \"products\",\n            id: 6,\n            value: JSON.stringify({\n                details: \"These are the UPDATED details of a random product\",\n            })\n        }, {\n            authorization: commonData.$chartsAdminToken\n        }, true, true, \"Update «Charts.products» externally\");\n\n        if (!utils.check.that(response01.response.status).equals(\"success\")) throw new Error(\"1.0\");\n\n        const response02 = await requester(\"GET\", \"http://127.0.0.1:9982\", {\n            operation: \"select\",\n            project: \"Charts\",\n            table: \"products\",\n            where: JSON.stringify([[ \"id\", \"=\", 6 ]])\n        }, {}, {\n            authorization: commonData.$chartsAdminToken\n        }, true, true, \"Select «Charts.products» externally to check update externally worked\");\n\n        if (!utils.check.that(response02.response.status).equals(\"success\")) throw new Error(\"2.0\");\n        if (!utils.check.that(response02.response.data.items.length).equals(1)) throw new Error(\"2.1\");\n        if (!utils.check.that(response02.response.data.items[0].details).equals(\"These are the UPDATED details of a random product\")) throw new Error(\"2.2\");\n\n        tester.passTest(\"Update externally\");\n\n    } catch (error) {\n        tester.failTest(\"Update externally\");\n        throw error;\n    }\n};\n";
fs.writeFileSync(node_221, node_contents_221, "utf8");

const node_222 = path.resolve(baseDirectory, ".", "test", "pluralith", "inrow", "014.Delete-externally.js");
const node_contents_222 = "module.exports = async function (commonData) {\n    const { requester, utils, tester } = commonData;\n    try {\n\n        tester.startTest(\"Delete externally\");\n\n        const response01 = await requester(\"POST\", \"http://127.0.0.1:9982\", {\n            operation: \"delete\",\n            project: \"Charts\",\n        }, {\n            table: \"products\",\n            id: 6,\n        }, {\n            authorization: commonData.$chartsAdminToken\n        }, true, true, \"Delete «Products.products#6» should be blocked because there are charts with (external) references to it\");\n\n        if (!utils.check.that(response01.response.status).equals(\"error\")) throw new Error(\"1.0\");\n\n        const response02 = await requester(\"POST\", \"http://127.0.0.1:9982\", {\n            operation: \"select\",\n            project: \"Charts\",\n            table: \"charts\",\n            where: JSON.stringify([[ \"owner\", \"=\", commonData.$chartsOwner1Id ]])\n        }, {}, {\n            authorization: commonData.$chartsAdminToken\n        }, true, true, \"Select «Charts.charts» where have externally referenced products\");\n\n        if (!utils.check.that(response02.response.status).equals(\"success\")) throw new Error(\"2.0\");\n        if (!utils.check.that(response02.response.data.items.length).equals(1)) throw new Error(\"2.1\");\n\n        const chartId = response02.response.data.items[0].id;\n\n        const response03 = await requester(\"POST\", \"http://127.0.0.1:9982\", {\n            operation: \"delete\",\n            project: \"Charts\",\n        }, {\n            table: \"charts\",\n            id: chartId,\n        }, {\n            authorization: commonData.$chartsAdminToken\n        }, true, true, \"Delete the only «Charts.chart» that have references to «Products.products#6»\");\n\n        if (!utils.check.that(response03.response.status).equals(\"success\")) throw new Error(\"3.0\");\n\n        const response04 = await requester(\"POST\", \"http://127.0.0.1:9982\", {\n            operation: \"delete\",\n            project: \"Charts\",\n        }, {\n            table: \"products\",\n            id: 6,\n        }, {\n            authorization: commonData.$chartsAdminToken\n        }, true, true, \"Delete «Products.products#6» should not be blocked now\");\n\n        if (!utils.check.that(response04.response.status).equals(\"success\")) throw new Error(\"4.0\");\n        \n        tester.passTest(\"Delete externally\");\n\n    } catch (error) {\n        tester.failTest(\"Delete externally\");\n        throw error;\n    }\n};\n";
fs.writeFileSync(node_222, node_contents_222, "utf8");

const node_223 = path.resolve(baseDirectory, ".", "test", "pluralith", "inrow", "101.Table-attribute-hasMultipleUniquekeys-externally.js");
const node_contents_223 = "module.exports = async function (commonData) {\n    const { requester, utils, tester } = commonData;\n    try {\n\n        tester.startTest(\"Table attribute: hasMultipleUniqueKeys externally\");\n\n        // @TODO: insert charts externally.\n\n        tester.passTest(\"Table attribute: hasMultipleUniqueKeys externally\");\n\n    } catch (error) {\n        tester.failTest(\"Table attribute: hasMultipleUniqueKeys externally\");\n        throw error;\n    }\n};\n";
fs.writeFileSync(node_223, node_contents_223, "utf8");

const node_224 = path.resolve(baseDirectory, ".", "test", "pluralith", "inrow", "900.Logout-externally.js");
const node_contents_224 = "module.exports = async function (commonData) {\n    const { requester, utils, tester } = commonData;\n    try {\n\n        tester.startTest(\"Logout externally\");\n\n        const response01 = await requester(\"POST\", \"http://127.0.0.1:9981\", {\n            operation: \"logout\",\n            project: \"Products\",\n        }, {}, {\n            authorization: commonData.$productsAdminToken\n        }, true, true, \"Logout 'products_admin' (externally)\");\n\n        if (!utils.check.that(response01.response.status).equals(\"success\")) throw new Error(1);\n\n        delete commonData.$productsAdminToken;\n\n        tester.passTest(\"Logout externally\");\n\n    } catch (error) {\n        tester.failTest(\"Logout externally\");\n        throw error;\n    }\n};\n";
fs.writeFileSync(node_224, node_contents_224, "utf8");

const node_225 = path.resolve(baseDirectory, ".", "test", "pluralith", "inrow", "990.Stop-servers.js");
const node_contents_225 = "module.exports = async function (commonData) {\n    const { requester, utils, tester, $auth, $products, $charts } = commonData;\n    try {\n\n        tester.startTest(\"Stop server\");\n\n        await $products.server.stop();\n        await $auth.server.stop();\n        await $charts.server.stop();\n\n        tester.passTest(\"Stop server\");\n\n    } catch (error) {\n        tester.failTest(\"Stop server\");\n        throw error;\n    }\n};\n";
fs.writeFileSync(node_225, node_contents_225, "utf8");

const node_226 = path.resolve(baseDirectory, ".", "test", "pluralith", "inrow", "991.Clean-projects.js");
const node_contents_226 = "module.exports = async function (commonData) {\n    const { requester, utils, tester, $auth, $products } = commonData;\n    try {\n\n        tester.startTest(\"Clean projects\");\n\n        // @DONT: Don't clean projects.\n        \n        /*\n        require(\"fs\").rmdirSync(__dirname + \"/../../../../servers/auth\", { recursive: true });\n        require(\"fs\").rmdirSync(__dirname + \"/../../../../servers/products\", { recursive: true });\n        require(\"fs\").rmdirSync(__dirname + \"/../../../../servers/charts\", { recursive: true });\n        //*/\n        \n        tester.passTest(\"Clean projects\");\n\n    } catch (error) {\n        tester.failTest(\"Clean projects\");\n        throw error;\n    }\n};\n";
fs.writeFileSync(node_226, node_contents_226, "utf8");

const node_227 = path.resolve(baseDirectory, ".", "test", "pluralith.js");
const node_contents_227 = "const main = async function () {\n    const commonData = require(__dirname + \"/utilities.js\");\n    const { tester } = commonData;\n    try {\n        /////////////////////////////////////////////////////////////////////\n        // Re-install multiple servers:\n        await require(__dirname + \"/pluralith/inrow/001.Delete-servers.js\")(commonData);\n        await require(__dirname + \"/pluralith/inrow/002.Install-multiple-servers.js\")(commonData);\n        await require(__dirname + \"/pluralith/inrow/003.Configure-servers.js\")(commonData);\n        await require(__dirname + \"/pluralith/inrow/004.Start-servers.js\")(commonData);\n        ////////////////////////////////////////////////////////////////////\n        // Set up projects:\n        await require(__dirname + \"/pluralith/inrow/005.Create-projects.js\")(commonData);\n        await require(__dirname + \"/pluralith/inrow/006.01.Login-externally.js\")(commonData);\n        await require(__dirname + \"/pluralith/inrow/006.02.Define-schemas.js\")(commonData);\n        await require(__dirname + \"/pluralith/inrow/006.03.Fill-schemas.js\")(commonData);\n        await require(__dirname + \"/pluralith/inrow/007.Authenticate-externally.js\")(commonData);\n        ////////////////////////////////////////////////////////////////////\n        // Test CRUD of data:\n        await require(__dirname + \"/pluralith/inrow/010.View-schema-externally.js\")(commonData);\n        await require(__dirname + \"/pluralith/inrow/011.Select-externally.js\")(commonData);\n        await require(__dirname + \"/pluralith/inrow/012.Insert-externally.js\")(commonData);\n        await require(__dirname + \"/pluralith/inrow/013.Update-externally.js\")(commonData);\n        await require(__dirname + \"/pluralith/inrow/014.Delete-externally.js\")(commonData);\n        await require(__dirname + \"/pluralith/inrow/101.Table-attribute-hasMultipleUniquekeys-externally.js\")(commonData);\n        ////////////////////////////////////////////////////////////////////\n        // Set down projects:\n        await require(__dirname + \"/pluralith/inrow/900.Logout-externally.js\")(commonData);\n        await require(__dirname + \"/pluralith/inrow/990.Stop-servers.js\")(commonData);\n        ////////////////////////////////////////////////////////////////////\n        // Clean projects:\n        // @DONT: Don't clean projects.\n        await require(__dirname + \"/pluralith/inrow/991.Clean-projects.js\")(commonData);\n        \n        /////////////////////////////////////////////////////////////////////\n        tester.printResults();\n        /////////////////////////////////////////////////////////////////////\n    } catch (error) {\n        tester.printResults();\n        console.log();\n        console.log(\"The error that made tests crash was this one:\");\n        console.log();\n        console.log(error);\n        console.log();\n    }\n};\n\nmain();";
fs.writeFileSync(node_227, node_contents_227, "utf8");

const node_228 = path.resolve(baseDirectory, ".", "test", "utilities.js");
const node_contents_228 = "const url = require(\"url\");\nconst http = require(\"http\");\nconst querystring = require(\"querystring\");\nconst Utils = require(__dirname + \"/../src/classes/Utils.js\");\n\nconst requester = function (method, targetURL, publicParameters = {}, privateParameters = {}, headers = {}, propagateErrors = true, printResults = true, debugMessage = false) {\n    return new Promise(function (ok, fail) {\n        if (debugMessage) {\n            console.log(\"Proceeding to: \" + debugMessage);\n        }\n        let responseMetadata = {};\n        let responseData = undefined;\n        const parsedURL = url.parse(targetURL);\n        const httpRequest = http.request({\n            method: method,\n            protocol: parsedURL.protocol,\n            hostname: parsedURL.hostname,\n            port: parsedURL.port,\n            path: parsedURL.pathname + \"?\" + querystring.encode(publicParameters),\n            headers: headers,\n        }, function (httpResponse) {\n            httpResponse.on(\"data\", function (dataJSON) {\n                const data = JSON.parse(dataJSON.toString());\n                responseData = data;\n            });\n            httpResponse.on(\"end\", function () {\n                if (printResults) {\n                    console.log(\"Success:\", JSON.stringify(responseData, null, 2));\n                }\n                return ok({ response: responseData, metadata: responseMetadata });\n            });\n        });\n        if (method.toLowerCase() !== \"get\") {\n            const bodyParameters = JSON.stringify(privateParameters);\n            httpRequest.write(bodyParameters);\n        }\n        httpRequest.on(\"error\", function (error) {\n            if (propagateErrors) {\n                if (printResults) {\n                    console.error(\"Error:\", error);\n                }\n                return fail(error);\n            } else {\n                if (printResults) {\n                    console.log(\"Error (ignored):\", error);\n                }\n                return ok(error);\n            }\n        });\n        httpRequest.end();\n    });\n};\n\nclass Tester {\n\n    constructor() {\n        this.started = new Date();\n        this.tests = {};\n    }\n\n    fixId(id) {\n        return \" \" + id + \" \";\n    }\n\n    startTest(id) {\n        this.tests[this.fixId(id)] = {\n            successfully: undefined,\n            started: new Date(),\n            finished: false,\n        };\n    }\n\n    finishTest(id) {\n        this.tests[this.fixId(id)].finished = new Date();\n        this.tests[this.fixId(id)].time = this.tests[this.fixId(id)].finished - this.tests[this.fixId(id)].started + \" milliseconds\";\n    }\n\n    passTest(id) {\n        this.finishTest(id);\n        this.tests[this.fixId(id)].successfully = true;\n    }\n\n    failTest(id) {\n        this.finishTest(id);\n        this.tests[this.fixId(id)].successfully = false;\n    }\n\n    printResults() {\n        console.log();\n        console.log(this.tests);\n        const now = new Date();\n        console.log();\n        console.log(\"All the tests took: \" + (now - this.started) + \" milliseconds\");\n        const notPassedTests = Object.keys(this.tests).filter(testId => this.tests[testId].successfully === false);\n        console.log();\n        if (notPassedTests.length) {\n            console.log(\"Tests not passed:\");\n            for(let index = 0; index < notPassedTests.length; index++) {\n                const notPassedTest = notPassedTests[index];\n                console.log(\"  -\" + notPassedTest);\n            }\n            console.log();\n        } else {\n            console.log(\"All tests were passed successfully.\");\n            console.log();\n        }\n    }\n\n}\n\nmodule.exports = {\n    utils: Utils,\n    requester,\n    tester: new Tester(),\n};";
fs.writeFileSync(node_228, node_contents_228, "utf8");

const node_229 = path.resolve(baseDirectory, ".", "todo");
fs.mkdirSync(node_229);

const node_230 = path.resolve(baseDirectory, ".", "todo", "todo-distributed-tables.md");
const node_contents_230 = "[ ] Table attribute: isExternalizedBy\n    [x] Schema externalized\n        [x] Debe estar tal cual está en el project.json\n    [x] Select externalized\n        [x] Adjuntar schema de la tabla\n        [x] Redireccionar la petición al servicio externalizado\n    [x] Insert externalized\n        [x] Redireccionar la petición al servicio externalizado\n        [x] Con su codigo del checker\n    [x] Update externalized\n        [x] Redireccionar la petición al servicio externalizado\n        [x] Con su codigo del checker\n    [x] Delete externalized\n        [x] Redireccionar la petición al servicio externalizado\n        [x] Con su codigo del checker\n    [ ] Table attribute: hasMultipleUniqueKeys\n";
fs.writeFileSync(node_230, node_contents_230, "utf8");

const node_231 = path.resolve(baseDirectory, ".", "todo", "todo.authentication.md");
const node_contents_231 = "[x] Crear instalador que copia los ficheros de un proyecto a una nueva carpeta\n[x] Cambiar el test unitario \"inrow\" para que inicie y pare el servidor.\n[ ] Adaptar los tests para que:\n    [ ] 4. Cambiar el código de la aplicación para externalizar el AUTH:\n        [x] 4.1. Que el CREATE-PROJECT permita un schema.auth para externalizar el AUTH: schema_attributes?\n        [x] 4.2. Que el LOGIN, si hay un schema.auth, lo haga hacia fuera\n        [x] 4.3. Que el LOGOUT, si hay un schema.auth, lo haga hacia fuera\n        [x] 4.4. Que el AUTHENTICATE, si hay un schema.auth, lo haga hacia fuera\n            [x] 4.4.1. Hay que instaurar un servicio que sea EXCLUSIVAMENTE para obtener la \"?operation=authenticate\"\n            [x] 4.4.2. Cuando haya un schema.auth, el método AUTHENTICATE debe llamar a \"?operation=authenticate\"\n    [x] 5. Crear un código de los tests 'pluralith' para externalizar el AUTH:\n        [x] 5.1. Limpiar los proyectos: borrar los 2 proyectos recursivamente\n        [x] 5.2. Un tests inicial que ejecute el instalador 2 veces, 1 por cada proyecto.\n        [x] 5.3. Los hydrateJSON de los *.json tienen que hacerse con peticiones redireccionadas.\n        [x] NOTA: los tests unitarios \"inrow\" (test/tests/inrow) están bien, y cuando hagamos no solo el punto de EXTERNALIZAR AUTH sino\n            también de EXTERNALIZAR TABLES, los tests deberán seguir funcionando. Entonces, estos TESTS son y SEGUIRÁN SIENDO el SANCTA \n            SANCTORUM de que va a seguir funcionando correctamente la aplicación. Lo único que cambia es que por dentro, la aplicación\n            no resolverá los servicios en un servidor, sino en otro. Pero eso se hará bien cuando se resuelva el punto de \n            TODO.DISTRIBUTED-DATABASES.MD, que es el siguiente.";
fs.writeFileSync(node_231, node_contents_231, "utf8");
};

//Included:lib/501.castelog.v1.metodos.una_peticion_http.part.js
Castelog.variables.cliente_http = Castelog.variables.axios.create();

Castelog.metodos.una_peticion_http = function (url, method_p, data, headers, client = Castelog.variables.cliente_http, en_errores = console.log) {
    const errorHandler = (typeof en_errores === "function") ? en_errores : error => console.log("Error en petición HTTP:", error);
    const requests_client = (typeof client === "function") ? client : Castelog.variables.cliente_http;
    try {
        const method = method_p ? method_p.toLowerCase() : "get";
        return requests_client[method](url, data, { headers }).catch(errorHandler);
    } catch (error) {
        return errorHandler(error) || error;
    }
};

//Included:lib/502.castelog.v1.metodos.un_cacheo.part.js
Castelog.metodos.un_cacheo = function(clave, valor, condicion) {
    let condicionFinal = condicion;
    if(typeof condicion === "function") {
        condicionFinal = condicion();
    }
    NoSeRefresca:
    if(!condicionFinal) {
        const cacheDB = Castelog.variables.SimplestDB.getCache();
        const coincidencias = cacheDB.select("cache", item => item.key === clave);
        const coincidenciasIds = Object.keys(coincidencias);
        if (coincidenciasIds.length === 0) {
            break NoSeRefresca;
        } else if (coincidenciasIds.length > 1) {
            throw new Error("Clave de cacheo «" + clave + "» corrupta por concurrencia de " + coincidenciasIds.length + " registros (0001).");
        }
        return coincidencias[coincidenciasIds[0]].value;
    }
    let valorFinal = valor;
    if (typeof valor === "function") {
        valorFinal = valor();
    }
    const cacheDB = Castelog.variables.SimplestDB.getCache();
    const coincidencias = cacheDB.select("cache", item => item.key === clave);
    const coincidenciasIds = Object.keys(coincidencias);
    if(coincidenciasIds.length === 0) {
        const item = cacheDB.insert("cache", { key: clave, value: valorFinal });
        return item.value;
    } else if(coincidenciasIds.length > 1) {
        throw new Error("Clave de cacheo «" + clave + "» corrupta por concurrencia de " + coincidenciasIds.length + " registros (0002).");
    }
    const coincidencia = coincidencias[coincidenciasIds[0]];
    cacheDB.update("cache", coincidencia.id, { valor: valorFinal });
    return valorFinal;
};

//Included:lib/503.castelog.v1.metodos.un_modulo_importado.part.js
Castelog.metodos.un_modulo_importado = function(id, file_dir = undefined, process_dir = undefined) {
    try {
        // console.log("0. iniciando importacion de: " + id);
        // Intento 1. De la cache propia:
        // console.log("intento 1: de la cache propia");
        if(id in Castelog.modulos) {
            // console.log("Funcionó el método 1.");
            return Castelog.modulos[id].value;
        }
        // Intento 2. Del require normal:
        // console.log("intento 2: del require normal");
        if(typeof(Castelog.globalmente.require) === "function") {
            try {
                const modulix = Castelog.globalmente.require(id);
                // console.log("Funcionó el método 2.");
                return modulix;
            } catch (error) {
                // noop.
            }
        }
        // Intento 3. Cambiando las rutas + de la cache propia:
        // console.log("intento 3: cambiando rutas + de la cache propia");
        let id2 = id;
        if(id.startsWith("./") && file_dir) {
            id2 = id.replace(/^\.\//g, file_dir.replace(/\/$/g, "") + "/");
        } else if(id.startsWith("@/") && process_dir) {
            id2 = id.replace(/^\.\//g, process_dir.replace(/\/$/g, "") + "/");
        }
        if(id2 in Castelog.modulos) {
            const mod = Castelog.modulos[id2].value;
            // console.log("Funcionó el método 3 con: " + id2);
            return mod;
        }
        // Intento 4. Cambiando las rutas + del require normal:
        // console.log("intento 4: cambiando rutas + del require normal");
        if(typeof(Castelog.globalmente.require) === "function") {
            try {
                const mod = require(id2);
                // console.log("Funcionó el método 4 con: " + id2);
                return mod;
            } catch (error) {
                // Ya no hay más intentos, se lanza error:
                throw error;
            }
        }
        throw new Error(`No se pudo importar módulo porque no existe «${id2}» importable con «require(...)» ni tampoco en «Castelog.modulos»`);
    } catch (error) {
        console.log("Error al importar módulo: " + id);
        throw error;
    }
};

//Included:lib/504.castelog.v1.metodos.un_modulo_exportado.part.js
Castelog.metodos.un_modulo_exportado = function(id, modulo, factory = undefined, file_dir = undefined, process_dir = undefined) {
    // console.log("0. iniciando exportacion de: " + id);
    // Persistencia 1. En la cache propia:
    // console.log("1. persistencia en cache propia: ");
    Castelog.modulos[id] = { value: modulo, factory };
    // Persistencia 2. En el module.exports normal:
    if(typeof(module) !== "undefined") {
        // console.log("2. persistencia en module.exports normal: ");
        try {
            module.exports = modulo;
        } catch (error) {
            // noop.
        }
    }
    // Persistencia 3. Cambiando las rutas + cache propia:
    if(process_dir) {
        if(id.startsWith(process_dir)) {
            const path_relative_to_process = id.replace(process_dir, "@/").replace(/\/+/g, "/");
            Castelog.modulos[path_relative_to_process] = { value: modulo, factory };
        }
    }
    // Ya no hay más persistencias, se retorna el módulo con ruta original:
    return Castelog.modulos[id].value;
};

//Included:lib/504.castelog.v1.metodos.una_plantilla.js
Castelog.variables.plantillas_config_por_defecto = {};
Castelog.variables.plantillas_settings_por_defecto = { delimiter: ":", async: false };

Castelog.metodos.una_plantilla = function(fn, defaultConfig = {}, defaultSettings = {}) {
    if(typeof fn === "string") {
        return (config_p, settings_p) => {
            const config = Object.assign({}, Castelog.variables.plantillas_config_por_defecto, defaultConfig, config_p);
            const settings = Object.assign({}, Castelog.variables.plantillas_settings_por_defecto, defaultSettings, settings_p);
            const parameters = { config };
            return Castelog.variables.ejs.render(fn, parameters, settings);
        };
    } else if(typeof fn === "function") {
        return (config, settings) => {
            return fn(
                Object.assign({}, defaultConfig, config),
                Object.assign({}, defaultSettings, settings),
            );
        };
    } else throw new Error("Tipo de plantilla no identificado (válidos:'string' y 'function'");
};

//Included:lib/505.castelog.v1.metodos.una_lectura_de_fichero.js
Castelog.metodos.una_lectura_de_fichero = function(file, codificacion = "utf8", modelId_ = "fs", fsSystem = "simplestdb.fs") {
    if(fsSystem === "simplestdb.fs") {
        let modelId = modelId_;
        if(modelId_ === null) {
            modelId = "fs";
        } else if(typeof modelId_ === "undefined") {
            modelId = "fs";
        }
        const sdb_fs = Castelog.variables.SimplestDB.getFS();
        const previous_files = sdb_fs.select(modelId, item => item.path === file);
        const keys = Object.keys(previous_files);
        if(!keys.length) {
            return undefined;
        } else if(keys.length > 1) {
            throw new Error("Fichero corrupto por duplicidad de ruta al leer: " + file + " [00909]");
        }
        return previous_files[keys[0]].contents;
    } else if(fsSystem === "node.fs") {
        return require("fs").readFileSync(file, codificacion);
    } else {
        throw new Error("Modalidad de sistema de ficheros «" + fsSystem + "» no identificada. Solo disponibles: 'simplestdb.fs' y 'node.fs'. [0001]");
    }
};

//Included:lib/506.castelog.v1.metodos.una_escritura_de_fichero.js
Castelog.metodos.una_escritura_de_fichero = function (file, contents, codificacion, modelId_ = "fs", fsSystem = "simplestdb.fs") {
    if (fsSystem === "simplestdb.fs") {
        let modelId = modelId_;
        if(modelId_ === null) {
            modelId = "fs";
        } else if(typeof modelId_ === "undefined") {
            modelId = "fs";
        }
        const sdb_fs = Castelog.variables.SimplestDB.getFS();
        const previous_files = sdb_fs.select(modelId, item => item.path === file);
        const keys = Object.keys(previous_files);
        if(!keys.length) {
            return sdb_fs.insert(modelId, { path: file, contents: contents || "" });
        } else if(keys.length > 1) {
            throw new Error("Fichero corrupto por duplicidad de ruta al escribir: " + file + " [00808]");
        }
        sdb_fs.update(modelId, previous_files[keys[0]].id, { contents });
        return previous_files[keys[0]];
    } else if (fsSystem === "node.fs") {
        return require("fs").writeFileSync(file, contents, codificacion);
    } else {
        throw new Error("Modalidad de sistema de ficheros «" + fsSystem + "» no identificada. Solo disponibles: 'simplestdb.fs' y 'node.fs'. [0002]");
    }
};

//Included:lib/508.castelog.v1.metodos.una_seleccion_de_base_de_datos.js
Castelog.metodos.una_seleccion = function (modelo, filtrando, ordenando, agrupando, paginando, bd = "system", adaptador = Castelog.variables.SimplestDB) {
    const db = adaptador.create({ schema: bd }, true);
    const resultOriginal = db.select(modelo, filtrando ? filtrando : i => i);
    let result = Object.keys(resultOriginal).reduce((output, key) => {
        output.push([key, resultOriginal[key]]);
        return output;
    }, []);
    if(agrupando) {
        // result = result.sort(ordenando);
    }
    if(ordenando) {
        if(typeof ordenando === "function") {
            result = result.sort(ordenando);
        } else if(Array.isArray(ordenando)) {
            result = result.sort(function(a, b) {
                for(let index = 0; index < ordenando.length; index++) {
                    const ordenacion = ordenando[index];
                    const aHas = ordenacion in a;
                    const bHas = ordenacion in b;
                    if(aHas && bHas) {
                        if(a[ordenacion] < b[ordenacion]) {
                            return -1;
                        } else if(a[ordenacion] > b[ordenacion]) {
                            return 1;
                        }
                    } else if (aHas) {
                        return -1;
                    } else if(bHas) {
                        return 1;
                    }
                }
                return -1;
            });
        } else {
            throw new Error("Parámetro «ordenando» debe ser una función o un array. [0001]");
        }
    }
    if(paginando) {
        if(typeof paginando !== "object") {
            throw new Error("Parámetro «paginando» debe ser un objeto. [0001]");
        }
        const { pagina, items } = paginando;
        const itemsNumber = parseInt(items) || 20;
        const paginaNumber = parseInt(pagina) || 0;
        let indexPagina = 0;
        let indexItem = 0;
        let result2 = [];
        for(let indexRow = 0; indexRow < result.length; indexRow++) {
            const row = result[indexRow];
            indexItem++;
            if(indexItem >= itemsNumber) {
                indexPagina++;
                indexItem = 0;
            }
            if(indexPagina === paginaNumber) {
                result2.push(row);
            }
        }
        result = result2;
    }
    if(Array.isArray(result)) {
        result = result.reduce((output, item) => {
            const [ key, value ] = item;
            output[key] = value;
            return output;
        }, {});
    }
    return result;
};

//Included:lib/509.castelog.v1.metodos.una_actualizacion_de_base_de_datos.js
Castelog.metodos.una_actualizacion = function (modelo, id, datos, bd = "system", adaptador = Castelog.variables.SimplestDB) {
    const db = adaptador.create({ schema: bd }, true);
    return db.update(modelo, id, datos);
};

//Included:lib/509.castelog.v1.metodos.una_eliminacion_de_base_de_datos.js
Castelog.metodos.una_eliminacion = function (modelo, id, bd = "system", adaptador = Castelog.variables.SimplestDB) {
    const db = adaptador.create({ schema: bd }, true);
    return db.delete(modelo, id);
};

//Included:lib/509.castelog.v1.metodos.una_insercion_de_base_de_datos.js
Castelog.metodos.una_insercion = function (modelo, datos, bd = "system", adaptador = Castelog.variables.SimplestDB) {
    const db = adaptador.create({ schema: bd }, true);
    return db.insert(modelo, datos);
};

//Included:lib/510.castelog.v1.metodos.una_notificacion.js
Castelog.metodos.una_notificacion = function(mensaje) {
    if(typeof window === "object") {
        return window.alert(mensaje);
    } else if(typeof global === "object") {
        console.log(mensaje);
    }
};

//Included:lib/511.castelog.v1.metodos.una_pregunta.js
Castelog.metodos.una_pregunta = function(mensaje, defecto) {
    if(typeof window === "object") {
        return window.prompt(mensaje, defecto);
    } else if(typeof global === "object") {
        return new Promise(ok => {
            const reader = require("readline").createInterface({
                input: process.stdin,
                output: process.stdout,
            });
            reader.question(mensaje + "\n«Respuesta:» ", answer => {
                reader.close();
                if(!answer) {
                    return ok(defecto);
                }
                return ok(answer);
            });
        });
    }
};

//Included:lib/512.castelog.v1.metodos.una_confirmacion.js
Castelog.metodos.una_confirmacion = function(mensaje, defecto) {
    if(typeof window === "object") {
        return window.prompt(mensaje, defecto);
    } else if(typeof global === "object") {
        const readline = require("readline");
        const reader = readline.createInterface({
            input: process.stdin,
            output: process.stdout,
        });
        return new Promise(ok => {
            const ask = () => {
                reader.question(mensaje + ( defecto ? " (S/n = por defecto «sí»)" : " (s/N = por defecto «no»)" ), answer => {
                    reader.close();
                    if(!answer) {
                        return ok(defecto);
                    }
                    return ok(answer);
                });
            };
            ask();
        });
    }
};

//Included:lib/513.castelog.v1.metodos.un_componente_vue2.js
Castelog.metodos.un_componente_vue2 = function(id, plantilla, logica, estilos, parametros_de_estilos = {}) {
    if(typeof window === "object") {
        const vue_global = (typeof window.Vue !== "undefined") ? window.Vue :
            (typeof window.vue !== "undefined") ? window.vue : undefined;
        if(typeof vue_global === "undefined") {
            throw new Error("Castelog no pudo encontrar Vue en el entorno vía 'window.vue' o 'window.Vue'");
        }
        const componente_base_original = { template: plantilla };
        const definicion_logica_de_componente = logica ? logica(componente_base_original) : {};
        const componente_base = Object.assign({}, componente_base_original, definicion_logica_de_componente);
        const componente_clase_base = vue_global.component(id, componente_base);
        const uniqueId = "castelog-style-tag-" + id;
        const foundElement = document.getElementById(uniqueId);
        if(estilos && !foundElement) {
            const styleTag = document.createElement("style");
            styleTag.id = uniqueId;
            styleTag.textContent = Castelog.metodos.una_plantilla(estilos, {
                estilo_uid: uniqueId,
                componente: componente_base,
                componente_id: id,
                componente_clase: componente_clase_base,
                ...parametros_de_estilos,
            })();
            document.head.appendChild(styleTag);
        }
        return componente_clase_base;
    } else if(typeof global === "object") {
        return;
    }
};

//Included:lib/514.castelog.v1.metodos.estoy_en.js
Castelog.metodos.estoy_en = function(expresion, arg1) {
    // Esta función está por completarse/parchearse.
    // Actualmente solo determina correctamente si:
    //   - estoy en navegador: tiene en cuenta window.
    //   - estoy en sistema: tiene en cuenta global y require.
    //   - estoy en windows: funciona bien en node.js solamente (en sistema).
    //   - estoy en linux: funciona bien solo si consideras linux a todo lo que no sea windows.
    if(expresion === "estoy en navegador") {
        return (typeof window !== "undefined") && (typeof document !== "undefined");
    } else if(expresion === "estoy en sistema") {
        return (typeof global !== "undefined") && (typeof require !== "undefined");
    } else if(expresion === "estoy en windows") {
        return (typeof global !== "undefined") && (typeof require !== "undefined") && (require("os").platform().indexOf("win") === 0);
    } else if(expresion === "estoy en linux") {
        return (typeof global !== "undefined") && (typeof require !== "undefined") && (require("os").platform().indexOf("win") !== 0);
    } else if(expresion === "estoy en entorno") {
        return Castelog.variables.globales.entorno === arg1;
    } else {
        throw new Error("Expresión de detección de entorno no identificada o no disponible: "+ expresion);
    }
    if(expresion === "estoy en mac") {
        return undefined;
    } else if(expresion === "estoy en chrome") {
        return undefined;
    } else if(expresion === "estoy en firefox") {
        return undefined;
    } else if(expresion === "estoy en opera") {
        return undefined;
    } else if(expresion === "estoy en safari") {
        return undefined;
    } else if(expresion === "estoy en ios") {
        return undefined;
    } else if(expresion === "estoy en android") {
        return undefined;
    } else if(expresion === "estoy en móvil") {
        return undefined;
    } else if(expresion === "estoy en tablet") {
        return undefined;
    } else if(expresion === "estoy en ordenador") {
        return undefined;
    }
    return true;
};

//Included:lib/514.castelog.v1.metodos.un_comando_de_consola.js
Castelog.metodos.un_comando_de_consola = function(comando, opciones) {
    if(typeof window === "object") {
        return false;
    } else if(typeof global === "object") {
        return require("child_process").execSync(comando, opciones);
    }
};

//Included:lib/515.castelog.v1.metodos.un_elemento_html.js
Castelog.metodos.un_elemento_html = function(codigo) {
    if(typeof window === "object") {
        const parent = document.createElement("div");
        parent.innerHTML = codigo;
        return parent.children[0];
    } else if(typeof global === "object") {
        throw new Error("El entorno no soporta la carga de elementos HTML nativa. Suele funcionar en navegadores.");
    }
};

//Included:lib/516.castelog.v1.metodos.una_compilacion_estandar_de_parametros_de_consola.js
Castelog.metodos.una_compilacion_estandar_de_parametros_de_consola = function(parametros) {
    if(!Array.isArray(parametros)) {
        throw new Error("Se requiere que «parametros» sea un array");
    }
    const compilados = {};
    let propiedadSeleccionada = "_";
    for(let index = 0; index < parametros.length; index++) {
        const parametro = parametros[index];
        if (parametro.match(/^\-\-/g)) {
            propiedadSeleccionada = parametro.replace(/^\-\-/g, "");
        } else if(parametro.match(/^\-/g)) {
            propiedadSeleccionada = parametro.replace(/^\-/g, "");
        } else {
            if (!Array.isArray(compilados[propiedadSeleccionada])) {
                compilados[propiedadSeleccionada] = [];
            }
            compilados[propiedadSeleccionada].push(parametro);
        }
    }
    return compilados;
};

//Included:lib/517.castelog.v1.metodos.un_servidor_http.js
Castelog.metodos.un_servidor_http = function(controlador, opciones) {
    if(typeof window === "object") {
        return;
    } else if(typeof global === "object") {
        return require("http").createServer(controlador, opciones);
    }
};

//Included:lib/518.castelog.v1.metodos.un_servidor_https.js
Castelog.metodos.un_servidor_https = function(controlador, opciones_seguras, opciones) {
    if(typeof window === "object") {
        return;
    } else if(typeof global === "object") {
        return require("https").createServer(controlador, opciones_seguras, opciones);
    }
};

//Included:lib/519.castelog.v1.metodos.un_servidor_socket_io.js
Castelog.metodos.un_servidor_socket_io = function(controlador, opciones_seguras, opciones) {
    if(typeof window === "object") {
        return;
    } else if(typeof global === "object") {
        throw new Error("no implementado todavía!");
    }
};

//Included:lib/520.castelog.v1.metodos.un_cliente_socket_io.js
Castelog.metodos.un_cliente_socket_io = function(controlador, opciones_seguras, opciones) {
    if(typeof window === "object") {
        throw new Error("no implementado todavía!");
    } else if(typeof global === "object") {
        throw new Error("no implementado todavía!");
    }
};

//Included:lib/521.castelog.v1.metodos.una_exportacion_de_modulo_universal_estandar.js
Castelog.metodos.una_exportacion_de_modulo_universal_estandar = function(id, mod, is_factory = true, is_async = false) {
    if(id in Castelog.modulos) {
        throw new Error("No se puede sobreescribir el módulo estándar universal «" + id + "»")
    }
    let mod_result;
    if(is_factory && (typeof mod === "function")) {
        mod_result = mod();
    } else {
        mod_result = mod;
    }
    if(is_async && (mod_result instanceof Promise)) {
        mod_result.then(data => {
            return Castelog.modulos[id] = data;
        });
    } else {
        Castelog.modulos[id] = mod_result;
    }
    return mod_result;
};

//Included:lib/522.castelog.v1.metodos.una_aplicacion_vue2.js
Castelog.metodos.una_aplicacion_vue2 = function (id, plantilla, logica, estilos, parametros_de_estilos = {}, rutas = [], traducciones = [], montada = null) {
    if(typeof window === "object") {
        const vue_global = (typeof window.Vue !== "undefined") ? window.Vue :
            (typeof window.vue !== "undefined") ? window.vue : undefined;
        if(typeof vue_global === "undefined") {
            throw new Error("Castelog no pudo encontrar Vue en el entorno vía 'window.vue' o 'window.Vue'");
        }
        vue_global.use(VueI18next);
        const componente_base_original = { template: plantilla };
        const definicion_logica_de_componente = logica ? logica(componente_base_original) : {};
        const componente_base = Object.assign({}, componente_base_original, definicion_logica_de_componente);
        const uniqueId = "castelog-style-tag-" + id;
        const foundElement = document.getElementById(uniqueId);
        if(estilos && (!foundElement)) {
            const styleTag = document.createElement("style");
            styleTag.id = uniqueId;
            styleTag.textContent = Castelog.metodos.una_plantilla(estilos, {
                estilo_uid: uniqueId,
                componente: componente_base,
                componente_id: id,
                ...parametros_de_estilos,
            })();
            document.head.appendChild(styleTag);
        }
        const userPreferredLocales = window.navigator.languages;
        const localeIds = Object.keys(traducciones);
        let currentLocale = "en";
        for(let indexLocales = 0; indexLocales < userPreferredLocales.length; indexLocales++) {
            const userPreferredLocale = userPreferredLocales[indexLocales];
            const userPreferredIso = userPreferredLocale.split("-")[0];
            const localePosition = localeIds.indexOf(userPreferredIso);
            if (localePosition !== -1) {
                currentLocale = localeIds[localePosition];
            }
        }
        i18next.init({
            lng: currentLocale,
            nsSeparator: "#<1>#",
            keySeparator: "#<2>#",
            pluralSeparator: "#<3>#",
            contextSeparator: "#<4>#",
            resources: traducciones ? Object.keys(traducciones).reduce(function(out, key) {
                if(!(key in out)) {
                    out[key] = {
                        translation: traducciones[key]
                    };
                }
                return out;
            }, {}) : {}
        });
        const instancia_base = new vue_global({
            ...componente_base,
            router: new VueRouter({
                routes: rutas
            }),
            i18n: new VueI18next(i18next),
        });
        if(typeof(montada) === "string") {
            window.addEventListener("load", function() {
                instancia_base.$mount(montada);
            });
        } else {
            console.log("[!] Aplicación Vue2 no montada.");
            console.log(" [+] montada:", montada);
            console.log(" [+] id:", id);
            console.log(" [+] plantilla:", plantilla);
            console.log(" [+] logica:", logica);
            console.log(" [+] estilos:", estilos);
            console.log(" [+] rutas:", rutas);
            console.log(" [+] traducciones:", traducciones);
        }
        return instancia_base;
    } else if(typeof global === "object") {
        return;
    }
};

//Included:lib/523.castelog.v1.metodos.una_red_de_servidores_http_rest_automaticos.js
Castelog.metodos.una_red_de_servidores_http_rest_automaticos = function (rutaDeProyectoPrototipo, deployerCallback) {
    if (typeof global === "object") {
        return new Promise((ok, fail) => {
            try {
                const path = require("path");
                const rutaInicial = path.resolve(rutaDeProyectoPrototipo);
                Castelog.variables.generador_de_proyector_rest(rutaInicial);
                const rutaGeneratorBuilder = path.resolve(rutaInicial, "./bin/build-generator.js");
                require(rutaGeneratorBuilder);
                const rutaApi = path.resolve(rutaInicial, "./api.js");
                const restApi = require(rutaApi);
                const { una_red_de_servidores_http_rest_automaticos } = restApi;
                return una_red_de_servidores_http_rest_automaticos(deployerCallback).then(() => {
                    console.log("La red de servidores http rest automáticos fue desplegada exitosamente,");
                    ok();
                }).catch(error => {
                    console.log("Hubo errores al intentar generar una red de servidores http rest automáticos:", error);
                    fail(error);
                });
            } catch (error) {
                return fail(error);
            }
        });
    } else {
        console.log("Sintaxis de red de servidores HTTP REST automáticos no soportada en navegadores");
    }
};

//Included:lib/524.castelog.v1.metodos.una_superquery.js
Castelog.metodos.una_superquery = function(esquema, cliente, base) {
    if(typeof esquema !== "object") {
        throw new Error("Se requiere de parámetro «esquema» ser un objeto para «Castelog.metodos.una_superquery»");
    }
    if(typeof cliente !== "function") {
        throw new Error("Se requiere de parámetro «cliente» ser una función para «Castelog.metodos.una_superquery»");
    }
    if(typeof base !== "function") {
        throw new Error("Se requiere de parámetro «base» ser una función para «Castelog.metodos.una_superquery»");
    }
    return (...args) => base({ esquema, cliente }, ...args);
};

//Included:lib/525.castelog.v1.metodos.una_query.js
Castelog.metodos.una_query = function(superquery, tabla, cuyos, ordenada_por, paginada_por) {
    if(typeof superquery !== "object") {
        throw new Error("Se requiere de parámetro «superquery» ser un objeto para «Castelog.metodos.una_query»");
    }
    if(typeof tabla !== "string") {
        throw new Error("Se requiere de parámetro «tabla» ser un string para «Castelog.metodos.una_query»");
    }
    if(typeof cuyos !== "object") {
        throw new Error("Se requiere de parámetro «cuyos» ser una objeto para «Castelog.metodos.una_query»");
    }
    if(typeof ordenada_por !== "object") {
        throw new Error("Se requiere de parámetro «ordenada_por» ser una objeto para «Castelog.metodos.una_query»");
    }
    if(typeof paginada_por !== "object") {
        throw new Error("Se requiere de parámetro «paginada_por» ser una objeto para «Castelog.metodos.una_query»");
    }
    // @TODO...
    return base({ esquema, cliente });
};

//Included:lib/526.castelog.v1.metodos.un_proyecto_npm.js
Castelog.metodos.un_proyecto_npm = async function(extensionDePackage, directorio, esAsincrono = false) {
    try {
        if(typeof extensionDePackage !== "object") {
            throw new Error("Se requiere de parámetro «extensionDePackage» ser un object para «Castelog.metodos.un_proyecto_npm»");
        }
        if(typeof directorio !== "string") {
            throw new Error("Se requiere de parámetro «directorio» ser un string para «Castelog.metodos.un_proyecto_npm»");
        }
        if(typeof global === "undefined" || typeof require !== "function") {
            throw new Error("Se requiere de variable «global» no ser undefined y a variable «require» ser una función para  «Castelog.metodos.un_proyecto_npm»");
        }
        const fs = require("fs");
        const path = require("path");
        await Castelog.metodos.un_comando_de_consola("npm init -y", directorio || process.cwd(), esAsincrono);
        const packagePath = path.resolve(directorio, "package.json");
        let packageContents = undefined;
        if(esAsincrono) {
            packageContents = await fs.promises.readFile(packagePath, "utf8")
        } else {
            packageContents = fs.readFileSync(packagePath, "utf8");
        }
        const packageData = JSON.parse(packageContents);
        Object.assign(packageData, extensionDePackage);
        if(esAsincrono) {
            await fs.promises.writeFile(packagePath, JSON.stringify(packageData, null, 4), "utf8");
        } else {
            fs.writeFileSync(packagePath, JSON.stringify(packageData, null, 4), "utf8");
        }
        return extensionDePackage;
    } catch (error) {
        console.log("Error al desplegar proyecto npm:", error);
        throw error;
    }
};

//Included:lib/527.castelog.v1.metodos.un_comando_de_consola.js
Castelog.metodos.un_comando_de_consola = function(comando, directorio, esAsincrono = false) {
    try {
        if (typeof comando !== "string") {
            throw new Error("Se requiere de parámetro «comando» ser un string para «Castelog.metodos.un_comando_de_consola»");
        }
        if(typeof directorio !== "string") {
            throw new Error("Se requiere de parámetro «directorio» ser un string para «Castelog.metodos.un_comando_de_consola»");
        }
        if (typeof global === "undefined" || typeof require !== "function") {
            throw new Error("Se requiere de variable «global» no ser undefined y a variable «require» ser una función para  «Castelog.metodos.un_comando_de_consola»");
        }
        if(esAsincrono) {
            return new Promise((ok, fail) => {
                return require("child_process").exec(comando, { cwd: directorio ? directorio : process.cwd() }, (error, stdout, stderr) => {
                    if(error) {
                        return fail(error);
                    }
                    if(stderr) {
                        return ok(stderr);
                    }
                    if(stdout) {
                        return ok(stdout);
                    }
                    return ok();
                });
                
            });
        } else {
            return require("child_process").execSync(comando, { cwd: directorio ? directorio : process.cwd() });
        }
    } catch (error) {
        console.log("Error al ejecutar comando de consola:", error);
        throw error;
    }
};

//Included:lib/528.castelog.v1.metodos.un_modulo_importado_o_exportado.js
Castelog.metodos.un_modulo_importado_o_exportado = function() {
    try {
        
    } catch (error) {
        console.log("Error al importar o exportar módulo:", error);
        throw error;
    }
};

//Included:lib/999.finalizacion.part.js
// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////// Aquí termina el script de Castelog //

(async () => {
Castelog.metodos.un_testeo(4 * 1000, ["Test inicial", "Test final"], null);
(await Castelog.metodos.un_test("Test inicial", async () => {
console.log("Test inicial");}));
(await Castelog.metodos.un_test("Test final", async () => {
console.log("Test final");}));
console.log("ok!");})();
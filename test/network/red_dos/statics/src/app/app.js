
// [castelog:compilables] "./js/api-nativa.calo"

// [castelog:compilables] "./js/almacenamiento.calo"

// [castelog:compilables] "./js/traducciones.calo"

// [castelog:compilables] "./js/notificaciones.calo"

// [castelog:compilables] "./js/utilidades.calo"

// [castelog:compilables] "./js/cliente.calo"

// [castelog:empaquetables] "./js/api-nativa.js"

// [castelog:empaquetables] "./js/almacenamiento.js"

// [castelog:empaquetables] "./js/traducciones.js"

// [castelog:empaquetables] "./js/notificaciones.js"

// [castelog:empaquetables] "./js/utilidades.js"

// [castelog:empaquetables] "./js/cliente.js"

// [castelog:html5izable] ACTIVADO con: {"autor":"allnulled","nombre":"restologia-app","version":"1.0.0","contenido":{"head":"<head>\n    <title>Restologia</title>\n    <meta charset=\"utf8\" />\n    <link rel=\"stylesheet\" href=\"/app/styles/reset.css\" />\n    <link rel=\"stylesheet\" href=\"/app/styles/framework.css\" />\n    <link rel=\"stylesheet\" href=\"/app/styles/app.css\" />\n    <link rel=\"stylesheet\" href=\"/app/styles/theme.css\" />\n    <link rel=\"stylesheet\" href=\"/app/styles/custom.css\" />\n</head>","body":"<body>\n    <div id=\"app\"></div>\n</body>"}}

const noop = function() {return {};};
console.log("Inicio de sección de hooks: nativo.introduccion");
console.log("Fin de sección de hooks: nativo.introduccion");
const propiedadesDeControl = {onChange:{type:Function, default:noop}, label:{type:String, default:""}, placeholder:{type:String, default:""}, initialValue:{type:String, default:""}, generalClasses:{type:String, default:""}, labelClasses:{type:String, default:""}, inputClasses:{type:String, default:""}, onClick:{type:Function, default:noop}};
const datosDeControl = function(scope, extensor = {}) {return {internalValue:scope.initialValue, internalOnChange:scope.onChange, internalLabel:scope.label, internalGeneralClasses:scope.generalClasses, internalLabelClasses:scope.labelClasses, internalInputClasses:scope.inputClasses, internalPlaceholder:scope.placeholder, internalOnClick:scope.onClick, ...(extensor)};};
const watchersDeControl = {internalValue:function(v, old) {this.internalOnChange(v, old, this);}};
const Card = Castelog.metodos.un_componente_vue2("Card", "<div class=\"Card\" :class=\"internalGeneralClasses\">\n        <slot></slot>\n    </div>", function(component) {return {props:{...(propiedadesDeControl)}, data:function() {return {...(datosDeControl(this))};}, watch:{...(watchersDeControl)}};}, null);
const ControlForText = Castelog.metodos.un_componente_vue2("ControlForText", "<div class=\"ControlForText\" :class=\"internalGeneralClasses\">\n        <div v-if=\"internalLabel\" :class=\"internalLabelClasses\">{{ $t(internalLabel) }}</div>\n        <textarea class=\"textarea_input\" :class=\"internalInputClasses\" v-model=\"internalValue\" v-bind=\"inputAttributes\" v-if=\"hasMultipleRows\"></textarea>\n        <input type=\"text\" :class=\"internalInputClasses\" v-model=\"internalValue\" v-bind=\"inputAttributes\" v-else />\n    </div>", function(component) {return {props:{inputAttributes:{type:Object, default:function() {return {};}}, hasMultipleRows:{type:Boolean, default:function() {return false;}}, ...(propiedadesDeControl)}, data:function() {return {...(datosDeControl(this))};}, watch:{...(watchersDeControl)}};}, null);
const ControlForPassword = Castelog.metodos.un_componente_vue2("ControlForPassword", "<div class=\"ControlForPassword\" :class=\"internalGeneralClasses\">\n        <div v-if=\"internalLabel\" :class=\"internalLabelClasses\">{{ $t(internalLabel) }}</div>\n        <input type=\"password\" :class=\"internalInputClasses\" v-model=\"internalValue\" />\n    </div>", function(component) {return {props:{...(propiedadesDeControl)}, data:function() {return {...(datosDeControl(this))};}, watch:{...(watchersDeControl)}};}, null);
const ControlForButton = Castelog.metodos.un_componente_vue2("ControlForButton", "<div class=\"ControlForButton\" :class=\"internalGeneralClasses\">\n        <button type=\"button\" :class=\"internalInputClasses\" v-on:click=\"internalOnClick\">\n            <slot></slot>\n        </button>\n    </div>", function(component) {return {props:{...(propiedadesDeControl)}, data:function() {return {...(datosDeControl(this))};}, watch:{...(watchersDeControl)}};}, null);
const Horizontally = Castelog.metodos.un_componente_vue2("Horizontally", "<table :class=\"internalTableClasses\">\n        <tbody :class=\"internalTbodyClasses\">\n            <tr :class=\"internalTrClasses\">\n                <slot></slot>\n            </tr>\n        </tbody>\n    </table>", function(component) {return {props:{tableClasses:{type:[Object, String], required:false, default:function() {return {};}}, tbodyClasses:{type:[Object, String], required:false, default:function() {return {};}}, trClasses:{type:[Object, String], required:false, default:function() {return {};}}}, data:function() {return {internalTableClasses:this.tableClasses, internalTbodyClasses:this.tbodyClasses, internalTrClasses:this.trClasses};}, watch:{}};}, null);
const ControlForDate = Castelog.metodos.un_componente_vue2("ControlForDate", "<div class=\"ControlForDate\">\n        <Horizontally table-classes=\"width_100x100\">\n            <td class=\"width_100x100\">\n                <div class=\"ControlForText\">\n                    <input type=\"text\" v-model=\"internalValue\" disabled />\n                </div>\n            </td>\n            <td class=\"width_1x100\">\n                <ControlForButton input-classes=\"default_button selected\" v-if=\"isSelected\" :on-click=\"() => isSelected = false\" v-bind:key=\"'control-for-date-uid-' + uid + '-show-button'\"> - </ControlForButton>\n                <ControlForButton input-classes=\"default_button\" v-else :on-click=\"() => isSelected = true\" v-bind:key=\"'control-for-date-uid-' + uid + '-hide-button'\"> + </ControlForButton>\n            </td>\n        </Horizontally>\n        <div v-if=\"internalDate && isSelected\" class=\"info_group font_size_small padding_2 margin_top_2\">\n            <Horizontally table-classes=\"width_100x100\">\n                <td class=\"width_1x100\"><ControlForButton input-classes=\"default_button\" :on-click=\"decreaseDate\"> « </ControlForButton></td>\n                <td class=\"width_100x100 text_align_center\">\n                    <span>{{ $t($utilidades.fromWeekdayToText(internalDate.getDay())) }}, {{ $t(\"día\") }} </span>\n                    <span>{{ $utilidades.padLeft(internalDate.getDate(), 2, \"0\") }}</span>\n                </td>\n                <td class=\"width_1x100\"><ControlForButton input-classes=\"default_button\" :on-click=\"increaseDate\"> » </ControlForButton></td>\n            </Horizontally>\n            <Horizontally table-classes=\"width_100x100\">\n                <td style=\"width: 50%;\">\n                    <Horizontally table-classes=\"width_100x100\">\n                        <td class=\"width_1x100\"><ControlForButton input-classes=\"default_button\" :on-click=\"decreaseMonth\"> « </ControlForButton></td>\n                        <td class=\"width_100x100 text_align_center\">\n                            <span>{{ $t($utilidades.fromMonthToText(internalDate.getMonth())) }}</span>\n                        </td>\n                        <td class=\"width_1x100\"><ControlForButton input-classes=\"default_button\" :on-click=\"increaseMonth\"> » </ControlForButton></td>\n                    </Horizontally>\n                </td>\n                <td style=\"width: 50%;\">\n                    <Horizontally table-classes=\"width_100x100\">\n                        <td class=\"width_1x100\"><ControlForButton input-classes=\"default_button\" :on-click=\"decreaseYear\"> « </ControlForButton></td>\n                        <td class=\"width_100x100 text_align_center\">{{ internalDate.getFullYear() }}</td>\n                        <td class=\"width_1x100\"><ControlForButton input-classes=\"default_button\" :on-click=\"increaseYear\"> » </ControlForButton></td>\n                    </Horizontally>\n                </td>\n            </Horizontally>\n            <div class=\"padding_vertical_3\">\n                <table class=\"width_100x100 font_family_monospace\">\n                    <tr v-for=\"(row, rowIndex) in internalCalendar\" v-bind:key=\"'calendar-row-' + rowIndex\">\n                        <td class=\"calendar_cell\" :class=\"cell === internalDate.getDate() ? 'selected' : ''\" v-for=\"(cell, cellIndex) in row\" v-bind:key=\"'calendar-row-' + rowIndex + '-cell-' + cellIndex\">\n                            <template v-if=\"!cell\"></template>\n                            <span v-else class=\"calendar_cell_content font_size_small\" v-on:click=\"() => selectDate(cell)\">\n                                {{ $utilidades.padLeft(cell, 2, \"0\") }}\n                            </span>\n                        </td>\n                    </tr>\n                </table>\n            </div>\n            <Horizontally table-classes=\"width_100x100\">\n                <td style=\"width: 33%;\">\n                    <Horizontally table-classes=\"width_100x100\">\n                        <td class=\"width_1x100\"><ControlForButton input-classes=\"default_button\" :on-click=\"decreaseHours\"> « </ControlForButton></td>\n                        <td class=\"width_100x100 text_align_center\">{{ $utilidades.padLeft(internalDate.getHours(), 2, \"0\") }}</td>\n                        <td class=\"width_1x100\"><ControlForButton input-classes=\"default_button\" :on-click=\"increaseHours\"> » </ControlForButton></td>\n                    </Horizontally>\n                </td>\n                <td style=\"width: 33%;\">\n                    <Horizontally table-classes=\"width_100x100\">\n                        <td class=\"width_1x100\"><ControlForButton input-classes=\"default_button\" :on-click=\"decreaseMinutes\"> « </ControlForButton></td>\n                        <td class=\"width_100x100 text_align_center\">{{ $utilidades.padLeft(internalDate.getMinutes(), 2, \"0\") }}</td>\n                        <td class=\"width_1x100\"><ControlForButton input-classes=\"default_button\" :on-click=\"increaseMinutes\"> » </ControlForButton></td>\n                    </Horizontally>\n                </td>\n                <td style=\"width: 33%;\">\n                    <Horizontally table-classes=\"width_100x100\">\n                        <td class=\"width_1x100\"><ControlForButton input-classes=\"default_button\" :on-click=\"decreaseSeconds\"> « </ControlForButton></td>\n                        <td class=\"width_100x100 text_align_center\">{{ $utilidades.padLeft(internalDate.getSeconds(), 2, \"0\") }}</td>\n                        <td class=\"width_1x100\"><ControlForButton input-classes=\"default_button\" :on-click=\"increaseSeconds\"> » </ControlForButton></td>\n                    </Horizontally>\n                </td>\n            </Horizontally>\n        </div>\n    </div>", function(component) {return {props:{uid:{type:String, default:function() {return Vue.prototype.$utilidades.getRandomId(10);}}, initialDate:{type:[String, Date], required:false, default:function() {return new Date();}}, onChange:{type:Function, required:false, default:noop}}, data:function() {return {isSelected:false, internalDate:undefined, internalValue:undefined, internalOnChange:this.onChange, internalCalendar:undefined};}, watch:{internalDate:function(nuevoValor) {if(typeof nuevoValor === 'string') {
this.internalValue = nuevoValor;
}
else {
this.internalValue = window.$utilidades.fromDateToString(nuevoValor, true);}}, internalValue:function(nuevoValor) {this.internalOnChange(nuevoValor, this);
this.calculateCalendar();}}, methods:{calculateCalendar:function() {const dayFirst = new Date(this.internalDate);
const dayLast = new Date(this.internalDate);
dayFirst.setDate(1);
dayLast.setMonth(dayLast.getMonth() + 1);
dayLast.setDate(0 - 1);
const weekDayFirst = window.$utilidades.adaptWeekDay(dayFirst.getDay()) - 1;
const weekDayLast = window.$utilidades.adaptWeekDay(dayLast.getDay()) - 1;
const calendar = [[]];
let calendarDaysIndex = 0;
let calendarRowsIndex = 0;
for(let index = 0; index < Math.abs(weekDayFirst); index++) {calendar[0].push(undefined);
calendarDaysIndex += 1;}
for(let index = 0; index < dayLast.getDate(); index++) {if((calendarDaysIndex % 7) === 0) {
calendarRowsIndex += 1;
calendar[calendarRowsIndex] = [];
}
calendar[calendarRowsIndex].push(index + 1);
calendarDaysIndex += 1;}
this.internalCalendar = calendar;}, decreaseYear:function() {const date = new Date(this.internalDate);
date.setFullYear(date.getFullYear() - 1);
this.internalDate = date;}, increaseYear:function() {const date = new Date(this.internalDate);
date.setFullYear(date.getFullYear() + 1);
this.internalDate = date;}, decreaseMonth:function() {const date = new Date(this.internalDate);
date.setMonth(date.getMonth() - 1);
this.internalDate = date;}, increaseMonth:function() {const date = new Date(this.internalDate);
date.setMonth(date.getMonth() + 1);
this.internalDate = date;}, decreaseDate:function() {const date = new Date(this.internalDate);
date.setDate(date.getDate() - 1);
this.internalDate = date;}, increaseDate:function() {const date = new Date(this.internalDate);
date.setDate(date.getDate() + 1);
this.internalDate = date;}, decreaseHours:function() {const date = new Date(this.internalDate);
date.setHours(date.getHours() - 1);
this.internalDate = date;}, increaseHours:function() {const date = new Date(this.internalDate);
date.setHours(date.getHours() + 1);
this.internalDate = date;}, decreaseMinutes:function() {const date = new Date(this.internalDate);
date.setMinutes(date.getMinutes() - 1);
this.internalDate = date;}, increaseMinutes:function() {const date = new Date(this.internalDate);
date.setMinutes(date.getMinutes() + 1);
this.internalDate = date;}, decreaseSeconds:function() {const date = new Date(this.internalDate);
date.setSeconds(date.getSeconds() - 1);
this.internalDate = date;}, increaseSeconds:function() {const date = new Date(this.internalDate);
date.setSeconds(date.getSeconds() + 1);
this.internalDate = date;}, selectDate:function(cell) {const date = new Date(this.internalDate);
date.setDate(parseFloat(cell));
this.internalDate = date;}}, mounted:function() {this.internalDate = window.$utilidades.fromStringToDate(this.initialDate, true);
this.internalDate.setMilliseconds(0);}};}, null);
const ControlForFile = Castelog.metodos.un_componente_vue2("ControlForFile", "<div class=\"ControlForFile\">\n        <Horizontally>\n            <td class=\"width_100x100\">\n                <input class=\"display_none\" type=\"file\" :ref=\"'column-file-for-' + uid\" v-on:change=\"() => setFilePath()\" />\n                <div class=\"form_control_input\">{{ $t(\"File: \") }} {{ internalFilePath }}</div>\n            </td>\n            <td class=\"width_1x100\">\n                <ControlForButton input-classes=\"min_width_25px success_button\" :on-click=\"() => downloadFile()\"> Descargar </ControlForButton>\n            </td>\n            <td class=\"width_1x100\">\n                <ControlForButton input-classes=\"min_width_25px\" :on-click=\"() => changeFile()\"> * </ControlForButton>\n            </td>\n        </Horizontally>\n    </div>", function(component) {return {props:{initialValue:{type:[String, Date], required:false, default:function() {return new Date();}}, onChange:{type:Function, required:false, default:noop}, uid:{type:String, default:function() {return window.$utilidades.getRandomId(10);}}, formControlParent:{type:Object, required:true}}, data:function() {return {internalValue:this.initialValue, internalFilePath:undefined};}, watch:{}, methods:{changeFile:function() {try {return this.$refs["column-file-for-" + this.uid].click();} catch(error) {
this.$notificaciones.error(error);}}, setFilePath:function() {try {const inputFile = this.$refs["column-file-for-" + this.uid];
const inputFileData = inputFile.files[0];
this.internalFilePath = inputFileData.name + " [mimetype: " + inputFileData.type + "] [space: " + inputFileData.size + " bytes]";} catch(error) {
this.$notificaciones.error(error);}}, getFileInputs:function() {try {const inputFile = this.$refs["column-file-for-" + this.uid];
return [inputFile];} catch(error) {
this.$notificaciones.error(error);}}, downloadFile:function() {try {window.alert("Funcionalidad por completar");} catch(error) {
this.$notificaciones.error(error);}}}, mounted:function() {}};}, null);
const ControlForImage = Castelog.metodos.un_componente_vue2("ControlForImage", "<div class=\"ControlForImage\">\n        <Horizontally>\n            <td class=\"width_100x100\">\n                <input class=\"display_none\" type=\"file\" :ref=\"'column-image-for-' + uid\" v-on:change=\"() => setFilePath()\" />\n                <div class=\"ControlForText\">\n                    <input type=\"text\" disabled class=\"form_control_input\" :value=\"$t('Image: ') + internalFilePath\" />\n                </div>\n            </td>\n            <td class=\"width_1x100\">\n                <ControlForButton input-classes=\"min_width_25px success_button\" :on-click=\"() => openImage()\"> Abrir </ControlForButton>\n            </td>\n            <td class=\"width_1x100\">\n                <ControlForButton input-classes=\"min_width_25px\" :on-click=\"() => changeFile()\"> * </ControlForButton>\n            </td>\n        </Horizontally>\n        <div v-on:click=\"() => refreshImage()\">\n            <Horizontally table-classes=\"width_100x100\" v-if=\"internalImageUrl\">\n                <td class=\"width_100x100\" colspan=\"100\" v-bind:key=\"internalImageUid\">\n                    <div class=\"image_preview_container\">\n                        <div class=\"image_preview_wrapper\">\n                            <img class=\"image_preview\" :src=\"internalImageUrl\" alt=\"No se encontró imagen\" />\n                        </div>\n                    </div>\n                </td>\n            </Horizontally>\n        </div>\n    </div>", function(component) {return {props:{initialValue:{type:[String, Date], required:false, default:function() {return new Date();}}, onChange:{type:Function, required:false, default:noop}, uid:{type:String, required:false, default:function() {return window.$utilidades.getRandomId(10);}}, imageUrl:{type:String, required:false, default:undefined}, formControlParent:{type:Object, required:true}}, data:function() {return {internalValue:this.initialValue, internalFilePath:this.initialValue, internalImageUrl:this.imageUrl || this.initialValue, internalImageUid:this.$utilidades.getRandomId(10)};}, watch:{}, methods:{changeFile:function() {try {return this.$refs["column-image-for-" + this.uid].click();} catch(error) {
this.$notificaciones.error(error);}}, setFilePath:function() {try {const inputFile = this.$refs["column-image-for-" + this.uid];
const fileItem = inputFile.files[0];
if(fileItem) {
this.internalFilePath = fileItem.name + " [mimetype: " + fileItem.type + "] [space: " + fileItem.size + " bytes]";
}} catch(error) {
this.$notificaciones.error(error);}}, getFileInputs:function() {try {const inputFile = this.$refs["column-image-for-" + this.uid];
return [inputFile];} catch(error) {
this.$notificaciones.error(error);}}, refreshImage:function() {this.internalImageUrl = false;
const imageUrlInstance = new URL(this.imageUrl);
const imageUrlParams = new URLSearchParams(imageUrlInstance.search);
imageUrlParams.set("nocache", this.$utilidades.getRandomId(10));
const imageUrl2 = imageUrlInstance.origin + imageUrlInstance.pathname + '?' + imageUrlParams.toString();
setTimeout(() => {this.internalImageUrl = imageUrl2;},0.5 * 1000);}, openImage:function() {window.alert("Funcionalidad por completar");}}, mounted:function() {}};}, null);
const FormControl = Castelog.metodos.un_componente_vue2("FormControl", "<div class=\"FormControl padding_top_2 padding_bottom_2\" style=\"border-bottom: 1px dashed rgba(221, 221, 221,0.2);\" v-if=\"meetsOptionConditions()\">\n        <div class=\"\">\n            <span class=\"font_weight_bold\">{{ $window.$utilidades.capitalizeString(columnId) }}: </span>\n            <span class=\"font_size_small text_style_as_two\">[ {{ internalColumnMetadata.attributes.isType }} {{ internalColumnMetadata.attributes.isSubtype || \"\" }} ] </span>\n            <span class=\"font_size_small text_style_as_three\">{{ internalColumnMetadata.attributes.hasDescription || \"\" }}</span>\n        </div>\n        <div v-if=\"internalColumnMetadata.attributes.isType === 'string' && internalColumnMetadata.attributes.isSubtype === null\">\n            <div class=\"ControlForText\">\n                <input class=\"form_control_input\" type=\"text\" v-model=\"internalValue\" :ref=\"'form-control-' + uid\" />\n            </div>\n        </div>\n        <div v-else-if=\"internalColumnMetadata.attributes.isType === 'string' && internalColumnMetadata.attributes.isSubtype === 'password'\">\n            <div class=\"ControlForPassword\">\n                <input class=\"form_control_input\" type=\"password\" v-model=\"internalValue\" :ref=\"'form-control-' + uid\" />\n            </div>\n        </div>\n        <div v-else-if=\"internalColumnMetadata.attributes.isType === 'string' || internalColumnMetadata.attributes.isType === 'text'\">\n            <template v-if=\"internalColumnMetadata.attributes.hasMultipleRows\">\n                <div class=\"ControlForText\">\n                    <textarea class=\"form_control_input textarea_input\" type=\"text\" v-model=\"internalValue\" :ref=\"'form-control-' + uid\"></textarea>\n                </div>\n            </template>\n            <template v-else>\n                <div class=\"ControlForText\">\n                    <input class=\"form_control_input\" type=\"text\" v-model=\"internalValue\" :ref=\"'form-control-' + uid\" />\n                </div>\n            </template>\n        </div>\n        <div v-else-if=\"internalColumnMetadata.attributes.isType === 'number'\">\n            <div class=\"ControlForText\">\n                <input class=\"form_control_input\" type=\"number\" v-model=\"internalValue\" :ref=\"'form-control-' + uid\" />\n            </div>\n        </div>\n        <div v-else-if=\"internalColumnMetadata.attributes.isType === 'boolean'\">\n            <div class=\"ControlForCheckbox\">\n                <input class=\"form_control_input\" type=\"checkbox\" v-model=\"internalValue\" :ref=\"'form-control-' + uid\" />\n            </div>\n        </div>\n        <div v-else-if=\"internalColumnMetadata.attributes.isType === 'option'\">\n            <div class=\"ControlForSelect\">\n                <select class=\"form_control_input select_input\" v-model=\"internalValue\" :ref=\"'form-control-' + uid\">\n                    <option v-for=\"(optionData, optionIndex) in internalColumnMetadata.attributes.hasOptions\" v-bind:key=\"'form-control-' + uid + '-option-' + optionIndex\" :value=\"optionData.value\">\n                        {{ optionData.label }}\n                    </option>\n                </select>\n            </div>\n        </div>\n        <div v-else-if=\"internalColumnMetadata.attributes.isType === 'options'\">\n            <div class=\"ControlForCheckbox\">\n                <input class=\"form_control_input\" type=\"checkbox\" v-model=\"internalValue\" :ref=\"'form-control-' + uid\" />\n            </div>\n        </div>\n        <div v-else-if=\"internalColumnMetadata.attributes.isType === 'object'\">\n            <DataTableComponent\n                mode=\"input\"\n                mode-type=\"object\"\n                :target-project=\"$rest.getReferredProjectAndTableByColumn(internalProjectId, internalTableId, internalColumnId).project\"\n                :target-table=\"$rest.getReferredProjectAndTableByColumn(internalProjectId, internalTableId, internalColumnId).table\"\n                :on-change=\"v => internalValue = v\"\n                :initial-value=\"internalValue\"\n                :ref=\"'form-control-' + uid\" />\n        </div>\n        <div v-else-if=\"internalColumnMetadata.attributes.isType === 'list'\">\n            <DataTableComponent\n                mode=\"input\"\n                mode-type=\"list\"\n                :target-project=\"$rest.getReferredProjectAndTableByColumn(internalProjectId, internalTableId, internalColumnId).project\"\n                :target-table=\"$rest.getReferredProjectAndTableByColumn(internalProjectId, internalTableId, internalColumnId).table\"\n                :on-change=\"v => internalValue = v\"\n                :initial-value=\"internalValue\"\n                :ref=\"'form-control-' + uid\" />\n        </div>\n        <div v-else-if=\"internalColumnMetadata.attributes.isType === 'time'\">\n            <ControlForDate\n                :initial-value=\"internalValue\"\n                :on-change=\"v => internalValue = v\"\n                :ref=\"'form-control-' + uid\" />\n        </div>\n        <div v-else-if=\"internalColumnMetadata.attributes.isType === 'file'\">\n            <ControlForFile\n                :initial-value=\"internalValue\"\n                :on-change=\"v => internalValue = v\"\n                :ref=\"'form-control-' + uid\"\n                :form-control-parent=\"this\" />\n        </div>\n        <div v-else-if=\"internalColumnMetadata.attributes.isType === 'image'\">\n            <ControlForImage\n                :initial-value=\"internalValue\"\n                :on-change=\"v => internalValue = v\"\n                :image-url=\"getImageUrl()\"\n                :ref=\"'form-control-' + uid\"\n                :form-control-parent=\"this\" />\n        </div>\n        <div v-else>\n            <input class=\"form_control_input\" type=\"text\" v-model=\"internalValue\" />\n        </div>\n    </div>", function(component) {return {props:{uid:{type:String, required:false, default:function() {return this.$utilidades.getRandomId(10);}}, fullRow:{type:Object, required:true}, projectId:{type:String, required:true}, columnId:{type:String, required:true}, tableId:{type:String, required:true}, tableMetadata:{type:Object, required:true}, itemId:{type:[Number, String], required:false, default:undefined}, initialValue:{type:[Array, Object, String, Number, Boolean, Function], required:false, default:() => {return "";}}, onChange:{type:Function, required:false, default:noop}}, data:function() {return {internalFullRow:this.fullRow, internalProjectId:this.projectId, internalTableId:this.tableId, internalTableMetadata:this.tableMetadata, internalItemId:this.itemId, internalColumnId:this.columnId, internalColumnMetadata:this.tableMetadata.columns[this.columnId], internalOnChange:this.onChange, internalValue:this.initialValue};}, methods:{getImageUrl:function() {try {return this.$rest.getFileUrl(this.internalProjectId, this.tableId, this.internalItemId, this.columnId);} catch(error) {
this.$notificaciones.error(error);}}, getFiles:function() {try {if((!(["file", "image"].indexOf(this.internalColumnMetadata.attributes.isType) !== -1))) {
throw new Error("Required form control to be «file» or «image» in order to «getFiles»");
}
const controlElement = this.$refs["form-control-" + this.uid];
const fileInputs = controlElement.getFileInputs();
return fileInputs;} catch(error) {
this.$notificaciones.error(error);}}, meetsOptionConditions:function() {try {const optionConditionGroups = this.internalColumnMetadata.attributes.hasOptionConditions;
if(typeof optionConditionGroups === 'undefined') {
return true;
}
if(optionConditionGroups === null) {
return true;
}
if((!(Array.isArray(optionConditionGroups)))) {
throw new Error("Required configuration on «schema.tables[" + this.internalTableId + "].columns[" + this.internalColumnId + "].attributes.hasOptionConditions» to be an array, «undefined» or «null» in order to «meetsOptionConditions»");
}
for(const groupIndex in optionConditionGroups) {
const optionConditionGroup = optionConditionGroups[groupIndex];
let resultConditionGroup = true;
if((!(Array.isArray(optionConditionGroup)))) {
throw new Error("Required configuration on «schema.tables[" + JSON.stringify(this.internalTableId) + "].columns[" + JSON.stringify(this.internalColumnId) + "].attributes.hasOptionConditions» on index «" + groupIndex + "» to be an array in order to «meetsOptionConditions»");
}
for(const atomicIndex in optionConditionGroup) {
const atomicCondition = optionConditionGroup[atomicIndex];
if((!(Array.isArray(atomicCondition)))) {
throw new Error("Required configuration on «schema.tables[" + JSON.stringify(this.internalTableId) + "].columns[" + JSON.stringify(this.internalColumnId) + "].attributes.hasOptionConditions» on index «" + groupIndex + "».«" + atomicIndex + "» to be an array in order to «meetsOptionConditions»");
}
const atomicConditionResult = this.resolveCondition(atomicCondition);
resultConditionGroup = resultConditionGroup && atomicConditionResult;
if(resultConditionGroup === false) {
return false;
}}
}

return true;} catch(error) {
this.$notificaciones.error(error);}}, resolveCondition:function(parametros) {const sujeto = parametros[0];
const operacion = parametros[1];
const predicado = parametros[2];
const usandoVariable = parametros[3] || false;
if(operacion === "=") {
const sujetoFinal = this.internalFullRow.getProperty(sujeto);
const predicadoFinal = (usandoVariable ? this.internalFullRow.getProperty(predicado) : predicado);
if((!(sujetoFinal === predicadoFinal))) {
return false;
}
}
return true;}}, watch:{internalValue:function(nuevoValor) {this.internalOnChange(nuevoValor);}}};}, null);
const TitleOfPage = Castelog.metodos.un_componente_vue2("TitleOfPage", "<div class=\"TitleOfPage\">\n        <h3 class=\"padding_horizontal_2 text_align_right\"><slot></slot></h3>\n    </div>", null, null);
const LanguageSelector = Castelog.metodos.un_componente_vue2("LanguageSelector", "<div class=\"LanguageSelector text_align_right\">\n        <Horizontally>\n            <td class=\"width_1x100\">\n                <span>{{ $t(\"Idioma:\") }}</span>\n            </td>\n            <td class=\"width_100x100\">\n                <div class=\"ControlForSelect\">\n                    <select v-model=\"selected_language\">\n                        <option value=\"es\">Español</option>\n                        <option value=\"ca\">Català</option>\n                        <option value=\"en\">English</option>\n                    </select>\n                </div>\n            </td>\n        </Horizontally>\n    </div>", function(component) {return {data:function() {return {selected_language:""};}, watch:{selected_language:function(nuevoValor) {this.$almacenamiento.persistir("preferences.user.language", nuevoValor);
this.$i18n.i18next.changeLanguage(nuevoValor);}}, mounted:function() {this.selected_language = this.$almacenamiento.obtener("preferences.user.language", this.$i18n.i18next.language);}};}, null);
const Notificaciones = Castelog.metodos.un_componente_vue2("Notificaciones", "<div class=\"Notificaciones\">\n        <div style=\"position: fixed; top: auto; bottom: 0; left: 0; right: 0;\">\n            <div class=\"notification_list\">\n                <div class=\"padding_horizontal_0\" v-if=\"notifications.length\">\n                    <div class=\"notification_group_wrapper\" v-for=\"(notification, notificationIndex) in notifications\" v-bind:key=\"'notifications-list-notification-' + notificationIndex\">\n                        <div class=\"info_group danger_group notification_group\">\n                            <span class=\"notification_trace\">[{{ notification.trace }}]</span> <span class=\"notification_message\">{{ notification.message }}</span>\n                        </div>\n                    </div>\n                    <div class=\"padding_top_2\"></div>\n                </div>\n            </div>\n        </div>\n    </div>", function(component) {return {data:function() {return {notifications:[]};}, methods:{addNotification:function(notification) {console.log("add notif:" + JSON.stringify(notification, null, 2));
const $id = window.$utilidades.getRandomId(10);
const notification2 = Object.assign({}, notification);
notification2.$id = $id;
if(notification instanceof Error) {
this.notifications.push(notification2);
}
else {
this.notifications.push(notification2);}
setTimeout(() => {const indiceNotification = Object.keys(this.notifications).filter((index) => {return this.notifications[index].$id === $id;})[0];
this.notifications.splice(indiceNotification, 1);}, notification2.timeout || 5000);}}};}, null);
let relojInterval = undefined;
const Topbar = Castelog.metodos.un_componente_vue2("Topbar", "<div class=\"Topbar\">\n        <Horizontally>\n            <td class=\"width_1x100\">\n                <ControlForButton :on-click=\"toggleNavigation\">\n                    #\n                </ControlForButton>\n            </td>\n            <td class=\"width_100x100 text_align_center\">\n                <h2>{{ hora }}</h2>\n            </td>\n        </Horizontally>\n    </div>", function(component) {return {data:function() {relojInterval = setInterval(() => {const fecha = new Date();
fecha.setMilliseconds(0);
this.hora = this.$utilidades.fromDateToString(fecha, true).replace(new RegExp("\\.[0-9][0-9][0-9]$", "g"), "");}, 1000);
return {hora:""};}, methods:{toggleNavigation:function() {this.$router.history.push("/home");}}};}, null);
const BackButton = Castelog.metodos.un_componente_vue2("BackButton", "<div class=\"BackButton\" :class=\"internalGeneralClasses\">\n        <ControlForButton input-classes=\"width_auto\" :on-click=\"goToRouteUp\" >{{ $t(\"Atrás\") }}</ControlForButton>\n    </div>", function(component) {return {props:{generalClasses:{type:String, default:""}, levels:{type:Number, default:1}}, data:function() {return {internalGeneralClasses:this.generalClasses, internalLevels:this.levels};}, methods:{goToRouteUp:function() {let partesDeRuta = this.$route.path.split("/");
for(let index = 0; index < this.internalLevels; index++) {partesDeRuta.pop();}
let nuevaRuta = partesDeRuta.join("/");
if(nuevaRuta === "") {
nuevaRuta = "/home";
}
this.$router.history.push(nuevaRuta);}}};}, null);
const HomePage = Castelog.metodos.un_componente_vue2("HomePage", "<div class=\"HomePage\">\n        <TitleOfPage>\n            <Horizontally>\n                <td class=\"width_auto\"><BackButton general-classes=\"visibility_hidden\" /></td>\n                <td class=\"width_100x100\">{{ $t(\"Inicio\") }}</td>\n            </Horizontally>\n        </TitleOfPage>\n        <hr />\n        <div class=\"padding_2 padding_left_0 padding_bottom_0\">\n            <Card>\n                <!-- @SECCIÓN DE HOOK: nativo.botones_de_home_page -->\n\n<!-- @SECCIÓN DE IMPLEMENTACIÓN DE HOOKS DE: nativo.botones_de_home_page -->\n\n<!-- @SECCIÓN DE IMPLEMENTACIÓN DE HOOK: nativo.botones_de_home_page [nº 1] [Inicio de sección] -->\n\n<div>\n                <ul class=\"BigMenuSquaresList\">\n                    <li v-on:click=\"() => $router.history.push('/page/01')\"><span class=\"link_text\">Página 01</span></li>\n                    <li v-on:click=\"() => $router.history.push('/page/02')\"><span class=\"link_text\">Página 02</span></li>\n                    <li v-on:click=\"() => $router.history.push('/page/03')\"><span class=\"link_text\">Página 03</span></li>\n                    <li v-on:click=\"() => $router.history.push('/page/04')\"><span class=\"link_text\">Página 04</span></li>\n                    <li v-on:click=\"() => $router.history.push('/page/05')\"><span class=\"link_text\">Página 05</span></li>\n                </ul>\n            </div>\n\n<!-- @SECCIÓN DE IMPLEMENTACIÓN DE HOOK: nativo.botones_de_home_page [nº 1] [Final de sección] -->\n                <ul class=\"BigMenuSquaresList\">\n                    <li class=\"margin_bottom_2\" v-on:click=\"() => $router.history.push('/data')\">\n                        <span class=\"link_text\">{{ $t(\"Datos\") }}</span>\n                    </li>\n                    <li class=\"margin_bottom_2\" v-on:click=\"() => $router.history.push('/analysis')\">\n                        <span class=\"link_text\">{{ $t(\"Analíticas\") }}</span>\n                    </li>\n                    <li class=\"margin_bottom_2\" v-on:click=\"() => $router.history.push('/settings')\">\n                        <span class=\"link_text\">{{ $t(\"Configuraciones\") }}</span>\n                    </li>\n                    <li class=\"margin_bottom_2\" v-on:click=\"() => $router.history.push('/logout')\">\n                        <span class=\"link_text\">{{ $t(\"Cerrar sesión\") }}</span>\n                    </li>\n                </ul>\n            </Card>\n        </div>\n    </div>", null, null);
const LoginPage = Castelog.metodos.un_componente_vue2("LoginPage", "<div class=\"LoginPage\">\n        <TitleOfPage>\n            <Horizontally>\n                <td class=\"width_auto\"><BackButton :general-classes=\"$root.authentication ? '' : 'visibility_hidden'\" /></td>\n                <td class=\"width_100x100\">{{ $t(\"Identificación\") }}</td>\n            </Horizontally>\n        </TitleOfPage>\n        <hr />\n        <div class=\"padding_vertical_4 text_align_center\"> \n            {{ $root.metadata.project }}\n        </div>\n        <hr />\n        <div class=\"text_align_center remarked_row padding_horizontal_2\">\n            <div class=\"padding_horizontal_2 text_align_left display_inline_block margin_vertical_4 info_group default_row\" style=\"max-width: 180px;\">\n                <Card general-classes=\"\">\n                    <ControlForText :on-change=\"v => user = v\" label=\"Usuario:\" ref=\"Login_user_input\" general-classes=\"padding_top_2\" />\n                    <ControlForPassword :on-change=\"v => password = v\" label=\"Contraseña:\" ref=\"Login_password_input\" general-classes=\"padding_top_2\" />\n                    <hr class=\"margin_top_2\"/>\n                    <ControlForButton :on-click=\"login\" general-classes=\"padding_vertical_2\" input-classes=\"success_button\">{{ $t(\"Identificarse\") }}</ControlForButton>\n                </Card>\n            </div>\n        </div>\n        <hr />\n        <div class=\"padding_2\">\n            <LanguageSelector />\n        </div>\n    </div>", function(component) {return {data:function() {window.$loginpage = this;
return {user:this.$almacenamiento.obtener("preferences.user.user", ""), password:this.$almacenamiento.obtener("preferences.user.password", "")};}, methods:{login:async function() {try {this.$rest.setRootComponent(this.$root);
const respuestaSchema = (await this.$rest.schema(false));
const respuestaLogin = (await this.$rest.login(this.user, this.password));
const respuestaFullSchema = (await this.$rest.schema(true));
this.$router.history.push("/home");} catch(error) {
this.$notificaciones.error(error, "LoginPage.methods.login");}}}, watch:{user:function(nuevoValor) {try {this.$almacenamiento.persistir("preferences.user.user", nuevoValor);} catch(error) {
this.$notificaciones.error(error, "LoginPage.watch.user");}}, password:function(nuevoValor) {try {this.$almacenamiento.persistir("preferences.user.password", nuevoValor);} catch(error) {
this.$notificaciones.error(error, "LoginPage.watch.password");}}}, mounted:function() {try {this.$refs["Login_user_input"].internalValue = this.$almacenamiento.obtener("preferences.user.user", "");
this.$refs["Login_password_input"].internalValue = this.$almacenamiento.obtener("preferences.user.password", "");} catch(error) {
this.$notificaciones.error(error, "LoginPage.mounted");}}};}, null);
const LogoutPage = Castelog.metodos.un_componente_vue2("LogoutPage", "<div class=\"LogoutPage\">\n        <TitleOfPage>\n            <Horizontally>\n                <td class=\"width_auto\"><BackButton :general-classes=\"$root.authentication ? '' : 'visibility_hidden'\" /></td>\n                <td class=\"width_100x100\">{{ $t(\"Cerrar sesión\") }}</td>\n            </Horizontally>\n        </TitleOfPage>\n        <hr />\n        <div class=\"padding_horizontal_2 text_align_center\">\n            <div class=\"font_size_small padding_2\">{{ $t(\"¿Seguro que quieres abandonar la aplicación?\") }}</div>\n            <div>\n                <span class=\"display_inline_block width_auto\">\n                    <ControlForButton :on-click=\"() => $router.history.push('/home')\" general-classes=\"padding_vertical_2 text_align_center\" input-classes=\"display_inline_block width_auto success_button no_break_line\">\n                        {{ $t(\"Volver atrás\") }}\n                    </ControlForButton>\n                </span>\n                <span class=\"display_inline_block width_auto\">\n                    <ControlForButton :on-click=\"closeSession\" general-classes=\"padding_vertical_2 text_align_center\" input-classes=\"display_inline_block width_auto danger_button no_break_line\">\n                        {{ $t(\"Cerrar sesión\") }}\n                    </ControlForButton>\n                </span>\n            </div>\n        </div>\n    </div>", function(component) {return {data:function() {return {};}, methods:{closeSession:async function() {try {const respuestaLogout = (await this.$rest.logout());
if((!(this.$root.authentication))) {
this.$router.history.push("/home");
}
else {
this.$notificaciones.error(respuestaLogout);}} catch(error) {
this.$notificaciones.error(error, "LogoutPage.methods.closeSession");}}}};}, null);
const DataTablePage = Castelog.metodos.un_componente_vue2("DataTablePage", "<div class=\"DataTablePage\">\n        <template v-if=\"isLoaded\">\n            <TitleOfPage>\n                <Horizontally>\n                    <td class=\"width_auto\"><BackButton :levels=\"2\" /></td>\n                    <td class=\"width_100x100\">{{ $t(\"Datos de\") }} {{ $t(\"#\" + $route.params.table) }}</td>\n                </Horizontally>\n            </TitleOfPage>\n            <hr/>\n            <div class=\"padding_horizontal_2\">\n                <DataTableComponent\n                    mode=\"view\"\n                    :target-project=\"$route.params.project\"\n                    :target-table=\"$route.params.table\"\n                />\n            </div>\n        </template>\n    </div>", function(component) {return {data:function() {return {isLoaded:true};}, watch:{$route:function(nuevoValor) {this.isLoaded = false;
setTimeout(() => {this.isLoaded = true;},0 * 1000);}}};}, null);
const DataTableComponent = Castelog.metodos.un_componente_vue2("DataTableComponent", "<div class=\"DataTableComponent\">\n        <div v-if=\"mode === 'input'\">\n            <Horizontally>\n                <td class=\"width_1x100\">\n                    <span class=\"font_size_small\">{{ (modeType === 'list') ? $t(\"Seleccionados\") : $t(\"Seleccionado\") }}: </span>\n                </td>\n                <td class=\"width_100x100\">\n                    <div class=\"ControlForText\">\n                        <input type=\"text\" v-model=\"internalValue\" disabled />\n                    </div>\n                </td>\n                <td class=\"width_1x100 min_width_25px\">\n                    <div v-if=\"isSelected\" v-bind:key=\"'data-table-component-uid-' + uid + '-button-for-is-selected-row-on-true'\">\n                        <ControlForButton input-classes=\"default_button selected\" :on-click=\"() => isSelected = false\">-</ControlForButton>\n                    </div>\n                    <div v-else v-bind:key=\"'data-table-component-uid-' + uid + '-button-for-is-selected-row-on-false'\">\n                        <ControlForButton input-classes=\"default_button\" :on-click=\"() => isSelected = true\">+</ControlForButton>\n                    </div>\n                </td>\n            </Horizontally>\n        </div>\n        <div v-if=\"(mode === 'view') || (mode === 'input' && isSelected === true)\" :class=\"(mode === 'input') ? 'info_group padding_2 margin_top_2' : ''\">\n            <Horizontally>\n                <td class=\"width_1x100\">\n                    <div class=\"ControlForButton\">\n                        <button type=\"text\" :class=\"'default_button ' + (isAdvancedSearch ? 'selected' : '')\" v-on:click=\"toggleAdvancedSearch\">#</button>\n                    </div>\n                </td>\n                <td class=\"width_100x100\">\n                    <ControlForText :on-change=\"v => search = v\"></ControlForText>\n                </td>\n                <td class=\"width_1x100\">\n                    <ControlForButton input-classes=\"default_button\" :on-click=\"loadRows\">Buscar</ControlForButton>\n                </td>\n            </Horizontally>\n            <div v-if=\"isAdvancedSearch\" class=\"info_group margin_bottom_2\">\n                <div class=\"padding_horizontal_2\">\n                    <Horizontally>\n                        <span class=\"display_inline_block\">\n                            <div class=\"ControlForButton\">\n                                <button :class=\"'default_button ' + (isAdvancedSearchPanel === 'where' ? 'selected' : '')\" v-on:click=\"goToWhereSettings\">{{ $t(\"Filtros\") }}</button>\n                            </div>\n                        </span>\n                        <span class=\"display_inline_block\">\n                            <div class=\"ControlForButton\">\n                                <button :class=\"'default_button ' + (isAdvancedSearchPanel === 'sort' ? 'selected' : '')\" v-on:click=\"goToOrderSettings\">{{ $t(\"Orden\") }}</button>\n                            </div>\n                        </span>\n                        <span class=\"display_inline_block\">\n                            <div class=\"ControlForButton\">\n                                <button :class=\"'default_button ' + (isAdvancedSearchPanel === 'paginate' ? 'selected' : '')\" v-on:click=\"goToPaginationSettings\">{{ $t(\"Paginación\") }}</button>\n                            </div>\n                        </span>\n                        <span class=\"display_inline_block\">\n                            <ControlForButton input-classes=\"success_button\" :on-click=\"goToAddItemPage\"><span class=\"no_break_line\">{{ $t(\"Nuevo\") }}</span></ControlForButton>\n                        </span>\n                    </Horizontally>\n                </div>\n                <div v-if=\"isAdvancedSearchPanel === 'where'\">\n                    <div class=\"padding_horizontal_2 margin_top_0\">\n                        <div class=\"padding_vertical_2 padding_vertical_1 font_size_small\" v-if=\"where.length === 0\">No hay filtros aplicados ahora mismo.</div>\n                        <div class=\"margin_bottom_0\" v-for=\"(whereRule, whereIndex) in where\" v-bind:key=\"'select-where-filter-' + whereIndex\">\n                            <div class=\"info_group padding_2 margin_bottom_1 remarked_row\">\n                                <span class=\"info_group_item display_block width_100x100 vertical_align_top\">\n                                    <div class=\"padding_0 padding_top_2 margin_bottom_2 default_row font_size_small no_break_line\">\n                                        <div>{{ $t(\"Columna inicial\") }}:</div>\n                                        <div class=\"ControlForSelect\">\n                                            <select v-model=\"whereRule[0]\">\n                                                <option value=\"id\">{{ $t(\"id\") }}</option>\n                                                <option :value=\"columnIndex\" v-for=\"(column, columnIndex) in definition.columns\" v-bind:key=\"'select-where-filter-parameter-1-rule-' + whereIndex + '-option-' + columnIndex\">\n                                                    {{ columnIndex }}\n                                                </option>\n                                            </select>\n                                        </div>\n                                    </div>\n                                </span>\n                                <template v-if=\"whereRule[0]\">\n                                    <span class=\"info_group_item display_block width_100x100 vertical_align_top\">\n                                        <div class=\"padding_0 padding_top_2 margin_bottom_2 default_row font_size_small\">\n                                            <div>{{ $t(\"Operador\") }}:</div>\n                                            <div class=\"ControlForSelect\">\n                                                <select v-model=\"whereRule[1]\">\n                                                    <option :value=\"operator\" v-for=\"(operator, operatorIndex) in allOperators\" v-bind:key=\"'select-where-filter-parameter-2-rule-' + whereIndex + '-option-' + operatorIndex\">\n                                                        {{ operatorIndex }}\n                                                    </option>\n                                                </select>\n                                            </div>\n                                        </div>\n                                    </span>\n                                    <span class=\"info_group_item display_block width_100x100 vertical_align_top\">\n                                        <div class=\"padding_0 padding_top_2 margin_bottom_2 default_row font_size_small\">\n                                            <div>{{ $t(\"Tipo\") }}:</div>\n                                            <div class=\"ControlForSelect\">\n                                                <select v-model=\"whereRule[3]\" value=\"string\">\n                                                    <option :value=\"operandType\" v-for=\"(operandType, operandTypeIndex) in allOperandTypes\" v-bind:key=\"'select-where-filter-parameter-3-type-rule-' + whereIndex + '-option-' + operandTypeIndex\">\n                                                        {{ operandType }}\n                                                    </option>\n                                                </select>\n                                            </div>\n                                        </div>\n                                    </span>\n                                </template>\n                                <template v-if=\"whereRule[3]\">\n                                    <span class=\"info_group_item display_block width_100x100 vertical_align_top\">\n                                        <div class=\"padding_0 padding_top_2 margin_bottom_2 default_row font_size_small\">\n                                            <div v-if=\"whereRule[3] === 'json'\">{{ $t(\"Valor\") }}:</div>\n                                            <div v-else-if=\"whereRule[3] === 'string'\">{{ $t(\"Texto\") }}:</div>\n                                            <div>\n                                                <ControlForText :on-change=\"v => whereRule[2] = v\" />\n                                            </div>\n                                        </div>\n                                    </span>\n                                </template>\n                                <span class=\"info_group_item display_block width_auto vertical_align_top margin_bottom_0\">\n                                    <ControlForButton general-classes=\"text_align_right\" input-classes=\"width_auto display_inline_block danger_button no_break_line\" :on-click=\"() => deleteWhere(whereIndex)\">Eliminar filtro</ControlForButton>\n                                </span>\n                            </div>\n                        </div>\n                        <div class=\"margin_top_2\" v-bind:key=\"'add-where-rule-button'\">\n                            <ControlForButton general-classes=\"text_align_right\" input-classes=\"width_auto display_inline_block\" :on-click=\"addWhere\">{{ $t(\"Añadir filtro\") }}</ControlForButton>\n                        </div>\n                    </div>\n                </div>\n                <div v-else-if=\"isAdvancedSearchPanel === 'sort'\">\n                    <div class=\"padding_horizontal_2 margin_top_0\">\n                        <div class=\"padding_vertical_2 padding_vertical_1 font_size_small\" v-if=\"order.length === 0\">No hay reglas de orden aplicadas ahora mismo.</div>\n                        <div class=\"margin_bottom_0\" v-else>\n                            <div class=\"padding_horizontal_0 padding_bottom_0 margin_bottom_2 remarked_row\">\n                                <template v-for=\"(orderRule, orderIndex) in order\">\n                                    <div class=\"info_group padding_2 margin_bottom_1 remarked_row\">\n                                        <span class=\"info_group_item display_block width_100x100 vertical_align_top\" v-bind:key=\"'select-order-filter-parameter-1-rule-' + orderIndex + '-row-for-subject'\">\n                                            <div class=\"padding_0 padding_top_2 margin_bottom_2 default_row font_size_small\">\n                                                <div>{{ $t(\"Columna\") }}:</div>\n                                                <div class=\"ControlForSelect\">\n                                                    <select v-model=\"orderRule[0]\">\n                                                        <option value=\"id\">{{ $t(\"id\") }}</option>\n                                                        <option :value=\"columnIndex\" v-for=\"(column, columnIndex) in definition.columns\" v-bind:key=\"'select-order-filter-parameter-1-rule-' + orderIndex + 'option-' + columnIndex\">\n                                                            {{ columnIndex }}\n                                                        </option>\n                                                    </select>\n                                                </div>\n                                            </div>\n                                        </span>\n                                        <span class=\"info_group_item display_block width_100x100 vertical_align_top\" v-bind:key=\"'select-order-filter-parameter-1-rule-' + orderIndex + '-row-for-direction'\" v-if=\"orderRule[0]\">\n                                            <div class=\"padding_0 padding_top_2 margin_bottom_2 default_row font_size_small\">\n                                                <div>{{ $t(\"Dirección\") }}:</div>\n                                                <div class=\"ControlForSelect\">\n                                                    <select v-model=\"orderRule[1]\">\n                                                        <option :value=\"sense\" v-for=\"(sense) in ['ascendent', 'descendent']\" v-bind:key=\"'select-order-filter-parameter-1-rule-' + orderIndex + '-sense-' + sense\">\n                                                            {{ sense }}\n                                                        </option>\n                                                    </select>\n                                                </div>\n                                            </div>\n                                        </span>\n                                        <span class=\"info_group_item display_block width_100x100 vertical_align_top\" v-bind:key=\"'select-order-filter-parameter-1-rule-' + orderIndex + '-row-for-delete-button'\">\n                                            <ControlForButton general-classes=\"text_align_right\" input-classes=\"width_auto display_inline_block danger_button no_break_line\" :on-click=\"() => deleteOrder(orderIndex)\">Eliminar regla</ControlForButton>\n                                        </span>\n                                    </div>\n                                </template>\n                            </div>\n                        </div>\n                        <div class=\"margin_top_2\" v-bind:key=\"'add-order-rule-button'\">\n                            <ControlForButton general-classes=\"text_align_right\" input-classes=\"width_auto display_inline_block\" :on-click=\"addOrder\">{{ $t(\"Añadir regla\") }}</ControlForButton>\n                        </div>\n                    </div>\n                </div>\n                <div v-else-if=\"isAdvancedSearchPanel === 'paginate'\">\n                    <div class=\"padding_horizontal_2 margin_top_0\">\n                        <Horizontally table-classes=\"width_100x100\">\n                            <td class=\"font_size_small\" style=\"width: 50%;\">\n                                <div>{{ $t(\"Página\") }}:</div>\n                                <div>\n                                    <ControlForText :initial-value=\"'' + paginate[0]\" :on-change=\"v => paginate[0] = parseInt(v)\"></ControlForText>\n                                </div>\n                            </td>\n                            <td class=\"font_size_small\" style=\"width: 50%;\">\n                                <div class=\"no_break_line\">{{ $t(\"Ítems por página\") }}:</div>\n                                <div>\n                                    <ControlForText :initial-value=\"'' + paginate[1]\" :on-change=\"v => paginate[1] = parseInt(v)\"></ControlForText>\n                                </div>\n                            </td>\n                        </Horizontally>\n                    </div>\n                </div>\n            </div>\n            <div v-if=\"typeof rows === 'undefined'\">\n                {{ $t(\"Cargando...\") }}\n            </div>\n            <div v-else style=\"overflow: scroll; max-height: 360px;\" class=\"table_viewer\">\n                <table class=\"data_viewer_table width_100x100\">\n                    <thead>\n                        <tr>\n                            <th class=\"padding_2 width_1x100\" v-bind:key=\"'select-table-header-open-row-cell'\"></th>\n                            <th class=\"padding_2 width_1x100\" v-bind:key=\"'select-table-header-view-row-cell'\"></th>\n                            <th class=\"padding_2 width_1x100\" v-bind:key=\"'select-table-header-open-row-cell-of-column-id'\">\n                                {{ $t(\"#id\") }}\n                            </th>\n                            <template v-for=\"(column, columnId) in definition.columns\">\n                                <th class=\"padding_2\" v-bind:key=\"'select-table-header-cell-of-column-' + columnId\">\n                                    {{ $t(\"#\" + columnId) }}\n                                </th>\n                            </template>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <template v-for=\"(row, rowIndex) in rows\">\n                            <tr class=\"remarked_row\" v-bind:key=\"'select-table-body-row-' + rowIndex\">\n                                <td class=\"padding_horizontal_2 padding_right_0 width_1x100\" v-bind:key=\"'select-table-row-' + rowIndex + '-open-row-cell'\">\n                                    <ControlForButton :on-click=\"() => goToRow(row, rowIndex)\" v-if=\"mode === 'view'\" input-classes=\"success_button\">\n                                        {{ $t(\"Ir\") }}\n                                    </ControlForButton>\n                                    <template v-else-if=\"mode === 'input'\">\n                                        <ControlForButton v-if=\"!isSelectedItem(row.id)\" :on-click=\"() => selectRow(row)\" v-bind:key=\"'select-table-row-button-' + rowIndex + '-select-item'\" input-classes=\"default_button\">\n                                            {{ $t(\"+\") }}\n                                        </ControlForButton>\n                                        <ControlForButton v-else :on-click=\"() => unselectRow(row)\" v-bind:key=\"'select-table-row-button-' + rowIndex + '-remove-item'\" input-classes=\"default_button selected\">\n                                            {{ $t(\"-\") }}\n                                        </ControlForButton>\n                                    </template>\n                                </td>\n                                <td class=\"padding_horizontal_2 width_1x100\" v-bind:key=\"'select-table-row-' + rowIndex + '-see-row-cell'\">\n                                    <ControlForButton v-if=\"viewedRows.indexOf(row.id) === -1\" :on-click=\"() => viewRow(row.id)\" v-bind:key=\"'button-to-view-row-' + row.id\" input-classes=\"default_button\">\n                                        {{ $t(\"Ver\") }}\n                                    </ControlForButton>\n                                    <ControlForButton v-else :on-click=\"() => hideRow(row.id)\" v-bind:key=\"'button-to-hide-row-' + row.id\" input-classes=\"default_button selected\">\n                                        {{ $t(\"Ok\") }}\n                                    </ControlForButton>\n                                </td>\n                                <td class=\"padding_2 no_break_line width_1x100\" v-bind:key=\"'select-table-row-' + rowIndex + '-cell-of-column-id'\">\n                                    <span class=\"link_text\">{{ row.id }}</span>\n                                </td>\n                                <template v-for=\"(column, columnId) in definition.columns\">\n                                    <td class=\"padding_2 no_break_line\" v-bind:key=\"'select-table-row-' + rowIndex + '-cell-of-column-' + columnId\">\n                                        <span class=\"link_text\">{{ row[columnId] }}</span>\n                                    </td>\n                                </template>\n                            </tr>\n                            <tr class=\"remarked_row secondary\" v-if=\"isViewedRow(row.id)\" v-bind:key=\"'select-table-body-row-' + rowIndex + '-details-row'\">\n                                <td colspan=\"1000\">\n                                    <div class=\"padding_vertical_2\">\n                                        <Horizontally table-classes=\"width_100x100\">\n                                            <td class=\"width_1x100 padding_left_2\">\n                                                <div class=\"ControlForSelect\">\n                                                    <select class=\"width_auto\" style=\"min-width: 140px;\" v-model=\"selectedView[row.id]\">\n                                                        <option :value=\"undefined\">{{ $t(\"Por defecto\") }}</option>\n                                                    </select>\n                                                </div>\n                                            </td>\n                                        </Horizontally>\n                                    </div>\n                                    <div class=\"padding_left_2\" v-if=\"selectedView[row.id] === undefined\">\n                                        <DataRowExplorerComponent\n                                            :project=\"project\"\n                                            :table=\"table\"\n                                            :row-id=\"row.id\"\n                                        />\n                                    </div>\n                                </td>\n                            </tr>\n                        </template>\n                    </tbody>\n                </table>\n            </div>\n            <Horizontally v-if=\"typeof pagination === 'object'\">\n                <td class=\"width_1x100\">\n                    <ControlForButton input-classes=\"default_button\" :on-click=\"goToFirstPage\"> «« </ControlForButton>\n                </td>\n                <td class=\"width_1x100\">\n                    <ControlForButton input-classes=\"default_button\" :on-click=\"goToPreviousPage\"> « </ControlForButton>\n                </td>\n                <td class=\"width_100x100 text_align_center\">\n                    <span>{{ $t(\"Página\") }} {{ pagination.page }} {{ $t(\"de\") }} {{ pagination.totalPages }}</span>\n                </td>\n                <td class=\"width_1x100\">\n                    <ControlForButton input-classes=\"default_button\" :on-click=\"goToNextPage\"> » </ControlForButton>\n                </td>\n                <td class=\"width_1x100\">\n                    <ControlForButton input-classes=\"default_button\" :on-click=\"goToLastPage\"> »» </ControlForButton>\n                </td>\n            </Horizontally>\n        </div>\n    </div>", function(component) {return {props:{uid:{type:String, default:function() {return Vue.prototype.$utilidades.getRandomId(10);}}, mode:{type:String, required:true}, modeType:{type:String, required:false, default:"object"}, targetProject:{type:String, required:true}, targetTable:{type:String, required:true}, onChange:{type:Function, required:false, default:noop}, initialValue:{required:false, default:undefined}}, data:function() {return {rows:undefined, table:this.targetTable, project:this.targetProject, definition:undefined, where:[], order:[], paginate:[1, 10], search:"", pagination:undefined, isAdvancedSearch:false, isAdvancedSearchPanel:"where", allOperators:{"is less than":"<", "is less or equal to":"<=", "is greater than":">", "is greater or equal to":">=", "is equal to":"=", "is not equal to":"!=", "is in":"in", "is not in":"!in", "is null":"=null", "is not null":"!=null", "has":"has", "has not":"!has"}, allOperandTypes:["string", "json", "column", "nothing"], isSelected:false, internalOnChange:this.onChange, internalValue:(this.initialValue ? this.initialValue : (this.modeType === "object" ? undefined : (this.modeType === "list" ? [] : this.initialValue))), viewedRows:[], selectedView:{}};}, watch:{internalValue:function(nuevoValor) {this.onChange(nuevoValor);}}, methods:{loadRows:async function() {try {this.rows = undefined;
const responseSelect = (await this.$rest.select(this.project, this.table, this.sanitizeWhere(this.where), this.sanitizeOrder(this.order), this.paginate, this.search));
if((!(responseSelect.data.status === "success"))) {
throw new Error("Hubo errores para cargar los datos");
}
this.rows = responseSelect.data.data.items;
this.pagination = {page:this.paginate[0], totalPages:Math.floor((parseFloat(responseSelect.data.data.total)) / this.paginate[1]) + 1, total:responseSelect.data.data.total};} catch(error) {
this.$notificaciones.error(error, "DataTableComponent.methods.loadRows");}}, loadDefinition:function() {try {if((!(typeof this.$root.schema === 'undefined'))) {
this.definition = this.$root.schema.projects[this.project].project.schema.tables[this.table];
}} catch(error) {
this.$notificaciones.error(error, "DataTableComponent.methods.loadDefinition");}}, goToFirstPage:function() {this.paginate[0] = 1;
this.loadRows();}, goToPreviousPage:function() {if((!(this.paginate[0] === 1))) {
this.paginate[0] -= 1;
}
this.loadRows();}, goToNextPage:function() {if((!(this.paginate[0] === (this.pagination.totalPages)))) {
this.paginate[0] += 1;
}
this.loadRows();}, goToLastPage:function() {this.paginate[0] = this.pagination.totalPages;
this.loadRows();}, goToWhereSettings:function() {if(this.isAdvancedSearchPanel === "where") {
this.isAdvancedSearchPanel = undefined;
}
else {
this.isAdvancedSearchPanel = "where";}}, goToOrderSettings:function() {if(this.isAdvancedSearchPanel === "sort") {
this.isAdvancedSearchPanel = undefined;
}
else {
this.isAdvancedSearchPanel = "sort";}}, goToPaginationSettings:function() {if(this.isAdvancedSearchPanel === "paginate") {
this.isAdvancedSearchPanel = undefined;
}
else {
this.isAdvancedSearchPanel = "paginate";}}, goToRow:function(row, rowIndex) {this.$router.history.push("/data/" + this.project + "/" + this.table + "/" + row.id);}, goToAddItemPage:function() {this.$router.history.push("/data/" + this.project + "/" + this.table + "/@add");}, viewRow:function(rowId) {this.viewedRows.push(rowId);}, hideRow:function(rowId) {const indexRow = this.viewedRows.indexOf(rowId);
this.viewedRows.splice(indexRow, 1);}, toggleAdvancedSearch:function() {this.isAdvancedSearch = (!(this.isAdvancedSearch));}, selectRow:function(row) {if(this.modeType === "list") {
this.internalValue.push(row.id);
}
else if(this.modeType === "object") {
this.internalValue = row.id;}}, unselectRow:function(row) {if(this.modeType === "list") {
let rowPosition = 0 - 1;
for(let index = 0; index < this.internalValue.length; index++) {const rowId = this.internalValue[index];
if(rowId === row.id) {
this.internalValue.splice(index, 1);
}}
}
else if(this.modeType === "object") {
this.internalValue = undefined;}}, isSelectedItem:function(rowId) {if(this.modeType === "list") {
const coincidentes = this.internalValue.filter((selectedRow) => {return selectedRow === rowId;});
return coincidentes.length > 0;
}
else if(this.modeType === "object") {
return this.internalValue === rowId;}
return false;}, isViewedRow:function(rowId) {const coincidentes = this.viewedRows.filter((viewedRow) => {return viewedRow === rowId;});
return coincidentes.length > 0;}, addWhere:function() {let hayVacios = false;
for(let index = 0; index < this.where.length; index++) {if(this.where[index].length < 2) {
hayVacios = true;
}}
if((!(hayVacios))) {
this.where.push([]);
}}, deleteWhere:function(rowIndex) {this.where.splice(rowIndex, 1);}, addOrder:function() {let hayVacios = false;
for(let index = 0; index < this.order.length; index++) {if(this.order[index].length < 2) {
hayVacios = true;
}}
if((!(hayVacios))) {
this.order.push([]);
}}, deleteOrder:function(rowIndex) {this.order.splice(rowIndex, 1);}, sanitizeWhere:function(where) {return where;}, sanitizeOrder:function(order) {return (order).map(function(orderRule) {return ((orderRule[1] === "descendent" ? "!" : "")) + orderRule[0];});}, extendWithIdColumn:function(tableDefinition) {tableDefinition.columns.id = {};
return tableDefinition;}}, mounted:async function() {(await this.loadDefinition());
(await this.loadRows());}};}, null);
const DataRowExplorerComponent = Castelog.metodos.un_componente_vue2("DataRowExplorerComponent", "<div class=\"DataRowExplorerComponent\">\n        <div v-if=\"!internalRow\" class=\"font_size_small padding_2\">\n            No se encontró elemento.\n        </div>\n        <div v-else class=\"info_group padding_left_2\">\n            <table class=\"width_100x100\">\n                <tbody>\n                    <tr>\n                        <td class=\"\" colspan=\"1000\">\n                            <Horizontally tableClasses=\"width_100x100\">\n                                <td class=\"width_1x100 padding_right_2\">\n                                    <ControlForButton general-classes=\"width_1x100\" input-classes=\"width_auto success_button no_break_line\" :on-click=\"() => $router.history.push('/data/' + internalProject + '/' + internalTable + '/' + internalRow.id)\">\n                                        <div class=\"font_weight_bold text_decoration_underline no_break_line\">\n                                            {{ $t(\"nº\") }} {{ internalRowId }}\n                                        </div>\n                                    </ControlForButton>\n                                </td>\n                                <td class=\"width_1x100 padding_right_2\">\n                                    <ControlForButton general-classes=\"width_1x100\" input-classes=\"width_auto success_button no_break_line\" :on-click=\"() => $router.history.push('/data/' + internalProject + '/' + internalTable + '/@add')\">{{ $t(\"nuevo\") }} {{ $t(\"#\" + internalTable) }}</ControlForButton>\n                                </td>\n                                <td class=\"width_1x100 padding_right_2\">\n                                    <ControlForButton general-classes=\"width_1x100\" input-classes=\"width_auto success_button no_break_line\" :on-click=\"() => $router.history.push('/data/' + internalProject + '/' + internalTable)\">{{ $t(\"ir a\") }} {{ $t(\"#\" + internalTable) }} » {{ $t(\"#\" + internalProject) }}</ControlForButton>\n                                </td>\n                                <td class=\"width_100x100\"></td>\n                            </Horizontally>\n                        </td>\n                    </tr>\n                </tbody>\n                <template v-for=\"(rowProperty, rowColumn) in internalRow\">\n                    <tbody v-bind:key=\"'row-explorer-item-for-project-' + internalProject + '-table-' + internalTable + '-column-' + rowColumn + '-row-' + internalRowId\">\n                        <tr class=\"padding_1 margin_bottom_1 font_size_small\">\n                            <td class=\"text_align_left width_1x100\">\n                                <b>{{ rowColumn }}:</b>\n                            </td>\n                            <td class=\"width_100x100\">\n                                <template v-if=\"isReferenceListInSchema(internalProject, internalTable, rowColumn)\">\n                                    <span v-bind:key=\"'data-row-explorer-' + uid + '-as-list-column-on-project-' + internalProject + '-table-' + internalTable + '-column-' + rowColumn + '-row-' + internalRowId\">\n                                        <span>[ </span>\n                                            <template v-for=\"(propertyValue, propertyIndex) in rowProperty\">\n                                                <span v-bind:key=\"'row-explorer-item-for-' + internalProject + '-' + internalTable + '-' + internalRowId + '-' + rowColumn + '-row-' + internalRowId + '-list-item-' + propertyIndex\">\n                                                    <span v-if=\"propertyIndex !== 0\">, </span>\n                                                    <span class=\"ControlForButton\">\n                                                        <button class=\"default_button small_button width_1x100\" :class=\"{selected: typeof selectedItems === 'object' && typeof selectedItems[rowColumn] === 'object' && selectedItems[rowColumn].index === propertyIndex}\" v-on:click=\"() => toggleItemFromList(rowColumn, propertyIndex, propertyValue)\">{{ propertyValue }}</button>\n                                                    </span>\n                                                </span>\n                                            </template>\n                                        <span> ]</span>\n                                    </span>\n                                </template>\n                                <template v-else-if=\"isReferenceObjectInSchema(internalProject, internalTable, rowColumn)\">\n                                    <span class=\"ControlForButton\">\n                                        <button class=\"default_button small_button width_1x100\" :class=\"{selected:typeof selectedItems[rowColumn] === 'object'}\" v-on:click=\"() => toggleItemFromObject(rowColumn, rowProperty)\" v-bind:key=\"'data-row-explorer-' + uid + '-as-object-column-on-project-' + internalProject + '-table-' + internalTable + '-column-' + rowColumn + '-row-' + internalRowId\">{{ rowProperty }}</button>\n                                    </span>\n                                </template>\n                                <template v-else>\n                                    <span v-bind:key=\"'data-row-explorer-' + uid + '-as-default-column-on-project-' + internalProject + '-table-' + internalTable + '-column-' + rowColumn + '-row-' + internalRowId\">\n                                        <span>{{ rowProperty }}</span>\n                                    </span>\n                                </template>\n                            </td>\n                        </tr>\n                        <tr v-if=\"isTypeInSchema(internalProject, internalTable, rowColumn, 'image')\">\n                            <td colspan=\"1000\">\n                                <div class=\"image_preview_container\">\n                                    <div class=\"image_preview_wrapper\">\n                                        <img class=\"image_preview\" :src=\"$rest.getFileUrl(internalProject, internalTable, internalRowId, rowColumn)\" alt=\"No se encontró imagen\" />\n                                    </div>\n                                </div>\n                            </td>\n                        </tr>\n                        <tr v-if=\"typeof selectedItems === 'object' && typeof selectedItems[rowColumn] !== 'undefined'\" v-bind:key=\"'data-row-explorer-' + uid + '-as-new-data-row-explorer-tr-on-project-' + internalProject + '-table-' + internalTable + '-column-' + rowColumn + '-row-' + internalRowId\">\n                            <td colspan=\"1000\">\n                                <DataRowExplorerComponent\n                                    :project=\"selectedItems[rowColumn].project\"\n                                    :table=\"selectedItems[rowColumn].table\"\n                                    :row-id=\"selectedItems[rowColumn].id\"\n                                />\n                            </td>\n                        </tr>\n                    </tbody>\n                </template>\n            </table>\n        </div>\n    </div>", function(component) {return {props:{uid:{type:String, default:function() {return Vue.prototype.$utilidades.getRandomId(10);}}, project:{type:String, required:true}, table:{type:String, required:true}, rowId:{type:Number, required:true}}, data:function() {return {internalProject:this.project, internalTable:this.table, internalRowId:this.rowId, internalRow:undefined, selectedItems:{}};}, watch:{}, methods:{isTypeInSchema:function(project, table, column, isType = "undefined") {if((!(project in this.$root.schema.projects))) {
return false;
}
if((!(table in this.$root.schema.projects[project].project.schema.tables))) {
return false;
}
if((!(column in this.$root.schema.projects[project].project.schema.tables[table].columns))) {
return false;
}
if((!(this.$root.schema.projects[project].project.schema.tables[table].columns[column].attributes.isType === isType))) {
return false;
}
return true;}, toggleItemFromList:function(column, index, value) {try {const props = this.$rest.getReferredProjectAndTableByColumn(this.internalProject, this.internalTable, column);
const previoEstado = Object.assign({}, this.selectedItems);
this.selectedItems = undefined;
const objetoModificador = {};
const objetoEstado = Object.assign({}, previoEstado);
const objetoNuevoEstado = {};
if((!(column in objetoEstado))) {
objetoModificador[column] = {index:index, project:props.project, table:props.table, id:value};
}
else if((!(objetoEstado[column].index === index))) {
objetoModificador[column] = {index:index, project:props.project, table:props.table, id:value};}
else {
delete objetoModificador[column];
delete objetoEstado[column];}
Object.assign(objetoNuevoEstado, objetoEstado, objetoModificador);
setTimeout(() => {this.selectedItems = objetoNuevoEstado;
this.$forceUpdate(true);},0.1 * 1000);} catch(error) {
this.$notificaciones.error(error);}}, toggleItemFromObject:function(column, value) {try {const props = this.$rest.getReferredProjectAndTableByColumn(this.internalProject, this.internalTable, column);
const previoEstado = Object.assign({}, this.selectedItems);
this.selectedItems = undefined;
this.$forceUpdate(true);
const objetoModificador = {};
const objetoEstado = Object.assign({}, previoEstado);
const objetoNuevoEstado = {};
if((!(column in objetoEstado))) {
objetoModificador[column] = {project:props.project, table:props.table, id:value};
}
else if((!(objetoEstado[column].id === value))) {
objetoModificador[column] = {project:props.project, table:props.table, id:value};}
else {
delete objetoModificador[column];
delete objetoEstado[column];}
Object.assign(objetoNuevoEstado, objetoEstado, objetoModificador);
setTimeout(() => {this.selectedItems = objetoNuevoEstado;
this.$forceUpdate(true);},0 * 1000);} catch(error) {
this.$notificaciones.error(error);}}, isReferenceListInSchema:function(projectId, tableId, columnId) {try {if(columnId === "id") {
return false;
}
if((!(projectId + ":" + tableId in this.$root.allTables))) {
throw new Error("Required parameters «project» (" + projectId + ") and «table» (" + tableId + ") to conform a defined table in schema in order to «FormControl.isReferenceListInSchema»");
}
if((!(columnId in this.$root.allTables[projectId + ":" + tableId].columns))) {
throw new Error("Required parameters «project» (" + projectId + "), «table» (" + tableId + ") and «column» (" + columnId + ") to conform a defined column in schema in order to «FormControl.isReferenceListInSchema»");
}
return this.$root.allTables[projectId + ":" + tableId].columns[columnId].attributes.isType === "list";} catch(error) {
this.$notificaciones.error(error);}}, isReferenceObjectInSchema:function(projectId, tableId, columnId) {try {if(columnId === "id") {
return false;
}
if((!(projectId + ":" + tableId in this.$root.allTables))) {
throw new Error("Required parameters «project» (" + projectId + ") and «table» (" + tableId + ") to conform a defined table in schema in order to «FormControl.isReferenceObjectInSchema»");
}
if((!(columnId in this.$root.allTables[projectId + ":" + tableId].columns))) {
throw new Error("Required parameters «project» (" + projectId + "), «table» (" + tableId + ") and «column» (" + columnId + ") to conform a defined column in schema in order to «FormControl.isReferenceObjectInSchema»");
}
return this.$root.allTables[projectId + ":" + tableId].columns[columnId].attributes.isType === "object";} catch(error) {
this.$notificaciones.error(error);}}}, mounted:async function() {try {const respuestaSelect = (await this.$rest.select(this.internalProject, this.internalTable, [["id", "=", this.internalRowId]], [], [], ""));
this.internalRow = respuestaSelect.data.data.items[0];} catch(error) {
this.$notificaciones.error(error);}}};}, null);
const DataRowPage = Castelog.metodos.un_componente_vue2("DataRowPage", "<div class=\"DataRowPage\">\n        <template v-if=\"isLoaded\">\n            <div v-bind:key=\"'data-row-page-for-' + project + '-table-' + table + '-id-' + (id ? id : '@add')\">\n                <TitleOfPage>\n                    <Horizontally>\n                        <td class=\"width_auto\"><BackButton /></td>\n                        <td class=\"width_100x100\">{{ $t(\"Dato\") }} {{ table }}: {{ id || $t(\"nuevo\") }}</td>\n                    </Horizontally>\n                </TitleOfPage>\n                <hr/>\n                <div class=\"padding_2 padding_top_0\" v-if=\"definition && row\">\n                    <div class=\"form_group\" v-if=\"row\">\n                        <div v-if=\"['file', 'image'].indexOf(column.attributes.isType) === -1\" class=\"form_item\" v-for=\"(column, columnId) in definition.columns\" v-bind:key=\"'data-row-page-item-form-property-for-' + project + '-table-' + table + '-id-' + (id ? id : '@add') + '-column-' + columnId\">\n                            <div>\n                                <FormControl\n                                    :full-row=\"{ getProperty: p => row[p], getRow: () => row }\"\n                                    :project-id=\"project\"\n                                    :table-id=\"table\"\n                                    :table-metadata=\"definition\"\n                                    :column-id=\"columnId\"\n                                    :initial-value=\"row[columnId]\"\n                                    :on-change=\"v => { row[columnId] = v; }\"\n                                />\n                            </div>\n                        </div>\n                        <template v-if=\"operation === 'edit'\">\n                            <template v-for=\"(column, columnId) in definition.columns\">\n                                <div class=\"form_item\" v-if=\"['file', 'image'].indexOf(column.attributes.isType) !== -1\" v-bind:key=\"'data-row-page-item-form-file-for-' + project + '-table-' + table + '-id-' + (id ? id : '@add') + '-column-' + columnId\">\n                                    <div>\n                                        <FormControl\n                                            :full-row=\"{ getProperty: p => row[p], getRow: () => row }\"\n                                            :project-id=\"project\"\n                                            :table-id=\"table\"\n                                            :table-metadata=\"definition\"\n                                            :item-id=\"id\"\n                                            :column-id=\"columnId\"\n                                            :initial-value=\"row[columnId]\"\n                                            :on-change=\"v => { row[columnId] = v; }\"\n                                            :ref=\"'form-control-reference-for-' + project + '-table-' + table + '-id-' + id + '-column-' + columnId\"\n                                        />\n                                    </div>\n                                </div>\n                            </template>\n                        </template>\n                        <div class=\"form_item padding_top_2\">\n                            <Horizontally>\n                                <td class=\"width_1x100\">\n                                    <ControlForButton :on-click=\"sendFormToDelete\" v-if=\"operation === 'edit'\" input-classes=\"danger_button\">\n                                        {{ $t(\"Eliminar\") }}\n                                    </ControlForButton>\n                                </td>\n                                <td class=\"width_100x100\"></td>\n                                <td class=\"width_1x100\">\n                                    <ControlForButton :on-click=\"sendFormToSave\" input-classes=\"success_button\">\n                                        {{ (operation === 'add') ? $t(\"Añadir\") : (operation === 'edit') ? $t(\"Guardar\") : $t(\"Enviar\") }}\n                                    </ControlForButton>\n                                </td>\n                            </Horizontally>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </template>\n    </div>", function(component) {return {props:{operation:{type:String, default:"add"}}, data:function() {return {project:this.$route.params.project, table:this.$route.params.table, id:this.$route.params.id || undefined, row:undefined, definition:undefined, isLoaded:false};}, watch:{$route:async function(nuevoValor) {try {this.project = nuevoValor.params.project;
this.table = nuevoValor.params.table;
this.id = nuevoValor.params.id || undefined;
(await this.loadRow());} catch(error) {
this.$notificaciones.error(error);}}}, methods:{loadRow:async function() {try {this.isLoaded = false;
this.definition = this.$root.schema.projects[this.project].project.schema.tables[this.table];
if(this.operation === "add") {
this.row = {};
this.isLoaded = true;
return;
}
const responseSelect = (await this.$rest.select(this.project, this.table, [["id", "=", parseFloat(this.id)]], [], [], undefined));
if((!(responseSelect.data.status === "success"))) {
throw new Error("Hubo errores para cargar el dato");
}
this.row = responseSelect.data.data.items[0];
this.isLoaded = true;} catch(error) {
this.$notificaciones.error(error);}}, sendFormToSave:async function() {try {if(this.operation === "add") {
const responseInsert = (await this.$rest.insert(this.project, this.table, this.row));
this.$router.history.push("/data/" + this.project + "/" + this.table + "/" + responseInsert.data.data.item.id);
}
else if(this.operation === "edit") {
const responseUpdate = (await this.$rest.update(this.project, this.table, parseFloat(this.id), this.row));
const responseFiles = [];
for(const columnId in this.definition.columns) {
const columnData = this.definition.columns[columnId];
if((!(["file", "image"].indexOf(columnData.attributes.isType) !== -1))) {
continue;
}
const columnRefs = this.$refs["form-control-reference-for-" + this.project + "-table-" + this.table + "-id-" + this.id + "-column-" + columnId];
const columnRef = columnRefs[0];
const fileInputs = columnRef.getFiles();
const responseFile = (await this.$rest.setFile(this.project, this.table, parseFloat(this.id), columnId, fileInputs));
responseFiles.push(responseFile);}

this.loadRow();}} catch(error) {
this.$notificaciones.error(error);}}, sendFormToDelete:async function() {try {const responseDelete = (await this.$rest.delete(this.project, this.table, parseFloat(this.id)));} catch(error) {
this.$notificaciones.error(error);}}}, mounted:async function() {try {(await this.loadRow());} catch(error) {
this.$notificaciones.error(error);}}};}, null);
const DataPage = Castelog.metodos.un_componente_vue2("DataPage", "<div class=\"DataPage\">\n        <TitleOfPage>\n            <Horizontally>\n                <td class=\"width_auto\"><BackButton /></td>\n                <td class=\"width_100x100\">{{ $t(\"Esquema\") }}</td>\n            </Horizontally>\n        </TitleOfPage>\n        <div class=\"padding_0 overflow_x_scroll\">\n            <table v-if=\"allTables\">\n                <tbody>\n                    <template v-for=\"(table, tableId) in allTables\">\n                        <template v-if=\"(!table.attributes) || (!table.attributes.isExternalizedBy)\">\n                            <tr class=\"remarked_row\" v-bind:key=\"'table-main-row-of-' + tableId\">\n                                <td class=\"width_1x100 text_align_right padding_horizontal_2\">\n                                    <div class=\"ControlForButton\">\n                                        <button class=\"link_text\" v-on:click=\"() => $router.history.push('/data/' + getProjectFromTableId(tableId) + '/' + getTableFromTableId(tableId))\">{{ $t('#' + $utilidades.capitalizeString(getTableFromFullTableId(tableId))) }}</button>\n                                    </div>\n                                </td>\n                                <td class=\"width_100x100 text_align_right vertical_align_middle\">\n                                    <span class=\"font_size_small\">{{ $t(\"#\" + getProjectFromFullTableId(tableId) )}}</span>\n                                </td>\n                                <td class=\"width_1x100 padding_right_2 vertical_align_middle\">\n                                    <span class=\"ControlForButton display_inline_block width_auto\" v-bind:key=\"'data-page-uid-' + uid + '-table-' + tableId + '-show-button'\" v-if=\"selectedTables.indexOf(tableId) === -1\">\n                                        <button class=\"default_button\" v-on:click=\"() => toggleTable(tableId)\">...</button>\n                                    </span>\n                                    <span class=\"ControlForButton display_inline_block width_auto\" v-bind:key=\"'data-page-uid-' + uid + '-table-' + tableId + '-hide-button'\" v-else>\n                                        <button class=\"default_button selected\" v-on:click=\"() => toggleTable(tableId)\"> - </button>\n                                    </span>\n                                </td>\n                            </tr>\n                            <template v-if=\"selectedTables.indexOf(tableId) !== -1\">\n                                <tr class=\"remarked_row\">\n                                    <td colspan=\"1000\" class=\"text_align_right\">\n                                        <span class=\"width_auto display_inline_block padding_horizontal_2\">\n                                            <span class=\"ControlForButton display_inline_block width_auto\">\n                                                <button class=\"default_button width_auto\" :class=\"{selected: selectedTableAttributesList.indexOf(tableId) !== -1}\" v-on:click=\"() => toggleTableAttributesOf(tableId)\">{{ $t(\"Atributos\") }}</button>\n                                            </span>\n                                            <span class=\"ControlForButton display_inline_block width_auto\">\n                                                <button class=\"default_button width_auto\" :class=\"{selected: selectedTableColumnsList.indexOf(tableId) !== -1}\" v-on:click=\"() => toggleTableColumnsOf(tableId)\">{{ $t(\"Columnas\") }}</button>\n                                            </span>\n                                            <span class=\"ControlForButton display_inline_block width_auto\">\n                                                <button class=\"default_button width_auto\" :class=\"{selected: selectedTableProtectorsList.indexOf(tableId) !== -1}\" v-on:click=\"() => toggleTableProtectorsOf(tableId)\">{{ $t(\"Protectores\") }}</button>\n                                            </span>\n                                        </span>\n                                    </td>\n                                </tr>\n                                <template v-if=\"selectedTableAttributesList.indexOf(tableId) !== -1\">\n                                    <tr class=\"\" v-bind:key=\"'table-attributes-row-of-' + tableId\" v-if=\"selectedTables.indexOf(tableId) !== -1\">\n                                        <td colspan=\"100\">\n                                            <table class=\"width_100x100\">\n                                                <template v-for=\"(attribute, attributeId) in table.attributes\">\n                                                    <template v-if=\"attributeId !== 'hasProtectors'\">\n                                                        <tr class=\"remarked_row\" v-bind:key=\"'table-attribute-key-row-of-' + tableId + '-attribute-' + attributeId\">\n                                                            <td class=\"width_100x100 padding_horizontal_2\">{{ $t('@' + attributeId) }}</td>\n                                                            <td class=\"width_1x100 padding_horizontal_2\">\n                                                                <span class=\"ControlForButton display_inline_block width_auto \" v-bind:key=\"'data-page-uid-' + uid + '-table-' + tableId + '-attribute-' + attributeId + '-show-button'\" v-if=\"selectedTableAttributes.indexOf(tableId + '/' + attributeId) === -1\">\n                                                                    <button class=\"default_button\" v-on:click=\"() => toggleTableAttribute(tableId, attributeId)\">...</button>\n                                                                </span>\n                                                                <span class=\"ControlForButton display_inline_block width_auto \" v-bind:key=\"'data-page-uid-' + uid + '-table-' + tableId + '-attribute-' + attributeId + '-hide-button'\" v-else>\n                                                                    <button class=\"default_button selected\" v-on:click=\"() => toggleTableAttribute(tableId, attributeId)\"> - </button>\n                                                                </span>\n                                                            </td>\n                                                        </tr>\n                                                        <tr class=\"remarked_row\" v-bind:key=\"'table-attribute-value-row-of-' + tableId + '-attribute-' + attributeId\" v-if=\"selectedTableAttributes.indexOf(tableId + '/' + attributeId) !== -1\">\n                                                            <td class=\"width_100x100\" colspan=\"100\">\n                                                                <div>\n                                                                    <div class=\"margin_1 font_size_small\">{{ attribute }}</div>\n                                                                </div>\n                                                            </td>\n                                                        </tr>\n                                                    </template>\n                                                </template>\n                                                <tr class=\"remarked_row\" v-if=\"$root.isProjectAdministrator()\">\n                                                    <td class=\"width_100x100 text_align_right padding_horizontal_2\" colspan=\"100\">\n                                                        <ControlForButton general-classes=\"\" input-classes=\"width_auto padding_0\" :on-click=\"() => goToEditAttributes(tableId)\">{{ $t(\"Editar atributos de\") }} {{ $t(\"#\" + tableId) }}</ControlForButton>\n                                                    </td>\n                                                </tr>\n                                            </table>\n                                        </td>\n                                    </tr>\n                                </template>\n                                <template v-if=\"selectedTableProtectorsList.indexOf(tableId) !== -1\">\n                                    <tr class=\"\" v-bind:key=\"'table-protectors-row-of-' + tableId\">\n                                        <td colspan=\"100\">\n                                            <table class=\"width_100x100\">\n                                                <template v-for=\"(protector, protectorId) in table.attributes.hasProtectors\">\n                                                    <tr class=\"remarked_row\" v-bind:key=\"'table-protector-value-row-of-' + tableId + '-protector-' + protectorId\">\n                                                        <td class=\"width_100x100 padding_2\" colspan=\"100\">\n                                                            <div class=\"info_group\">\n                                                                <div class=\"padding_2\">{{ protector.id }}</div>\n                                                                <template v-for=\"(protectorValue, protectorKey) in protector\">\n                                                                    <div class=\"font_size_small border_on_top\" v-bind:key=\"'table-protector-property-of-' + tableId + '-protector-' + protectorId + '-property-' + protectorKey\">\n                                                                        <span class=\"display_inline_block padding_2 font_weight_bold\">{{ $t(protectorKey) }}: </span>\n                                                                        <span class=\"display_inline_block padding_2 \">{{ protectorValue }}</span>\n                                                                    </div>\n                                                                </template>\n                                                            </div>\n                                                        </td>\n                                                    </tr>\n                                                </template>\n                                                <tr class=\"remarked_row\" v-if=\"$root.isProjectAdministrator()\">\n                                                    <td class=\"width_100x100 text_align_right padding_horizontal_2\" colspan=\"100\">\n                                                        <ControlForButton input-classes=\"width_auto\" :on-click=\"() => goToEditProtectors(tableId)\">{{ $t(\"Editar protectores de\") }} {{ $t(\"#\" + tableId) }}</ControlForButton>\n                                                    </td>\n                                                </tr>\n                                            </table>\n                                        </td>\n                                    </tr>\n                                </template>\n                                <template v-if=\"selectedTableColumnsList.indexOf(tableId) !== -1\">\n                                    <tr class=\"\" v-bind:key=\"'table-columns-row-of-' + tableId\">\n                                        <td colspan=\"100\">\n                                            <table class=\"width_100x100\">\n                                                <template v-for=\"(column, columnId) in table.columns\">\n                                                    <tr class=\"remarked_row\" v-bind:key=\"'table-column-key-row-of-' + tableId + '-column-' + columnId\">\n                                                        <td class=\"width_100x100 padding_horizontal_2\">{{ $t('#' + columnId) }}</td>\n                                                        <td class=\"width_1x100 padding_horizontal_2\">\n                                                            <span class=\"ControlForButton display_inline_block width_auto\" v-bind:key=\"'data-page-uid-' + uid + '-table-' + tableId + '-column-' + columnId + '-show-button'\" v-if=\"selectedTableColumns.indexOf(tableId + '/' + columnId) === -1\">\n                                                                <button class=\"default_button\" v-on:click=\"() => toggleTableColumn(tableId, columnId)\">...</button>\n                                                            </span>\n                                                            <span class=\"ControlForButton display_inline_block width_auto\" v-bind:key=\"'data-page-uid-' + uid + '-table-' + tableId + '-column-' + columnId + '-hide-button'\" v-else>\n                                                                <button class=\"default_button selected\" v-on:click=\"() => toggleTableColumn(tableId, columnId)\"> - </button>\n                                                            </span>\n                                                        </td>\n                                                    </tr>\n                                                    <template v-if=\"selectedTableColumns.indexOf(tableId + '/' + columnId) !== -1\">\n                                                        <tr class=\"\" v-bind:key=\"'table-column-value-row-of-' + tableId + '-column-' + columnId\">\n                                                            <td class=\"width_100x100\" colspan=\"100\">\n                                                                <div class=\"\">\n                                                                    <table class=\"width_100x100\">\n                                                                        <template v-for=\"(attribute, attributeId) in column.attributes\">\n                                                                            <tr class=\"remarked_row\" v-bind:key=\"'column-attribute-key-row-of-' + tableId + '-' + columnId + '-attribute-' + attributeId\">\n                                                                                <td class=\"width_100x100 padding_horizontal_3 font_size_small\">\n                                                                                    {{ $t( \"@\" + attributeId ) }} ({{ $t('#' + columnId) }})\n                                                                                </td>\n                                                                                <td class=\"width_1x100 padding_horizontal_2\">\n                                                                                    <span class=\"ControlForButton display_inline_block width_auto\" v-bind:key=\"'data-page-uid-' + uid + '-table-' + tableId + '-column-' + columnId + '-attribute-' + attributeId + '-show-button'\" v-if=\"selectedTableColumnAttributes.indexOf(tableId + '/' + columnId + '/' + attributeId) === -1\">\n                                                                                        <button class=\"default_button\" v-on:click=\"() => toggleTableColumnAttribute(tableId, columnId, attributeId)\">...</button>\n                                                                                    </span>\n                                                                                    <span class=\"ControlForButton display_inline_block width_auto\" v-bind:key=\"'data-page-uid-' + uid + '-table-' + tableId + '-column-' + columnId + '-attribute-' + attributeId + '-hide-button'\" v-else>\n                                                                                        <button class=\"default_button selected\" v-on:click=\"() => toggleTableColumnAttribute(tableId, columnId, attributeId)\"> - </button>\n                                                                                    </span>\n                                                                                </td>\n                                                                            </tr>\n                                                                            <tr class=\"remarked_row\" v-bind:key=\"'column-attribute-value-row-of-' + tableId + '-' + columnId + '-attribute-' + attributeId\" v-if=\"selectedTableColumnAttributes.indexOf(tableId + '/' + columnId + '/' + attributeId) !== -1\">\n                                                                                <td colspan=\"100\" class=\"padding_horizontal_3 padding_vertical_2\">\n                                                                                    <div class=\"font_size_small\">{{ attribute }}</div>\n                                                                                </td>\n                                                                            </tr>\n                                                                        </template>\n                                                                    </table>\n                                                                </div>\n                                                            </td>\n                                                        </tr>\n                                                        <tr class=\"remarked_row\" v-if=\"$root.isProjectAdministrator()\">\n                                                            <td class=\"width_100x100 text_align_right padding_horizontal_2\" colspan=\"100\">\n                                                                <ControlForButton input-classes=\"width_auto\" :on-click=\"() => goToEditColumn(tableId, columnId)\">\n                                                                    {{ $t(\"Editar columna\") }} {{ $t('#' + columnId) }}\n                                                                </ControlForButton>\n                                                            </td>\n                                                        </tr>\n                                                    </template>\n                                                </template>\n                                            </table>\n                                        </td>\n                                    </tr>\n                                    <tr class=\"remarked_row\" v-if=\"$root.isProjectAdministrator()\">\n                                        <td class=\"width_100x100 text_align_right padding_horizontal_2\" colspan=\"100\">\n                                            <ControlForButton input-classes=\"width_auto\" :on-click=\"() => goToAddColumn(tableId)\">{{ $t(\"Añadir columna a\") }} {{ $t(\"#\" + tableId) }}</ControlForButton>\n                                        </td>\n                                    </tr>\n                                </template>\n                            </template>\n                        </template>\n                    </template>\n                    <tr class=\"remarked_row text_align_right\" v-if=\"$root.isProjectAdministrator()\">\n                        <td class=\"width_100x100 padding_2 text_align_right\" colspan=\"100\">\n                            <ControlForButton :on-click=\"() => goToAddTable()\" general-classes=\"display_inline_block\" input-classes=\"width_auto\">\n                                <span class=\"no_break_line\">{{ $t(\"Añadir tabla\") }}</span>\n                            </ControlForButton>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>", function(component) {return {props:{uid:{type:String, default:function() {return Vue.prototype.$utilidades.getRandomId(10);}}}, data:function() {return {schema:undefined, allTables:undefined, selectedTables:[], selectedTableAttributesList:[], selectedTableAttributes:[], selectedTableProtectorsList:[], selectedTableColumnsList:[], selectedTableColumns:[], selectedColumnsAttributes:[], selectedTableColumnAttributes:[]};}, methods:{getTableFromFullTableId:function(tableId) {return tableId.split(":")[1];}, getProjectFromFullTableId:function(tableId) {return tableId.split(":")[0];}, removeTableAttributesOf:function(tableId) {const posicionTable = this.selectedTableAttributesList.indexOf(tableId);
if((!(posicionTable === 0 - 1))) {
this.selectedTableAttributesList.splice(posicionTable, 1);
}}, removeTableProtectorsOf:function(tableId) {const posicionTable = this.selectedTableProtectorsList.indexOf(tableId);
if((!(posicionTable === 0 - 1))) {
this.selectedTableProtectorsList.splice(posicionTable, 1);
}}, removeTableColumnsOf:function(tableId) {const posicionTable = this.selectedTableColumnsList.indexOf(tableId);
if((!(posicionTable === 0 - 1))) {
this.selectedTableColumnsList.splice(posicionTable, 1);
}}, toggleTable:function(tableId) {this.removeTableAttributesOf(tableId);
this.removeTableProtectorsOf(tableId);
this.removeTableColumnsOf(tableId);
const posicionTable = this.selectedTables.indexOf(tableId);
if(posicionTable === 0 - 1) {
this.selectedTables.push(tableId);
}
else {
this.selectedTables.splice(posicionTable, 1);}}, toggleTableAttributesOf:function(tableId) {this.removeTableProtectorsOf(tableId);
this.removeTableColumnsOf(tableId);
const posicionTable = this.selectedTableAttributesList.indexOf(tableId);
if(posicionTable === 0 - 1) {
this.selectedTableAttributesList.push(tableId);
}
else {
this.selectedTableAttributesList.splice(posicionTable, 1);}}, toggleTableProtectorsOf:function(tableId) {this.removeTableAttributesOf(tableId);
this.removeTableColumnsOf(tableId);
const posicionTable = this.selectedTableProtectorsList.indexOf(tableId);
if(posicionTable === 0 - 1) {
this.selectedTableProtectorsList.push(tableId);
}
else {
this.selectedTableProtectorsList.splice(posicionTable, 1);}}, toggleTableColumnsOf:function(tableId) {this.removeTableAttributesOf(tableId);
this.removeTableProtectorsOf(tableId);
const posicionTable = this.selectedTableColumnsList.indexOf(tableId);
if(posicionTable === 0 - 1) {
this.selectedTableColumnsList.push(tableId);
}
else {
this.selectedTableColumnsList.splice(posicionTable, 1);}}, toggleTableAttribute:function(tableId, attributeId) {const posicionTableAttribute = this.selectedTableAttributes.indexOf(tableId + "/" + attributeId);
if(posicionTableAttribute === 0 - 1) {
this.selectedTableAttributes.push(tableId + "/" + attributeId);
}
else {
this.selectedTableAttributes.splice(posicionTableAttribute, 1);}}, toggleTableColumn:function(tableId, columnId) {const posicionTableColumn = this.selectedTableColumns.indexOf(tableId + "/" + columnId);
if(posicionTableColumn === 0 - 1) {
this.selectedTableColumns.push(tableId + "/" + columnId);
}
else {
this.selectedTableColumns.splice(posicionTableColumn, 1);}}, toggleTableColumnAttribute:function(tableId, columnId, attributeId) {const posicionTableColumn = this.selectedTableColumnAttributes.indexOf(tableId + "/" + columnId + "/" + attributeId);
if(posicionTableColumn === 0 - 1) {
this.selectedTableColumnAttributes.push(tableId + "/" + columnId + "/" + attributeId);
}
else {
this.selectedTableColumnAttributes.splice(posicionTableColumn, 1);}}, goToEditAttributes:function(tableId) {return this.$router.history.push("/data/@edit-table/" + tableId);}, goToEditProtectors:function(tableId) {return this.$router.history.push("/data/@edit-protectors/" + tableId);}, goToEditColumn:function(tableId, columnId) {return this.$router.history.push("/data/@edit-column/" + tableId + "/" + columnId);}, goToAddColumn:function(tableId) {return this.$router.history.push("/data/@add-column/" + tableId);}, goToAddTable:function() {return this.$router.history.push("/data/@add-table");}, getProjectFromTableId:function(tableId) {return tableId.split(":")[0];}, getTableFromTableId:function(tableId) {return tableId.split(":")[1];}}, mounted:function() {this.schema = this.$root.schema;
this.allTables = this.$root.allTables;}, watch:{}};}, null);
const DataAddEditTablePage = Castelog.metodos.un_componente_vue2("DataAddEditTablePage", "<div class=\"DataAddEditTablePage\">\n        <TitleOfPage>\n            <Horizontally>\n                <td class=\"width_auto\"><BackButton :levels=\"(internalOperation === 'add') ? 1 : 2\" /></td>\n                <td class=\"width_100x100\">\n                    <template v-if=\"internalOperation === 'add'\">{{ $t(\"Añadir tabla\") }}</template>\n                    <template v-else>{{ $t(\"Editar atributos de tabla\") }} {{ $t(\"#\" + $route.params.table ) }}</template>\n                </td>\n            </Horizontally>\n        </TitleOfPage>\n        <hr />\n        <div class=\"padding_2\" v-if=\"isLoaded\">\n            <template>\n                <div v-if=\"internalOperation === 'add'\" class=\"padding_vertical_2\"><span>{{ $t(\"Nueva tabla\") }}</span></div>\n                <div v-else-if=\"internalOperation === 'edit'\" class=\"padding_vertical_2\"><span>{{ $t(\"Tabla:\") }} {{ $t(\"#\" + table) }}</span></div>\n                <hr />\n                <div>\n                    <template v-if=\"internalOperation === 'add'\">\n                        <div class=\"ControlForSelect padding_top_2\">\n                            <span>{{ $t(\"Proyecto\") }}:</span>\n                            <select class=\"\" v-model=\"internalTableProject\">\n                                <option :value=\"projectId\" v-for=\"(projectData, projectId) in $root.schema.projects\" v-bind:key=\"'data-add-edit-table-page-add-table-project-option-' + projectId\">{{ projectId }}</option>\n                            </select>\n                        </div>\n                        <hr class=\"margin_top_2\" />\n                        <div class=\"padding_top_2\">\n                            <ControlForText :on-change=\"v => internalTableName = v\" label=\"Nombre de tabla:\" general-classes=\"padding_top_2\" />\n                        </div>\n                        <hr class=\"margin_top_2\" />\n                    </template>\n                    <div class=\"padding_top_2\"><span class=\"display_inline_block\">{{ $t(\"Atributos\") }}</span></div>\n                    <hr class=\"margin_top_2\" />\n                    <template v-for=\"(attribute, attributeId) in internalAttributesChanged\">\n                        <div class=\"info_group padding_horizontal_2 padding_bottom_2 margin_top_2\" v-bind:key=\"'data-add-edit-table-page-attribute-' + attributeId\">\n                            <div>\n                                <Horizontally>\n                                    <td class=\"width_100x100\">\n                                        <ControlForText label=\"Nombre de atributo:\" :on-change=\"v => internalAttributesChanged[attributeId].name = v\" general-classes=\"padding_top_2\" :initial-value=\"internalAttributesChanged[attributeId].name\" />\n                                    </td>\n                                    <td class=\"width_1x100\" style=\"min-width: 70px;\">\n                                        <div class=\"ControlForSelect padding_top_2\">\n                                            <span>{{ $t(\"Tipo\") }}:</span>\n                                            <select class=\"\" v-model=\"internalAttributesChanged[attributeId].type\">\n                                                <option value=\"json\">JSON</option>\n                                                <option value=\"text\">{{ $t(\"Texto\") }}</option>\n                                            </select>\n                                        </div>\n                                    </td>\n                                </Horizontally>\n                                <ControlForText label=\"Valor de atributo:\" :on-change=\"v => internalAttributesChanged[attributeId].value = internalAttributesChanged[attributeId].type === 'json' ? JSON.stringify(v) : v\" general-classes=\"padding_top_2 margin_bottom_2\" :has-multiple-rows=\"true\" :initial-value=\"internalAttributesChanged[attributeId].value\" />\n                                <Horizontally>\n                                    <td class=\"width_100x100\"></td>\n                                    <td class=\"width_1x100\">\n                                        <ControlForButton input-classes=\"danger_button no_break_line\" :on-click=\"() => deleteAttribute(attributeId)\">{{ $t(\"Eliminar atributo\") }}</ControlForButton>\n                                    </td>\n                                </Horizontally>\n                            </div>\n                        </div>\n                    </template>\n                    <ControlForButton general-classes=\"margin_top_2\" input-classes=\"default_button no_break_line\" :on-click=\"() => addAttribute()\">{{ $t(\"Añadir atributo\") }}</ControlForButton>\n                    <hr class=\"margin_top_2\" />\n                    <span class=\"display_inline_block padding_top_2\">{{ $t(\"Propiedades\") }}</span>\n                    <hr class=\"margin_top_2\" />\n                    <template v-for=\"(property, propertyId) in internalPropertiesChanged\">\n                        <div class=\"info_group padding_horizontal_2 padding_bottom_2 margin_top_2\" v-bind:key=\"'data-add-edit-table-page-property-' + propertyId\">\n                            <div>\n                                <Horizontally>\n                                    <td class=\"width_100x100\">\n                                        <ControlForText label=\"Nombre de propiedad:\" :on-change=\"v => internalPropertiesChanged[propertyId].name = v\" general-classes=\"padding_top_2\" :initial-value=\"internalPropertiesChanged[propertyId].name\" />\n                                    </td>\n                                    <td class=\"width_1x100\" style=\"min-width: 70px;\">\n                                        <div class=\"ControlForSelect padding_top_2\">\n                                            <span>{{ $t(\"Tipo\") }}:</span>\n                                            <select class=\"\" v-model=\"internalPropertiesChanged[propertyId].type\">\n                                                <option value=\"json\">JSON</option>\n                                                <option value=\"text\">{{ $t(\"Texto\") }}</option>\n                                            </select>\n                                        </div>\n                                    </td>\n                                </Horizontally>\n                                <ControlForText label=\"Valor de propiedad:\" :on-change=\"v => internalPropertiesChanged[propertyId].value = internalPropertiesChanged[propertyId].type === 'json' ? JSON.stringify(v) : v\" general-classes=\"padding_top_2 margin_bottom_2\" :has-multiple-rows=\"true\" :initial-value=\"internalPropertiesChanged[propertyId].value\" />\n                                <Horizontally>\n                                    <td class=\"width_100x100\"></td>\n                                    <td class=\"width_1x100\">\n                                        <ControlForButton input-classes=\"danger_button no_break_line\" :on-click=\"() => deleteProperty(propertyId)\">{{ $t(\"Eliminar propiedad\") }}</ControlForButton>\n                                    </td>\n                                </Horizontally>\n                            </div>\n                        </div>\n                    </template>\n                    <ControlForButton general-classes=\"margin_top_2\" input-classes=\"default_button no_break_line\" :on-click=\"() => addProperty()\">{{ $t(\"Añadir propiedad\") }}</ControlForButton>\n                    <hr class=\"margin_top_2\" />\n                    <div v-if=\"internalOperation === 'edit'\">\n                        <ControlForButton general-classes=\"margin_top_2\" :on-click=\"() => commitEditTable()\">{{ $t(\"Guardar\") }}</ControlForButton>\n                    </div>\n                    <div v-else-if=\"internalOperation === 'add'\">\n                        <ControlForButton general-classes=\"margin_top_2\" :on-click=\"() => commitAddTable()\">{{ $t(\"Crear\") }}</ControlForButton>\n                    </div>\n                </div>\n            </template>\n        </div>\n    </div>", function(component) {return {props:{operation:{type:String, default:"add"}, table:{type:String, default:function() {return this.$route.params.table || undefined;}}}, data:function() {return {internalOperation:this.operation, internalTable:this.table, internalTableName:undefined, internalTableProject:undefined, internalTableDefinition:this.table, internalAttributes:{}, internalAttributesChanged:[], internalProperties:{}, internalPropertiesChanged:[], internalColumns:{}, isLoaded:false};}, methods:{loadDefinition:function() {try {if(this.operation === "add") {
this.isLoaded = true;
return;
}
if((!(typeof this.$root.allTables === 'object'))) {
throw new Error("Required «schema» to be loaded in order to «DataAddEditTablePage.loadDefinition»");
}
if((!(this.internalTable in this.$root.allTables))) {
throw new Error("Required «schema» to contain table «" + this.internalTable + "» in order to «DataAddEditTablePage.loadTable»");
}
this.internalTableDefinition = this.$root.allTables[this.internalTable];
this.internalAttributes = Object.assign({}, this.internalTableDefinition.attributes);
this.internalProperties = Object.assign({}, this.internalTableDefinition.properties);
this.internalColumns = Object.assign({}, this.internalTableDefinition.columns);
for(atributoId in this.internalAttributes) {
const atributo = this.internalAttributes[atributoId];
if((!(atributoId === "hasProtectors"))) {
this.internalAttributesChanged.push({name:atributoId, type:(typeof atributo === 'string' ? "text" : "json"), value:(typeof atributo === 'string' ? atributo : JSON.stringify(atributo, null, 2))});
}}

for(propiedadId in this.internalProperties) {
const propiedad = this.internalProperties[propiedadId];
if((!(propiedadId === "hasProtectors"))) {
this.internalPropertiesChanged.push({name:propiedadId, type:(typeof propiedad === 'string' ? "text" : "json"), value:(typeof propiedad === 'string' ? propiedad : JSON.stringify(propiedad, null, 2))});
}}

this.isLoaded = true;} catch(error) {
this.$notificaciones.error(error);}}, commitEditTable:async function() {try {const [ projectId, tableId ] = this.internalTable.split(":");
const attributes = this.internalAttributesChanged.reduce(function(output, attributeChanged) {output[attributeChanged.name] = (attributeChanged.type === "json" ? JSON.parse(attributeChanged.value) : attributeChanged.value);
return output;}, {});
const properties = this.internalPropertiesChanged.reduce(function(output, propertyChanged) {output[propertyChanged.name] = (propertyChanged.type === "json" ? JSON.parse(propertyChanged.value) : propertyChanged.value);
return output;}, {});
const respuestaUpdateTable = (await this.$rest.updateTable(projectId, tableId, attributes, properties));
(await this.$rest.schema(true));
this.$router.history.push("/data");
return respuestaUpdateTable;} catch(error) {
this.$notificaciones.error(error);}}, commitAddTable:async function() {try {(await this.$rest.insertTable(this.internalTableProject, this.internalTableName));
this.internalProject = this.internalTableProject;
this.internalTable = this.internalTableProject + ":" + this.internalTableName;
return (await this.commitEditTable());} catch(error) {
this.$notificaciones.error(error);}}, addAttribute:function() {this.internalAttributesChanged.push({name:"", type:"text", value:""});}, addProperty:function() {this.internalPropertiesChanged.push({name:"", type:"text", value:""});}, deleteAttribute:function(index) {this.internalAttributesChanged.splice(index, 1);}, deleteProperty:function(index) {this.internalPropertiesChanged.splice(index, 1);}}, mounted:function() {this.loadDefinition();
window.dataAddEditTablePage = this;}};}, null);
const DataAddEditColumnPage = Castelog.metodos.un_componente_vue2("DataAddEditColumnPage", "<div class=\"DataAddEditColumnPage\">\n        <TitleOfPage>\n            <Horizontally>\n                <td class=\"width_auto\"><BackButton :levels=\"(internalOperation === 'add') ? 2 : 3\" /></td>\n                <td class=\"width_100x100\">{{ $t(internalOperation === 'add' ? \"Añadir columna\" : \"Editar columna\") }}</td>\n            </Horizontally>\n        </TitleOfPage>\n        <hr />\n        <div class=\"padding_2\">\n            <div class=\"\"></div>\n        </div>\n    </div>", function(component) {return {props:{operation:{type:String, default:"add"}}, data:function() {return {internalOperation:this.operation, internalProject:this.$route.params.table.split(":")[0], internalTableId:this.$route.params.table, internalTable:this.$route.params.table.split(":")[1]};}, methods:{}};}, null);
const DataEditProtectorsPage = Castelog.metodos.un_componente_vue2("DataEditProtectorsPage", "<div class=\"DataEditProtectorsPage\">\n        <TitleOfPage>\n            <Horizontally>\n                <td class=\"width_auto\"><BackButton :levels=\"2\" /></td>\n                <td class=\"width_100x100\">{{ $t(\"Editar protectores\") }}</td>\n            </Horizontally>\n        </TitleOfPage>\n        <hr />\n        <div class=\"padding_2\">\n            ...\n        </div>\n    </div>", function(component) {return {};}, null);
const SettingsPage = Castelog.metodos.un_componente_vue2("SettingsPage", "<div class=\"SettingsPage\">\n        <TitleOfPage>\n            <Horizontally>\n                <td class=\"width_auto\"><BackButton /></td>\n                <td class=\"width_100x100\">{{ $t(\"Configuraciones\") }}</td>\n            </Horizontally>\n        </TitleOfPage>\n        <hr />\n        <div class=\"padding_2 padding_left_0 padding_bottom_0\">\n            <ul class=\"BigMenuSquaresList\">\n                <li class=\"margin_bottom_2\" v-on:click=\"() => $router.history.push('/settings/language')\">\n                    <span class=\"link_text\">{{ $t(\"Idioma\") }}</span>\n                </li>\n                <li class=\"margin_bottom_2\" v-on:click=\"() => $router.history.push('/settings/session')\">\n                    <span class=\"link_text\">{{ $t(\"Sesión\") }}</span>\n                </li>\n            </ul>\n        </div>\n    </div>", function(component) {return {};}, null);
const LanguageSettingsPage = Castelog.metodos.un_componente_vue2("LanguageSettingsPage", "<div class=\"LanguageSettingsPage\">\n        <TitleOfPage>\n            <Horizontally>\n                <td class=\"width_auto\"><BackButton /></td>\n                <td class=\"width_100x100\">{{ $t(\"Idioma\") }}</td>\n            </Horizontally>\n        </TitleOfPage>\n        <hr />\n        <div class=\"padding_2\">\n            <LanguageSelector />\n        </div>\n    </div>", function(component) {return {};}, null);
const SessionSettingsPage = Castelog.metodos.un_componente_vue2("SessionSettingsPage", "<div class=\"SessionSettingsPage\">\n        <TitleOfPage>\n            <Horizontally>\n                <td class=\"width_auto\"><BackButton /></td>\n                <td class=\"width_100x100\">{{ $t(\"Sesión\") }}</td>\n            </Horizontally>\n        </TitleOfPage>\n        <hr />\n        <div class=\"padding_2\">\n            <div>\n                <span class=\"font_weight_bold\">{{ $t(\"Usuario:\") }} </span>\n                <span>{{ $root.authentication.user.name }}</span>\n            </div>\n            <div>\n                <span class=\"font_weight_bold\">{{ $t(\"Email de usuario:\") }} </span>\n                <span>{{ $root.authentication.user.email }}</span>\n            </div>\n            <div>\n                <span class=\"font_weight_bold\">{{ $t(\"Grupos:\") }} </span>\n                <ul class=\"padding_bottom_2\">\n                    <li class=\"no_margin\" v-for=\"grupo in grupos\" v-bind:key=\"'auth-grupos-grupo-id-' + grupo.id\">\n                        <ul class=\"padding_top_2\">\n                            <div class=\"info_group remarked_row padding_2\">\n                                <li class=\"no_margin\">\n                                    <span class=\"font_weight_bold\">{{ $t(\"Grupo:\" )}} </span>\n                                    <span class=\"font_size_small\">{{ grupo.name }} [{{ grupo.id }}]</span>\n                                </li>\n                                <li class=\"no_margin\">\n                                    <span class=\"font_weight_bold\">{{ $t(\"Descripción:\" )}} </span>\n                                    <span class=\"font_size_small\">{{ grupo.description }}</span>\n                                </li>\n                                <li class=\"no_margin\">\n                                    <span class=\"font_weight_bold\">{{ $t(\"Privilegios:\" )}} </span>\n                                    <span class=\"font_size_small\">{{ grupo.privileges }}</span>\n                                </li>\n                            </div>\n                        </ul>\n                    </li>\n                </ul>\n            </div>\n            <div>\n                <span class=\"font_weight_bold\">{{ $t(\"Privilegios:\") }} </span>\n                <ul class=\"padding_bottom_2\">\n                    <li class=\"no_margin\" v-for=\"privilegio in privilegios\" v-bind:key=\"'auth-privilegios-privilegio-id-' + privilegio.id\">\n                        <ul class=\"padding_top_2\">\n                            <div class=\"info_group remarked_row padding_2\">\n                                <li class=\"no_margin\">\n                                    <span class=\"font_weight_bold\">{{ $t(\"Privilegio:\" )}} </span>\n                                    <span class=\"font_size_small\">{{ privilegio.name }} [{{ privilegio.id }}]</span>\n                                </li>\n                                <li class=\"no_margin\">\n                                    <span class=\"font_weight_bold\">{{ $t(\"Descripción:\" )}} </span>\n                                    <span class=\"font_size_small\">{{ privilegio.description }}</span>\n                                </li>\n                            </div>\n                        </ul>\n                    </li>\n                </ul>\n            </div>\n            <div>\n                <span class=\"font_weight_bold\">{{ $t(\"Token de sesión:\") }} </span>\n                <div class=\" margin_top_2 remarked_text info_group long_word font_family_monospace font_size_small\">{{ $root.authentication.token }}</div>\n            </div>\n        </div>\n    </div>", function(component) {return {data:function() {const grupos = this.$root.authentication.user.groups.map((idDeGrupo) => {return this.$root.authentication.groups.filter((datosDeGrupo) => {return datosDeGrupo.id === idDeGrupo;})[0];});
const privilegiosDeGrupo = grupos.map((grupo) => {return grupo.privileges;}).flat();
const privilegiosDeUsuario = this.$root.authentication.user.privileges;
const privilegiosUnicos = [];
[].concat(privilegiosDeUsuario).concat(privilegiosDeGrupo).forEach((privilegioId) => {if(privilegiosUnicos.indexOf(privilegioId) === 0 - 1) {
privilegiosUnicos.push(privilegioId);
}});
const privilegios = privilegiosUnicos.map((privilegioId) => {return this.$root.authentication.privileges.filter((privilegio) => {return privilegioId === privilegio.id;})[0];});
return {grupos:grupos, privilegios:privilegios};}};}, null);
const QueryBuilderPage = Castelog.metodos.un_componente_vue2("QueryBuilderPage", "<div class=\"QueryBuilderPage\">\n        <TitleOfPage>\n            <Horizontally>\n                <td class=\"width_auto\"><BackButton /></td>\n                <td class=\"width_100x100\">{{ $t(\"Analíticas\") }}</td>\n            </Horizontally>\n        </TitleOfPage>\n        <hr />\n        <div class=\"padding_2\">\n            <div v-for=\"(query, queryIndex) in available_queries\" v-bind:key=\"'querybuilder-page-available-query-' + queryIndex\">\n                <Horizontally>\n                    <td class=\"width_1x100\">\n                        <ControlForButton :on-click=\"() => goToOpenQuery(queryIndex)\" input-classes=\"no_break_line\">{{ $t(\"Consultar\") }}</ControlForButton>\n                    </td>\n                    <td class=\"width_1x100\">\n                        <ControlForButton :on-click=\"() => goToEditQuery(queryIndex)\" input-classes=\"no_break_line\">{{ $t(\"Editar\") }}</ControlForButton>\n                    </td>\n                    <td class=\"width_1x100 no_break_line padding_2\">nº {{ queryIndex }}</td>\n                    <td class=\"width_100x100 no_break_line padding_2\">«{{ query.name }}» {{ $t(\"con\") }} {{ query.operations.length }} {{ $t(\"operaciones.\") }}</td>\n                </Horizontally>\n            </div>\n            <ControlForButton :on-click=\"() => goToCreateQuery()\">{{ $t(\"Crear query\") }}</ControlForButton>\n        </div>\n    </div>", function(component) {return {data:function() {return {available_queries:[]};}, methods:{loadQueries:async function() {try {let analiticas = Castelog.metodos.una_seleccion("analiticas_nativas", null, null, null, null, null, undefined)
this.available_queries = analiticas;
this.$forceUpdate(true);} catch(error) {
this.$notificaciones.error(error, "QueryBuilderPage.loadQueries");}}, goToOpenQuery:function(queryIndex) {this.$router.history.push("/analysis/@use/" + queryIndex);}, goToEditQuery:function(queryIndex) {try {this.$router.history.push("/analysis/@edit/" + queryIndex);} catch(error) {
this.$notificaciones.error(error, "QueryBuilderPage.goToEditQuery");}}, goToCreateQuery:function() {try {this.$router.history.push("/analysis/@add");} catch(error) {
this.$notificaciones.error(error, "QueryBuilderPage.goToAddQuery");}}}, mounted:function() {this.loadQueries();}};}, null);
const QueryBuilderAddEditQueryPage = Castelog.metodos.un_componente_vue2("QueryBuilderAddEditQueryPage", "<div class=\"QueryBuilderAddEditQueryPage\">\n        <TitleOfPage>\n            <Horizontally>\n                <td class=\"width_auto\"><BackButton :levels=\"(operation === 'add') ? 1 : 2\" /></td>\n                <td class=\"width_100x100\">{{ (operation === \"add\") ? $t(\"Crear analítica\") : ($t(\"Editar analítica\") + \" \" + $route.params.query) }}</td>\n            </Horizontally>\n        </TitleOfPage>\n        <hr />\n        <div class=\"padding_2\">\n            <ControlForText label=\"Título de la analítica:\" :on-change=\"v => selected_query_name = v\" />\n            <div class=\"Card\" v-for=\"(operation, operationIndex) in selected_query_operations\" v-bind:key=\"'query-builder-add-edit-query-page-operation-' + operationIndex\">\n                <div>{{ $t(\"Operación nº\") }} {{ operationIndex }}</div>\n                <div class=\"ControlForText\">\n                    <label>{{ $t(\"Nombre de la operación\") }}</label>\n                    <input class=\"\" type=\"text\" v-model=\"selected_query_operations[operationIndex].name\" />\n                </div>\n                <div>\n                    <ControlForButton input-classes=\"danger_button\" :on-click=\"() => deleteOperation(operationIndex)\">{{ $t(\"Eliminar operación\") }}</ControlForButton>\n                </div>\n            </div>\n            <ControlForButton :on-click=\"() => addOperation()\">{{ $t(\"Agregar operación\") }}</ControlForButton>\n            <ControlForButton :on-click=\"() => createQuery()\" v-if=\"operation === 'add'\">{{ $t(\"Crear analítica\") }}</ControlForButton>\n        </div>\n    </div>", function(component) {return {props:{operation:{type:String, default:function() {return "add";}}}, data:function() {return {selected_query_name:"", selected_query_operations:[]};}, methods:{loadQuery:function() {try {if(this.operation === "edit") {
let analiticas = Castelog.metodos.una_seleccion("analiticas_nativas", null, null, null, null, null, undefined)
const analitica = analiticas[this.$route.params.analysis];
this.selected_query_name = analitica.name;
this.selected_query_operations = analitica.operations;
}
else {
this.selected_query_name = "";
this.selected_query_operations = [];}
this.$forceUpdate(true);} catch(error) {
this.$notificaciones.error(error, "QueryBuilderAddEditQueryPage.loadQuery");}}, addOperation:function() {try {let analiticas = Castelog.metodos.una_seleccion("analiticas_nativas", null, null, null, null, null, undefined)
const analitica = analiticas[this.$route.params.analysis];
Castelog.metodos.una_actualizacion("analiticas_nativas", parseFloat(this.$route.params.analysis), {name:analitica.name, operations:(analitica.operations).concat([{}])}, null, undefined)
this.loadQuery();} catch(error) {
this.$notificaciones.error(error, "QueryBuilderAddEditQueryPage.createQuery");}}, deleteOperation:function(indexOperation) {try {let analiticas = Castelog.metodos.una_seleccion("analiticas_nativas", null, null, null, null, null, undefined)
const analitica = analiticas[this.$route.params.analysis];
Castelog.metodos.una_actualizacion("analiticas_nativas", parseFloat(this.$route.params.analysis), {name:analitica.name, operations:analitica.operations.splice(indexOperation, 1)}, null, undefined)
this.loadQuery();} catch(error) {
this.$notificaciones.error(error, "QueryBuilderAddEditQueryPage.createQuery");}}, createQuery:function() {try {const id = Castelog.metodos.una_insercion("analiticas_nativas", {name:this.selected_query_name, operations:this.selected_query_operations}, null, undefined)
this.$router.history.push("/analysis/@edit/" + id);} catch(error) {
this.$notificaciones.error(error, "QueryBuilderAddEditQueryPage.createQuery");}}, saveQuery:function() {try {const item = {name:this.selected_query_name, operations:this.selected_query_operations};
console.log("insertando item:");
console.log(item);
Castelog.metodos.una_actualizacion("analiticas_nativas", parseFloat(this.$route.params.analysis), item, null, undefined)
this.loadQuery();} catch(error) {
this.$notificaciones.error(error, "QueryBuilderAddEditQueryPage.saveQuery");}}}, mounted:function() {this.loadQuery();}};}, null);
const QueryBuilderUseQueryPage = Castelog.metodos.un_componente_vue2("QueryBuilderUseQueryPage", "<div class=\"QueryBuilderUseQueryPage\">\n        <TitleOfPage>\n            <Horizontally>\n                <td class=\"width_auto\"><BackButton :levels=\"2\" /></td>\n                <td class=\"width_100x100\">{{ $t(\"Analítica\") }} {{ $route.params.query }} </td>\n            </Horizontally>\n        </TitleOfPage>\n        <hr />\n        <div class=\"padding_2\">\n            ...\n        </div>\n    </div>", function(component) {return {data:function() {return {};}, methods:{}};}, null);
const Pagina01Page = Castelog.metodos.un_componente_vue2("Pagina01Page", "<div class=\"Pagina01Page\">\n                    <TitleOfPage>\n                        <Horizontally>\n                            <td class=\"width_auto\"><BackButton :levels=\"2\" /></td>\n                            <td class=\"width_100x100\">{{ $t(\"Pagina 01\") }}</td>\n                        </Horizontally>\n                    </TitleOfPage>\n                    <hr />\n                    <div class=\"padding_2\">\n                        Estás en la página 01.\n                    </div>\n                </div>", function(component) {return {};}, null);
const Pagina02Page = Castelog.metodos.un_componente_vue2("Pagina02Page", "<div class=\"Pagina02Page\">\n                    <TitleOfPage>\n                        <Horizontally>\n                            <td class=\"width_auto\"><BackButton :levels=\"2\" /></td>\n                            <td class=\"width_100x100\">{{ $t(\"Pagina 02\") }}</td>\n                        </Horizontally>\n                    </TitleOfPage>\n                    <hr />\n                    <div class=\"padding_2\">\n                        Estás en la página 02.\n                    </div>\n                </div>", function(component) {return {};}, null);
const Pagina03Page = Castelog.metodos.un_componente_vue2("Pagina03Page", "<div class=\"Pagina03Page\">\n                    <TitleOfPage>\n                        <Horizontally>\n                            <td class=\"width_auto\"><BackButton :levels=\"2\" /></td>\n                            <td class=\"width_100x100\">{{ $t(\"Pagina 03\") }}</td>\n                        </Horizontally>\n                    </TitleOfPage>\n                    <hr />\n                    <div class=\"padding_2\">\n                        Estás en la página 03.\n                    </div>\n                </div>", function(component) {return {};}, null);
const Pagina04Page = Castelog.metodos.un_componente_vue2("Pagina04Page", "<div class=\"Pagina04Page\">\n                    <TitleOfPage>\n                        <Horizontally>\n                            <td class=\"width_auto\"><BackButton :levels=\"2\" /></td>\n                            <td class=\"width_100x100\">{{ $t(\"Pagina 04\") }}</td>\n                        </Horizontally>\n                    </TitleOfPage>\n                    <hr />\n                    <div class=\"padding_2\">\n                        Estás en la página 04.\n                    </div>\n                </div>", function(component) {return {};}, null);
const Pagina05Page = Castelog.metodos.un_componente_vue2("Pagina05Page", "<div class=\"Pagina05Page\">\n                    <TitleOfPage>\n                        <Horizontally>\n                            <td class=\"width_auto\"><BackButton :levels=\"2\" /></td>\n                            <td class=\"width_100x100\">{{ $t(\"Pagina 05\") }}</td>\n                        </Horizontally>\n                    </TitleOfPage>\n                    <hr />\n                    <div class=\"padding_2\">\n                        Estás en la página 05.\n                    </div>\n                </div>", function(component) {return {};}, null);
const routes = [{name:"Inicio", path:"/home", component:HomePage}, {name:"Login", path:"/login", component:LoginPage}, {name:"Logout", path:"/logout", component:LogoutPage}, {name:"DataAddEditTable", path:"/data/@add-table", props:{operation:"add"}, component:DataAddEditTablePage}, {name:"DataAddEditTable", path:"/data/@edit-table/:table", props:{operation:"edit"}, component:DataAddEditTablePage}, {name:"DataAddEditColumn", path:"/data/@add-column/:table", props:{operation:"add"}, component:DataAddEditColumnPage}, {name:"DataAddEditColumn", path:"/data/@edit-column/:table/:column", props:{operation:"edit"}, component:DataAddEditColumnPage}, {name:"DataEditProtectors", path:"/data/@edit-protectors/:table", props:{operation:"edit"}, component:DataEditProtectorsPage}, {name:"DataRow", path:"/data/:project/:table/@add", props:{operation:"add"}, component:DataRowPage}, {name:"DataRow", path:"/data/:project/:table/:id", props:{operation:"edit"}, component:DataRowPage}, {name:"DataTable", path:"/data/:project/:table", component:DataTablePage}, {name:"Data", path:"/data", component:DataPage}, {name:"Settings", path:"/settings", component:SettingsPage}, {name:"LanguageSettings", path:"/settings/language", component:LanguageSettingsPage}, {name:"SessionSettings", path:"/settings/session", component:SessionSettingsPage}, {name:"QueryBuilder", path:"/analysis/@edit/:analysis", props:{operation:"edit"}, component:QueryBuilderAddEditQueryPage}, {name:"QueryBuilder", path:"/analysis/@add", props:{operation:"add"}, component:QueryBuilderAddEditQueryPage}, {name:"QueryBuilder", path:"/analysis/@use", props:{operation:"use"}, component:QueryBuilderUseQueryPage}, {name:"QueryBuilder", path:"/analysis", component:QueryBuilderPage}];
routes.push({name:"Pagina01", path:"/page/01", component:Pagina01Page});
routes.push({name:"Pagina02", path:"/page/02", component:Pagina02Page});
routes.push({name:"Pagina03", path:"/page/03", component:Pagina03Page});
routes.push({name:"Pagina04", path:"/page/04", component:Pagina04Page});
routes.push({name:"Pagina05", path:"/page/05", component:Pagina05Page});
Vue.prototype.$window = window;
Vue.prototype.$rest = window.$restologia;
Vue.prototype.$almacenamiento = window.$almacenamiento;
Vue.prototype.$utilidades = window.$utilidades;
Vue.prototype.$console = console;
console.log("Inicio de sección de hooks: nativo.dependencias_globales");
console.log("Fin de sección de hooks: nativo.dependencias_globales");
Castelog.metodos.una_aplicacion_vue2(
  "App",
  "<div class=\"App\">\n        <Topbar />\n        <hr />\n        <div class=\"main_contents_container padding_horizontal_2 padding_top_2\">\n            <div class=\"main_contents\">\n                <div v-if=\"authentication\">\n                    <div class=\"\">\n                        <router-view></router-view>\n                    </div>\n                </div>\n                <div v-else class=\"\">\n                    <LoginPage />\n                </div>\n            </div>\n        </div>\n        <Notificaciones ref=\"Notificaciones\" />\n    </div>",
  function(component) {return {name:"App", data:function() {return {schema:undefined, allTables:undefined, authentication:undefined, metadata:{}};}, beforeMount:function() {Vue.prototype.$root = this;}, mounted:function() {Vue.prototype.$notificaciones = new window.$Notificaciones(this.$refs.Notificaciones);}, watch:{schema:function(nuevoValor) {const allTables = {};
for(projectName in nuevoValor.projects) {
const projectData = nuevoValor.projects[projectName];
for(tableId in projectData.project.schema.tables) {
const tableData = projectData.project.schema.tables[tableId];
allTables[projectName + ":" + tableId] = tableData;}
}

this.allTables = allTables;}}, methods:{isProjectAdministrator:function() {if((!(this.authentication))) {
return false;
}
return this.authentication.privileges.filter(function(privilegio) {return privilegio.name === "to administrate";}).length > 0;}}};},
  "\".app {}\\n\", null", {},
  routes,
  window.$translations,
  "#app");